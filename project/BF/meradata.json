[
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "initiateCommand()",
        "method_description": "Prepares the RestAssured request (httpRequest) by clearing headers and initializing the RestAssured base object.",
        "code_implementation": "\tpublic void initiateCommand(){\n\t\t//REST Assured equivalent\n\t\theaders.clear();\n\t\thttpRequest = RestAssured.given();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setMethod(String method)",
        "method_description": "Sets the HTTP request method (GET, POST, PUT, DELETE, etc.) based on the string input.",
        "code_implementation": "\tpublic void setMethod(String method){\n\t\tmethod = method.replaceAll(\"\\\"\", \"\");\n\t\t//REST Assured equivalent\n\t\tswitch(method.trim().toUpperCase()) {\n\t\tcase \"GET\":\n\t\t\tthis.method = Method.GET;\n\t\t\tbreak;\n\t\tcase \"POST\":\n\t\t\tthis.method = Method.POST;\n\t\t\tbreak;\n\t\tcase \"PUT\":\n\t\t\tthis.method = Method.PUT;\n\t\t\tbreak;\n\t\tcase \"DELETE\":\n\t\t\tthis.method = Method.DELETE;\n\t\t\tbreak;\n\t\tcase \"OPTIONS\":\n\t\t\tthis.method = Method.OPTIONS;\n\t\t\tbreak;\n\t\tcase \"HEAD\":\n\t\t\tthis.method = Method.HEAD;\n\t\t\tbreak;\n\t\tcase \"PATCH\":\n\t\t\tthis.method = Method.PATCH;\n\t\t\tbreak;\n\t\tcase \"TRACE\":\n\t\t\tthis.method = Method.TRACE;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setHeader(String header)",
        "method_description": "Adds HTTP headers to the request. Multiple headers can be set by calling this method multiple times.",
        "code_implementation": "\tpublic void setHeader(String header){\n\t\t//REST Assured equivalent\n\t\theader = header.replaceAll(\"\\\"\", \"\");\n\t\theaders.put(header.trim().split(\":\")[0].trim(), header.trim().split(\":\")[1].trim());\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setURI(String URI)",
        "method_description": "Specifies the target URI for the API request.",
        "code_implementation": "\tpublic void setURI(String URI){\n\t\t//REST Assured equivalent\n\t\tURI = URI.replaceAll(\"\\\"\", \"\");\n\t\thttpRequest.and().baseUri(URI);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setPayLoadData(String payLoad)",
        "method_description": "Sets the payload (request body) for POST/PUT requests from a string.",
        "code_implementation": "\tpublic void setPayLoadData(String payLoad){\n\t\t//REST Assured equivalent\n\t\tpayLoad = payLoad.replaceAll(\"\\\"\", \"\").replaceAll(\"\\\\\\\\\", \"\\\"\");\n\t\thttpRequest.and().body(payLoad);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setPayLoadDataFile(String filePath)",
        "method_description": "Reads payload data from a file (JSON/XML) and sets it as the body of the request.",
        "code_implementation": "\tpublic void setPayLoadDataFile(String filePath){\n\t\ttry {\n\t\t\thttpRequest.and().body(new File(filePath));\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\ttestStepFailed(\"Unable to set payload file from path: \"+filePath);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "setOutputFileName(String responseFileName)",
        "method_description": "Defines the output file path where the response data will be stored.",
        "code_implementation": "\tpublic void setOutputFileName(String responseFileName){\n\t\t//REST Assured equivalent\n\t\tthis.outputFilePath = suiteResultsDir+\"/Responses/\"+responseFileName+\".json\";\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "executeCommand()",
        "method_description": "Sends the API request based on the method, headers, URI, and payload configured. It also saves the response to the output file.",
        "code_implementation": "\tpublic void executeCommand(){\n\t\t//REST Assured equivalent\n\t\thttpRequest.headers(headers);\n\t\tthis.response = httpRequest.relaxedHTTPSValidation().request(method);\n\t\ttry (FileWriter file = new FileWriter(this.outputFilePath)) {\n\t\t\tfile.write(response.prettyPrint());\n\t\t\tfile.flush();\n\n\t\t} catch (IOException e) {\n\t\t\ttestStepFailed(\"Failed to write response to JSON file\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "printResponseHeader()",
        "method_description": "Logs the response headers to the test report.",
        "code_implementation": "\tpublic void printResponseHeader(){\n\t\t//REST Assured equivalent\n\t\tthis.responseHeaders = this.response.getHeaders();\n\t\tfor(Header responseHeader : responseHeaders.asList()) {\n\t\t\ttestStepInfo(responseHeader.getName()+\": \"+responseHeader.getValue());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "validateStatus(String status)",
        "method_description": "Validates the response status code against the expected value.",
        "code_implementation": "\tpublic void validateStatus(String status){\n\t\t//REST Assured equivalent\n\t\tif(Integer.parseInt(status) == this.response.getStatusCode())\n\t\t\ttestStepPassed(\"The actual status: '\"+this.response.getStatusCode()+\"' matches the expected status: \"+status);\n\t\telse\n\t\t\ttestStepFailed(\"The actual status: '\"+this.response.getStatusCode()+\"' not matches the expected status: \"+status);\n\t}\n\n\t/**"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "getJSONResponse(String responseFileName)",
        "method_description": "Retrieves the response body as a JSON object for further validation.",
        "code_implementation": "\tpublic Object getJSONResponse(String responseFileName){\n\t\t//REST Assured equivalent\n\t\tresponseFileName = suiteResultsDir+\"/Responses/\"+responseFileName+\".txt\";\n\n\t\ttry {\n\t\t\treturn new JSONObject(this.response.getBody().asString());\n\t\t}catch(Exception e){\n\t\t\ttestStepFailed(\"Error occured while getting a valid JSON Element\");\n\t\t\treturn null;\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "linkResponseToReport(String responseFileName)",
        "method_description": "Creates a clickable link to view the response",
        "code_implementation": "\tpublic void linkResponseToReport(String responseFileName) {\n\t\ttestStepLink(suiteResultsDir+\"/Responses/\"+responseFileName+\".json\", \n\t\t\t\t\"Click here to see the response for: \"+responseFileName+\" API call\");\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "isJSONValidObject(String stringToValidate)",
        "method_description": "Checks if a string is a valid JSON object.",
        "code_implementation": "\tpublic boolean isJSONValidObject(String stringToValidate) {\n\t\ttry {\n\t\t\tnew JSONObject(stringToValidate);\n\t\t} catch (JSONException ex) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "isJSONValidArray(String stringToValidate)",
        "method_description": "Checks if a string is a valid JSON array.",
        "code_implementation": "\tpublic boolean isJSONValidArray(String stringToValidate) {\n\t\ttry {\n\t\t\tnew JSONArray(stringToValidate);\n\t\t} catch (JSONException ex) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "getJSONObjectValue(JSONObject object, String key)",
        "method_description": "Retrieves a specific key's value from a JSON object.",
        "code_implementation": "\tpublic void validateStatus(String status){\n\t\t//REST Assured equivalent\n\t\tif(Integer.parseInt(status) == this.response.getStatusCode())\n\t\t\ttestStepPassed(\"The actual status: '\"+this.response.getStatusCode()+\"' matches the expected status: \"+status);\n\t\telse\n\t\t\ttestStepFailed(\"The actual status: '\"+this.response.getStatusCode()+\"' not matches the expected status: \"+status);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "getJSONArray(JSONObject object, String key)",
        "method_description": "Gets a JSON array from a JSON object based on a key.",
        "code_implementation": "\tpublic JSONArray getJSONArray(JSONObject object , String key){\n\t\ttry{\n\t\t\treturn object.getJSONArray(key);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\ttestStepFailed(\"The JSONArray with the requested Key: \"+key+\" is not present in the JSONObject: \"+object);\n\t\t\treturn null;\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "getJSONObjectContainsKeyValue(JSONArray array, String key, String value)",
        "method_description": "Finds a JSON object in an array that contains a specified key-value pair.",
        "code_implementation": "\tpublic JSONObject getJSONObjectContainsKeyValue(JSONArray array , String key, String value){\n\t\ttry{\n\t\t\tfor(int objectIterator=0; objectIterator<array.length();objectIterator++){\n\t\t\t\tif(array.getJSONObject(objectIterator).get(key).equals(value)){\n\t\t\t\t\treturn array.getJSONObject(objectIterator);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e){\n\t\t\ttestStepFailed(\"The JSONObject with the requested Key: \"+key+\" and Value: \"+value+\" is not present in the JSONArray: \"+array);\n\t\t\treturn null;\n\t\t}\n\t\ttestStepFailed(\"The JSONObject with the requested Key: \"+key+\" and Value: \"+value+\" is not present in the JSONArray: \"+array);\n\t\treturn null;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeyWords.java",
        "method_name": "validateJSONResponseObject(JSONObject toValidate, String keyValue)",
        "method_description": "Validates if a key-value pair exists in a JSON object.",
        "code_implementation": "\tpublic void validateJSONResponseObject(JSONObject toValidate , String keyValue){\n\t\tString key = \"\";\n\t\tString value = \"\";\n\t\ttry{\n\t\t\tkey = keyValue.split(\":\")[0].trim();\n\t\t\tvalue = keyValue.split(\":\")[1].trim();\n\t\t}\n\t\tcatch(ArrayIndexOutOfBoundsException array){\n\t\t\ttestStepFailed(\"Invalid Key:Value format given: '\"+keyValue+\"' , check the input Key:Value Pair\");\n\t\t\treturn ;\n\t\t}\n\t\ttry{\n\t\t\tString response = getJSONObjectValue(toValidate , key);\n\t\t\tif(response.equals(value)){\n\t\t\t\ttestStepPassed(\"The actual response for '\"+key+\"' matches the expected response: '\"+response+\"'\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttestStepFailed(\"The actual response for '\"+key+\"' does not matches the expected response: '\"+response+\"'\");\n\t\t\t}\n\n\t\t}\n\t\tcatch(Exception e){\n\t\t\ttestStepFailed(\"Error getting the JSONObject Response\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "initiateCommand",
        "method_description": "Initiate Command: Prepares a new HTTP request using RestAssured. It clears any existing headers and initializes the httpRequest object. This method must be called before setting other parameters like method, headers, URI, or payload, and before executing the request with executeCommand().",
        "code_implementation": "public void initiateCommand(){\nheaders.clear();\nhttpRequest = RestAssured.given();\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setMethod",
        "method_description": "Set HTTP Method: Defines the HTTP request method (GET, POST, PUT, DELETE, etc.). It replaces double quotes in the method string and matches it to a valid HTTP method.",
        "code_implementation": "public void setMethod(String method){\nmethod = method.replaceAll(\"\"\", \"\");\nswitch(method.trim().toUpperCase()) {\ncase \"GET\": this.method = Method.GET; break;\ncase \"POST\": this.method = Method.POST; break;\n// more cases...\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setHeader",
        "method_description": "Set Request Header: Sets individual HTTP request headers. Can be called multiple times to add more headers. The header string is split into key-value pairs.",
        "code_implementation": "public void setHeader(String header){\nheader = header.replaceAll(\"\"\", \"\");\nheaders.put(header.trim().split(\":\")[0].trim(), header.trim().split(\":\")[1].trim());\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setURI",
        "method_description": "Set Request URI: Defines the target URI for the HTTP request.",
        "code_implementation": "public void setURI(String URI){\nURI = URI.replaceAll(\"\"\", \"\");\nhttpRequest.and().baseUri(URI);\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setOutputFileName",
        "method_description": "Set Output File Name: Specifies the file path where the response of the HTTP request will be saved in JSON format.",
        "code_implementation": "public void setOutputFileName(String responseFileName){\nthis.outputFilePath = suiteResultsDir+responseFileName+\".json\";\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setPayLoadData",
        "method_description": "Set Payload Data: Adds the request payload (for POST requests) by replacing escape characters and setting the payload body to the HTTP request.",
        "code_implementation": "public void setPayLoadData(String payLoad){\npayLoad = payLoad.replaceAll(\"\"\", \"\").replaceAll(\"\\\\\", \"\"\");\nhttpRequest.and().body(payLoad);\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "setPayLoadDataFile",
        "method_description": "Set Payload Data from File: Adds the request payload from a file (JSON or XML) to the HTTP request.",
        "code_implementation": "public void setPayLoadDataFile(String filePath){\ntry {\nhttpRequest.and().body(new File(filePath));\n} catch(Exception e) {\nSystem.err.println(\"Unable to set payload file from path: \"+filePath);\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "executeCommand",
        "method_description": "Execute Command: Executes the HTTP request with the specified method, headers, and other parameters. The response is saved to a JSON file.",
        "code_implementation": "public void executeCommand(){\nhttpRequest.headers(headers);\nthis.response = httpRequest.relaxedHTTPSValidation().request(method);\ntry (FileWriter file = new FileWriter(this.outputFilePath)) {\nfile.write(response.prettyPrint());\nfile.flush();\n} catch (IOException e) {\nSystem.err.println(\"Failed to write response to JSON file\");\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "printResponseHeader",
        "method_description": "Print Response Headers: Prints all the headers from the HTTP response.",
        "code_implementation": "public void printResponseHeader(){\nthis.responseHeaders = this.response.getHeaders();\nfor(Header responseHeader : responseHeaders.asList()) {\nSystem.out.println(responseHeader.getName()+\": \"+responseHeader.getValue());\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "isJSONValidObject",
        "method_description": "Validate JSON Object: Checks if a given string is a valid JSON object.",
        "code_implementation": "public boolean isJSONValidObject(String stringToValidate) {\ntry {\nnew JSONObject(stringToValidate);\n} catch (JSONException ex) {\nreturn false;\n}\nreturn true;\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "isJSONValidArray",
        "method_description": "Validate JSON Array: Checks if a given string is a valid JSON array.",
        "code_implementation": "public boolean isJSONValidArray(String stringToValidate) {\ntry {\nnew JSONArray(stringToValidate);\n} catch (JSONException ex) {\nreturn false;\n}\nreturn true;\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "validateStatus",
        "method_description": "Validate Status Code: Validates if the response status code matches the expected value.",
        "code_implementation": "public void validateStatus(String status){\nif(Integer.parseInt(status) == this.response.getStatusCode())\nSystem.out.println(\"The actual status: '\"+this.response.getStatusCode()+\"' matches the expected status: \"+status);\nelse\nSystem.err.println(\"The actual status: '\"+this.response.getStatusCode()+\"' not matches the expected status: \"+status);\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "getJSONResponse",
        "method_description": "Get JSON Response: Retrieves the response body as a JSONObject.",
        "code_implementation": "public Object getJSONResponse(String responseFileName){\nresponseFileName = suiteResultsDir+responseFileName+\".txt\";\ntry {\nreturn new JSONObject(this.response.getBody().asString());\n} catch(Exception e){\nSystem.err.println(\"Error occured while getting a valid JSON Element\");\nreturn null;\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "getJSONObjectValueFromJSONObject",
        "method_description": "Get JSON Value: Extracts the value of a specific key from a JSONObject.",
        "code_implementation": "public String getJSONObjectValueFromJSONObject(JSONObject object , String key){\ntry{\nreturn (String) object.getString(key);\n} catch(Exception e){\nSystem.err.println(\"No Value is present in the JSONObject: \"+object+\" with the key: \"+key);\nreturn null;\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "getJSONArrayFromJSONObject",
        "method_description": "Get JSON Array: Retrieves a JSONArray by its key from a JSONObject.",
        "code_implementation": "public JSONArray getJSONArrayFromJSONObject(JSONObject object , String key){\ntry{\nreturn object.getJSONArray(key);\n} catch(Exception e){\nSystem.err.println(\"The JSONArray with the requested Key: \"+key+\" is not present in the JSONObject: \"+object);\nreturn null;\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "getJSONObjectContainsKeyValueFromJSONArray",
        "method_description": "Get JSONObject from JSONArray: Searches for a JSONObject in a JSONArray that matches a specific key-value pair.",
        "code_implementation": "public JSONObject getJSONObjectContainsKeyValueFromJSONArray(JSONArray array , String key, String value){\ntry{\nfor(int objectIterator=0; objectIterator<array.length();objectIterator++){\nif(array.getJSONObject(objectIterator).get(key).equals(value)){\nreturn array.getJSONObject(objectIterator);\n}\n}\n} catch(Exception e){\nSystem.err.println(\"The JSONObject with the requested Key: \"+key+\" and Value: \"+value+\" is not present in the JSONArray: \"+array);\nreturn null;\n}\nSystem.err.println(\"The JSONObject with the requested Key: \"+key+\" and Value: \"+value+\" is not present in the JSONArray: \"+array);\nreturn null;\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "APIKeywordsSA.java",
        "method_name": "validateJSONResponseObject",
        "method_description": "Validate JSON Object: Verifies if a key-value pair exists in a JSONObject and compares it to the expected value.",
        "code_implementation": "public void validateJSONResponseObject(JSONObject toValidate , String keyValue){\nString key = \"\";\nString value = \"\";\ntry{\nkey = keyValue.split(\":\")[0].trim();\nvalue = keyValue.split(\":\")[1].trim();\n} catch(ArrayIndexOutOfBoundsException array){\nSystem.err.println(\"Invalid Key:Value format given: '\"+keyValue+\"' , check the input Key:Value Pair\");\nreturn ;\n}\ntry{\nString response = getJSONObjectValueFromJSONObject(toValidate , key);\nif(response.equals(value)){\nSystem.out.println(\"The actual response for '\"+key+\"' matches the expected response: '\"+response+\"'\");\n} else{\nSystem.err.println(\"The actual response for '\"+key+\"' does not matches the expected response: '\"+response+\"'\");\n}\n} catch(Exception e){\nSystem.err.println(\"Error getting the JSONObject Response\");\n}\n}"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "connectToDatabase",
        "method_description": "Connect to Database: Establishes a connection to a MySQL, PostgreSQL, or Oracle database. Depending on the database type, it uses the appropriate JDBC driver and constructs the connection string. Throws an exception for an invalid database type.",
        "code_implementation": "public void connectToDatabase(String dbModule, String dbHost, String dbPort, String dbName, String dbUsername, String dbPassword) { String className = \"\"; String connectionString = \"\"; try { switch (dbModule.toLowerCase()) { case \"mysql\": className = \"com.mysql.jdbc.Driver\"; connectionString = \"jdbc:mysql://\" + dbHost + \":\" + dbPort + \"/\"; break; case \"postgre\": className = \"org.postgresql.Driver\"; connectionString = \"jdbc:postgresql://\" + dbHost + \":\" + dbPort + \"/\"; break; case \"oracle\": className = \"oracle.jdbc.driver.OracleDriver\"; connectionString = \"jdbc:oracle:thin:@\" + dbHost + \":\" + dbPort + \":\"; break; default: throw new IllegalArgumentException(\"Invalid Database\"); } Class.forName(className); connection = DriverManager.getConnection(connectionString + dbName, dbUsername, dbPassword); } catch (Exception e) { handleException(e, \"Database Connection Failed\"); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "disconnectFromDatabase",
        "method_description": "Disconnect from Database: Safely closes the database connection if it is open. This should be called to free resources after database operations are complete.",
        "code_implementation": "public void disconnectFromDatabase() { try { if (connection != null && !connection.isClosed()) { connection.close(); testStepPassed(\"Closed database successfully\"); } } catch (SQLException e) { handleException(e, \"Database Disconnection Failed\"); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "executeSqlScript",
        "method_description": "Execute SQL Script: Executes a given SQL script/query file on the connected database. The script file name is concatenated with a semicolon for execution.",
        "code_implementation": "public void executeSqlScript(String sqlScriptFileName) { try (Statement stmt = connection.createStatement()) { sqlScriptFileName = sqlScriptFileName.concat(\";\"); stmt.executeUpdate(sqlScriptFileName); testStepPassed(\"'\" + sqlScriptFileName + \"' query executed successfully\"); } catch (Exception e) { handleException(e, sqlScriptFileName + \" query execution failed\"); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "deleteAllRowsFromTable",
        "method_description": "Delete All Rows from Table: Truncates a specified table, removing all rows from it. This is equivalent to a \"TRUNCATE\" SQL operation.",
        "code_implementation": "public void deleteAllRowsFromTable(String tableName) { String sqlQuery = \"TRUNCATE \" + tableName.toUpperCase() + \";\"; executeSqlScript(sqlQuery); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "query",
        "method_description": "Execute Select Query: Runs a given SQL \"SELECT\" query on the connected database and logs the results. Retrieves the number of attributes to log and iterate through each row in the result set.",
        "code_implementation": "public void query(String selectStmt) { String selectStatement = selectStmt + \";\"; numberOfAttributes = getNumberOfAttributes(selectStatement); try (Statement statement = connection.createStatement(); ResultSet rs = statement.executeQuery(selectStatement)) { while (rs.next()) { logResults(rs); } testStepPassed(\"Select Statement Passed\"); } catch (Exception e) { handleException(e, \"Select Statement Failed\"); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "checkIfExistsInDatabase",
        "method_description": "Check if Record Exists in Database: Checks if a record matching the given SQL query exists in the database.",
        "code_implementation": "public boolean checkIfExistsInDatabase(String selectStatement) { return checkExistence(selectStatement); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "checkIfNotExistsInDatabase",
        "method_description": "Check if Record Does Not Exist in Database: Returns true if a record matching the SQL query does not exist in the database.",
        "code_implementation": "public boolean checkIfNotExistsInDatabase(String selectStatement) { return !checkExistence(selectStatement); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "tableExist",
        "method_description": "Check if Table Exists: Verifies if a given table exists in the connected database. Executes a \"SHOW TABLES\" query to determine the table's presence.",
        "code_implementation": "public boolean tableExist(String tableName) { String sqlScriptFileName = \"SHOW TABLES LIKE '\" + tableName + \"';\"; try (Statement stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(sqlScriptFileName)) { return rs.next(); } catch (Exception e) { handleException(e, \"TableExist :: Select Statement Failed\"); return false; } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCount",
        "method_description": "Count Rows in Table: Retrieves the row count from the specified table using a \"COUNT(*)\" SQL query. Logs the result.",
        "code_implementation": "public void rowCount(String tableName) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \";\"; executeCountQuery(selectStatement); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCount (condition)",
        "method_description": "Count Rows in Table with Condition: Counts rows in a table that meet a given condition.",
        "code_implementation": "public void rowCount(String tableName, String condition) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE \" + condition + \";\"; executeCountQuery(selectStatement); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsZero",
        "method_description": "Check if Row Count is Zero: Verifies if the specified table contains zero rows.",
        "code_implementation": "public boolean rowCountIsZero(String tableName) { return checkRowCountCondition(tableName, 0, \"=\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsZero (condition)",
        "method_description": "Check if Row Count with Condition is Zero: Verifies if the specified table contains zero rows that match a given condition.",
        "code_implementation": "public boolean rowCountIsZero(String tableName, String condition) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE \" + condition + \";\"; return checkRowCount(selectStatement, 0); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsEqualToX",
        "method_description": "Check if Row Count Equals X: Checks if the row count in a table matches a given number X.",
        "code_implementation": "public boolean rowCountIsEqualToX(String tableName, String rowCounts) { int x = Integer.parseInt(rowCounts); return checkRowCountCondition(tableName, x, \"=\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsEqualToX (condition)",
        "method_description": "Check if Row Count with Condition Equals X: Verifies if the row count for records meeting a specific condition equals a given number X.",
        "code_implementation": "public boolean rowCountIsEqualToX(String tableName, String condition, String rowCounts) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE \" + condition + \";\"; int x = Integer.parseInt(rowCounts); return checkRowCount(selectStatement, x); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsGreaterToX",
        "method_description": "Check if Row Count is Greater than X: Checks if the row count in a table is greater than a given number X.",
        "code_implementation": "public boolean rowCountIsGreaterToX(String tableName, String rowCounts) { int x = Integer.parseInt(rowCounts); return checkRowCountCondition(tableName, x, \">\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsGreaterToX (condition)",
        "method_description": "Check if Row Count with Condition is Greater than X: Verifies if the row count for records meeting a specific condition is greater than a given number X.",
        "code_implementation": "public boolean rowCountIsGreaterToX(String tableName, String condition, String rowCounts) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE \" + condition + \";\"; int x = Integer.parseInt(rowCounts); return checkRowCount(selectStatement, x, \">\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsLessToX",
        "method_description": "Check if Row Count is Less than X: Verifies if the row count in a table is less than a given number X.",
        "code_implementation": "public boolean rowCountIsLessToX(String tableName, String rowCounts) { int x = Integer.parseInt(rowCounts); return checkRowCountCondition(tableName, x, \"<\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "rowCountIsLessToX (condition)",
        "method_description": "Check if Row Count with Condition is Less than X: Verifies if the row count for records meeting a specific condition is less than a given number X.",
        "code_implementation": "public boolean rowCountIsLessToX(String tableName, String condition, String rowCounts) { String selectStatement = \"SELECT COUNT(*) FROM \" + tableName + \" WHERE \" + condition + \";\"; int x = Integer.parseInt(rowCounts); return checkRowCount(selectStatement, x, \"<\"); }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "description",
        "method_description": "Description: Executes a SELECT query and prints the result. If the number of attributes (numberOfAttrb) is defined, it iterates through them; otherwise, it tries to print all columns until an exception occurs. This method is useful for inspecting the results of a database query.",
        "code_implementation": "public void description(String selectQuery) { Statement stmt = null; try { stmt = connection.createStatement(); ResultSet rs = stmt.executeQuery(selectQuery); if (rs != null) { while (rs.next()) { if (numberOfAttrb != 0) { for (int i = 1; i <= numberOfAttrb; i++) { System.out.println(rs.getString(i)); } } else { int i = 1; while (true) { try { System.out.println(rs.getString(i)); } catch (Exception e) { break; } finally { i++; } } } System.out.println(); } } rs.close(); stmt.close(); testStepPassed(\"description :: Operation executed successfully\"); } catch (Exception e) { testStepFailed(\"\",e.getClass().getName() + \":\" + e.getMessage() + \"description :: Operation failed\"); System.exit(0); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "executeQuery",
        "method_description": "Execute Query: Runs a SQL query and stores the result in the resultSet. This method is used for executing queries and can be extended to process or log the results.",
        "code_implementation": "public void executeQuery(String query){ try{ testStepInfo(\"Executing Query: \"+query); statement = connection.createStatement(); resultSet = statement.executeQuery(query); } catch(Exception e){ e.printStackTrace(); } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "getValueFromDB",
        "method_description": "Get Value from DB: Retrieves the value of a specific column from the current row of the resultSet. This method returns the first matching result and is useful for fetching a single column's value from a database query.",
        "code_implementation": "public String getValueFromDB(String columnValue){ try{ String value = \"\"; while(resultSet.next()) { return resultSet.getString(columnValue); } return value; } catch(Exception e){ e.printStackTrace(); return \"\"; } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "DBKeywords.java",
        "method_name": "printResultSet",
        "method_description": "Print ResultSet: Iterates over the resultSet, printing each column and its value. The method uses metadata to determine the number of columns, then concatenates each column's name and value into a formatted string. This is helpful for logging or displaying the results of a query.",
        "code_implementation": "public String printResultSet(){ try{ String temp = \"\"; ResultSetMetaData rsmd = resultSet.getMetaData(); int columnsNumber = rsmd.getColumnCount(); writeToLogFile(\"INFO\" , \"Column count: \"+columnsNumber); while (resultSet.next()) { for (int i = 1; i <= columnsNumber; i++) { String columnValue = resultSet.getString(i); temp = temp.concat(\"{'\"+rsmd.getColumnName(i)+\"' - '\"+columnValue+\"'}\"); } temp = temp.concat(\" \"); } return temp; } catch(Exception e){ e.printStackTrace(); return null; } }"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void currentExecutionMachineName",
        "method_description": "Sets the current execution machine's name, OS, OS version, and browser version.",
        "code_implementation": "\tpublic void currentExecutionMachineName(String machineName, String os, String osVersion, String browserVersion) {\n\t\tcurrentExecutionMachineName = machineName;\n\t\tcurrentExecutionOs = os;\n\t\tcurrentExecutionOsVersion = osVersion;\n\t\tcurrentExecutionBrowserVersion = browserVersion;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testResultsFolder",
        "method_description": "Creates directories for storing test results and initializes several lists related to test execution.",
        "code_implementation": "\tpublic void testResultsFolder(String machineName, String host, String port, String browser, String os,\n\t\t\tString browserVersion, String osVersion) {\n\n\t\tsuiteResultsDir = GenericKeywords.outputDirectory + \"/\" + machineName.replace(\" \", \"\") + \"-\" + os + \"(\"\n\t\t\t\t+ osVersion + \")\" + \"-\" + browser + \"-\" + browserVersion;\n\t\thostName.add(host);\n\t\tmachineNames.add(machineName);\n\t\ttestNameSuite.add(browser);\n\t\tosName.add(os);\n\t\tbrowserName.add(browser);\n\t\tbrowserVersionName.add(browserVersion);\n\t\tosVersionName.add(osVersion);\n\t\t(new File(GenericKeywords.outputDirectory)).mkdir();\n\t\t(new File(suiteResultsDir)).mkdir();\n\t\t(new File(suiteResultsDir + \"/ResultFiles/\")).mkdir();\n\t\t(new File(suiteResultsDir + \"/Responses/\")).mkdir();\n\t\tXMLReport.createXmlReport(suiteResultsDir + \"/ResultFiles/\" + machineName + \".xml\", machineName);\n\t\ttestCaseResultsDir.add(suiteResultsDir + \"/ResultFiles/\");\n\t\tcoverPageResultsDir.add(suiteResultsDir + \"/CoverPage.html\");\n\t\tsummaryPageResultsDir.add(suiteResultsDir + \"/SummaryPage.html\");\n\t\tmoduleReportDir.add(suiteResultsDir + \"/ModuleReportPage.html\");\n\t\tfailurePageResultsDir.add(suiteResultsDir + \"/FailurePage.html\");\n\t\tgridPageResultsDir.add(suiteResultsDir + \"/GridPage.html\");\n\t\tcssSuiteDir.add(suiteResultsDir + \"/style.css\");\n\t\tSystem.out.println(suiteResultsDir + \"/ResultFiles/\" + machineName + \".xml\");\n\t\txmlReport.add(suiteResultsDir + \"/ResultFiles/\" + machineName + \".xml\");\n\t\tTransferFiles.transferLogo();\n\t\tTransferFiles.transferJS();\n\t\tTransferFiles.transferCss();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void stopProcess",
        "method_description": "Stops a specified process using the command line.",
        "code_implementation": "public void stopProcess(String process) {\n    CommandLine command = new CommandLine(\"cmd\");\n    command.addArgument(\"/c\");\n    command.addArgument(\"taskkill\");\n    command.addArgument(\"/F\");\n    command.addArgument(\"/IM\");\n    command.addArgument(process);\n\n    DefaultExecuteResultHandler resultHandler = new DefaultExecuteResultHandler();\n    DefaultExecutor executor = new DefaultExecutor();\n    executor.setExitValue(1);\n\n    try {\n        executor.execute(command, resultHandler);\n    } catch (IOException e) {\n        writeToLogFile(\"ERROR\", e.toString());\n    }\n}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public boolean verifyTask",
        "method_description": "Checks whether a specified process is running and returns true if it is.",
        "code_implementation": "\tpublic boolean verifyTask(String processName) {\n\t\tString line;\n\t\tint processCount = 0;\n\t\tboolean flag = true;\n\n\t\tProcess process;\n\t\ttry {\n\n\t\t\tprocess = Runtime.getRuntime().exec(System.getenv(\"windir\") + \"/system32/\" + \"tasklist.exe\");\n\t\t\tBufferedReader input = new BufferedReader(new InputStreamReader(process.getInputStream()));\n\n\t\t\twhile ((line = input.readLine()) != null) {\n\t\t\t\tif (line.startsWith(processName)) {\n\t\t\t\t\tprocessCount += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (processCount == 0) {\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t\tinput.close();\n\t\t} catch (IOException e) {\n\t\t\twriteToLogFile(\"ERROR\", e.toString());\n\t\t}\n\t\treturn flag;\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void startServer",
        "method_description": "Starts the Appium server and stops existing instances if necessary.",
        "code_implementation": "\tpublic void startServer(String host, String port) {\n\t\tif (verifyTask(\"node.exe\")) {\n\t\t\tstopProcess(\"node.exe\");\n\t\t}\n\t\tif (verifyTask(\"chromedriver.exe\")) {\n\t\t\tstopProcess(\"chromedriver.exe\");\n\t\t}\n\t\tif (verifyTask(\"adb.exe\")) {\n\t\t\t// stopProcess(\"adb.exe\");\n\t\t}\n\t\tString appiumNode = \"D:/Data/SolutionsTeam/Official/Appium/node.exe\";\n\t\tString appiumServer = \"D:/Data/SolutionsTeam/Official/Appium/node_modules/appium/bin/appium.js\";\n\t\twriteToLogFile(\"INFO\", \"---- Starting appium server ----\");\n\t\tCommandLine command = new CommandLine(\"cmd\");\n\t\tcommand.addArgument(\"/c\");\n\t\tcommand.addArgument(appiumNode);\n\t\tcommand.addArgument(appiumServer);\n\t\tcommand.addArgument(\"--address\");\n\t\tcommand.addArgument(host);\n\t\tcommand.addArgument(\"--port\");\n\t\tcommand.addArgument(port);\n\t\tDefaultExecuteResultHandler resultHandler = new DefaultExecuteResultHandler();\n\t\tDefaultExecutor executor = new DefaultExecutor();\n\t\texecutor.setExitValue(1);\n\t\ttry {\n\t\t\texecutor.execute(command, resultHandler);\n\t\t} catch (IOException e) {\n\t\t\twriteToLogFile(\"ERROR\", e.toString());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void openBrowser",
        "method_description": "Initializes and opens a browser based on the specified parameters such as machine name, host, port, browser type, operating system, and their respective versions.",
        "code_implementation": "\tpublic void openBrowser(String machineName, String host, String port, String browser, String os,\n\t\t\tString browserVersion, String osVersion) {\n\n\t\tplatFormName platformName = platFormName.valueOf(os.toUpperCase().trim());\n\t\tbrowserType browserNamee = browserType.valueOf(browser.toUpperCase().trim());\n\t\tString gridExecution = getConfigProperty(\"GridExecution\").toLowerCase();\n\t\tcurrentBrowser = browser;\n\n\t\twriteToLogFile(\"INFO\", \"Opening \" + browser + \" Browser...\");\n\n\t\ttry {\n\n\t\t\tChromeOptions options = new ChromeOptions();\n\t\t\tswitch (platformName) {\n\n\t\t\tcase LINUX: /**\n\t\t\t * Desired capability configurations for LINUX systems\n\t\t\t */\n\n\t\t\t\toptions.addArguments(\"test-type\");\n\t\t\t\tcapability.setCapability(ChromeOptions.CAPABILITY, options);\n\t\t\t\tcapability.setBrowserName(\"chrome\");\n\t\t\t\tif (gridExecution.contains(\"yes\")) {\n\t\t\t\t\tdriver = new RemoteWebDriver(new URL(\"http://\" + host + \":\" + port + \"/wd/hub\"), capability);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase IOS: /** Desired capability configurations for IOS systems */\n\n\t\t\t\tif (port.trim().toUpperCase().contains(\"CROSSBROWSERTESTING\")) {\n\n\t\t\t\t\tcapability.setCapability(\"browser_api_name\", \"Mbl\" + browser + browserVersion);\n\t\t\t\t\tcapability.setCapability(\"os_api_name\",\n\t\t\t\t\t\t\tmachineName.replace(\" \", \"\") + \"-\" + os + osVersion + \"sim\");\n\t\t\t\t\tcapability.setCapability(\"record_video\", \"true\");\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"BROWSERSTACK\")) {\n\n\t\t\t\t\tif (machineName.toLowerCase().contains(\"iphone\")) {\n\t\t\t\t\t\tcapability.setCapability(\"browserName\", \"iPhone\");\n\n\t\t\t\t\t} else if (machineName.toLowerCase().contains(\"ipad\")) {\n\t\t\t\t\t\tcapability.setCapability(\"browserName\", \"iPad\");\n\t\t\t\t\t}\n\n\t\t\t\t\tcapability.setCapability(\"platform\", os.toUpperCase());\n\t\t\t\t\tcapability.setCapability(\"device\", machineName.toLowerCase());\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"SAUCELABS\")) \n\t\t\t\t{\n\t\t\t\t\tcapability.setBrowserName(\"iexplore\");\n\t\t\t\t\tcapability.setCapability(\"version\", browserVersion);\n\t\t\t\t\tif (os.trim().toUpperCase().contains(\"LINUX\")) {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase() + \" \" + osVersion);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif(browserNamee.toString().equalsIgnoreCase(\"CHROME\")) {\n\t\t\t\t\t\tcapability.setCapability(\"platformName\", os);\n\t\t\t\t\t\tcapability.setCapability(\"platformVersion\", osVersion);\n\t\t\t\t\t\tcapability.setCapability(\"deviceName\", machineName);\n\t\t\t\t\t\tcapability.setCapability(\"udid\", getConfigProperty(\"UDID\"));\n\t\t\t\t\t\tcapability.setCapability(CapabilityType.BROWSER_NAME, \"safari\");\n\t\t\t\t\t\tcapability.setCapability(\"automationName\", \"XCUITest\");\n\t\t\t\t\t\tcapability.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 6*100);\n\t\t\t\t\t\tcapability.setCapability(\"usePrebuiltWDA\", true);\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tcapability.setCapability(\"newCommandTimeout\", 60000);\n\t\t\t\t\t\tcapability.setCapability(\"newCommandTimeout\", 60000);\n\t\t\t\t\t\tcapability.setCapability(\"platformName\", os.trim().toUpperCase());\n\t\t\t\t\t\tcapability.setCapability(\"platformVersion \", osVersion);\n\t\t\t\t\t\tcapability.setCapability(\"deviceName\", machineName);\n\t\t\t\t\t\tcapability.setCapability(\"udid\", getConfigProperty(\"UDID\"));\n\t\t\t\t\t\tcapability.setCapability(\"noReset\", false);\n\t\t\t\t\t\tcapability.setCapability(\"app\", getConfigProperty(\"Bundle ID\")); \n\t\t\t\t\t\tcapability.setCapability(\"automationName\", \"XCUITest\");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tdriver = new IOSDriver(new URL(\"http://\" + host + \":\" + port + \"/wd/hub\"), capability);\n\t\t\t\tbreak;\n\n\t\t\tcase ANDROID: /** Desired capability configurations for Android systems */\n\n\t\t\t\tif (port.trim().toUpperCase().contains(\"CROSSBROWSERTESTING\"))\n\t\t\t\t{\n\t\t\t\t\tcapability.setCapability(\"browser_api_name\", \"Mbl\" + browser + browserVersion.replace(\".0\", \"\"));\n\t\t\t\t\tcapability.setCapability(\"os_api_name\",\n\t\t\t\t\t\t\tmachineName.replace(\" \", \"\") + \"-And\" + osVersion.replace(\".\", \"\"));\n\t\t\t\t\tcapability.setCapability(\"record_video\", \"true\");\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"BROWSERSTACK\")) \n\t\t\t\t{\n\n\t\t\t\t\tcapability.setCapability(\"browserName\", os.toLowerCase());\n\t\t\t\t\tcapability.setCapability(\"platform\", os.toUpperCase());\n\t\t\t\t\tcapability.setCapability(\"device\", machineName);\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"SAUCELABS\")) \n\t\t\t\t{\n\n\t\t\t\t\tcapability.setBrowserName(\"chrome\");\n\t\t\t\t\tcapability.setCapability(\"version\", browserVersion);\n\t\t\t\t\tif (os.trim().toUpperCase().contains(\"LINUX\")) {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase() + \" \" + osVersion);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcapability.setCapability(\"platformName\", os.trim().toUpperCase());\n\t\t\t\t\tcapability.setCapability(\"platformVersion \", osVersion);\n\t\t\t\t\tcapability.setCapability(\"deviceName\", \"Android\");\n\t\t\t\t\tcapability.setCapability(\"udid\", udid);\n\t\t\t\t\tcapability.setCapability(\"noReset\", true);\n\n\t\t\t\t\tif (getConfigProperty(\"AppType\").equalsIgnoreCase(\"web\")) {\n\t\t\t\t\t\tcapability.setCapability(CapabilityType.BROWSER_NAME, \"chrome\");\n\t\t\t\t\t\tcapability.setCapability(\"recreateChromeDriverSessions\", true);\n\t\t\t\t\t\tcapability.setCapability(\"chromedriverExecutable\", getConfigProperty(\"Chrome Driver Path\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"appPackage\", getConfigProperty(\"AppPackage\"));\n\t\t\t\t\t\tcapability.setCapability(\"appActivity\", getConfigProperty(\"AppActivity\"));\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tdriver = new AndroidDriver<>(new URL(\"http://\" + host + \":\" + port + \"/wd/hub\"), capability);\n\t\t\t\tbreak;\n\n\t\t\tcase WINDOWS: /** Desired capability configurations for Windows systems */\n\n\t\t\t\tif (port.trim().toUpperCase().contains(\"CROSSBROWSERTESTING\")) \n\t\t\t\t{\n\t\t\t\t\tif (browserNamee.toString().equalsIgnoreCase(\"InternetExplorer\")) {\n\n\t\t\t\t\t\tcapability.setCapability(\"browser_api_name\", \"IE\" + browserVersion.replace(\".0\", \"\"));\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"Firefox\")) {\n\n\t\t\t\t\t\tcapability.setCapability(\"browser_api_name\", \"FF\" + browserVersion.replace(\".0\", \"\"));\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tcapability.setCapability(\"browser_api_name\", browser + browserVersion.replace(\".0\", \"\").trim());\n\t\t\t\t\t}\n\t\t\t\t\tcapability.setCapability(\"os_api_name\", \"Win\" + osVersion);\n\t\t\t\t\tcapability.setCapability(\"record_video\", \"true\");\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"BROWSERSTACK\")) \n\t\t\t\t{\n\t\t\t\t\tcapability.setCapability(\"os\", os.trim().toUpperCase());\n\t\t\t\t\tcapability.setCapability(\"os_version\", osVersion.trim());\n\n\t\t\t\t\tif (browserNamee.toString().equalsIgnoreCase(\"InternetExplorer\")) {\n\t\t\t\t\t\tcapability.setCapability(\"browser\", \"IE\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"browser\", browser);\n\t\t\t\t\t}\n\n\t\t\t\t\tcapability.setCapability(\"browserVersion\", browserVersion);\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"SAUCELABS\")) \n\t\t\t\t{\n\n\t\t\t\t\tcapability.setBrowserName(\"chrome\");\n\t\t\t\t\tcapability.setCapability(\"version\", browserVersion);\n\t\t\t\t\tif (os.trim().toUpperCase().contains(\"LINUX\")) {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase() + \" \" + osVersion);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\n\t\t\t\t\tif(Common.krakenGridExecution)\n\t\t\t\t\t\tcapability.setCapability(\"krakenToken\", getConfigProperty(\"krakenToken\"));\n\n\t\t\t\t\tif (browserNamee.toString().equalsIgnoreCase(\"CHROME\")) {\n\t\t\t\t\t\toptions = new ChromeOptions();\n\t\t\t\t\t\toptions.addArguments(\"test-type\");\n\t\t\t\t\t\toptions.addArguments(\"disable-infobars\");\n\t\t\t\t\t\tMap<String, Object> chromePrefs = new Hashtable<String, Object>();\n\t\t\t\t\t\tchromePrefs.put(\"download.default_directory\", getConfigProperty(\"Download directory\"));\n\t\t\t\t\t\tchromePrefs.put(\"download.prompt_for_download\", false);\n\t\t\t\t\t\tchromePrefs.put(\"profile.default_content_setting_values.notifications\", \n\t\t\t\t\t\t\t\tInteger.parseInt(getConfigProperty(\"Allow Pop-Up\"))); //1-Allow, 2-Block, 0-default\n\t\t\t\t\t\tchromePrefs.put(\"plugins.always_open_pdf_externally\", true);\n\t\t\t\t\t\toptions.setExperimentalOption(\"prefs\", chromePrefs);\n\t\t\t\t\t\toptions.addArguments(\"--test-type\");\n\t\t\t\t\t\tcapability.setCapability(ChromeOptions.CAPABILITY, options);\n\t\t\t\t\t\tcapability.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n\t\t\t\t\t\tcapability.setBrowserName(\"chrome\");\n\n\t\t\t\t\t\tLoggingPreferences logPrefs = new LoggingPreferences();\n\t\t\t\t\t\tlogPrefs.enable(LogType.PERFORMANCE, Level.INFO);\n\n\t\t\t\t\t\tcapability.setCapability(\"goog:loggingPrefs\", logPrefs);\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"FIREFOX\")) {\n\n\t\t\t\t\t\tcapability.setBrowserName(\"firefox\");\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"InternetExplorer\")) {\n\n\t\t\t\t\t\tcapability.setBrowserName(\"internet explorer\");\n\t\t\t\t\t\tcapability.setPlatform(Platform.WINDOWS);\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"Edge\")) {\n\n\t\t\t\t\t\tcapability.setBrowserName(\"MicrosoftEdge\");\n\t\t\t\t\t\tcapability.setPlatform(Platform.WIN10);\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif (gridExecution.trim().equals(\"yes\")) {\n\t\t\t\t\tdriver = new RemoteWebDriver(new URL(\"http://\" + host + \":\" + port + \"/wd/hub\"), capability);\n\t\t\t\t\tif(Common.krakenGridExecution)\n\t\t\t\t\t\treadCSVData();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (browserNamee.toString().equalsIgnoreCase(\"CHROME\")) {\n\t\t\t\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", getConfigProperty(\"Chrome Driver Path\"));\n\t\t\t\t\t\tdriver = new ChromeDriver(options);\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"FIREFOX\")) {\n\n\t\t\t\t\t\tdriver = new FirefoxDriver();\n\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"InternetExplorer\")) {\n\t\t\t\t\t\tdriver = new InternetExplorerDriver();\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"Edge\")) {\n\t\t\t\t\t\tdriver = new EdgeDriver();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmaximiseWindow();\n\t\t\t\tbreak;\n\n\t\t\tcase MAC:\n\n\t\t\t\tif (port.trim().toUpperCase().contains(\"CROSSBROWSERTESTING\")) // (targetExecution.trim().equalsIgnoreCase(\"Browserstack\"))\n\t\t\t\t{\n\t\t\t\t\tcapability.setCapability(\"browser_api_name\", browser + browserVersion.replace(\".0\", \"\").trim());\n\t\t\t\t\tcapability.setCapability(\"os_api_name\", \"Mac\" + osVersion.trim());\n\t\t\t\t\tcapability.setCapability(\"record_video\", \"true\");\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"BROWSERSTACK\")) // (targetExecution.trim().equalsIgnoreCase(\"Browserstack\"))\n\t\t\t\t{\n\t\t\t\t\tcapability.setCapability(\"os\", \"OS X\");\n\t\t\t\t\tcapability.setCapability(\"os_version\", osVersion.trim());\n\t\t\t\t\tcapability.setCapability(\"browser\", browser);\n\t\t\t\t\tcapability.setCapability(\"browser_version\", browserVersion);\n\n\t\t\t\t} else if (port.trim().toUpperCase().contains(\"SAUCELABS\")) // (targetExecution.trim().equalsIgnoreCase(\"SauceLabs\"))\n\t\t\t\t{\n\t\t\t\t\tcapability.setBrowserName(\"chrome\");\n\t\t\t\t\tcapability.setCapability(\"version\", browserVersion);\n\t\t\t\t\tif (os.trim().toUpperCase().contains(\"LINUX\")) {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase() + \" \" + osVersion);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcapability.setCapability(\"platform\", os.trim().toUpperCase());\n\n\t\t\t\t\tif (browserNamee.toString().equalsIgnoreCase(\"CHROME\")) {\n\n\t\t\t\t\t\toptions = new ChromeOptions();\n\t\t\t\t\t\toptions.addArguments(\"test-type\");\n\t\t\t\t\t\toptions.addArguments(\"disable-infobars\");\n\t\t\t\t\t\tMap<String, Object> chromePrefs = new Hashtable<String, Object>();\n\t\t\t\t\t\tchromePrefs.put(\"download.default_directory\", getConfigProperty(\"Download directory\"));\n\t\t\t\t\t\tchromePrefs.put(\"download.prompt_for_download\", false);\n\t\t\t\t\t\tchromePrefs.put(\"profile.default_content_setting_values.notifications\", \n\t\t\t\t\t\t\t\tInteger.parseInt(getConfigProperty(\"Allow Pop-Up\"))); //1-Allow, 2-Block, 0-default\n\t\t\t\t\t\tchromePrefs.put(\"plugins.always_open_pdf_externally\", true);\n\t\t\t\t\t\toptions.setExperimentalOption(\"prefs\", chromePrefs);\n\t\t\t\t\t\toptions.addArguments(\"--test-type\");\n\t\t\t\t\t\tcapability.setCapability(ChromeOptions.CAPABILITY, options);\n\t\t\t\t\t\tcapability.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);\n\t\t\t\t\t\tcapability.setBrowserName(\"chrome\");\n\n\t\t\t\t\t\tLoggingPreferences logPrefs = new LoggingPreferences();\n\t\t\t\t\t\tlogPrefs.enable(LogType.PERFORMANCE, Level.INFO);\n\n\t\t\t\t\t\tcapability.setCapability(\"goog:loggingPrefs\", logPrefs);\n\n\t\t\t\t\t} else if (browserNamee.toString().equalsIgnoreCase(\"SAFARI\")) {\n\n\t\t\t\t\t\tcapability.setBrowserName(\"safari\");\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\tif (gridExecution.contains(\"yes\")) {\n\t\t\t\t\tdriver = new RemoteWebDriver(new URL(\"http://\" + host + \":\" + port + \"/wd/hub\"), capability);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t\twriteToLogFile(\"INFO\", \"Browser: Open Successful : \" + currentBrowser.toLowerCase());\n\n\t\t\tif (getConfigProperty(\"AppType\").equalsIgnoreCase(\"web\")) {\n\t\t\t\tnavigateTo(getConfigProperty(\"AppURL\"));\n\t\t\t}\n\n\t\t} catch (TimeoutException e) {\n\n\t\t\ttestStepFailed(\"Page fail to load within in \" + getConfigProperty(\"pageLoadWaitTime\") + \" seconds\",\n\t\t\t\t\te.toString());\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\twriteToLogFile(\"ERROR\",\n\t\t\t\t\t\"Browser: Open Failure/Navigation cancelled, please check the application window. Error: \"\n\t\t\t\t\t\t\t+ e.toString());\n\t\t\ttestStepFailed(\"Browser: Open Failure/Navigation cancelled, please check the application window.\",\n\t\t\t\t\te.toString());\n\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void navigateTo",
        "method_description": "Navigates the current browser to the specified URL and logs the result.",
        "code_implementation": "\tpublic void navigateTo(String url) {\n\t\ttry {\n\t\t\twriteToLogFile(\"INFO\", \"Navigating to URL : \" + url);\n\t\t\tdriver.get(url);\n\t\t\twriteToLogFile(\"INFO\", \"Navigation Successful : \" + url);\n\t\t\ttestStepPassed(\"Navigate to : \" + url);\n\t\t} catch (TimeoutException e) {\n\t\t\ttestStepFailed(\"Page fail to load within in \" + pageLoadWaitTime + \" seconds\", e.toString());\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Browser: Open Failure/Navigation cancelled, please check the application window.\");\n\t\t\ttestStepFailed(\"Browser: Open Failure/Navigation cancelled, please check the application window. URL: \" + url, e.toString());\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void closeBrowser()",
        "method_description": "Closes the current browser session and logs the action.",
        "code_implementation": "\tpublic void closeBrowser() {\n\t\ttry {\n\t\t\twriteToLogFile(\"INFO\", \"Closing Browser...\");\n\t\t\tif (currentBrowser.contains(\"chrome\")) {\n\t\t\t\tdeleteAllCookies();\n\t\t\t\tdriver.quit();\n\t\t\t} else {\n\t\t\t\tdeleteAllCookies();\n\t\t\t\tdriver.close();\n\t\t\t}\n\t\t\ttestStepPassed(\"Browser closed\");\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Browser: Close Failure\");\n\t\t\ttestStepFailed(\"Browser close failure\", e.toString());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private WebElement identifyBy",
        "method_description": "Identifies a web element based on the provided identifier type (e.g., XPath, ID) and returns the corresponding WebElement.",
        "code_implementation": "\tprivate WebElement identifyBy(String identifier) {\n\t\tWebElement webElement = null;\n\t\tidentifierType i = identifierType.valueOf(identifier);\n\t\tswitch (i) {\n\t\tcase xpath:\n\t\t\twebElement = driver.findElement(By.xpath(locator));\n\t\t\tbreak;\n\t\tcase id:\n\t\t\twebElement = driver.findElement(By.id(locator));\n\t\t\tbreak;\n\t\tcase name:\n\t\t\twebElement = driver.findElement(By.name(locator));\n\t\t\tbreak;\n\t\tcase lnktext:\n\t\t\twebElement = driver.findElement(By.linkText(locator));\n\t\t\tbreak;\n\t\tcase partiallinktext:\n\t\t\twebElement = driver.findElement(By.partialLinkText(locator));\n\t\t\tbreak;\n\t\tcase classname:\n\t\t\twebElement = driver.findElement(By.className(locator));\n\t\t\tbreak;\n\t\tcase cssselector:\n\t\t\twebElement = driver.findElement(By.cssSelector(locator));\n\t\t\tbreak;\n\t\tcase tagname:\n\t\t\twebElement = driver.findElement(By.tagName(locator));\n\t\t\tbreak;\n\t\tcase androiduiautomator:\n\t\t\twebElement = ((AndroidDriver<WebElement>) driver).findElementByAndroidUIAutomator(locator);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\twriteToLogFile(\"Error\", \"Element not found '\" + locator + \"'\");\n\t\t}\n\t\treturn webElement;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private WebElement findWebElementFrom",
        "method_description": "Searches for a web element within a specified driver element using the provided identifier.",
        "code_implementation": "\tprivate WebElement findWebElementFrom(WebElement driverElement) {\n\t\tWebElement webElement = null;\n\t\tidentifierType i = identifierType.valueOf(identifier);\n\t\tswitch (i) {\n\t\tcase xpath:\n\t\t\twebElement = driverElement.findElement(By.xpath(\".\"+locator));\n\t\t\tbreak;\n\t\tcase id:\n\t\t\twebElement = driverElement.findElement(By.id(locator));\n\t\t\tbreak;\n\t\tcase name:\n\t\t\twebElement = driverElement.findElement(By.name(locator));\n\t\t\tbreak;\n\t\tcase lnktext:\n\t\t\twebElement = driverElement.findElement(By.linkText(locator));\n\t\t\tbreak;\n\t\tcase partiallinktext:\n\t\t\twebElement = driverElement.findElement(By.partialLinkText(locator));\n\t\t\tbreak;\n\t\tcase classname:\n\t\t\twebElement = driverElement.findElement(By.className(locator));\n\t\t\tbreak;\n\t\tcase cssselector:\n\t\t\twebElement = driverElement.findElement(By.cssSelector(locator));\n\t\t\tbreak;\n\t\tcase tagname:\n\t\t\twebElement = driverElement.findElement(By.tagName(locator));\n\t\t\tbreak;       \n\t\tdefault:\n\t\t\twriteToLogFile(\"Error\", \"Element not found '\" + locator     + \"'\");\n\t\t}\n\t\treturn webElement;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private List<WebElement> findWebElementsFrom",
        "method_description": "Finds multiple web elements from a specified driver element using the provided identifier.",
        "code_implementation": "\n\tprivate List<WebElement> findWebElementsFrom(WebElement driverElement) {\n\t\tList<WebElement> webElements = new ArrayList<WebElement>();\n\t\tidentifierType i = identifierType.valueOf(identifier);\n\t\tswitch (i) {\n\t\tcase xpath:\n\t\t\twebElements = driverElement.findElements(By.xpath(\".\"+locator));\n\t\t\tbreak;\n\t\tcase id:\n\t\t\twebElements = driverElement.findElements(By.id(locator));\n\t\t\tbreak;\n\t\tcase name:\n\t\t\twebElements = driverElement.findElements(By.name(locator));\n\t\t\tbreak;\n\t\tcase lnktext:\n\t\t\twebElements = driverElement.findElements(By.linkText(locator));\n\t\t\tbreak;\n\t\tcase partiallinktext:\n\t\t\twebElements = driverElement.findElements(By.partialLinkText(locator));\n\t\t\tbreak;\n\t\tcase classname:\n\t\t\twebElements = driverElement.findElements(By.className(locator));\n\t\t\tbreak;\n\t\tcase cssselector:\n\t\t\twebElements = driverElement.findElements(By.cssSelector(locator));\n\t\t\tbreak;\n\t\tcase tagname:\n\t\t\twebElements = driverElement.findElements(By.tagName(locator));\n\t\t\tbreak;       \n\t\tdefault:\n\t\t\twriteToLogFile(\"Error\", \"Element not found '\" + locator     + \"'\");\n\t\t}\n\t\treturn webElements;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private List<WebElement> findWebElements()",
        "method_description": "Finds multiple web elements in the current driver using the provided identifier.",
        "code_implementation": "\tprivate List<WebElement> findWebElements() {\n\t\tList<WebElement> webElements = new ArrayList<WebElement>();\n\t\tidentifierType i = identifierType.valueOf(identifier);\n\t\tswitch (i) {\n\t\tcase xpath:\n\t\t\twebElements = driver.findElements(By.xpath(locator));\n\t\t\tbreak;\n\t\tcase id:\n\t\t\twebElements = driver.findElements(By.id(locator));\n\t\t\tbreak;\n\t\tcase name:\n\t\t\twebElements = driver.findElements(By.name(locator));\n\t\t\tbreak;\n\t\tcase lnktext:\n\t\t\twebElements = driver.findElements(By.linkText(locator));\n\t\t\tbreak;\n\t\tcase partiallinktext:\n\t\t\twebElements = driver.findElements(By.partialLinkText(locator));\n\t\t\tbreak;\n\t\tcase classname:\n\t\t\twebElements = driver.findElements(By.className(locator));\n\t\t\tbreak;\n\t\tcase cssselector:\n\t\t\twebElements = driver.findElements(By.cssSelector(locator));\n\t\t\tbreak;\n\t\tcase tagname:\n\t\t\twebElements = driver.findElements(By.tagName(locator));\n\t\t\tbreak;       \n\t\tdefault:\n\t\t\twriteToLogFile(\"Error\", \"Element not found '\" + locator     + \"'\");\n\t\t}\n\t\treturn webElements;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitTimeForException",
        "method_description": "Pauses the execution for a specified number of seconds, handling interruptions.",
        "code_implementation": "\tpublic void waitTimeForException(int sec)\n\t{\n\t\ttry{\n\t\t\tThread.sleep(sec*1000);\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"\",e.toString());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForElement(WebElement driverElement, String objectLocator,int timeout)",
        "method_description": "Waits for a specified web element to be present on the page for a given timeout duration. It handles multiple exceptions that may occur while searching for the element.",
        "code_implementation": "\tpublic void waitForElement(WebElement driverElement, String objectLocator,int timeout) \n\t{\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= timeout; i++) {\n\n\t\t\t\ttry {\n\t\t\t\t\tif(driverElement == null){\n\t\t\t\t\t\tfindWebElement(objectLocator);\n\t\t\t\t\t}else {\n\t\t\t\t\t\tfindWebElementFrom(driverElement, objectLocator);\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"\",\n\t\t\t\t\t\t\tlocatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\t\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "void waitForElement(String objectLocator, int timeout)",
        "method_description": "Calls the overloaded waitForElement method with a null driver element, allowing for a simpler call when only the locator and timeout are known.",
        "code_implementation": "\tpublic void waitForElement(String objectLocator, int timeout){\n\t\twaitForElement(null, objectLocator, timeout);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForElement(String objectLocator)",
        "method_description": "Calls the overloaded waitForElement method with a null driver element and the default timeout.",
        "code_implementation": "\tpublic void waitForElement(String objectLocator){\n\t\twaitForElement(null, objectLocator, elementLoadWaitTime);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForElement(WebElement driverElement, String objectLocator)",
        "method_description": "Calls the overloaded waitForElement method with the default timeout while passing the specified driver element.",
        "code_implementation": "\tpublic void waitForElement(WebElement driverElement, String objectLocator){\n\t\twaitForElement(driverElement, objectLocator,elementLoadWaitTime);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public WebElement findWebElement(String objectLocator)",
        "method_description": "Finds a web element using the specified object locator.",
        "code_implementation": "\tpublic WebElement findWebElement(String objectLocator)\n\t{\n\t\tparseidentifyByAndlocator(objectLocator);\n\t\treturn identifyBy (identifier);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public WebElement findWebElementFrom(WebElement driverElement, String objectLocator)",
        "method_description": "Finds a web element relative to a specified driver element using the provided locator.",
        "code_implementation": "\tpublic WebElement findWebElementFrom(WebElement driverElement, String objectLocator)\n\t{\n\t\tparseidentifyByAndlocator(objectLocator);\n\t\treturn findWebElementFrom(driverElement);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public List<WebElement> findWebElementsFrom(WebElement driverElement, String objectLocator)",
        "method_description": "Finds a list of web elements relative to a specified driver element using the provided locator.",
        "code_implementation": "\tpublic List<WebElement> findWebElementsFrom(WebElement driverElement, String objectLocator)\n\t{\n\t\tparseidentifyByAndlocator(objectLocator);\n\t\treturn findWebElementsFrom(driverElement);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public List<WebElement> findWebElements(String objectLocator)",
        "method_description": "Finds a list of web elements using the specified object locator.",
        "code_implementation": "\tpublic List<WebElement> findWebElements(String objectLocator)\n\t{\n\t\tparseidentifyByAndlocator(objectLocator);\n\t\treturn findWebElements();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyElementText(WebElement driverElement, String objectLocator, String expectedText)",
        "method_description": "Verifies that the text of a specified web element matches the expected text, handling various exceptions that may occur.",
        "code_implementation": "\tpublic void verifyElementText(WebElement driverElement, String objectLocator, String expectedText) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tif (driverElement == null) {\n\t\t\t\t\t\twebElement = findWebElement(objectLocator);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twebElement = findWebElementFrom(driverElement, objectLocator);\n\t\t\t\t\t}\n\t\t\t\t\tString actualText = webElement.getText();\n\t\t\t\t\tif (actualText.trim().equalsIgnoreCase(expectedText.trim())) {\n\t\t\t\t\t\ttestStepPassed(\n\t\t\t\t\t\t\t\t\"Verification: \" + locatorDescription + \" element contains text '\" + expectedText + \"'\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Verification: \" + locatorDescription + \" element does not contains text '\"\n\t\t\t\t\t\t\t\t+ expectedText + \"',\" + \"instead following text is displayed '\" + actualText + \"' \");\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element not within \" + elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyElementText(String objectLocator, String expectedText)",
        "method_description": "Calls the overloaded verifyElementText method with a null driver element, allowing for a simpler call when only the locator and expected text are known.",
        "code_implementation": "\n\tpublic void verifyElementText(String objectLocator, String expectedText) {\n\t\tverifyElementText(null, objectLocator, expectedText);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void typeIn(String objectLocator, String inputValue)",
        "method_description": "Types a specified input value into a web element found using the provided locator. It handles multiple exceptions and retries if needed.",
        "code_implementation": "\tpublic void typeIn(String objectLocator, String inputValue) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\n\t\t\t\t\twebElement = findWebElement(objectLocator);\n\t\t\t\t\twebElement.click();\n\t\t\t\t\twebElement.clear();\n\t\t\t\t\twebElement.sendKeys(inputValue);\n\t\t\t\t\ttestStepPassed(\"Type '\" + inputValue + \"' in : \" + locatorDescription);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"\", locatorDescription + \" element not found within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void typeInMaskedData(String objectLocator, String inputValue)",
        "method_description": " Types masked data into a specified web element after decrypting it.\n",
        "code_implementation": "\tpublic void typeInMaskedData(String objectLocator, String inputValue) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\twaitForElementToDisplay(objectLocator, elementLoadWaitTime);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement.click();\n\t\t\t\t\twebElement.clear();\n\t\t\t\t\twebElement.sendKeys(GenerateMaskedData.getDecryptedData(inputValue));\n\t\t\t\t\ttestStepPassed(\"Type decrypted{'\" + inputValue + \"'} value in: \" + locatorDescription);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\tSystem.out.println(\"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (org.openqa.selenium.NoSuchElementException e) {\n\t\t\t\t\tSystem.out.println(\"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\tSystem.out.println(\"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\tSystem.out.println(\"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed( locatorDescription + \" element not found within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void sendkeys(String Locator, String inputValue) ",
        "method_description": "Sends keys to a specified web element.",
        "code_implementation": "\tpublic void sendkeys(String Locator, String inputValue) {\n\n\t\ttry {\n\t\t\tdriver.findElement(By.xpath(Locator)).clear();\n\t\t\tdriver.findElement(By.xpath(Locator)).sendKeys(inputValue);\n\t\t\ttestStepPassed(\"Type '\" + inputValue + \"' in : \" + locatorDescription);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Typing '\" + inputValue + \"' in : \" + locatorDescription);\n\t\t\ttestStepFailed(\"Element is not in editable state '\" + locatorDescription, e.toString());\n\t\t}\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void refreshPage()",
        "method_description": "Refreshes the current page in the browser.Sets timeout, tries to refresh the page, logs the action, and handles exceptions.",
        "code_implementation": "public void refreshPage() {\n\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tdriver.navigate().refresh();\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Sucessfully Refreshed browser\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcatch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\t\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Error on refreshing browser\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clickOnBackButton()",
        "method_description": "Navigates back to the previous page.Similar to refreshPage, but uses the back navigation method.\n",
        "code_implementation": "\tpublic void clickOnBackButton() {\n\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Sucessfully moved to 'Back' page\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\t\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Error on moving to 'Back' page\", \"\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clickOnForwardButton()",
        "method_description": "Navigates forward to the next page.Similar to clickOnBackButton, but uses forward navigation.\n",
        "code_implementation": "\tpublic void clickOnForwardButton() {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tdriver.navigate().forward();\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Sucessfully moved to 'Next' page\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Error on moving to 'Next' page\", \"\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void alertOk()",
        "method_description": "Clicks the OK button on an alert dialog.Waits for an alert and accepts it, logs actions and exceptions.\n",
        "code_implementation": "\tpublic void alertOk() {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\t\t\talert.accept();\n\t\t\t\t\ttestStepPassed(\"Click on Alert OK button\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (NoAlertPresentException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoAlertPresentException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\t\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Click on Alert OK button failed\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void alertCancel()",
        "method_description": "Clicks the Cancel button on an alert dialog.Similar to alertOk, but dismisses the alert.\n",
        "code_implementation": "\tpublic void alertCancel() {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\t\t\talert.dismiss();\n\t\t\t\t\ttestStepPassed(\"Click on Alert Cancel button\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (NoAlertPresentException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoAlertPresentException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Click on Alert Cancel button failed\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getAlertText()",
        "method_description": "Retrieves the text from the currently displayed alert.Attempts to get the alert text and logs the action.",
        "code_implementation": "\tpublic String getAlertText() {\n\t\tString alertText = null;\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\t\t\talertText = alert.getText();\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Alert text [\"+alertText+\"] is retrieved successfully \");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (NoAlertPresentException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoAlertPresentException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Retrieveing Alert text failed\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn alertText;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public boolean isAlertWindowPresent()",
        "method_description": "Checks if an alert window is currently displayed.boolean - true if an alert is present, otherwise false.Tries to switch to an alert; returns based on success or failure.\n",
        "code_implementation": "\tpublic boolean isAlertWindowPresent() {\n\t\ttry {\n\t\t\tdriver.switchTo().alert();\n\t\t\treturn true;\n\t\t}\n\t\tcatch (Exception E) {\n\t\t\treturn false;\n\t\t}\n\t}\t"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyElementIsDisplayed(String objLocator)",
        "method_description": "Verifies if a specified element is displayed on the page.String objLocator: Locator of the element to verify.\nWaits for the element and logs if it is displayed or not.",
        "code_implementation": "\tpublic void verifyElementIsDisplayed(String objLocator) {\n\n\t\twaitForElement(objLocator, elementLoadWaitTime);\n\t\tif (isElementDisplayed(objLocator)) {\n\t\t\ttestStepPassed(locatorDescription + \" is displayed\");\n\t\t} else {\n\t\t\ttestStepFailed(locatorDescription + \" is not displayed\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void mouseOver(String objLocator)",
        "method_description": "Performs a mouse-over action on a specified element.\nString objLocator: Locator of the element.Uses Actions class to perform the mouse-over and logs actions.\n",
        "code_implementation": "\tpublic void mouseOver(String objLocator) {\n\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tbuilder.moveToElement(webElement).build().perform();\n\t\t\t\t\ttestStepPassed(\"Move the mouse over '\" + locatorDescription + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\t\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Mouse over action on '\" + locatorDescription + \"' element failed\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void mouseOver(WebElement driverElement, String objLocator)",
        "method_description": "Performs a mouse-over action on a specified element within a specific context.WebElement driverElement: Context element.\nString objLocator: Locator of the target element.Similar to the previous mouseOver method.",
        "code_implementation": "\tpublic void mouseOver(WebElement driverElement, String objLocator) {\n\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\t\twebElement = findWebElementFrom(driverElement, objLocator);\n\t\t\t\t\tbuilder.moveToElement(webElement).build().perform();\n\t\t\t\t\ttestStepPassed(\"Move the mouse over '\" + locatorDescription + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\t\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Mouse over action on '\" + locatorDescription + \"' element failed\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitTime(long waittime)",
        "method_description": "Purpose: Causes the current thread to sleep for a specified time.. long waittime: Time in seconds to wait.. Logs and implements a sleep with exception handling.",
        "code_implementation": "\tpublic void waitTime(long waittime) {\n\t\twriteToLogFile(\"INFO\", \"Waiting for \" + waittime + \" seconds...\");\n\t\ttry {\n\t\t\tThread.sleep(waittime * 1000);\n\t\t} catch (InterruptedException e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Thread.sleep operation failed, during waitTime function call\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void selectFromDropdown(String objLocator, String valueToSelect)",
        "method_description": "Selects an option from a dropdown based on the visible text.\nString objLocator: Locator of the dropdown element.\nString valueToSelect: Visible text of the option to select.\nUses Select class to select the option and logs actions.\n",
        "code_implementation": "\tpublic void selectFromDropdown(String objLocator, String valueToSelect) {\n\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tSelect select = new Select(webElement);\n\t\t\t\t\tselect.selectByVisibleText(valueToSelect);\n\t\t\t\t\ttestStepPassed(\"Select '\" + valueToSelect + \"' from : \" + locatorDescription);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Could not select '\" + valueToSelect + \"' from \" + locatorDescription + \"dropdown within \"+elementLoadWaitTime+\" seconds\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void selectFromDropdown(String objLocator, int indexNumber) ",
        "method_description": "Selects an option from a dropdown based on its index.\nString objLocator: Locator of the dropdown element.\nint indexNumber: Index of the option to select.\nSimilar to the previous selectFromDropdown method.",
        "code_implementation": "\tpublic void selectFromDropdown(String objLocator, int indexNumber) {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tSelect select = new Select(webElement);\n\t\t\t\t\tselect.selectByIndex(indexNumber);\n\t\t\t\t\ttestStepPassed(\"Select '\" + indexNumber + \"' (index)option from \" + locatorDescription + \"dropdown\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Could not select '\" + indexNumber + \"' (index)option from \" + locatorDescription + \"dropdown within \"+elementLoadWaitTime+\" seconds\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getTextSelectedOption(String objLocator)",
        "method_description": "Retrieves the text of the currently selected option from a dropdown identified by objLocator",
        "code_implementation": "\tpublic String getTextSelectedOption(String objLocator) {\n\n\t\tString selectedText = null;\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tSelect select = new Select(webElement);\n\t\t\t\t\tselectedText = select.getFirstSelectedOption().getText().toString();\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Could not retrieve selected option from \" + locatorDescription + \"dropdown within \"+elementLoadWaitTime+\" seconds\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn selectedText;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyPageTitle(String partialTitle)",
        "method_description": "Verifies that the page title contains the specified partial title.\n",
        "code_implementation": "\tpublic void verifyPageTitle(String partialTitle) {\n\n\t\tString actualPageTitle = getPageTitle();\n\t\tif (actualPageTitle.contains(partialTitle)) {\n\t\t\ttestStepPassed(\"Page title[\" + partialTitle + \"] is displayed as expected\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Page title[\" + partialTitle + \"] is not displayed as expected, instead we get title as [\"\n\t\t\t\t\t+ actualPageTitle + \"]\");\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getPageTitle()",
        "method_description": "Retrieves the current page title.",
        "code_implementation": "\tpublic String getPageTitle() {\n\t\tString pageTitle = null;\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tpageTitle = driver.getTitle();\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Unable to get the page title within \" + elementLoadWaitTime + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn pageTitle;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getAttributeValue(String objLocator, String attributeName)",
        "method_description": " Retrieves the value of a specified attribute from a web element identified by objLocator.",
        "code_implementation": "\tpublic String getAttributeValue(String objLocator, String attributeName) {\n\n\t\tString getAttributeValue = null;\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tgetAttributeValue = webElement.getAttribute(attributeName);\n\t\t\t\t\twriteToLogFile(\"Info\", \"Sucessfully got the attribute value '\" + getAttributeValue + \"' for '\"+locatorDescription+\"' element\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Unable to retrieve value for the attribute[\"+attributeName+\"] from \"+locatorDescription+\" element within \"+elementLoadWaitTime+\" seconds\", \"\");\n\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn getAttributeValue;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyAttribute(String objLocator, String attributeName, String expectedAttributeValue)",
        "method_description": "Verifies that the value of a specified attribute matches an expected value.",
        "code_implementation": "\tpublic void verifyAttribute(String objLocator, String attributeName, String expectedAttributeValue) {\n\t\tString actualAttributeValue = getAttributeValue(objLocator, attributeName);\n\t\tif (actualAttributeValue.equalsIgnoreCase(expectedAttributeValue)) {\n\t\t\ttestStepPassed(\"Attribute Value[\" + expectedAttributeValue + \"] for the Attribute name[\" + attributeName\n\t\t\t\t\t+ \"] is equal as expected for the element \" + locatorDescription + \"\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Attribute Value[\" + expectedAttributeValue + \"] for the Attribute name[\" + attributeName\n\t\t\t\t\t+ \"] is equal as expected for the element \" + locatorDescription\n\t\t\t\t\t+ \", instead we get the following attribute value [\" + actualAttributeValue + \"]\");\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clickAndHold(String objLocator)",
        "method_description": "Performs a click-and-hold action on a web element identified by objLocator.",
        "code_implementation": "\tpublic void clickAndHold(String objLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\t\tbuilder.clickAndHold(webElement).build().perform();\n\t\t\t\t\ttestStepPassed(\"Performing click and hold action on '\" + locatorDescription + \"' element\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Performing click and hold action on '\" + locatorDescription + \"' element failed within \"+elementLoadWaitTime+\" seconds timeout\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clickOn(String objLocator)",
        "method_description": "Clicks on a web element identified by objLocator. Handles different click actions based on the execution environment (iPhone/iPad vs. others).",
        "code_implementation": "\tpublic void clickOn(String objLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tif (currentExecutionMachineName.toLowerCase().contains(\"iphone\")\n\t\t\t\t\t\t\t|| currentExecutionMachineName.toLowerCase().contains(\"ipad\")) {\n\t\t\t\t\t\tActions actions = new Actions(driver);\n\t\t\t\t\t\tactions.moveToElement(webElement);\n\t\t\t\t\t\tactions.click().build().perform();\n\t\t\t\t\t\ttestStepPassed(\"Click on: \" + locatorDescription);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twebElement.click();\n\t\t\t\t\t\ttestStepPassed(\"Click on: \" + locatorDescription);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clickOnSpecialElement(String objectLocator)",
        "method_description": "Clicks on a web element identified by objectLocator using JavaScript for scenarios where standard clicking may fail.\n",
        "code_implementation": "\tpublic void clickOnSpecialElement(String objectLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objectLocator);\n\t\t\t\t\tJavascriptExecutor executor = (JavascriptExecutor) driver;\n\t\t\t\t\texecutor.executeScript(\"arguments[0].click();\", webElement);\n\t\t\t\t\ttestStepPassed(\"Click on: \" + locatorDescription);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void switchToWindow(String pageTitle)",
        "method_description": "Switches the WebDriver's focus to a window with the specified title.",
        "code_implementation": "\tpublic void switchToWindow(String pageTitle) {\n\t\ttry {\n\t\t\tSet<String> windowHandles = driver.getWindowHandles();\n\t\t\tfor (String windowHandle : windowHandles) {\n\t\t\t\tdriver.switchTo().window(windowHandle);\n\t\t\t\twaitTimeForException(2);\n\t\t\t\tString getTitle = getPageTitle();\n\t\t\t\tif (getTitle.contains(pageTitle)) {\n\t\t\t\t\ttestStepPassed(\"Switched to window containing title:\" + pageTitle);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Switch to window :\" + pageTitle, \"\");\n\t\t}\n\t\treturn;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void switchToDefaultFrame()",
        "method_description": "Switches the WebDriver's focus back to the default content from a frame.",
        "code_implementation": "\tpublic void switchToDefaultFrame() {\n\t\ttry {\n\t\t\tdriver.switchTo().defaultContent();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void switchToFrame(String objectLocator)",
        "method_description": "Switches the WebDriver's focus to a specified frame identified by objectLocator.",
        "code_implementation": "\tpublic void switchToFrame(String objectLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objectLocator);\n\t\t\t\t\tdriver.switchTo().frame(webElement);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Switching to frame \" + locatorDescription +\" did not happen within \"+elementLoadWaitTime+\" seconds\", \"\");\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void dragAndDrop(String sourceObjLocator, String destinationObjLocator)",
        "method_description": "Performs a drag-and-drop action from a source element to a destination element identified by their locators.",
        "code_implementation": "\tpublic void dragAndDrop(String sourceObjLocator, String destinationObjLocator) {\n\t\tString sourceDesc = null, destinationDesc = null;\n\t\tWebElement sourceElement = null;\n\t\tWebElement destinationElement = null;\n\t\ttry {\n\t\t\tsourceElement = findWebElement(sourceObjLocator);\n\t\t\tsourceDesc = locatorDescription;\n\t\t\tdestinationElement = findWebElement(destinationObjLocator);\n\t\t\tdestinationDesc = locatorDescription;\n\t\t\t(new Actions(driver)).dragAndDrop(sourceElement, destinationElement).perform();\n\t\t\ttestStepPassed(\"Drag '\" + sourceDesc + \"' and drop on '\" + destinationDesc + \"'\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Drag '\" + sourceDesc + \"' and drop on '\" + destinationDesc + \"' failed\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void clearEditBox(String objLocator)",
        "method_description": "The clearEditBox method is used to locate a web element, typically a text field, based on the provided locator (objLocator). It attempts to clear the text from the element and handles several exceptions related to web elements.",
        "code_implementation": "\tpublic void clearEditBox(String objLocator)\t{\t\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\twebElement.click();\n\t\t\t\t\twebElement.clear();\n\t\t\t\t\twriteToLogFile(\"INFO\", locatorDescription+\" text field is cleared\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"\", locatorDescription + \" element not found within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\t\t  \n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void rightClick(String objLocator)",
        "method_description": "The rightClick method is used to perform a right-click (context click) on a web element identified by the given locator (objLocator). It handles various exceptions and retries if necessary.",
        "code_implementation": "\tpublic void rightClick(String objLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\t\tbuilder.contextClick(webElement).build().perform();\n\t\t\t\t\ttestStepPassed(\"Right Click on '\" + locatorDescription + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public  void doubleClick(String objLocator)",
        "method_description": "The doubleClick method is designed to perform a double-click action on a web element located by the given locator (objLocator). It also includes exception handling for common web element-related issues.",
        "code_implementation": "\tpublic  void doubleClick(String objLocator) {\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\t\tbuilder.doubleClick(webElement).build().perform();\n\t\t\t\t\ttestStepPassed(\"Double Clicked on '\" + locatorDescription + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\t\t\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public boolean isElementPresent(String objectLocator)",
        "method_description": "Checks if an element identified by objectLocator is present on the page. Returns true if present, false otherwise.\n",
        "code_implementation": "\tpublic boolean isElementPresent(String objectLocator) {\n\t\ttry {\n\t\t\tfindWebElement(objectLocator);\n\t\t\treturn true;\n\t\t} catch (NoSuchElementException e) {\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\treturn false;\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getPageSource()",
        "method_description": "Retrieves the source code of the current page, retrying if an exception occurs. Returns the page source as a string.\n",
        "code_implementation": "\tpublic String getPageSource() {\n\t\tString pageSource = null;\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tpageSource = driver.getPageSource();\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(\"Unable to get the page source within \" + elementLoadWaitTime + \" seconds\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn pageSource;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyPageShouldContainText(String expectedText)",
        "method_description": "Verifies that the page source contains the expected text. Logs the result of the verification.",
        "code_implementation": "\n\tpublic void verifyPageShouldContainText(String expectedText) {\n\n\t\tString pageSource = getPageSource();\n\t\tif (pageSource.contains(expectedText)) {\n\t\t\ttestStepPassed(\"Verification: '\" + expectedText + \"' text is present in the page source\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Verification: '\" + expectedText + \"' text is not present in the page source\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyPageShouldNotContainText(String expectedText) ",
        "method_description": "Verifies that the page source does not contain the expected text. Logs the result of the verification.",
        "code_implementation": "\tpublic void verifyPageShouldNotContainText(String expectedText) {\n\n\t\tString pageSource = getPageSource();\n\t\tif (pageSource.contains(expectedText)) {\n\t\t\ttestStepFailed(\"Verification: '\" + expectedText + \"' text is present in the page source\");\n\t\t} else {\n\t\t\ttestStepPassed(\"Verification: '\" + expectedText + \"' text is not present in the page source\");\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyAlertTextShouldContain(String expectedAlertText)",
        "method_description": " Verifies that the alert text contains the expected text. Logs the result of the verification along with the actual alert text.",
        "code_implementation": "\tpublic void verifyAlertTextShouldContain(String expectedAlertText) {\n\n\t\tString actualAlertText = getAlertText();\n\t\twriteToLogFile(\"INFO\", \"Alert Message: \" + actualAlertText);\n\t\tif (actualAlertText.contains(expectedAlertText)) {\n\t\t\ttestStepPassed(\"Verification: '\" + expectedAlertText + \"' text is displayed in alert window\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Verification: '\" + expectedAlertText\n\t\t\t\t\t+ \"' text is not displayed in alert window, instead we get following alert text '\" + actualAlertText\n\t\t\t\t\t+ \"'\");\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyTextFieldShouldContain(String objectLocator, String expectedText, String attributeName)",
        "method_description": "Verifies that a specified text field (identified by objectLocator) contains the expected text in a specific attribute. Logs the result of the verification.\n",
        "code_implementation": "\tpublic void verifyTextFieldShouldContain(String objectLocator, String expectedText, String attributeName) {\n\t\tString actualText = getAttributeValue(objectLocator, attributeName);\n\t\tif (actualText.toLowerCase().contains(expectedText.toLowerCase())) {\n\t\t\ttestStepPassed(\n\t\t\t\t\t\"Verification: [\" + expectedText + \"] text is present in \" + locatorDescription + \" textfield\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Verification: [\" + expectedText + \"] text is present in \" + locatorDescription\n\t\t\t\t\t+ \" textfield, instead we get following text [\" + actualText + \"]\");\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyTextInTextField(String objectLocator, String expectedText)",
        "method_description": "Verifies that the text in a specified text field (identified by objectLocator) matches the expected text. Logs the result of the verification.",
        "code_implementation": "\tpublic void verifyTextInTextField(String objectLocator, String expectedText) {\n\t\tString actualText = getText(objectLocator);\n\t\tif (actualText.equalsIgnoreCase(expectedText)) {\n\t\t\ttestStepPassed(\n\t\t\t\t\t\"Verification: [\" + expectedText + \"] text is present in \" + locatorDescription + \" textfield\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Verification: [\" + expectedText + \"] text is present in \" + locatorDescription\n\t\t\t\t\t+ \" textfield, instead we get following text [\" + actualText + \"]\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String getText(String objLocator)",
        "method_description": "Retrieves the text content from a web element identified by objLocator. It handles various exceptions during retrieval and logs the results.",
        "code_implementation": "\tpublic String getText(String objLocator) {\n\n\t\tString textContents = null;\n\t\ttry{\n\t\t\tdriver.manage().timeouts().implicitlyWait(0,TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\ttextContents = webElement.getText();\n\t\t\t\t\twriteToLogFile(\"Info\", \"Sucessfully got the text '\" + textContents + \"' for \"+locatorDescription);\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Retriving the text for \"+locatorDescription+\" failed. Exception Error: '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element not found or its not in editable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t}finally{\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn textContents;\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void deleteAllCookies()",
        "method_description": "Deletes all cookies in the browser and logs the action. Handles any exceptions that may occur during this process.",
        "code_implementation": "\tpublic void deleteAllCookies() {\n\t\ttry {\n\t\t\tdriver.manage().deleteAllCookies();\n\t\t\twriteToLogFile(\"INFO\", \"Successfully deleted all cookies\");\n\t\t} catch (Exception e) {\n\t\t\twindowreadyStateStatus = false;\n\t\t\ttestStepFailed(\"Exception on deleting All cookies. Error: \" + e.toString());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void maximiseWindow()",
        "method_description": "Maximizes the browser window and logs the action. Catches exceptions that may occur during this process.",
        "code_implementation": "\n\tpublic void maximiseWindow() {\n\n\t\ttry {\n\t\t\tdriver.manage().window().maximize();\n\t\t\twriteToLogFile(\"INFO\", \"Successfully Maximised Browser Window\");\n\t\t} catch (Exception e) {\n\t\t\twindowreadyStateStatus = false;\n\t\t\ttestStepFailed(\"Exception on maximize browser. Error: \" + e.toString());\n\t\t}\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void closeAllBrowser()",
        "method_description": "Closes all open browser windows after deleting all cookies. Logs the actions taken and handles exceptions.",
        "code_implementation": "\tpublic void closeAllBrowser() {\n\t\tdeleteAllCookies();\n\t\ttry {\n\t\t\tSet<String> windowhandles = driver.getWindowHandles();\n\t\t\tfor (String handle : windowhandles) {\n\t\t\t\tdriver.switchTo().window(handle);\n\t\t\t\tdriver.close();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twindowreadyStateStatus = false;\n\t\t\ttestStepFailed(\"Exception on close all browser. Error: \" + e.toString());\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void closeChildBrowser(String windowTitle)",
        "method_description": "Closes a child browser window specified by its title. Logs the result of the action and handles exceptions.\n",
        "code_implementation": "\tpublic void closeChildBrowser(String windowTitle) {\n\t\tswitchToWindow(windowTitle);\n\t\ttry {\n\t\t\tdriver.close();\n\t\t\ttestStepPassed(\"Browser with [\"+windowTitle+\"] window title closed\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception on close child browser. Error: \" + e.toString());\n\t\t}\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForAlertWindow(int timeout) ",
        "method_description": "Waits for an alert window to appear within a specified timeout. Logs a failure message if the alert does not appear in time.",
        "code_implementation": "\tpublic void waitForAlertWindow(int timeout) {\n\t\tfor (int i = 0; i <= timeout; i++) {\n\t\t\tif (isAlertWindowPresent()) {\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\twaitTime(1);\n\t\t\t}\n\t\t\tif (i == timeout) {\n\t\t\t\ttestStepFailed(\"Alert Window is not present within '\" + timeout + \"' timeout\", \"\");\n\t\t\t}\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForAlertWindow()",
        "method_description": "Calls the overloaded waitForAlertWindow method with a default timeout.",
        "code_implementation": "\tpublic void waitForAlertWindow() {\n\t\twaitForAlertWindow(elementLoadWaitTime);\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForChildWindow(String windowTitle, int timeout)",
        "method_description": "Waits for a child window with a specified title to appear within a given timeout. Logs a failure message if the window does not appear in time.",
        "code_implementation": "\tpublic void waitForChildWindow(String windowTitle, int timeout) {\n\t\tfor (int i = 1; i <= timeout; i++) {\n\t\t\tboolean windowStatus = false;\n\t\t\tSet<String> AllHandle = driver.getWindowHandles();\n\t\t\tfor (String han : AllHandle) {\n\t\t\t\tdriver.switchTo().window(han);\n\t\t\t\tString getTitle = driver.getTitle();\n\t\t\t\tif (getTitle.trim().equalsIgnoreCase(windowTitle)) {\n\t\t\t\t\ttestStepPassed(\"Child window with title[\" + windowTitle + \"] is displayed\");\n\t\t\t\t\twindowStatus = true;\n\t\t\t\t\tbreak; // Inner for loop\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (windowStatus) {\n\t\t\t\tbreak; // Outer for loop\n\t\t\t} else {\n\t\t\t\twaitTime(1);\n\t\t\t}\n\t\t\tif (i == timeout) {\n\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\"Child window with title[\" + windowTitle + \"] is not present within '\" + timeout + \"' timeout\");\n\t\t\t}\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForChildWindow(String windowTitle)",
        "method_description": "Waits for a child window with the specified title to appear, using the default timeout value (elementLoadWaitTime).\n",
        "code_implementation": "\tpublic void waitForChildWindow(String windowTitle) {\n\t\twaitForChildWindow(windowTitle, elementLoadWaitTime);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForElementToDisplay(WebElement driverElement, String objectLocator, int timeout)",
        "method_description": "Waits for a specified web element to be displayed within a given timeout. Logs various failure scenarios and resets the implicit wait after execution.",
        "code_implementation": "\tpublic void waitForElementToDisplay(WebElement driverElement, String objectLocator, int timeout) {\n\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= timeout; i++) {\n\t\t\t\ttry {\t\n\t\t\t\t\tif (isElementDisplayed(driverElement,objectLocator)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t}\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\"Invalid Selector Exception occured for locator [\" + locator\n\t\t\t\t\t\t\t+ \"]. Please make sure locator syntax is correct. Error:\" + e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element is not displayed within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t} finally {\n\t\t\t// Re-setting the implicit wait is set for the life of the WebDriver\n\t\t\t// object instance\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\t\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void waitForElementToDisplay(String objectLocator, int timeout)",
        "method_description": "Overloaded method that waits for an element specified by its locator to be displayed within a given timeout. Delegates to the main waitForElementToDisplay method with a null driverElement.",
        "code_implementation": "\tpublic void waitForElementToDisplay(String objectLocator, int timeout){\n\t\twaitForElementToDisplay(null, objectLocator, timeout);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public boolean isElementDisplayed(WebElement driverElement, String objectLocator)",
        "method_description": "Checks if a web element is displayed on the page, either using a provided WebElement or finding it by its locator. Returns true if displayed, otherwise false.",
        "code_implementation": "\tpublic boolean isElementDisplayed(WebElement driverElement, String objectLocator) {\n\t\tif (driverElement == null) {\n\t\t\twebElement = findWebElement(objectLocator);\n\t\t} else {\n\t\t\twebElement = findWebElementFrom(driverElement, objectLocator);\n\t\t}\n\t\tif (webElement.isDisplayed()) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public boolean isElementDisplayed(String objectLocator)",
        "method_description": "Overloaded method that checks if an element identified by its locator is displayed, delegating the check to the primary isElementDisplayed method with a null driverElement.",
        "code_implementation": "\tpublic boolean isElementDisplayed(String objectLocator){\n\t\treturn isElementDisplayed(null,objectLocator);\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void selectCheckBox(String objLocator)",
        "method_description": "Checks a checkbox identified by its locator if it is not already selected. Handles exceptions and logs the action taken.",
        "code_implementation": "\tpublic void selectCheckBox(String objLocator) {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tif (!webElement.isSelected()) {\n\t\t\t\t\t\twebElement.click();\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Checked on the \" + locatorDescription + \" checkbox\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void unSelectCheckBox(String objLocator) ",
        "method_description": "Unchecks a checkbox identified by its locator if it is currently selected. Handles exceptions and logs the action taken.",
        "code_implementation": "\tpublic void unSelectCheckBox(String objLocator) {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tif (webElement.isSelected()) {\n\t\t\t\t\t\twebElement.click();\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"UnChecked on the \" + locatorDescription + \" checkbox\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "\tpublic boolean isCheckBoxSelected(String objLocator)",
        "method_description": "Checks if a checkbox is selected based on its locator, waiting for it to become visible.",
        "code_implementation": "\tpublic boolean isCheckBoxSelected(String objLocator) {\n\t\tboolean status = false;\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);\n\t\t\tfor (int i = 1; i <= elementLoadWaitTime; i++) {\n\t\t\t\ttry {\n\t\t\t\t\twebElement = findWebElement(objLocator);\n\t\t\t\t\tif (webElement.isSelected()) {\n\t\t\t\t\t\tstatus = true;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tstatus = false;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (InvalidSelectorException e) {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Invalid Selector Exception occured. Please make sure locator syntax is correct. Error:\"\n\t\t\t\t\t\t\t\t\t+ e.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"StaleElementReferenceException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (NoSuchElementException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"NoSuchElementException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (ElementNotVisibleException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"ElementNotVisibleException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (UnreachableBrowserException e) {\n\t\t\t\t\ttestStepFailed(\"\", e.toString());\n\t\t\t\t} catch (WebDriverException e) {\n\t\t\t\t\twriteToLogFile(\"Info\", \"WebDriverException occured. Retrying..............\");\n\t\t\t\t\twaitTimeForException(1);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\ttestStepFailed(\"Exception Error '\" + e.toString() + \"'\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (i == elementLoadWaitTime) {\n\t\t\t\t\ttestStepFailed(locatorDescription + \" element found but its not in editable/clickable state within \"\n\t\t\t\t\t\t\t+ elementLoadWaitTime + \" timeouts\", \"\");\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t}\n\t\treturn status;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyCheckBoxIsChecked(String objLocator)",
        "method_description": "Verifies if a checkbox is checked.",
        "code_implementation": "\tpublic void verifyCheckBoxIsChecked(String objLocator) {\n\n\t\tif (isCheckBoxSelected(objLocator)) {\n\t\t\ttestStepPassed(\"Verification: \" + locatorDescription + \" checkbox is checked\");\n\t\t} else {\n\t\t\ttestStepFailed(\"Verification: \" + locatorDescription + \" checkbox is not checked\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void verifyCheckBoxIsUnChecked(String objLocator) ",
        "method_description": "Verifies if a checkbox is checked.\n",
        "code_implementation": "\tpublic void verifyCheckBoxIsUnChecked(String objLocator) {\n\t\tif (isCheckBoxSelected(objLocator)) {\n\t\t\ttestStepFailed(\"Verification: \" + locatorDescription + \" checkbox is checked\");\n\t\t} else {\n\t\t\ttestStepPassed(\"Verification: \" + locatorDescription + \" checkbox is not checked\");\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void parseidentifyByAndlocator(String identifyByAndLocator)",
        "method_description": "The parseidentifyByAndlocator method is used to parse a locator string that is passed in the format description#identifier=locator. The method extracts the description, the identifier (like id, name, etc.), and the locator value, which is then logged and used to identify the web element.",
        "code_implementation": "\tpublic void parseidentifyByAndlocator(String identifyByAndLocator) {\n\n\t\twriteToLogFile(\"INFO\", \"Parsing Locator: \" + identifyByAndLocator);\n\t\ttry {\n\t\t\tlocatorDescription = identifyByAndLocator.substring(0, identifyByAndLocator.indexOf(\"#\"));\n\t\t\tidentifyByAndLocator = identifyByAndLocator.substring(identifyByAndLocator.indexOf(\"#\") + 1);\n\t\t} catch (Exception e) {\n\t\t\tlocatorDescription = \"\";\n\t\t} finally {\n\t\t\tidentifier = identifyByAndLocator.substring(0, identifyByAndLocator.indexOf(\"=\", 0)).toLowerCase();\n\t\t\tlocator = identifyByAndLocator.substring(identifyByAndLocator.indexOf(\"=\", 0) + 1);\n\t\t\twriteToLogFile(\"INFO\", currentExecutionMachineName + \" - Locator Description : \" + locatorDescription);\n\t\t\twriteToLogFile(\"INFO\", currentExecutionMachineName + \" - Identify Type: \" + identifier);\n\t\t\twriteToLogFile(\"INFO\", currentExecutionMachineName + \" - Locator: \" + locator);\t\n\t\t\tGenericKeywords.idType = identifierType.valueOf(identifier);\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void setTimeouts()",
        "method_description": "The setTimeouts method is responsible for setting the various wait times required for web element loading, text loading, page loading, and implicit waiting based on the configuration values.",
        "code_implementation": "\tpublic void setTimeouts() {\n\t\ttestCaseExecutionStatus = false;\n\t\telementLoadWaitTime = Integer.parseInt(getConfigProperty(\"ElementLoadWaitTime\").toString().trim());\n\t\ttextLoadWaitTime = Integer.parseInt(getConfigProperty(\"TextLoadWaitTime\").toString().trim());\n\t\tpageLoadWaitTime = Integer.parseInt(getConfigProperty(\"PageLoadWaitTime\").toString().trim());\n\t\timplicitlyWaitTime = Integer.parseInt(getConfigProperty(\"ImplicitlyWaitTime\").toString().trim());\n\t\twriteToLogFile(\"INFO\", \"Element time out set\");\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "\tpublic void captureScreenShot(String filename)",
        "method_description": "The captureScreenShot method captures a screenshot of the current browser window and saves it to a specified directory. It checks if the WebDriver supports screenshots and handles any exceptions that occur during the process.\n\n",
        "code_implementation": "\tpublic void captureScreenShot(String filename) {\n\t\tFile scrFile = null;\n\t\tString scrPath = GenericKeywords.outputDirectory + \"/Screenshots/\";\n\t\tFile file = new File(scrPath);\n\t\tfile.mkdir();\n\t\tif (driver.getClass().getName().equals(\"org.openqa.selenium.remote.RemoteWebDriver\")) {\n\t\t\tdriver = (RemoteWebDriver) new Augmenter().augment(driver);\n\t\t}\n\t\ttry {\n\t\t\tscrFile = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);\n\t\t\tFileUtils.copyFile(scrFile, new File(scrPath + filename + \".png\"));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"\", \"Capture Screenshot method failed. Error:\" + e.toString());\n\t\t} finally {\n\t\t\tif (scrFile == null) {\n\t\t\t\twriteToLogFile(\"INFO\", \"This WebDriver does not support screenshots\");\n\t\t\t}\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testStepFailed(String userMessage, String execeptionMesage)",
        "method_description": "The testStepFailed method logs and tracks test step failures by recording the failure in reports and taking a screenshot. It handles both user-defined messages and exceptions and decides whether to continue or stop the test execution based on configuration settings.",
        "code_implementation": "\tpublic void testStepFailed(String userMessage, String execeptionMesage) {\n\n\t\tif(currentExecutionMachineName != \"\" && currentTestCaseName != \"\" && currentDataSetName != \"\") {\n\t\t\tif(HtmlReport.totStepsFailedInDataSet.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)) {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName,\n\t\t\t\t\t\tHtmlReport.totStepsFailedInDataSet.get(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)+1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName, 1);\n\t\t\t}\n\t\t}\n\t\tdataSetFailure = true;\n\t\t//testFailure = true;\n\t\tGenericKeywords.failureNo++;\n\n\t\tif (!(userMessage.equalsIgnoreCase(\"\"))) {\n\t\t\ttotValidFailures++;\n\t\t\tfailureTcs.add(currentTestCaseName);\n\t\t\twriteToLogFile(\"Error\", userMessage);\n\t\t}\n\n\t\tif (!(execeptionMesage.equalsIgnoreCase(\"\"))) {\n\t\t\ttotExceptionFailures++;\n\t\t\tfailureTcs.add(currentTestCaseName);\n\t\t\tSystem.out.println(\"^^^^^^^^^^^^^^\" + currentTestCaseName);\n\t\t\tfailureTcsDescription.put(currentTestCaseName, PropertiesFile.tcDescription.get(currentTestCaseName));\n\t\t\twriteToLogFile(\"Error\", execeptionMesage);\n\t\t}\n\n\t\tif (!GenericKeywords.windowreadyStateStatus) {\n\t\t\tscreenShot(\"TestFailure\" + GenericKeywords.failureNo);\n\t\t\tGenericKeywords.windowreadyStateStatus = true;\n\t\t} else {\n\t\t\tcaptureScreenShot(\"TestFailure\" + GenericKeywords.failureNo);\n\t\t}\n\n\t\tif (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"YES\")) {\n\n\t\t\ttestCaseExecutionStatus = true;\n\t\t\tmaxNoFailures++;\n\t\t\telementLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\ttextLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tpageLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\timplicitlyWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tif (maxNoFailures == Integer.parseInt(getConfigProperty(\"MaxNoOfFailurePerTestCase\"))) {\n\t\t\t\ttestCaseExecutionStatus = false;\n\t\t\t\ttestFailed();\n\t\t\t}\n\t\t} else if (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"NO\")) {\n\t\t\ttestFailed();\n\t\t} else {\n\t\t\twriteToLogFile(\"ERROR\", \"Invalid options for ExecuteRemainingStepsOnFailure(Yes/No)\");\n\t\t\ttestFailed();\n\t\t}\n\t\tprintPageLoadTime();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testStepFailed(String userMessage) ",
        "method_description": "Similar to the previous method, this version of testStepFailed handles failures by logging the user message, capturing screenshots, and determining whether to continue or stop the test execution based on the configuration settings. It does not include an exception message parameter.",
        "code_implementation": "\tpublic void testStepFailed(String userMessage) {\n\n\t\tif(currentExecutionMachineName != \"\" && currentTestCaseName != \"\" && currentDataSetName != \"\") {\n\t\t\tif(HtmlReport.totStepsFailedInDataSet.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)) {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName,\n\t\t\t\t\t\tHtmlReport.totStepsFailedInDataSet.get(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)+1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName, 1);\n\t\t\t}\n\t\t}\n\t\tdataSetFailure = true;\n\t\t//testFailure = true;\n\t\tGenericKeywords.failureNo++;\n\t\tString scrPath = \"../../../Screenshots\";\n\n\t\tif (!GenericKeywords.windowreadyStateStatus) {\n\t\t\tscreenShot(\"TestFailure\" + GenericKeywords.failureNo);\n\t\t\tGenericKeywords.windowreadyStateStatus = true;\n\t\t} else {\n\t\t\tcaptureScreenShot(\"TestFailure\" + GenericKeywords.failureNo);\n\t\t}\n\n\t\twriteToLogFile(\"ERROR\", userMessage);\n\t\tXmlReport(\"Fail\", userMessage, currentExecutionMachineName, currentTestCaseName, currentDataSetName,\n\t\t\t\tscrPath + \"/TestFailure\" + GenericKeywords.failureNo);\n\n\t\tif (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"YES\")) {\n\n\t\t\ttestCaseExecutionStatus = true;\n\t\t\tmaxNoFailures++;\n\t\t\telementLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\ttextLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tpageLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\timplicitlyWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tif (maxNoFailures == Integer.parseInt(getConfigProperty(\"MaxNoOfFailurePerTestCase\"))) {\n\t\t\t\ttestCaseExecutionStatus = false;\n\t\t\t\ttestFailed();\n\t\t\t}\n\t\t} else if (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"NO\")) {\n\n\t\t\ttestFailed();\n\t\t} else {\n\t\t\twriteToLogFile(\"ERROR\", \"Invalid options for ExecuteRemainingStepsOnFailure(Yes/No)\");\n\t\t\ttestFailed();\n\t\t}\n\t\tprintPageLoadTime();\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void stepFailed(String report)",
        "method_description": "Handles the failure of a test step, updates the failure count, and determines the execution status based on the configuration.",
        "code_implementation": "\tpublic void stepFailed(String report) {\n\n\t\tif(currentExecutionMachineName != \"\" && currentTestCaseName != \"\" && currentDataSetName != \"\") {\n\t\t\tif(HtmlReport.totStepsFailedInDataSet.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)) {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName,\n\t\t\t\t\t\tHtmlReport.totStepsFailedInDataSet.get(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)+1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tHtmlReport.totStepsFailedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName, 1);\n\t\t\t}\n\t\t}\n\t\t//testFailure = true;\n\t\tdataSetFailure = true;\n\t\tGenericKeywords.failureNo++;\n\n\t\tXmlReport(\"Fail\", report, currentExecutionMachineName, currentTestCaseName, currentDataSetName, null);\n\n\t\tif (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"YES\")) {\n\n\t\t\ttestCaseExecutionStatus = true;\n\t\t\tmaxNoFailures++;\n\t\t\telementLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\ttextLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tpageLoadWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\timplicitlyWaitTime = Integer.parseInt(getConfigProperty(\"OverideTimeoutOnFailure\"));\n\t\t\tif (maxNoFailures == Integer.parseInt(getConfigProperty(\"MaxNoOfFailurePerTestCase\"))) {\n\t\t\t\ttestCaseExecutionStatus = false;\n\t\t\t\ttestFailed();\n\t\t\t}\n\t\t} else if (getConfigProperty(\"ExecuteRemainingStepsOnFailure(Yes/No)\").toUpperCase().contains(\"NO\")) {\n\t\t\ttestFailed();\n\t\t} else {\n\t\t\twriteToLogFile(\"ERROR\", \"Invalid options for ExecuteRemainingStepsOnFailure(Yes/No)\");\n\t\t\ttestFailed();\n\t\t}\n\t\tprintPageLoadTime();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public  void manualScreenshot(String errMessage)",
        "method_description": "Captures a screenshot manually and logs the error message.",
        "code_implementation": "\tpublic  void manualScreenshot(String errMessage)\n\t{\t       \n\t\twriteToLogFile(\"Info\", errMessage);   \n\t\tGenericKeywords.manualScreenshotNo++;\n\t\tString scrPath=\"../../../Screenshots\";  \n\n\t\tif(!GenericKeywords.windowreadyStateStatus)\n\t\t{\n\t\t\tscreenShot(\"Screenshot\"+GenericKeywords.manualScreenshotNo);\n\t\t\tGenericKeywords.windowreadyStateStatus=true;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcaptureScreenShot(\"Screenshot\"+GenericKeywords.manualScreenshotNo);\n\t\t}\n\t\tXmlReport(\"Verify\",errMessage,currentExecutionMachineName,currentTestCaseName, currentDataSetName, scrPath+\"/Screenshot\"+GenericKeywords.manualScreenshotNo);\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testStepPassed(String errMessage)",
        "method_description": "Logs a message for a passed test step and updates the count of passed steps.",
        "code_implementation": "\tpublic void testStepPassed(String errMessage) {\n\t\twriteToLogFile(\"Info\", errMessage);\n\t\tif(currentExecutionMachineName != \"\" && currentTestCaseName != \"\" && currentDataSetName != \"\") {\n\t\t\tif(HtmlReport.totStepsPassedInDataSet.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)) {\n\t\t\t\tHtmlReport.totStepsPassedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName,\n\t\t\t\t\t\tHtmlReport.totStepsPassedInDataSet.get(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName)+1);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tHtmlReport.totStepsPassedInDataSet.put(currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName, 1);\n\t\t\t}\n\t\t}\n\t\tXmlReport(\"Pass\", errMessage, currentExecutionMachineName, currentTestCaseName, currentDataSetName, null);\n\t\tprintPageLoadTime();\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testStepInfo(String errMessage)",
        "method_description": "Logs information about the test step.",
        "code_implementation": "\tpublic void testStepInfo(String errMessage) {\n\t\twriteToLogFile(\"Info\", errMessage);\n\t\tXmlReport(\"Info\", errMessage, currentExecutionMachineName, currentTestCaseName, currentDataSetName, null);\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void testStepLink(String link, String errMessage)",
        "method_description": "Logs a link related to a test step.",
        "code_implementation": "\tpublic void testStepLink(String link, String errMessage) {\n\t\twriteToLogFile(\"INFO\", errMessage);\n\t\tXmlLinkReport(\"Link\", errMessage, currentExecutionMachineName, currentTestCaseName, currentDataSetName, link);\n\t\tprintPageLoadTime();\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void reportStart(String testCaseDescription, String machineName) ",
        "method_description": "Starts the reporting of a test case with a description.",
        "code_implementation": "\tpublic void reportStart(String testCaseDescription, String machineName) {\n\n\t\tGenericKeywords.writeToLogFile(\"INFO\", \"##### Start of Test Case : \" + testCaseDescription + \" #####\");\n\t\tXmlReport(testCaseDescription, currentExecutionMachineName, currentTestCaseName);\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void reportStart() ",
        "method_description": "Starts the reporting of a test case using the current test case name.",
        "code_implementation": "\tpublic void reportStart() {\n\n\t\tString testCaseDescription = PropertiesFile.tcDescription.get(currentTestCaseName);\n\t\tGenericKeywords.writeToLogFile(\"INFO\", \"############# Start of Test Case[\"+currentTestCaseName+\"] : \" + testCaseDescription + \" #############\");\n\t\tXmlReport(testCaseDescription, currentExecutionMachineName, currentTestCaseName);\n\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public String initDataSetReport(int iterationCount)",
        "method_description": "Initializes a dataset report for the current test case.",
        "code_implementation": "\tpublic String initDataSetReport(int iterationCount) {\n\t\tdataSetHashName = currentExecutionMachineName+\"_\"+currentTestCaseName+\"_\"+currentDataSetName;\n\t\twriteToLogFile(\"INFO\", \"Current dataset hash name is: '\"+dataSetHashName+\"'\");\n\t\tHtmlReport.totDataSetExecutedInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, currentDataSetName);\n\t\tHtmlReport.dataSetDurationInTestCase.put(dataSetHashName, System.currentTimeMillis());\n\t\tHtmlReport.totStepsPassedInDataSet.put(dataSetHashName, 0);\n\t\tHtmlReport.totStepsFailedInDataSet.put(dataSetHashName, 0);\n\t\tdataSetFailure = false;\n\t\tXmlDataSetReport(currentExecutionMachineName, currentTestCaseName, currentDataSetName);\n\t\treturn dataSetHashName;\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void updateDataSetReport(int iterationCount)",
        "method_description": "Updates the dataset report for the current test case based on the results.",
        "code_implementation": "\tpublic void updateDataSetReport(int iterationCount) {\n\t\tif(dataSetFailure) {\n\t\t\tHtmlReport.totDataSetFailedInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, currentDataSetName);\n\t\t}\n\t\telse {\n\t\t\tHtmlReport.totDataSetPassedInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, currentDataSetName);\n\t\t}\n\n\n\t\t/*float totalPassPercentage=(((float)totalStepsPassed/totalStepsExecuted)*100);\n\t\tfloat totalFailPercentage=(((float)totalStepsFailed/totalStepsExecuted)*100);\n\n\t\tdouble roundOffPass = Math.round(totalPassPercentage * 100.0) / 100.0;\n\t\tdouble roundOffFail = Math.round(totalFailPercentage * 100.0) / 100.0;\n\n\t\tif(HtmlReport.totPassPercentageInTestCase.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName)) {\n\t\t\tHtmlReport.totPassPercentageInTestCase.replace(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffPass);\n\t\t}\n\t\telse {\n\t\t\tHtmlReport.totPassPercentageInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffPass);\n\t\t}\n\n\t\tif(HtmlReport.totFailPercentageInTestCase.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName)) {\n\t\t\tHtmlReport.totFailPercentageInTestCase.replace(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffFail);\n\t\t}\n\t\telse {\n\t\t\tHtmlReport.totFailPercentageInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffFail);\n\t\t}*/\n\n\t\tint totDataSetPassed = HtmlReport.totDataSetPassedInTestCase.get(currentExecutionMachineName+\"_\"+currentTestCaseName).size();\n\t\tint totDataSetFailed = HtmlReport.totDataSetFailedInTestCase.get(currentExecutionMachineName+\"_\"+currentTestCaseName).size();\n\t\tint totDataSetExecuted = HtmlReport.totDataSetExecutedInTestCase.get(currentExecutionMachineName+\"_\"+currentTestCaseName).size();\n\n\t\tfloat totalPassPercentage=(((float)totDataSetPassed/totDataSetExecuted)*100);\n\t\tfloat totalFailPercentage=(((float)totDataSetFailed/totDataSetExecuted)*100);\n\n\t\tdouble roundOffPass = Math.round(totalPassPercentage * 100.0) / 100.0;\n\t\tdouble roundOffFail = Math.round(totalFailPercentage * 100.0) / 100.0;\n\n\t\tlong dataSetDuration = System.currentTimeMillis() - HtmlReport.dataSetDurationInTestCase.get(dataSetHashName);\n\t\tHtmlReport.dataSetDurationInTestCase.put(dataSetHashName, dataSetDuration);\n\n\t\tif(HtmlReport.totPassPercentageInTestCase.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName)) {\n\t\t\tHtmlReport.totPassPercentageInTestCase.replace(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffPass);\n\t\t}\n\t\telse {\n\t\t\tHtmlReport.totPassPercentageInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffPass);\n\t\t}\n\n\t\tif(HtmlReport.totFailPercentageInTestCase.containsKey(currentExecutionMachineName+\"_\"+currentTestCaseName)) {\n\t\t\tHtmlReport.totFailPercentageInTestCase.replace(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffFail);\n\t\t}\n\t\telse {\n\t\t\tHtmlReport.totFailPercentageInTestCase.put(currentExecutionMachineName+\"_\"+currentTestCaseName, roundOffFail);\n\t\t}\n\n\t\tHtmlReport report = new HtmlReport();\n\t\treport.updateReportVariables(currentExecutionMachineName, \n\t\t\t\tcurrentExecutionOs, currentExecutionOsVersion, \n\t\t\t\tcurrentBrowser, currentExecutionBrowserVersion);\n\t\treport.updateReport();\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public void startTransaction(String transactionName)",
        "method_description": "Starts a transaction for performance measurement.",
        "code_implementation": "\tpublic void startTransaction(String transactionName){\n\t\ttry{\n\t\t\tInstant startTime = Instant.now();\n\t\t\ttransactionStartTime.put(transactionName, startTime);\n\t\t\tLocalDateTime ldt = LocalDateTime.ofInstant(startTime, ZoneId.systemDefault());\n\t\t\tString start = String.format(\"%s %d %d at %d:%d:%d%n\", ldt.getMonth(), ldt.getDayOfMonth(),ldt.getYear(), ldt.getHour(), ldt.getMinute(), ldt.getSecond());\n\t\t\ttestStepInfo(\"New Transaction: '\"+transactionName+\"' is: \"+start);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\twriteToLogFile(\"ERROR\", e.getMessage());\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "\tpublic void endTransaction(String transactionName)",
        "method_description": "Stops a transaction and logs the elapsed time.",
        "code_implementation": "\tpublic void endTransaction(String transactionName){\n\t\ttry{\n\t\t\tInstant endTime = Instant.now();\n\t\t\ttransactionEndTime.put(transactionName, endTime);\n\t\t\tLocalDateTime ldt = LocalDateTime.ofInstant(endTime, ZoneId.systemDefault());\n\t\t\tString end = String.format(\"%s %d %d at %d:%d:%d%n\", ldt.getMonth(), ldt.getDayOfMonth(),ldt.getYear(), ldt.getHour(), ldt.getMinute(), ldt.getSecond());\n\t\t\ttestStepInfo(\"End of transaction: '\"+transactionName+\"' is: \"+end);\n\t\t\tprintTransactionTime(transactionName);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\twriteToLogFile(\"ERROR\", e.getMessage());\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "\tprivate void printTransactionTime(String transactionName)",
        "method_description": "This method calculates and logs the time taken for a particular transaction. It converts the time duration from milliseconds to seconds or minutes depending on the length of the transaction and logs the information.",
        "code_implementation": "\tprivate void printTransactionTime(String transactionName){\n\t\ttry{\n\t\t\tString timeDuration = \"\";\n\t\t\tString timeUnit = \"\";\n\t\t\tDuration timeElapsed = Duration.between(transactionStartTime.get(transactionName), transactionEndTime.get(transactionName));\n\t\t\tdouble timeDecimals = (timeElapsed.toMillis()*1.0)/1000.0;\n\t\t\tif(timeDecimals>60.0) {\n\t\t\t\ttimeDecimals = timeDecimals/60.0;\n\t\t\t\ttimeUnit = \"minutes\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttimeUnit = \"seconds\";\n\t\t\t}\n\t\t\tDecimalFormat formatTimer = new DecimalFormat(\"##.00000\");\n\t\t\ttimeDuration = formatTimer.format(timeDecimals);\n\t\t\ttestStepInfo(\"Total time taken for the transaction '\"+transactionName+\"' is: \"+timeDuration+\" \"+timeUnit);\n\t\t}\n\t\tcatch(Exception e){\n\t\t\twriteToLogFile(\"ERROR\", e.getMessage());\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "\n\tpublic float printPageLoadTime() ",
        "method_description": "This method calculates and logs the total page load time for the current webpage. If applicable, it applies a filter to specific URL resources to recalculate load times.",
        "code_implementation": "\tpublic float printPageLoadTime() {\n\t\ttry {\n\t\t\tif(currentExecutionOs.toUpperCase().equals(\"WINDOWS\") || currentExecutionOs.toUpperCase().equals(\"MAC\") || currentExecutionOs.toUpperCase().equals(\"Linux\")) {\n\t\t\t\tdriver.getCurrentUrl();\n\t\t\t\tfloat pageLoadTimeInMs = pageLoadTime();\n\t\t\t\tif(pageLoadTimeInMs != 0) {\n\t\t\t\t\tfloat pageLoadTimeInSeconds = pageLoadTimeInMs / 1000;\n\t\t\t\t\tif(pageLoadTimeInMs > 1000) {\n\t\t\t\t\t\ttestStepInfo(\"Total load time for current page is: '\"+(pageLoadTimeInSeconds)+\"' seconds\");\n\t\t\t\t\t\ttotalOrFilteredLoadTime = pageLoadTimeInSeconds;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttestStepInfo(\"Total load time for current page is: '\"+(pageLoadTimeInMs)+\"' milli seconds\");\n\t\t\t\t\t\ttotalOrFilteredLoadTime = pageLoadTimeInMs;\n\t\t\t\t\t}\n\t\t\t\t\tfloat timeToFilter = getTimeToFilter();\n\t\t\t\t\tif(timeToFilter != 0){\n\t\t\t\t\t\tfloat filteredTime = pageLoadTimeInMs - timeToFilter;\n\t\t\t\t\t\tpageLoadTimeInSeconds = filteredTime / 1000;\n\t\t\t\t\t\tif(filteredTime < pageLoadTimeInMs) {\n\t\t\t\t\t\t\tif(filteredTime > 1000) {\n\t\t\t\t\t\t\t\ttotalOrFilteredLoadTime = pageLoadTimeInSeconds;\n\t\t\t\t\t\t\t\ttestStepInfo(\"Load time for current page after applying URL resource filter is: '\"+pageLoadTimeInSeconds+\"' seconds\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\ttotalOrFilteredLoadTime = filteredTime;\n\t\t\t\t\t\t\t\ttestStepInfo(\"Load time for current page after applying URL resource filter is: '\"+filteredTime+\"' milli seconds\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn totalOrFilteredLoadTime;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn totalOrFilteredLoadTime;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e) {\n\t\t\twriteToLogFile(\"WARN\", \"Not a chrome/ browser instance to get page load time metrics\");\n\t\t\treturn 0;\n\t\t}\n\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public float getTimeToFilter() ",
        "method_description": "This method filters network resource requests by analyzing the browser's performance logs. It calculates the time taken for specific URL resources that match the filter criteria.",
        "code_implementation": "\tpublic float getTimeToFilter() {\n\t\ttry {\n\t\t\tList<LogEntry> entries = driver.manage().logs().get(LogType.PERFORMANCE).getAll();\n\t\t\tSystem.out.println(entries.size() + \" : \" + LogType.PERFORMANCE + \" log entries found\");\n\t\t\tfloat timeToFilter = 0;\n\n\t\t\tfor (LogEntry entry : entries) {\n\t\t\t\tString logMessage = entry.getMessage();\n\t\t\t\tJSONObject jsonMessage = new JSONObject();\n\t\t\t\tJSONParser parser = new JSONParser();\n\t\t\t\tjsonMessage = (JSONObject) parser.parse(logMessage);\n\t\t\t\tJSONObject responseMessage = (JSONObject) jsonMessage.get(\"message\");\n\t\t\t\tString method = (String) responseMessage.get(\"method\");\n\n\t\t\t\tif (\"Network.responseReceived\".equals(method)) {\n\t\t\t\t\tJSONObject params = (JSONObject) responseMessage.get(\"params\");\n\t\t\t\t\tfloat timestamp = Float.parseFloat(params.get(\"timestamp\").toString());\n\t\t\t\t\tJSONObject response = (JSONObject) params.get(\"response\");\n\t\t\t\t\tString messageUrl = (String) response.get(\"url\");\n\t\t\t\t\tint connectionId = Integer.parseInt(response.get(\"connectionId\").toString());\n\t\t\t\t\tJSONObject timing = (JSONObject) response.get(\"timing\");\n\t\t\t\t\tfloat requestTime = Float.parseFloat(timing.get(\"requestTime\").toString());\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Message URL: '\" + messageUrl);\n\t\t\t\t\tif(resourceURLsToFilter.contains(messageUrl)) {\n\t\t\t\t\t\tif(connectionidPerResponse.containsKey(messageUrl)) {\n\t\t\t\t\t\t\tif(connectionidPerResponse.get(messageUrl) != connectionId) {\n\t\t\t\t\t\t\t\ttimeToFilter = timeToFilter + (timestamp - requestTime);\n\t\t\t\t\t\t\t\twriteToLogFile(\"INFO\", \"Time taken for resource: '\"+messageUrl+\"' is: '\"+requestTime+\"' seconds\");\n\t\t\t\t\t\t\t\tconnectionidPerResponse.replace(messageUrl, connectionId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tconnectionidPerResponse.put(messageUrl, connectionId);\n\t\t\t\t\t\t\ttimeToFilter = timeToFilter + (timestamp - requestTime);\n\t\t\t\t\t\t\twriteToLogFile(\"INFO\", \"Time taken for resource: '\"+messageUrl+\"' is: '\"+requestTime+\"' seconds\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\twriteToLogFile(\"INFO\", \"Time to filter: '\"+timeToFilter+\"' seconds\");\n\t\t\tif(timeToFilter == 0)\n\t\t\t\twriteToLogFile(\"INFO\", \"No matching URL resources found in this search to filter\");\n\t\t\treturn timeToFilter;\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Error in getting time to filter: \" + e.getMessage());\n\t\t\treturn 0;\n\t\t}\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "public long pageLoadTime()",
        "method_description": "This method calculates the time taken for the entire webpage to load from the DOM content being loaded to completion, specifically for Chrome browsers.",
        "code_implementation": "\tpublic long pageLoadTime() {\n\t\ttry {\n\t\t\tif(driver.getCapabilities().getCapability(CapabilityType.BROWSER_NAME).toString().toLowerCase().equals(\"chrome\")) {\n\t\t\t\tlong domContentLoadedEventStart = getDomContentLoadedEventStart();\n\t\t\t\tlong domComplete = getDomComplete();\n\t\t\t\tif(domContentLoadedEventStart != this.domContentLoadedEventStart && domComplete > domContentLoadedEventStart) {\n\t\t\t\t\tthis.domContentLoadedEventStart = domContentLoadedEventStart;\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Total page load time: '\"+(domComplete - domContentLoadedEventStart)+\"' milli seconds\");\n\t\t\t\t\twriteToLogFile(\"INFO\", \"Total page load time: '\"+((domComplete - domContentLoadedEventStart)/1000)+\"' seconds\");\n\t\t\t\t\treturn domComplete - domContentLoadedEventStart;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}catch(Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Error in getting page load wait time: \" + e.getMessage());\n\t\t\treturn 0;\n\t\t}\n\t}"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private long getDomContentLoadedEventStart()",
        "method_description": "This method retrieves the time at which the DOM content has completely loaded for a webpage, using browser performance data.",
        "code_implementation": "\tprivate long getDomContentLoadedEventStart() {\n\t\tJavascriptExecutor js =((JavascriptExecutor) driver); \n\t\tObject val = js.executeScript(\"return window.performance.timing.domContentLoadedEventStart\");\n\t\treturn Long.parseLong(val.toString());\n\t}\n"
    },
    {
        "folder": "automationFramework",
        "class_name": "GenericKeywords.java",
        "method_name": "private long getDomComplete() ",
        "method_description": "This method retrieves the time at which the DOM processing is fully complete for a webpage.",
        "code_implementation": "\tprivate long getDomComplete() {\n\t\tJavascriptExecutor js =((JavascriptExecutor) driver); \n\t\tObject val = js.executeScript(\"return window.performance.timing.domComplete\");\n\t\treturn Long.parseLong(val.toString());\n\t}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "calculateSeal",
        "method_description": "Calculates the seal using MD5 hashing on the concatenation of the encrypted JSON and the public key. - To create a seal value necessary for Bajaj Finserv API methods.",
        "code_implementation": "java<br> public String calculateSeal(String encryptedJSON, String publicKey) {<br> String encryptedJSONPlusKey = encryptedJSON + publicKey;<br> String seal = null;<br> try {<br> MessageDigest digest = MessageDigest.getInstance(\"MD5\");<br> digest.update(encryptedJSONPlusKey.getBytes(), 0, encryptedJSONPlusKey.length());<br> seal = new BigInteger(1, digest.digest()).toString(16);<br> while (seal.length() < 32) { seal = \"0\" + seal; }<br> testStepPassed(\"Seal: \" + seal);<br>}catch (Exception e) {<br> stepFailed(\"Error while getting seal: \" + e.getClass().getName());<br>}<br> return seal;<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "removeTextAfterDelimiterFromEncryptedResponse",
        "method_description": "\")+1);\ntestStepPassed(\"Encrypted response with text removed after ' -  : \" + encryptedResponse);\nreturn encryptedResponse;\n} ```",
        "code_implementation": "```java\npublic String removeTextAfterDelimiterFromEncryptedResponse(String encryptedResponse) {\nencryptedResponse = encryptedResponse.substring(0, encryptedResponse.lastIndexOf(\""
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "decryptResponse",
        "method_description": "Decrypts the encrypted API response using AES decryption with the provided encryption key and initialization vector. - To retrieve the original response from an encrypted format for further processing.",
        "code_implementation": "java<br> public String decryptResponse(String encryptedResponse, String encryptionKey, String initializationVector) {<br> String decryptedResponse = null;<br> try {<br> Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");<br> cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey.getBytes(),\"AES\"), new IvParameterSpec(initializationVector.getBytes()));<br> BASE64Decoder decoder = new BASE64Decoder();<br> decryptedResponse = new String(cipher.doFinal(decoder.decodeBuffer(encryptedResponse)));<br> testStepPassed(\"Decrypted response: \" + decryptedResponse);<br>} catch (Exception e) {<br> stepFailed(\"Error while decrypting: \" + e.getClass().getName());<br>}<br> return decryptedResponse;<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "executeAPIMethod",
        "method_description": "Executes the API method with specified URI, headers, and body, retrying multiple times in case of failure. - To ensure reliable execution of API commands with proper handling of headers and response processing.",
        "code_implementation": "java<br> public Response executeAPIMethod(String apiURI, String apiHeaders, String apiBody) {<br> String [] apiHeadersArray = apiHeaders.split(\"\\\\n\");<br> int numberOfApiHeaders = apiHeadersArray.length;<br> List<Header> headersList = new ArrayList<Header>();<br> for (int i=0; i<numberOfApiHeaders; i++) {<br> String[] individualHeaderArray = apiHeadersArray[i].split(\",\");<br> headersList.add(new Header(individualHeaderArray[0], individualHeaderArray[1]));<br>}<br> for (int i=1; i<=6; i++) {<br> try {<br> response = given().headers(new Headers(headersList)).body(apiBody).relaxedHTTPSValidation().when().post(apiURI);<br> testStepPassed(\"API command executed successfully\");<br> break;<br>} catch (Exception e) {<br> if (i==6) {<br> stepFailed(\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");<br>} else {<br> testStepInfo(\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");<br> waitTime(10);<br> }<br>}<br>}<br> return response;<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "validateResponseCode",
        "method_description": "Validates that the actual response code from the API matches the expected response code. - To ensure that the API responds with the correct status code for validation purposes.",
        "code_implementation": "java<br> public void validateResponseCode(int paramExpectedResponseCode) {<br> int actualResponseCode = response.getStatusCode();<br> if(actualResponseCode == paramExpectedResponseCode) {<br> testStepPassed(\"Response Code:\");<br> testStepPassed(\"Expected: \" + paramExpectedResponseCode);<br> testStepPassed(\"Actual: \" + actualResponseCode);<br>} else {<br> stepFailed(\"Response Code:\");<br> stepFailed(\"Expected: \" + paramExpectedResponseCode);<br> stepFailed(\"Actual: \" + actualResponseCode);<br>}<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "getEncryptedResponse",
        "method_description": "Extracts the encrypted response from the response body, formatting it for further use. - To obtain and prepare the encrypted response for decryption and processing.",
        "code_implementation": "java<br> public String getEncryptedResponse() {<br> String encryptedResponse = response.getBody().asString();<br> encryptedResponse = encryptedResponse.replace(\"/\", \"\");<br> encryptedResponse = encryptedResponse.substring(1,encryptedResponse.length()-1);<br> if (! encryptedResponse.equals(\"\")) {<br> testStepPassed(\"Encrypted response: \" + encryptedResponse);<br>} else {<br> stepFailed(\"No response could be found in the response file\");<br>}<br> return encryptedResponse;<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "getJSONObjectValue",
        "method_description": "Retrieves the value associated with a given key from a JSON object, handling nested keys as well. - To extract specific values from a JSON response for validation or further processing.",
        "code_implementation": "java<br> @Override<br> public String getJSONObjectValue(JSONObject paramResponseObject, String paramKey) {<br> String actualValue = null;<br> try {<br> if (paramKey.contains(\".\")) {<br> String [] expectedKeysArray = paramKey.split(\"\\\\.\");<br> String parentKey = expectedKeysArray[0];<br> String childKey = expectedKeysArray[1];<br> if (paramResponseObject.has(parentKey)) {<br> JSONArray responseArray = getJSONArray(paramResponseObject, parentKey);<br> JSONObject firstResponseObject = responseArray.getJSONObject(0);<br> actualValue = firstResponseObject.getString(childKey);<br>} else {<br> stepFailed(\"Key '\" + parentKey + \"' not present in the response '\" + paramResponseObject.toString() + \"'\");<br>}<br>} else {<br> if (paramResponseObject.has(paramKey)) {<br> actualValue = paramResponseObject.getString(paramKey);<br>} else {<br> stepFailed(\"Key '\" + paramKey + \"' not present in the response '\" + paramResponseObject.toString() + \"'\");<br>}<br>}<br>} catch (Exception e) {<br> stepFailed(\"Exception '\" + e.getClass().getName() + \"' while attempting to get the value of the key '\" + paramKey + \" from the response '\" + paramResponseObject.toString() + \"'\");<br>}<br> return actualValue;<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "validateJSONResponseObject",
        "method_description": "Validates that the actual value of a key in the JSON response matches the expected value. - To ensure data integrity by checking that the API response contains the expected key-value pairs.",
        "code_implementation": "java<br> @Override<br> public void validateJSONResponseObject(JSONObject paramResponseObject, String paramExpectedKeyValuePair) {<br> String [] expectedKeyValueArray = paramExpectedKeyValuePair.split(\":\", 2);<br> String expectedKey = expectedKeyValueArray[0].replace(\"\\\"\", \"\");<br> String expectedValue = expectedKeyValueArray[1].trim();<br> if (expectedValue.equals(\"\\\"\\\"\")) {<br> expectedValue = \"\";<br>} else {<br> expectedValue = expectedValue.replace(\"\\\"\", \"\");<br>}<br> String actualValue = getJSONObjectValue(paramResponseObject, expectedKey);<br> if (actualValue != null) {<br> if (expectedValue.equals(actualValue)) {<br> testStepPassed(\"Response Key: \" + expectedKey);<br> testStepPassed(\"Expected Value: \" + expectedValue);<br> testStepPassed(\"Actual Value: \" + actualValue);<br>} else {<br> stepFailed(\"Response Key: \" + expectedKey);<br> stepFailed(\"Expected Value: \" + expectedValue);<br> stepFailed(\"Actual Value: \" + actualValue);<br>}<br>}<br>}"
    },
    {
        "folder": "iSAFE",
        "class_name": "ApplicationKeywords.java",
        "method_name": "saveOutputResponsesToFile",
        "method_description": " - ",
        "code_implementation": "```java\npublic void saveOutputResponsesToFile(String outputResponsesFileName, String encryptedResponse, String decryptedResponse) {\ntry {\noutputResponsesFileName = outputResponsesFileName"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.ECOM",
        "method_description": "Redirects to the Ecom page.To define constants related to Ecom pages. - To define constants related to Ecom pages.",
        "code_implementation": "public static final String ECOM = \"Ecom\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.REMIECOM",
        "method_description": "Redirects to the Remi Ecom page.To define constants for Remi Ecom pages. - To define constants for Remi Ecom pages.",
        "code_implementation": "public static final String REMIECOM = \"Remi Ecom\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.CD",
        "method_description": "Redirects to the CD page.To define constants related to CD pages. - To define constants related to CD pages.",
        "code_implementation": "public static final String CD = \"CD\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.CLEARTEXT",
        "method_description": "Handles clear text information.To define constants for clear text operations. - To define constants for clear text operations.",
        "code_implementation": "public static final String CLEARTEXT = \"Clear text\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.ENCRYPTEDTEXT",
        "method_description": "Handles encrypted text information.To define constants for encrypted text operations. - To define constants for encrypted text operations.",
        "code_implementation": "public static final String ENCRYPTEDTEXT = \"Encrypted Text\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.DEALERCODE",
        "method_description": "Contains dealer code information.To define constants for dealer code. - To define constants for dealer code.",
        "code_implementation": "public static final String DEALERCODE = \"Dealer Code\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.AMOUNT",
        "method_description": "Handles monetary amount information.To define constants for monetary amounts. - To define constants for monetary amounts.",
        "code_implementation": "public static final String AMOUNT = \"Amount\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.PINCODE",
        "method_description": "Handles pin code information.To define constants for pin code operations. - To define constants for pin code operations.",
        "code_implementation": "public static final String PINCODE = \"PinCode\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.ORDERNUMBER",
        "method_description": "Handles order number information.To define constants for order number tracking. - To define constants for order number tracking.",
        "code_implementation": "public static final String ORDERNUMBER = \"Order Number\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.REQUESTID",
        "method_description": "Handles request identification. - To define constants for request identification.",
        "code_implementation": "public static final String REQUESTID = \"Request ID\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.VALIDATIONKEY",
        "method_description": "Contains validation key for operations. - To define constants for validation key usage.",
        "code_implementation": "public static final String VALIDATIONKEY = \"ValidationKey\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.SCHEMEID",
        "method_description": "Handles scheme identification. - To define constants for scheme identification.",
        "code_implementation": "public static final String SCHEMEID = \"Scheme ID\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.LOANAMOUNT",
        "method_description": "Handles loan amount information. - To define constants for loan amount management.",
        "code_implementation": "public static final String LOANAMOUNT = \"Loan Amount\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.TENURE",
        "method_description": "Handles tenure information. - To define constants for tenure management.",
        "code_implementation": "public static final String TENURE = \"Tenure\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.IDENTIFIER",
        "method_description": "Identifies the user or transaction. - To define constants for user/transaction identification.",
        "code_implementation": "public static final String IDENTIFIER = \"Identifier\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.INVOICEAMT",
        "method_description": "Handles invoice amount information. - To define constants for invoice amount management.",
        "code_implementation": "public static final String INVOICEAMT = \"InvoiceAmt\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.MODELID",
        "method_description": "Handles model identification. - To define constants for model identification.",
        "code_implementation": "public static final String MODELID = \"ModelID\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.SUBMIT",
        "method_description": "Submit operation for forms. - To define constants for form submission.",
        "code_implementation": "public static final String SUBMIT = \"Submit\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "REDIRCTIONPAGE.RESET",
        "method_description": "Reset operation for forms. - To define constants for form reset.",
        "code_implementation": "public static final String RESET = \"Reset\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.RESPONSECODE",
        "method_description": "Handles response code information. - To define constants for response code handling.",
        "code_implementation": "public static final String RESPONSECODE = \"Response Code\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.RESPONSEDESC",
        "method_description": "Handles response description. - To define constants for response description management.",
        "code_implementation": "public static final String RESPONSEDESC = \"Response Description\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.REQUESTID",
        "method_description": "Handles request identification. - To define constants for request ID management.",
        "code_implementation": "public static final String REQUESTID = \"Request ID\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.LOANAMOUNT",
        "method_description": "Handles financed loan amount. - To define constants for loan amount financing.",
        "code_implementation": "public static final String LOANAMOUNT = \"Loan amount financed\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.DEALID",
        "method_description": "Contains deal identification. - To define constants for deal identification.",
        "code_implementation": "public static final String DEALID = \"Deal ID\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "RESPONSEPAGE.RESPONSEDATETIME",
        "method_description": "Records the response date and time. - To define constants for response date/time tracking.",
        "code_implementation": "public static final String RESPONSEDATETIME = \"Response date and time\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OTPRESPONSE.OTPREGISTEREDVALUE",
        "method_description": "Confirms OTP registration. - To define constants for OTP registration.",
        "code_implementation": "public static final String OTPREGISTEREDVALUE = \"OTP has been sent to registered mobile number\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OTPRESPONSE.RESENDOTPREGISTEREDVALUE",
        "method_description": "Resends OTP to registered mobile. - To define constants for resending OTP.",
        "code_implementation": "public static final String RESENDOTPREGISTEREDVALUE = \"OTP has been Re-sent to registered mobile number\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.CARDNUMBER",
        "method_description": "Handles card number input. - To define constants for card number logging.",
        "code_implementation": "public static final String CARDNUMBER = \"txtCardNumberDISP\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.FIRSTNAME",
        "method_description": "Handles first name input. - To define constants for first name logging.",
        "code_implementation": "public static final String FIRSTNAME = \"txtFirstName\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.LASTNAME",
        "method_description": "Handles last name input. - To define constants for last name logging.",
        "code_implementation": "public static final String LASTNAME = \"txtLastName\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.DOB",
        "method_description": "Handles date of birth input. - To define constants for date of birth logging.",
        "code_implementation": "public static final String DOB = \"ContentPlaceHolder1_txtDOB\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.MOBILENUMBER",
        "method_description": "Handles mobile number input. - To define constants for mobile number logging.",
        "code_implementation": "public static final String MOBILENUMBER = \"txtMobileNo\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.CUSTOMERID",
        "method_description": "Handles customer ID input. - To define constants for customer ID logging.",
        "code_implementation": "public static final String CUSTOMERID = \"txtcustomerid\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewCallLogggingPage.ACCOUNTID",
        "method_description": "Handles account ID input. - To define constants for account ID logging.",
        "code_implementation": "public static final String ACCOUNTID = \"txtAccountNo\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewRRNDetailsPage.DealIDORRRN",
        "method_description": "Handles deal ID or RRN. - To define constants for deal ID or RRN logging.",
        "code_implementation": "public static final String DealIDORRRN = \"txtRRNnumber\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewRRNDetailsPage.OrderNumber",
        "method_description": "Handles order number input. - To define constants for order number logging.",
        "code_implementation": "public static final String OrderNumber = \"txtOrderno\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Constants.java",
        "method_name": "OneViewRRNDetailsPage.LanNo",
        "method_description": "Handles LAN number input. - To define constants for LAN number logging.",
        "code_implementation": "public static final String LanNo = \"txtLanno\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "ifm_iFrame",
        "method_description": "Locator for the main iframe element in the application. - Used to identify and interact with the main iframe.",
        "code_implementation": "public static final String ifm_iFrame = \"IFrame#xpath=//iframe[contains(@id,'iframe')]\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "btn_refreshHomePageTab",
        "method_description": "Locator for the refresh button on the homepage tab. - Used to refresh the homepage view.",
        "code_implementation": "public static final String btn_refreshHomePageTab = \"Refresh home page#xpath=//div[@title='Refresh tab']\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "ifm_iFrameOfAddToFavorites",
        "method_description": "Locator for the iframe related to adding items to favorites. - Used for interacting with the favorites functionality.",
        "code_implementation": "public static final String ifm_iFrameOfAddToFavorites = \"IFrame#xpath=//iframe[contains(@id,'floating_iframe')]\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "txt_addToCartResultsMessage",
        "method_description": "Locator for the message displayed after adding an item to the cart. - Used to confirm item addition to the cart.",
        "code_implementation": "public static final String txt_addToCartResultsMessage = \"Add to cart result message#xpath=//td[@id='tdMessageWindowMessage']\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "ifm_supplierWebsite",
        "method_description": "Locator for the iframe of the supplier's website. - Used for embedding and interacting with the supplier site.",
        "code_implementation": "public static final String ifm_supplierWebsite = \"Grainger iFrame #xpath=//iframe[@name='IFrameControl_Supplier_Website']\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "lbl_siteHeaderText",
        "method_description": "Locator for the site header text element. - Used to verify the header of the site.",
        "code_implementation": "public static final String lbl_siteHeaderText = \"Site Header#classname=SiteHeaderText\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "ele_messageWindow",
        "method_description": "Locator for the message window element. - Used to display messages to the user.",
        "code_implementation": "public static final String ele_messageWindow = \"Message window#id=tdMessageWindowMessage\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "img_DisplaylistView",
        "method_description": "Locator for the icon representing list display view. - Used to toggle the view to a list format.",
        "code_implementation": "public static final String img_DisplaylistView = \"Displayed list view icon#xpath=//img[contains(@description,'List Display')]\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "GOR.java (Generic object repositary)",
        "method_name": "img_DisplayThumbnailView",
        "method_description": "Locator for the icon representing thumbnail display view. - Used to toggle the view to a thumbnail format.",
        "code_implementation": "public static final String img_DisplayThumbnailView = \"Displayed list view icon#xpath=//img[contains(@description,'Thumbnail Display')]\";"
    },
    {
        "folder": "iSAFE",
        "class_name": "Test.java",
        "method_name": "main",
        "method_description": "The main method that executes the program. It initializes an array and a number, checks a condition, and prints the result. - To start the program and demonstrate a sample condition check.",
        "code_implementation": "public static void main(String[] args) {...}"
    },
    {
        "folder": "iSAFE",
        "class_name": "Test.java",
        "method_name": "saveSubArrays",
        "method_description": "Recursively saves continuous subarrays of the given array that sum up to a specified number. - To find and save all continuous subarrays of a given array.",
        "code_implementation": "public static void saveSubArrays(int[] arr, int start, int end) {...}"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "TestDriver(BaseClass obj)",
        "method_description": "Constructor for the TestDriver class. - Initializes a new instance of TestDriver with a BaseClass object.",
        "code_implementation": "public TestDriver(BaseClass obj) { super(obj); }"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "main(String[] args)",
        "method_description": "Entry point of the program. - Executes the test suite defined in the testng.xml file and handles reporting and cleanup.",
        "code_implementation": "Contains the main logic for initializing and running the test suites with TestNG, error handling, report zipping, and email notification."
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "startup()",
        "method_description": "Initializes common setup procedures before running tests. - Prepares the environment for test execution.",
        "code_implementation": "Common common = new Common(); common.startup();"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "zipReport()",
        "method_description": "Zips the test report files after execution. - Compresses report files for easier storage and transfer.",
        "code_implementation": "ZipReportFile.zipReport();"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "sendAttachmentMail()",
        "method_description": "Sends an email with the zipped report as an attachment. - Notifies stakeholders with the results of the test execution.",
        "code_implementation": "Mailing.sendAttachmentMail(ZipReportFile.OUTPUT_ZIP_FILE);"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "cleanup()",
        "method_description": "Cleans up resources or resets the environment after execution. - Ensures that any allocated resources are released and the environment is restored.",
        "code_implementation": "cleanup();"
    },
    {
        "folder": "iSAFE",
        "class_name": "TestDrive.java",
        "method_name": "writeToLogFile(String level, String message)",
        "method_description": "Logs error messages and execution status. - Provides insight into the execution process and helps with debugging if issues arise.",
        "code_implementation": "writeToLogFile(\"error\", e.toString()); and writeToLogFile(\"INFO\", \"Script Execution Complete\");"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "Common(BaseClass obj)",
        "method_description": "Constructor to initialize Common class with the provided BaseClass object values. - To set up instance variables from BaseClass for tracking test execution data.",
        "code_implementation": "this.testCaseDataNo=obj.testCaseDataNo; this.testCaseexecutionNo=obj.testCaseexecutionNo; this.testStepNo=obj.testStepNo; ..."
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "Common()",
        "method_description": "A default constructor that allows instantiation of the Common class without parameters. - To provide flexibility in creating Common objects without needing a BaseClass.",
        "code_implementation": "Empty constructor."
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "getConfigProperty(String keyword)",
        "method_description": "Loads a property file and retrieves the value associated with the specified keyword. - To access configuration properties from an external properties file.",
        "code_implementation": "Properties properties=new Properties(); ... properties.load(...); ... return properties.getProperty(keyword).trim();"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "writeToLogFile(String type, String message)",
        "method_description": "Logs messages to the console based on the severity level specified (DEBUG, INFO, WARN, ERROR, FATAL). - To provide a logging mechanism for tracking application events and errors.",
        "code_implementation": "String t=type.toUpperCase(); ..."
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "startup()",
        "method_description": "Initializes the test environment, including creating output directories and reloading properties. - To prepare the test execution environment.",
        "code_implementation": "OutputAndLog.createOutputDirectory(); ..."
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "cleanup()",
        "method_description": "Cleans up temporary files created during test execution and logs cleanup activities. - To free resources and ensure a clean environment for subsequent test runs.",
        "code_implementation": "DeleteTempFiles.delete(); ..."
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "screenShot(String filename)",
        "method_description": "Captures a screenshot of the current screen and saves it to the specified directory. - To provide visual evidence of the test execution state, especially for failures.",
        "code_implementation": "Robot robot = new Robot(); ... ImageIO.write(bufferedImage, \"png\", outputfile);"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "testFailed()",
        "method_description": "Triggers a test failure in the TestNG framework. - To signal that a test case has failed, typically used in assertion checks.",
        "code_implementation": "Assert.fail();"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "useExcelSheet(String pathOfExcel, int sheetNumber)",
        "method_description": "Calls an overloaded method for using an Excel sheet (implementation not provided in the snippet). - To facilitate data-driven testing by reading test data from an Excel sheet.",
        "code_implementation": "useExcelSheet(pathOfExcel, sheetNumber);"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "closeExcelSheet()",
        "method_description": "Calls an overloaded method to close the Excel sheet (implementation not provided in the snippet). - To ensure proper closure of resources used for Excel operations.",
        "code_implementation": "closeExcelSheet();"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "XmlReport(String status, String description, String currentMachineName, String currentTestCaseName, String currentDataSetName, String screenShotName, String link)",
        "method_description": "Generates an XML report for test results based on the status, description, and other parameters provided. - To document the results of test execution in XML format for reporting and analysis.",
        "code_implementation": "XMLReport xmlReport = new XMLReport(); ... xmlReport.createTestStep(...)"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "XmlDataSetReport(String currentMachineName, String currentTestCaseName, String currentDataSetName)",
        "method_description": "Calls XmlReport with specific parameters for reporting dataset-related results. - To generate a dataset-specific report in XML format.",
        "code_implementation": "XmlReport(null, null, currentMachineName, currentTestCaseName, currentDataSetName, null, null);"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "XmlReport(String description, String currentMachineName, String currentTestCaseName)",
        "method_description": "Calls XmlReport for general reporting purposes with a description. - To generate a general report for a specific test case in XML format.",
        "code_implementation": "XmlReport(null, description, currentMachineName, currentTestCaseName, null, null, null);"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "XmlLinkReport(String status, String description, String currentMachineName, String currentTestCaseName, String currentDataSetName, String link)",
        "method_description": "Calls XmlReport to create a report that includes a link to relevant resources. - To provide detailed reporting with links for reference in test case execution.",
        "code_implementation": "XmlReport(status, description, currentMachineName, currentTestCaseName, currentDataSetName, null, link);"
    },
    {
        "folder": "utilities",
        "class_name": "Common.java",
        "method_name": "XmlReport(String status, String description, String currentMachineName, String currentTestCaseName, String currentDataSetName, String screenShotName)",
        "method_description": "Calls XmlReport with status, description, and a screenshot name for reporting purposes. - To create a comprehensive report of the test execution including visual evidence of any failures.",
        "code_implementation": "XmlReport(status, description, currentMachineName, currentTestCaseName, currentDataSetName, screenShotName, null);"
    },
    {
        "folder": "utilities",
        "class_name": "CouchDBKeywords.java",
        "method_name": "createDatabase(String dbName)",
        "method_description": "Creates a CouchDB database session and retrieves or creates the specified database. - To establish a connection to a local CouchDB instance and either create or retrieve a specific database by name.",
        "code_implementation": "dbSession = new Session(\"localhost\", 5984); db = dbSession.createDatabase(dbName); if (db == null) db = dbSession.getDatabase(dbName);"
    },
    {
        "folder": "utilities",
        "class_name": "CouchDBKeywords.java",
        "method_name": "getDocument(String Status)",
        "method_description": "Creates a new document with a unique ID based on the current date and time and assigns the given status. - To generate a new CouchDB document with a unique identifier and a \"Status\" field.",
        "code_implementation": "DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd,HH-mm-ss\"); Date date = new Date(); Document doc = new Document(); doc.setId(dateFormat.format(date)); doc.put(\"Status\", Status);"
    },
    {
        "folder": "utilities",
        "class_name": "CouchDBKeywords.java",
        "method_name": "saveDocument(Document doc)",
        "method_description": "Saves a document to the CouchDB database. - To persist a document into the CouchDB database.",
        "code_implementation": "db.saveDocument(doc);"
    },
    {
        "folder": "utilities",
        "class_name": "CouchDBKeywords.java",
        "method_name": "deleteDocument(String id)",
        "method_description": "Retrieves and deletes a document by its ID from the CouchDB database. - To remove a document from the CouchDB database based on its unique identifier.",
        "code_implementation": "Document d = db.getDocument(id); db.deleteDocument(d);"
    },
    {
        "folder": "utilities",
        "class_name": "CouchDBKeywords.java",
        "method_name": "getTotalDocumentCount()",
        "method_description": "Returns the total number of documents in the CouchDB database. - To retrieve and display the total count of documents stored in the CouchDB database.",
        "code_implementation": "int count = db.getDocumentCount(); System.out.println(\"Total Documents: \" + count);"
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "DataDriver(BaseClass obj)",
        "method_description": "Constructor that sets up data properties by copying them from the given BaseClass object. - To initialize DataDriver with the necessary data values by inheriting them from an existing BaseClass instance.",
        "code_implementation": "Inherits properties from the BaseClass object and initializes variables such as dataRowNo, currentTestCaseName, currentDataSetName, etc."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "DataDriver()",
        "method_description": "Constructor without parameters. - To create an instance of DataDriver without preloaded values.",
        "code_implementation": "Default constructor that initializes a DataDriver object without setting properties."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "useExcelSheet(String wkbook, int dsheet)",
        "method_description": "Loads an Excel sheet to prepare for reading data from it. - To select and open a specific sheet in an Excel workbook for further data processing.",
        "code_implementation": "Opens and loads the specified Excel workbook and sheet, updates row and column count."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "getData(int row, int col)",
        "method_description": "Returns the data located in the specified row and column of the current Excel sheet. - To extract data from a specific cell in the current Excel sheet.",
        "code_implementation": "Retrieves the data from the given row and column from the current Excel sheet."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "loadTestCaseData()",
        "method_description": "Reads the test case names from the Excel sheet and stores them in the testCaseNames list. - To load the test case data from the Excel sheet into memory.",
        "code_implementation": "Loads test case data from the configured Excel file and adds it to a list."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "getTestCaseDataRowNo(String testCaseName)",
        "method_description": "Returns the row number of the given test case name from the loaded test case data. - To identify the row number of a particular test case name in the test data.",
        "code_implementation": "Iterates through the testCaseNames list to find the row number of the specified test case."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "retrieve(String Label)",
        "method_description": "Retrieves data associated with a given label from either a CSV or Excel file. - To get specific test data based on the label from the chosen data source (Excel or CSV).",
        "code_implementation": "Retrieves test data for a specific label from either a CSV or Excel file depending on the execution environment."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "retrieve(int datasetNo, String colLabel)",
        "method_description": "Returns the value from a specific dataset row and column label. - To extract data from a given dataset row and column in the Excel sheet.",
        "code_implementation": "Retrieves data for the given column label from the specified dataset (row)."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "returnColNo(int datasetNo, String colLabel)",
        "method_description": "Returns the column number corresponding to the given label. - To identify the column number of a specified label in the current dataset.",
        "code_implementation": "Finds the column number for the given label by searching through the first row of the specified dataset."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "updateRowCount()",
        "method_description": "Updates the total number of rows in the current Excel sheet. - To calculate and store the total row count of the current Excel sheet.",
        "code_implementation": "Iterates through the rows in the Excel sheet and updates the rowCount variable with the total number of rows."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "updateColCount()",
        "method_description": "Updates the total number of columns in the current Excel sheet. - To calculate and store the total column count of the current Excel sheet.",
        "code_implementation": "Iterates through the columns in the first row and updates the colCount variable with the total number of columns."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "putData(int row, int col, String data)",
        "method_description": "Writes a value to a specific cell in an Excel sheet and saves the workbook. - To modify and save a specific cell in the current Excel sheet with new data.",
        "code_implementation": "Writes data to the specified row and column in the current Excel sheet, creates a new workbook if required, and saves the changes."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "closeExcelSheet()",
        "method_description": "Closes the active Excel workbook and sheet after use. - To safely close the Excel workbook and release resources after data operations are complete.",
        "code_implementation": "Closes the current Excel workbook and sheet."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "iterationCountInTextData()",
        "method_description": "Finds and stores iteration counts based on the \"yes\" flag in the test case data. - To determine how many iterations of a test case should be run based on the data in the Excel sheet.",
        "code_implementation": "Retrieves the row numbers where the \"yes\" flag is set for a test case and stores them in the iterationCount list."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "testDataRowNo(int no)",
        "method_description": "Sets the row number of the test case data. - To manually set the row number for the current test case data.",
        "code_implementation": "Sets the testCaseDataRow variable to the given number."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "retrieveCSV(int dataRowNumber, String label)",
        "method_description": "Returns the value from the specified column and row in the CSV file. - To fetch data from a particular column and row in a CSV file based on the provided label.",
        "code_implementation": "Searches for a specific column label in a loaded CSV file and retrieves the data from the specified row and column."
    },
    {
        "folder": "utilities",
        "class_name": "DataDriver.java",
        "method_name": "readCSVData()",
        "method_description": "Loads CSV data into memory for further retrieval. - To read and store CSV data from a file into the application for test execution.",
        "code_implementation": "Opens and reads all the data from a CSV file and stores it in the csvData list."
    },
    {
        "folder": "utilities",
        "class_name": "DeleteTempFiles.java",
        "method_name": "delete",
        "method_description": "Deletes temporary files and directories generated by the test automation framework (e.g., XML reports, HTML reports, PDF files). - To clean up the output directory by removing temporary files after a test suite is executed. This prevents accumulation of unnecessary data and ensures the system remains clean for future executions.",
        "code_implementation": "This method deletes several temporary files and directories used during test automation execution. It first defines multiple files and directories (related to test outputs like \"testng-results\", \"pdfReport\", etc.), then iterates through these directories, deletes the files, and removes the directories if they are empty."
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "getDecryptedData",
        "method_description": "This method is a public accessor that decrypts a given encrypted value using the decrypt method. It provides a simple interface for decrypting data.",
        "code_implementation": "public static String getDecryptedData(String encryptedValue) { return GenerateMaskedData.decrypt(encryptedValue); }"
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "getEncryptedData",
        "method_description": "Retrieves encrypted data associated with a key from a properties file. If the key exists, it returns the encrypted data; otherwise, it returns null.",
        "code_implementation": "private static String getEncryptedData(String key) { Properties properties = new Properties(); ... return properties.getProperty(key); }"
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "main",
        "method_description": "A simple main method for running the program interactively. It prompts the user for input, encrypts the provided string using the encrypt method, and displays the encrypted value.",
        "code_implementation": "public static void main(String args[]) { Scanner sc = new Scanner(System.in); ... sc.close(); }"
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "addToEncryptedData",
        "method_description": "Adds new encrypted data to a properties file, saving key-value pairs. It ensures that previously stored encrypted data is also maintained. This method supports the persistence of masked data.",
        "code_implementation": "private static void addToEncryptedData(String key, String value) { Properties properties = new Properties(); ... properties.store(new FileOutputStream(\"./src/test/resources/config/encryptedData.properties\"), null); }"
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "encrypt",
        "method_description": "Encrypts a given string using AES with CBC mode and PKCS5 padding. It converts the encrypted data into a Base64 string for easier storage or transmission.",
        "code_implementation": "private static String encrypt(String strToEncrypt) { ... return Base64.getEncoder().encodeToString(cipher.doFinal(strToEncrypt.getBytes(\"UTF-8\"))); }"
    },
    {
        "folder": "utilities",
        "class_name": "GenerateMaskedData.java",
        "method_name": "decrypt",
        "method_description": "Decrypts a given Base64 encoded encrypted string using AES with CBC mode and PKCS5 padding, returning the original value in plain text.",
        "code_implementation": "private static String decrypt(String strToDecrypt) { ... return new String(cipher.doFinal(Base64.getDecoder().decode(strToDecrypt))); }"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "failureReport(String path)",
        "method_description": "Clears the specified file and appends the failure test cases in a table format.",
        "code_implementation": "java\\ntry {\\n PrintWriter writer = new PrintWriter(path);\\n writer.print(\"\");\\n writer.close();\\n BufferedWriter output;\\n output = new BufferedWriter(new FileWriter(path, true));\\n output.write(failureTcs());\\n output.close();\\n} catch(Exception e) {\\n System.out.println(e.toString());\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "failureTcs()",
        "method_description": "Generates an HTML table of failed test cases with links and descriptions.",
        "code_implementation": "java\\nString txt = addCssLink() + \"<table>\";\\nfor (String tc : GenericKeywords.failureTcs) {\\n txt = txt + \"<tr><td><a style='color:red' href='./DefectAnalysis/\" + tc + \".html'>\" + tc + \"</td><td>\" + GenericKeywords.failureTcsDescription.get(tc.trim()) + \"</td></tr>\";\\n}\\nreturn txt + \"</table>\";"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "updateReport()",
        "method_description": "Updates the report by creating various HTML reports based on the machine name found in the cover page results directory.",
        "code_implementation": "java\\nfor (int i = 0; i < GenericKeywords.coverPageResultsDir.size(); i++) {\\n if (GenericKeywords.coverPageResultsDir.get(i).toLowerCase().contains(machine.toLowerCase().replace(\" \", \"\"))) {\\n createCoverPageHtmlReport(GenericKeywords.coverPageResultsDir.get(i));\\n createModuleSummaryReport(GenericKeywords.moduleReportDir.get(i));\\n createSummaryPageHtmlReport(GenericKeywords.summaryPageResultsDir.get(i));\\n createReportPageHtmlReport(GenericKeywords.outputDirectory + \"/Report.html\");\\n }\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "getTestModulePath(String machineName)",
        "method_description": "Returns the path of the test module report associated with the specified machine name.",
        "code_implementation": "java\\nString path = \"\";\\nfor (int i = 0; i < GenericKeywords.coverPageResultsDir.size(); i++) {\\n if (GenericKeywords.moduleReportDir.get(i).toLowerCase().contains(machineName.toLowerCase())) {\\n path = GenericKeywords.moduleReportDir.get(i).replace(GenericKeywords.outputDirectory, \".\");\\n }\\n}\\nreturn path;"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "getTestSuitePath(String machineName)",
        "method_description": "Returns the path of the test suite report associated with the specified machine name.",
        "code_implementation": "java\\nString path = \"\";\\nfor (int i = 0; i < GenericKeywords.coverPageResultsDir.size(); i++) {\\n if (GenericKeywords.summaryPageResultsDir.get(i).toLowerCase().contains(machineName.toLowerCase())) {\\n path = GenericKeywords.summaryPageResultsDir.get(i).replace(GenericKeywords.outputDirectory, \".\");\\n }\\n}\\nreturn path;"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "onTestFailure(ITestResult result)",
        "method_description": "Handles actions to be taken when a test fails, including updating failure counters and generating the report.",
        "code_implementation": "java\\ntotalTCFail++;\\nif (PropertiesFile.lowTc.containsKey(result.getMethod().getMethodName())) {\\n lowTcFailure++;\\n} else if (PropertiesFile.mediumTc.containsKey(result.getMethod().getMethodName())) {\\n mediumTcFailure++;\\n} else if (PropertiesFile.hardTc.containsKey(result.getMethod().getMethodName())) {\\n hardTcFailure++;\\n} else {\\n System.out.println(PropertiesFile.lowTc + \" doesn't contain key name -\" + result.getMethod().getMethodName());\\n}\\ncountModuleMetrics(totFailedInModule, result);\\nupdateReportVariables(result);\\nint percentage = (int) (((double) totalTCFail / totalTC) * 100);\\ntotalFailPercentage = percentage;\\ntcStatus.put(result.getMethod().getMethodName(), \"Fail\");\\nupdateReport();"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "onTestSuccess(ITestResult result)",
        "method_description": "Handles actions to be taken when a test succeeds, updating counters and generating the report.",
        "code_implementation": "java\\ntotalTCSuccess++;\\ncountModuleMetrics(totPassedInModule, result);\\nupdateReportVariables(result);\\nint percentage = (int) (((double) totalTCSuccess / totalTC) * 100);\\ntotalPassPercentage = percentage;\\ntcStatus.put(result.getMethod().getMethodName(), \"Pass\");\\nupdateReport();"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "onTestSkipped(ITestResult result)",
        "method_description": "Handles actions to be taken when a test is skipped, updating counters and generating the report.",
        "code_implementation": "java\\ntotalTCSkip++;\\ncountModuleMetrics(totSkippedInModule, result);\\nupdateReportVariables(result);\\nint percentage = (int) (((double) totalTCSkip / totalTC) * 100);\\ntotalSkipPercentage = percentage;\\ntcStatus.put(result.getMethod().getMethodName(), \"Skip\");\\nupdateReport();"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "updateReportVariables(ITestResult result)",
        "method_description": "Updates report variables based on the test results, including calculating durations and storing machine details.",
        "code_implementation": "java\\nlong time = result.getEndMillis() - result.getStartMillis();\\ntcDuration.put(result.getMethod().getMethodName(), getDuration(time).replace(\"00hrs:\", \"\").replace(\"00mins:\", \"\"));\\nsaveModuleDuration(result.getMethod().getMethodName(), time);\\ntotalDurationInMillis = totalDurationInMillis + time;\\nif (totalDurationInMillis > totalGridDuration) {\\n totalGridDuration = totalDurationInMillis;\\n}\\ntotalDuration = getDuration(totalDurationInMillis).replace(\"00hrs:\", \"\").replace(\"00mins:\", \"\");\\nmachine = result.getTestClass().getXmlTest().getParameter(\"selenium.machinename\");\\nos = result.getTestClass().getXmlTest().getParameter(\"selenium.os\");\\nosVersion = result.getTestClass().getXmlTest().getParameter(\"selenium.osVersion\");\\nbrowserVersion = result.getTestClass().getXmlTest().getParameter(\"selenium.browserVersion\");\\nbrowser = result.getTestClass().getXmlTest().getParameter(\"selenium.browser\");\\noperatingSytsem.put(machine, os);\\noperatingSytsemVersion.put(machine, osVersion);\\nbrowserName.put(machine, browser);\\nbrowserVersionName.put(machine, browserVersion);\\ntotalTC = PropertiesFile.testCaseWRT_Os.get(machine).size();\\ntotExecutedInOs.put(machine, \"\" + PropertiesFile.testCaseWRT_Os.get(machine).size());\\ntotPassedInOS.put(machine, \"\" + totalTCSuccess);\\ntotFailedInOS.put(machine, \"\" + totalTCFail);\\ntotSkippedInOS.put(machine, \"\" + totalTCSkip);\\ntotDurationInOS.put(machine, totalDuration);\\nbuildNo = PropertiesFile.getConfigProperty(\"Version_Name\");\\nprojectName = PropertiesFile.getConfigProperty(\"Project_Name\");\\nCommon.writeToLogFile(\"INFO\", \"Updating report variables os: '\" + os + \"' and machine name: '\" + machine + \"' from TestNG Results\");"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "updateReportVariables(String machineName, String os, String osVersion, String browser, String browserVersion)",
        "method_description": "Updates report variables manually for machine and browser details, logging the changes.",
        "code_implementation": "java\\nmachine = machineName;\\nthis.os = os;\\nthis.osVersion = osVersion;\\nbrowserVersion = browserVersion;\\nbrowser = browser;\\nCommon.writeToLogFile(\"INFO\", \"Updating report variables os: '\" + os + \"' and machine name: '\" + machineName + \"' from manual call\");\\noperatingSytsem.put(machine, os);\\noperatingSytsemVersion.put(machine, osVersion);\\nbrowserName.put(machine, browser);\\nbrowserVersionName.put(machine, browserVersion);\\nbuildNo = PropertiesFile.getConfigProperty(\"Version_Name\");\\nprojectName = PropertiesFile.getConfigProperty(\"Project_Name\");"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "countModuleMetrics(Multimap<String, String> moduleMetrics, ITestResult result)",
        "method_description": "Counts metrics for modules based on the test result, updating the provided module metrics structure.",
        "code_implementation": "java\\nSet<String> moduleNames = PropertiesFile.moduleWiseTestCase.keySet();\\nString testCase = result.getMethod().getMethodName();\\nfor (String moduleName : moduleNames) {\\n if (PropertiesFile.moduleWiseTestCase.get(moduleName).contains(testCase)) {\\n if (!moduleMetrics.get(moduleName).contains(testCase))\\n moduleMetrics.put(moduleName, testCase);\\n }\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "saveModuleDuration(String testCase, long duration)",
        "method_description": "Saves the duration of a test case to the corresponding module metrics.",
        "code_implementation": "java\\nSet<String> moduleNames = PropertiesFile.moduleWiseTestCase.keySet();\\nfor (String moduleName : moduleNames) {\\n if (PropertiesFile.moduleWiseTestCase.get(moduleName).contains(testCase)) {\\n moduleDuration.put(moduleName, duration);\\n }\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "getDuration(long millis)",
        "method_description": null,
        "code_implementation": "```java\\nString hms = \"\";\\ntry {\\nhms = String.format(\"%02dhrs:%02dmins:%02dsecs\", TimeUnit.MILLISECONDS.toHours(millis), TimeUnit.MILLISECONDS.toMinutes"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "createCssFile(String path)",
        "method_description": "Creates a CSS file based on the specified style in the properties file. It defines styles for the body, headings, and table elements according to the selected style, providing visual structure to the HTML report.",
        "code_implementation": "java\\nString css=\"\";\\ntry {\\n String style=PropertiesFile.getConfigProperty(\"CssStyle\").toLowerCase();\\n if(style.toLowerCase().contains(\"style1\")) {\\n backgroudColour=\"lightblue\";\\n css=\"body { background-color: lightblue;}h1 { color: navy; margin-left: 20px;}\";\\n }\\n else if(style.toLowerCase().contains(\"style2\")) {\\n backgroudColour=\"linen\";\\n css=\"body { background-color: linen;}h1 { color: maroon; margin-left: 40px;}\";\\n }\\n else if(style.toLowerCase().contains(\"style3\")) {\\n backgroudColour=\"#e5e5e5\";\\n css=\"body {background-color:#e5e5e5; }h1 { color: maroon; margin-left: 40px;}th { background-color: #4CAF50; color: white;}a:link { color: black;}a:visited { color: blue;}a:hover { color: green;}a:active { color: blue;}tr:hover{background-color:gray}th { background-color: #8A4117; color: white;}tr{background-color: #E2A76F;}\";\\n }\\n else {\\n System.out.println(style+\" Invalid style selected in tset configuration sheet\");\\n }\\n} catch(Exception e) {\\n System.out.println(e.toString());\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "getMapFromJsonString(String jsonString)",
        "method_description": "Parses a JSON string into a map and logs the resulting map for debugging purposes. This method facilitates the handling of JSON data within the report system.",
        "code_implementation": "java\\nMap<String, Object> jsonMap = (Map<String, Object>) JSONValue.parse(jsonString);\\nSystem.out.println(\"Json Map: \" + jsonMap);\\nreturn jsonMap;\\n"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "onExecutionFinish()",
        "method_description": "Finalizes the test execution report by optionally storing results in CouchDB and generating the final HTML report for each machine. It aggregates execution data and logs it into the database for persistence and later retrieval.",
        "code_implementation": "java\\nfor(String machineName : PropertiesFile.machineNames) {\\n if (HtmlReport.operatingSytsem.containsKey(machineName)) {\\n if (GenericKeywords.getConfigProperty(\"StoreResultsInCouchDB\").toLowerCase().contains(\"yes\")) {\\n String dbName = \"executionstatus\";\\n CouchDBKeywords.createDatabase(dbName);\\n CouchDBKeywords.saveDocument(CouchDBKeywords.getDocument(\"{'\"+machineName.replace(\" \", \"\")+\"':'Total\"+HtmlReport.totExecutedInOs.get(machineName)+\",Passed\"+HtmlReport.totPassedInOS.get(machineName)+\",Failed\"+HtmlReport.totFailedInOS.get(machineName)+\",Skipped\"+HtmlReport.totSkippedInOS.get(machineName)+\"'}\"));\\n couchDBDocRows=couchDBDocRows+1;\\n }\\n createReportPageHtmlReport(GenericKeywords.outputDirectory+\"/Report.html\");\\n }\\n}"
    },
    {
        "folder": "utilities",
        "class_name": "HtmlReport.java",
        "method_name": "onExecutionStart()",
        "method_description": "Placeholder method for actions to be taken at the start of the execution. Currently unimplemented.",
        "code_implementation": "java\\n// TODO Auto-generated method stub\\n"
    },
    {
        "folder": "utilities",
        "class_name": "Mailing.java",
        "method_name": "sendMail(String fileName)",
        "method_description": "Sends an email with a specified subject and body, including an optional file attachment. This method retrieves email configuration from the GenericKeywords class and utilizes the JavaMail API to facilitate the email sending process.",
        "code_implementation": "java\\nProperties props = new Properties();\\nprops.put(\"mail.smtp.auth\", \"true\");\\nprops.put(\"mail.smtp.starttls.enable\", \"true\");\\nprops.put(\"mail.smtp.host\", \"zsmtp.hybridzimbra.com\");\\nprops.put(\"mail.smtp.port\", \"25\");\\nString[] to;\\nString[] cc;\\n\\nuserName = GenericKeywords.getConfigProperty(\"SenderMailId\");\\npassWord = GenericKeywords.getConfigProperty(\"SenderPassword\");\\nfrom = userName;\\nmailSubject = \"Execution Report for \"+GenericKeywords.getConfigProperty(\"SuiteName\");\\nmailBody = GenericKeywords.getConfigProperty(\"MailBody\");\\nto = GenericKeywords.getConfigProperty(\"to\").split(\";\");\\ncc = GenericKeywords.getConfigProperty(\"cc\").split(\";\");\\n\\nSession session = Session.getInstance(props, new javax.mail.Authenticator() {\\nprotected PasswordAuthentication getPasswordAuthentication() {\\nreturn new PasswordAuthentication(userName, passWord);\\n}\\n});\\n\\ntry {\\nMessage message = new MimeMessage(session);\\nmessage.setFrom(new InternetAddress(from));\\n\\nfor (int i = 0; i < to.length; i++) {\\nmessage.addRecipient(Message.RecipientType.TO, new InternetAddress(to[i]));\\n}\\n\\nfor (int i = 0; i < cc.length; i++) {\\nmessage.addRecipient(Message.RecipientType.CC, new InternetAddress(cc[i]));\\n}\\n\\nmessage.setSubject(mailSubject);\\n\\nBodyPart messageBodyPart = new MimeBodyPart();\\nmessageBodyPart.setContent(mailBody,\"text/html; charset=utf-8\");\\n\\nMultipart multipart = new MimeMultipart();\\nmultipart.addBodyPart(messageBodyPart);\\n\\nmessageBodyPart = new MimeBodyPart();\\nDataSource source = new FileDataSource(fileName);\\nmessageBodyPart.setDataHandler(new DataHandler(source));\\nmessageBodyPart.setFileName(fileName);\\nmultipart.addBodyPart(messageBodyPart);\\n\\nmessage.setContent(multipart);\\nTransport.send(message);\\n} catch (MessagingException e) {\\ne.printStackTrace();\\n}catch (Exception e) {\\ne.printStackTrace();\\n}\\n"
    },
    {
        "folder": "utilities",
        "class_name": "Mailing.java",
        "method_name": "sendAttachmentMail(String fileName)",
        "method_description": "Sends an email with attachments and a formatted HTML body. This method logs recipient addresses and checks for the existence of the attachment file, providing additional functionality for error handling and logging during the email sending process.",
        "code_implementation": "java\\nString smtpHost = GenericKeywords.getConfigProperty(\"Smtp HostName\");\\nString smtpPort = GenericKeywords.getConfigProperty(\"Smtp Port\");\\nProperties props = new Properties();\\nprops.put(\"mail.smtp.auth\", \"true\");\\nprops.put(\"mail.smtp.starttls.enable\", \"true\");\\nprops.put(\"mail.smtp.host\", smtpHost);\\nprops.put(\"mail.smtp.port\", smtpPort);\\nString[] to;\\nString[] cc;\\n\\nuserName = GenericKeywords.getConfigProperty(\"SenderMailId\");\\npassWord = GenericKeywords.getConfigProperty(\"SenderPassword\");\\nfrom = userName;\\nmailSubject = \"Execution Report for \"+GenericKeywords.getConfigProperty(\"SuiteName\");\\nmailBody = \"<p>Hi Team,</p><br>\"+GenericKeywords.getConfigProperty(\"MailBody\")+\"<br>\"+HtmlReport.emailexecutionStatus+\"<br><p>Thanks</p><br>\";\\nto = GenericKeywords.getConfigProperty(\"to\").split(\";\");\\ncc = GenericKeywords.getConfigProperty(\"cc\").split(\";\");\\n\\nSession session = Session.getInstance(props, new javax.mail.Authenticator() {\\nprotected PasswordAuthentication getPasswordAuthentication() {\\nreturn new PasswordAuthentication(userName, passWord);\\n}\\n});\\n\\ntry {\\nMessage message = new MimeMessage(session);\\n\\nmessage.setFrom(new InternetAddress(from));\\n\\nfor (int i = 0; i < to.length; i++) {\\nGenericKeywords.writeToLogFile(\"INFO\", \"Email ID [to]: \"+to[i]);\\nmessage.addRecipient(Message.RecipientType.TO, new InternetAddress(to[i]));\\n}\\n\\nfor (int i = 0; i < cc.length; i++) {\\nGenericKeywords.writeToLogFile(\"INFO\", \"Email ID [cc]: \"+cc[i]);\\nmessage.addRecipient(Message.RecipientType.CC, new InternetAddress(cc[i]));\\n}\\n\\nmessage.setSubject(mailSubject);\\n\\nBodyPart messageBodyPart = new MimeBodyPart();\\nmessageBodyPart.setContent(mailBody,\"text/html; charset=utf-8\");\\n\\nMultipart multipart = new MimeMultipart();\\nmultipart.addBodyPart(messageBodyPart);\\n\\nmessageBodyPart = new MimeBodyPart();\\nFile file = new File(fileName);\\nif(!file.exists())\\n{\\nGenericKeywords.writeToLogFile(\"ERROR\", \"File does not exist for attachment\");\\nreturn;\\n}\\n\\nDataSource source = new FileDataSource(fileName);\\nmessageBodyPart.setDataHandler(new DataHandler(source));\\nmessageBodyPart.setFileName(file.getName());\\nmultipart.addBodyPart(messageBodyPart);\\n\\nmessage.setContent(multipart);\\nTransport.send(message);\\n} catch (MessagingException e) {\\nGenericKeywords.writeToLogFile(\"INFO\", \"Exception: \"+e.toString());\\ne.printStackTrace();\\n}catch (Exception e) {\\nGenericKeywords.writeToLogFile(\"INFO\", \"Exception: \"+e.toString());\\n}\\n"
    },
    {
        "folder": "utilities",
        "class_name": "OutputAndLog.java",
        "method_name": "createOutputDirectory()",
        "method_description": "Creates a timestamped output directory for test results. It constructs the directory path based on the current date and time, stores it in GenericKeywords.outputDirectory, and calls createLogFile() to initialize logging.",
        "code_implementation": "java\\nFile curdir = new File(\".\");\\nCalendar calendar = new GregorianCalendar();\\nhr=(\"0\"+calendar.get(Calendar.HOUR));\\nhr=hr.substring(hr.length()-2);\\nmin=(\"0\"+calendar.get(Calendar.MINUTE));\\nmin=min.substring(min.length()-2);\\nsec=(\"0\"+calendar.get(Calendar.SECOND));\\nsec=sec.substring(sec.length()-2);\\nyr=\"\"+calendar.get(Calendar.YEAR);\\nmon=(\"0\"+(calendar.get(Calendar.MONTH)+1));\\nmon=mon.substring(mon.length()-2);\\nday=(\"0\"+calendar.get(Calendar.DAY_OF_MONTH));\\nday=day.substring(day.length()-2);\\nif(calendar.get(Calendar.AM_PM) == 0)\\n\\tam_pm = \"AM\";\\nelse\\n\\tam_pm = \"PM\";\\nGenericKeywords.timeStamp=yr +\"_\"+ mon+\"_\" +day+\"_\"+hr+\"_\"+min+\"_\"+sec+\"_\"+am_pm;\\ntry {\\n\\tGenericKeywords.outputDirectory = curdir.getCanonicalPath()+ \"/TestResults/\" + yr +\"_\"+ mon+\"_\" +day+\"_\"+hr+\"_\"+min+\"_\"+sec+\"_\"+am_pm;\\n} catch (IOException e) {\\n\\tSystem.out.println(\"IO Error while creating Output Directory : \"+GenericKeywords.outputDirectory);\\n}\\ncreateLogFile();\\n"
    },
    {
        "folder": "utilities",
        "class_name": "OutputAndLog.java",
        "method_name": "createLogFile()",
        "method_description": "Initializes the logging mechanism. It writes an informational message indicating the successful creation of the output directory but contains commented-out code intended for setting up the logging configuration, which is currently inactive.",
        "code_implementation": "java\\nProperties props = new Properties();\\nString propsFileName = \"./Config/log4j.properties\";\\ntry {\\n\\tGenericKeywords.writeToLogFile(\"INFO\", \"Test Output Directory creation successful :\"+GenericKeywords.outputDirectory);\\n} catch (Exception ex) {\\n\\tSystem.err.println(\"There was an error creating the log file\");\\n}\\n"
    },
    {
        "folder": "utilities",
        "class_name": "PropertiesFile.java",
        "method_name": "reloadProperties",
        "method_description": "Reloads the properties from an Excel file into a .properties file. It reads the configurations and stores them, logging an error if it fails.",
        "code_implementation": "java<br>Properties prop = new Properties();<br>try {<br> DataDriver dd = new DataDriver();<br> dd.useExcelSheet(\"./data/TestConfiguration.xls\", 1);<br> Sheet readsheet = dd.w.getSheet(0);<br> for (int i = 1; i < readsheet.getRows(); i++) {<br> String Keyword = readsheet.getCell(1, i).getContents();<br> String value = readsheet.getCell(2, i).getContents();<br> prop.setProperty(Keyword, value);<br> }<br> prop.store(new FileOutputStream(\"./Config/TestConfiguration.properties\"), null);<br> dd.w.close();<br>} catch(Exception e) {<br> writeToLogFile(\"ERROR\", \"Unable to refresh test configuration properties\");<br> }"
    },
    {
        "folder": "utilities",
        "class_name": "PropertiesFile.java",
        "method_name": "properties",
        "method_description": "Configures the test properties by reading from an Excel sheet and prepares an XML file (testng.xml) for TestNG configurations. It sets up machine instances, their properties, and creates the XML structure for test execution.",
        "code_implementation": "java<br>int noBrowser=0;<br>HashMap<String, List<String>> instancesName = new HashMap<>();<br>// various HashMaps for storing configurations<br>...<br>try {<br> DataDriver dd = new DataDriver();<br> ...<br> DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();<br> ...<br> TransformerFactory tff = TransformerFactory.newInstance();<br> transformer.transform(xmlSource, outputTarget);<br> dd.w.close();<br>} catch (Exception e) {<br> e.printStackTrace();<br> }"
    },
    {
        "folder": "utilities",
        "class_name": "PropertiesFile.java",
        "method_name": "dependentTestCasesProperties",
        "method_description": "Configures and generates properties for dependent test cases in a Selenium Grid setup. It reads test configurations from an Excel file, sets machine parameters, and creates a testng.xml file for TestNG execution, ensuring that the number of browsers meets the configured maximum instances.",
        "code_implementation": "java<br>public static void dependentTestCasesProperties() {<br> Properties prop = new Properties();<br> int noBrowser = 0;<br> List<String> machineName = new ArrayList<String>(noBrowser);<br> ...<br> for (int brow = 1; brow <= noBrowser; brow++) {<br> String idS = \"\" + id++;<br> Element test = doc.createElement(\"test\");<br> test.setAttribute(\"name\", machineName.get(brow - 1).toString());<br> ...<br> transformer.transform(xmlSource, outputTarget);<br> dd.w.close();<br>} catch (Exception e) {<br> e.printStackTrace();<br> }"
    },
    {
        "folder": "utilities",
        "class_name": "TransferFiles.java",
        "method_name": "transferLogo",
        "method_description": "This method copies the company and client logo files from a source directory to a designated output directory, creating the necessary folders and handling potential exceptions.",
        "code_implementation": "try {     for(int i=0;i<GenericKeywords.hostName.size();i++) {         (new File(GenericKeywords.outputDirectory+\"/Logos/\")).mkdir();         File sourcecompanyLogo = new File(\"./\"+Common.getConfigProperty(\"indium_logo_path\"));         File sourceclientLogo = new File(\"./\"+Common.getConfigProperty(\"client_logo_path\"));         File designationcompanyLogo = new File(GenericKeywords.outputDirectory+\"/\"+Common.getConfigProperty(\"indium_logo_path\"));         File designationclientLogo = new File(GenericKeywords.outputDirectory+\"/\"+Common.getConfigProperty(\"client_logo_path\"));         InputStream in = new FileInputStream(sourcecompanyLogo);         OutputStream out = new FileOutputStream(designationcompanyLogo);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) {             out.write(buf, 0, len);         }         in.close();         out.close();         InputStream in1 = new FileInputStream(sourceclientLogo);         OutputStream out1 = new FileOutputStream(designationclientLogo);         byte[] buf1 = new byte[1024];         int len1;         while ((len1 = in1.read(buf1)) > 0) {             out1.write(buf1, 0, len1);         }         in1.close();         out1.close();     } } catch (FileNotFoundException ex) {     System.out.println(ex.getMessage()+ \" in  the specified directory.\");     System.exit(0); } catch (IOException e) {     System.out.println(e.getMessage()); }"
    },
    {
        "folder": "utilities",
        "class_name": "TransferFiles.java",
        "method_name": "transferJS",
        "method_description": "This method transfers the 'canvasjs.min.js' file from the source directory to the output directory, ensuring the Extras folder exists and handling exceptions.",
        "code_implementation": "try {     for(int i=0;i<GenericKeywords.hostName.size();i++) {         (new File(GenericKeywords.outputDirectory+\"/Extras/\")).mkdir();         File source= new File(\"./Extras/canvasjs.min.js\");         File designation = new File(GenericKeywords.outputDirectory+\"/Extras/canvasjs.min.js\");         InputStream in = new FileInputStream(source);         OutputStream out = new FileOutputStream(designation);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) {             out.write(buf, 0, len);         }         in.close();         out.close();     } } catch (FileNotFoundException ex) {     System.out.println(ex.getMessage()+ \" in  the specified directory.\");     System.exit(0); } catch (IOException e) {     System.out.println(e.getMessage()); }"
    },
    {
        "folder": "utilities",
        "class_name": "TransferFiles.java",
        "method_name": "transferCss",
        "method_description": "This method transfers the 'style.css' file from the source directory to the output directory, ensuring the Extras folder exists and handling exceptions.",
        "code_implementation": "try {     for(int i=0;i<GenericKeywords.hostName.size();i++) {         (new File(GenericKeywords.outputDirectory+\"/Extras/\")).mkdir();         File source= new File(\"./Extras/style.css\");         File designation = new File(GenericKeywords.outputDirectory+\"/Extras/style.css\");         InputStream in = new FileInputStream(source);         OutputStream out = new FileOutputStream(designation);         byte[] buf = new byte[1024];         int len;         while ((len = in.read(buf)) > 0) {             out.write(buf, 0, len);         }         in.close();         out.close();     } } catch (FileNotFoundException ex) {     System.out.println(ex.getMessage()+ \" in  the specified directory.\");     System.exit(0); } catch (IOException e) {     System.out.println(e.getMessage()); }"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "createXmlReport",
        "method_description": "Creates an XML report for a test scenario and writes the output into a file.",
        "code_implementation": "public static void createXmlReport(String fileName,String machineName) {\ntry {\nDocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\nDocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\nDocument doc = dBuilder.newDocument();\nElement element = doc.createElement(\"Scenario\");\nelement.setAttribute(\"MachineName\", machineName);\ndoc.appendChild(element);\nTransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\ntransformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\nDOMSource source = new DOMSource(doc);\nStreamResult result = new StreamResult(new FileOutputStream(fileName));\ntransformer.transform(source, result);\n} catch (Exception e) {\ne.printStackTrace();\n}\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "openXmlReport",
        "method_description": "Opens an XML report file and parses it into a Document object for manipulation.",
        "code_implementation": "public void openXmlReport(String fileName) {\ntry {\nthis.dbFactory = DocumentBuilderFactory.newInstance();\nthis.dBuilder = this.dbFactory.newDocumentBuilder();\nthis.doc = this.dBuilder.parse(new File(fileName));\nthis.doc.getDocumentElement().normalize();\nGenericKeywords.writeToLogFile(\"INFO\", \"XML file is opened\");\n} catch (Exception e) {\ne.printStackTrace();\n}\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "saveXmlReport",
        "method_description": "Saves and closes the current XML report file.",
        "code_implementation": "public void saveXmlReport(String fileName) {\ntry {\nTransformerFactory transformerFactory = TransformerFactory.newInstance();\nTransformer transformer = transformerFactory.newTransformer();\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\ntransformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\nDOMSource source = new DOMSource(this.doc);\nStreamResult result = new StreamResult(new File(fileName));\ntransformer.transform(source, result);\nGenericKeywords.writeToLogFile(\"INFO\", \"XML file is saved and closed\");\n} catch (Exception e) {\ne.printStackTrace();\n}\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "createTestCaseNode",
        "method_description": "Creates a new <TestCase> node within the XML report if it doesn't already exist.",
        "code_implementation": "public void createTestCaseNode(String fileName,String testCaseName,String description) {\nBoolean flag = false;\nopenXmlReport(fileName);\ntry {\nNode node = this.doc.getElementsByTagName(\"Scenario\").item(0);\nElement element = (Element) node;\nNodeList nodeList = element.getChildNodes();\n\nif(nodeList.getLength() == 0) {\nflag = false;\n} else {\nfor (int i=0;i<nodeList.getLength();i++) {\nif(nodeList.item(i).getNodeName().equals(\"TestCase\")) {\nElement ele = (Element) nodeList.item(i);\nif(ele.getAttribute(\"id\").equals(testCaseName)) {\nflag = true;\n}\n}\n}\n}\n\nif (!flag) {\nElement testCase = this.doc.createElement(\"TestCase\");\ntestCase.setAttribute(\"id\", testCaseName);\ntestCase.setAttribute(\"description\", description);\nelement.appendChild(testCase);\nGenericKeywords.writeToLogFile(\"INFO\", \"Test Case tag is created\");\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n\nsaveXmlReport(fileName);\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "createDataSet",
        "method_description": "Creates a <DataSet> node under a specified <TestCase> node in the XML report.",
        "code_implementation": "public void createDataSet(String fileName, String testCaseName, String dataSetName) {\nopenXmlReport(fileName);\ntry {\nNode node = this.doc.getElementsByTagName(\"Scenario\").item(0);\nElement element = (Element) node;\nNodeList nodeList = element.getChildNodes();\n\nfor (int i=0;i<nodeList.getLength();i++) {\nif(nodeList.item(i).getNodeName().equals(\"TestCase\")) {\nElement ele = (Element) nodeList.item(i);\nif(ele.getAttribute(\"id\").equals(testCaseName)) {\nElement dataSet = this.doc.createElement(\"DataSet\");\ndataSet.setAttribute(\"id\", dataSetName);\nele.appendChild(dataSet);\nGenericKeywords.writeToLogFile(\"INFO\", \"Data set tag created\");\nbreak;\n}\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n\nsaveXmlReport(fileName);\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "createTestStep",
        "method_description": "Creates a <TestStep> node under a specified <DataSet> node in the XML report.",
        "code_implementation": "public void createTestStep(String fileName,String testCaseName, String dataSetName, String status,String innerText,String screenShotName, String link) {\nopenXmlReport(fileName);\ntry {\nNode node = this.doc.getElementsByTagName(\"Scenario\").item(0);\nNodeList nodeList = node.getChildNodes();\nif(nodeList.getLength() == 0) {\nsaveXmlReport(fileName);\nreturn;\n} else {\nfor (int i=0;i<nodeList.getLength();i++) {\n\nif(nodeList.item(i).getNodeName().equals(\"TestCase\")) {\nNode testCaseNode = nodeList.item(i);\nElement element = (Element) testCaseNode;\nif (element.getAttribute(\"id\").equals(testCaseName)) {\nNodeList dataSets = testCaseNode.getChildNodes();\nfor(int dataSetIterator=0; dataSetIterator<dataSets.getLength(); dataSetIterator++) {\nNode dataSetNode = dataSets.item(dataSetIterator);\nElement dataSetElement = null;\nif(dataSetNode.getNodeType() == Node.ELEMENT_NODE) {\ndataSetElement = (Element) dataSetNode;\nif(dataSetElement.getAttribute(\"id\").equals(dataSetName)) {\nElement testStep = this.doc.createElement(\"TestStep\");\ntestStep.setAttribute(\"Status\", status);\ntestStep.setAttribute(\"Message\",innerText);\ntestStep.setAttribute(\"ScreenShotName\", screenShotName);\ntestStep.setAttribute(\"Link\", link);\ndataSetElement.appendChild(testStep);\nGenericKeywords.writeToLogFile(\"INFO\", \"Test step created\");\nbreak;\n}\n}\n}\nbreak;\n}\n}\n}\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\nsaveXmlReport(fileName);\n}"
    },
    {
        "folder": "utilities",
        "class_name": "XMLRepost.java",
        "method_name": "transformXsltToHtmlPage",
        "method_description": "Transforms an XML report to an HTML page using an XSLT stylesheet.",
        "code_implementation": "public void transformXsltToHtmlPage(String location,String fileName,String testCaseName, String dataSetName) {\ntry {\nString dataSetReportPath = location+\"/\"+testCaseName;\nFiles.createDirectories(Paths.get(dataSetReportPath));\n\nPrintWriter pw = null;\nSource input = new StreamSource(location+\"/\"+fileName+\".xml\");\nSource xsl = null;\nResult output = null;\nTransformerFactory factory = TransformerFactory.newInstance();\nTransformer transformer = null;\n\nif(dataSetName.equals(\"NA\")) {\npw = new PrintWriter(new FileWriter(dataSetReportPath+\"/\"+testCaseName+\".html\"));\noutput = new StreamResult(pw);\nxsl = new StreamSource(GenericKeywords.XSLT_FILE_ReportPage);\ntransformer = factory.newTransformer(xsl);\ntransformer.setParameter(\"testCaseID\", testCaseName);\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\ntransformer.transform(input, output);\n\n} else {\ndataSetName = dataSetName.replaceAll(\"/\", \"(or)\");\npw = new PrintWriter(new FileWriter(dataSetReportPath+\"/\"+dataSetName+\".html\"));\noutput = new StreamResult(pw);\nxsl = new StreamSource(GenericKeywords.XSLT_FILE_DataSetPage);\ntransformer = factory.newTransformer(xsl);\ntransformer.setParameter(\"testCaseID\", testCaseName);\ntransformer.setParameter(\"dataSetID\", dataSetName);\ntransformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\ntransformer.transform(input, output);\n}\n} catch (Exception e) {\ne.printStackTrace();\n}\n}"
    },
    {
        "folder": "utilities",
        "class_name": "ZipReportFile.java",
        "method_name": "ZipReportFile",
        "method_description": "This is the constructor for the ZipReportFile class, initializing the fileList object, which stores file paths for the zip archive.",
        "code_implementation": "ZipReportFile() { fileList = new ArrayList<String>(); }"
    },
    {
        "folder": "utilities",
        "class_name": "ZipReportFile.java",
        "method_name": "zipReport",
        "method_description": "This method creates an instance of the ZipReportFile class, generates a list of files to be zipped, and calls zipIt() to compress them into a zip file.",
        "code_implementation": "public static void zipReport() { ZipReportFile appZip = new ZipReportFile(); appZip.generateFileList(new File(SOURCE_FOLDER)); appZip.zipIt(OUTPUT_ZIP_FILE); }"
    },
    {
        "folder": "utilities",
        "class_name": "ZipReportFile.java",
        "method_name": "zipIt",
        "method_description": "This method compresses all the files listed in fileList into a zip file using ZipOutputStream. It iterates through each file, reads its contents, and writes them into the zip archive.",
        "code_implementation": "public void zipIt(String zipFile) { byte[] buffer = new byte[1024]; try { FileOutputStream fos = new FileOutputStream(zipFile); ZipOutputStream zos = new ZipOutputStream(fos); for (String file : this.fileList) { ZipEntry ze = new ZipEntry(file); zos.putNextEntry(ze); FileInputStream in = new FileInputStream(SOURCE_FOLDER + File.separator + file); int len; while ((len = in.read(buffer)) > 0) { zos.write(buffer, 0, len); } in.close(); } zos.closeEntry(); zos.close(); } catch (IOException ex) { ex.printStackTrace(); } }"
    },
    {
        "folder": "utilities",
        "class_name": "ZipReportFile.java",
        "method_name": "generateFileList",
        "method_description": "This method traverses the given directory and subdirectories to collect all file paths. If a node is a file, it adds it to fileList. If it\u2019s a directory, it recursively explores its contents.",
        "code_implementation": "public void generateFileList(File node) { if (node.isFile()) { fileList.add(generateZipEntry(node.getAbsoluteFile().toString())); } if (node.isDirectory()) { String[] subNote = node.list(); for (String filename : subNote) { generateFileList(new File(node, filename)); } } }"
    },
    {
        "folder": "utilities",
        "class_name": "ZipReportFile.java",
        "method_name": "generateZipEntry",
        "method_description": "This method formats the file paths by removing the source folder prefix, preparing them for inclusion in the zip archive.",
        "code_implementation": "private String generateZipEntry(String file) { return file.substring(SOURCE_FOLDER.length() + 1, file.length()); }"
    },
    {
        "folder": "scenarios",
        "class_name": "ScenarioAPI.java",
        "method_name": "ScenarioAPI",
        "method_description": "Constructor that initializes the ScenarioAPI class with a reference to a BaseClass object, allowing access to inherited methods and properties.",
        "code_implementation": "public ScenarioAPI(BaseClass obj) { super(obj); this.obj = obj; }"
    },
    {
        "folder": "scenarios",
        "class_name": "ScenarioAPI.java",
        "method_name": "BFL_AES256API",
        "method_description": "Method that performs API-related tasks including filtering resource URLs and navigating to a specified login page. It logs the page load status and handles exceptions that may occur during execution.",
        "code_implementation": "java<br>try {<br>resourceURLsToFilter.add(\"https://uas-ui.cdn.greytip.com/static-v6.3.0-prod-19/polyfills.js\");<br>resourceURLsToFilter.add(\"https://uas-ui.cdn.greytip.com/static-v6.3.0-prod-19/main.js\");<br>resourceURLsToFilter.add(\"https://uas-ui.cdn.greytip.com/static-v6.3.0-prod-19/scripts.js\");<br>navigateTo(\"https://indiumsoftwareindialtd.greythr.com/uas/portal/auth/login\");<br>testStepInfo(\"Page load complete\");<br>} catch (Exception e) {<br>stepFailed(\"Exception in test case - '\" + e.getClass().getName() + \"'\");<br>testStepInfo(\"\");<br>} finally { }"
    }
]
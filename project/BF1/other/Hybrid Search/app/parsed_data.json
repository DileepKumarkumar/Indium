[
    {
        "class_name": "ApplicationKeywords",
        "function_name": "isElementDisplayed",
        "code": "public boolean isElementDisplayed(String objectLocator, int timeOut) {\n\t\tdriver.manage().timeouts().implicitlyWait(timeOut, TimeUnit.SECONDS);\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tparseidentifyByAndlocator(objectLocator);\n\t\t\tflag = driver.findElement(By.xpath(locator)).isDisplayed();\n\t\t\treturn flag;\n\t\t} catch (NoSuchElementException e) {\n\t\t\twriteToLogFile(\"ERROR\", objectLocator + \" is not found.\");\n\t\t\treturn flag;\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", objectLocator + \" is not found.\");\n\t\t\treturn flag;\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to wait until page load\n\t */",
        "description": "This Java method, `isElementDisplayed`, checks if an element is displayed on a web page based on the provided object locator and timeout value. \n\nHere's what it does:\n\n1. It sets an implicit wait for the specified time (in seconds) using WebDriver's `manage().timeouts().implicitlyWait()` method.\n2. It attempts to find an element by parsing the provided object locator (e.g., XPath, CSS selector, etc.) and checking if the element is displayed using `driver.findElement().isDisplayed()`.\n3. If the element is found and displayed, it returns a boolean value indicating that the element is displayed.\n4. If the element is not found or not displayed, it catches the `NoSuchElementException` and writes an error message to a log file with the object locator as the error message.\n\nThe method also handles any other exceptions that might occur during execution, writing an error message to the log file in both cases.",
        "input": [
            "String objectLocator",
            "int timeOut"
        ],
        "output": "boolean"
        
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "waitForPageToLoad",
        "code": "public void waitForPageToLoad() {\n\t\ttry {\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tfor (int i = 0; i < 20000; i++) {\n\t\t\t\tString status = js.executeScript(\"return document.readyState\").toString();\n\t\t\t\tif (status.equals(\"complete\")) {\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"An exception occurred waitForPageToLoad() \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate name\n\t * @return        :  lead return generated value\n\t */",
        "description": "This Java method, `waitForPageToLoad()`, is used to wait for a web page to fully load before proceeding with further actions. It uses the Selenium WebDriver's JavaScriptExecutor to execute a script that returns the current state of the document (e.g., \"complete\" when the page has finished loading). The method will continue to check the document's state every 0.05 seconds up to 20,000 times or until it reaches the \"complete\" state, at which point it will pause for 5 seconds before breaking out of the loop and continuing with the test. If any exceptions occur during this process, it will catch them and report a test failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateName",
        "code": "public static String generateName() {\n\t\tString lead = RandomStringUtils.random(6, true, false).replace(\"0\", \"5\");\n\t\tlead = \"Automation\" + lead;\n\t\treturn lead;\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to scroll to the element\n\t * @param \t      :  objectLocator is the locator for which element to scroll\n\t */",
        "description": "The Java method `generateName()` generates a random name by concatenating a fixed prefix \"Automation\" with a randomly generated string of 6 characters. The generated string does not contain the digit \"0\", but replaces it with the digit \"5\". This method returns the generated name as a String.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "scrollToWebElement",
        "code": "public void scrollToWebElement(String objectLocator) {\n\t\tWebElement element = findWebElement(objectLocator);\n\t\tString scrollElementIntoMiddle = \"var viewPortHeight = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);\"\n\t\t\t\t+ \"var elementTop = arguments[0].getBoundingClientRect().top;\"\n\t\t\t\t+ \"window.scrollBy(0, elementTop-(viewPortHeight/2));\";\n\t\t((JavascriptExecutor) driver).executeScript(scrollElementIntoMiddle, element);\n\t}\n\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate zipcode\n\t * @return        :  zipCode return generated value\n\t */",
        "description": "Here are the brief descriptions for the two Java methods:\n\n**1. `public void scrollToWebElement(String objectLocator)`**\n\nThis method scrolls an element into view using JavaScript execution. It takes a string locator as input, finds the corresponding WebElement, and then uses JavaScript to scroll the element into the middle of the viewport.\n\n**2. `public String generateZipCode()` (not provided)**\n\nThis method generates a random ZIP code. The exact implementation is not shown, but it likely uses a random number generator or another algorithm to produce a valid-looking ZIP code.",
        "input": [
            "String objectLocator"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateZipCode",
        "code": "public String generateZipCode() {\n\t\tString zipCode = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2;\n\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 4;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(9);\n\n\t\t\tzipCode = set1 + \"\" + num2 + num3 + set2;\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Zip Code Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn zipCode;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to highlight the element\n\t * @param \t      :  element is the element path which we want to highlight\n\t */",
        "description": "This Java method generates a random zip code in the format of XXXX-XXXX. It uses the `Random` class to generate three sets of numbers: one set with only digits (set1), and two sets with 0-8 digits (num2, num3). The method concatenates these sets together with hyphens (-) to form a zip code string. If an exception occurs during the generation process, it catches the exception and logs a failure message using the `testStepFailed` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "highLighterMethod",
        "code": "public void highLighterMethod(String element) {\n\t\ttry {\n\t\t\tWebElement e = findWebElement(element);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", e);\n\t\t\tThread.sleep(3000);\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', arguments[1]);\", e, \"\");\n\t\t\tSystem.out.println(\"Highlighted\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in highlight : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`highLighterMethod(String element)` - This method highlights a web element on a webpage using Selenium WebDriver and JavaScript. It takes an `element` parameter, which is the name or identifier of the web element to be highlighted. The method tries to find the specified web element using the `findWebElement(element)` method, then uses JavaScript to set its style attributes (background color and border) to yellow and red for 3 seconds. After the highlighting period, it resets the style attributes back to their original state. If any exception occurs during execution, the method catches it and reports a test step failure.",
        "input": [
            "String element"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "highLighterMethod1",
        "code": "public void highLighterMethod1(String element) {\n\t\ttry {\n\t\t\tWebElement e = findWebElement(element);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", e);\n\t\t\tThread.sleep(2000);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in highlight : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate insurance name\n\t * @return        :  lead return generated value\n\t */",
        "description": "This Java method, named `highLighterMethod1`, is used to highlight a specific web element on the page. \n\nIt takes one parameter, `element`, which is a string representing the identifier of the web element (e.g., an HTML id or class). \n\nThe method attempts to find the specified web element using the `findWebElement` method. If successful, it uses JavaScript to set the style attribute of the element to give it a yellow background and a 2-pixel red border. The highlighting is maintained for 2000 milliseconds (or 2 seconds) before the script continues executing.\n\nIf any exceptions occur during this process, they are caught and logged as test failures using the `testStepFailed` method.",
        "input": [
            "String element"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateInsuranceName",
        "code": "public static String generateInsuranceName() {\n\t\tString lead = RandomStringUtils.random(6, true, false).replace(\"0\", \"5\");\n\t\tlead = \"Bajaj \" + lead+\" Insurance\";\n\t\treturn lead;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate bank name\n\t * @return        :  lead return generated value\n\t */",
        "description": "This Java method, `generateInsuranceName()`, generates a random insurance company name by creating a random string of length 6 with uppercase letters only (due to the `true` and `false` parameters in `RandomStringUtils.random()`), replacing any occurrences of \"0\" with \"5\", and then prepending the string \"Bajaj \" to create the final insurance company name. The method returns this generated name as a String.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateBankName",
        "code": "public static String generateBankName() {\n\t\tString lead = RandomStringUtils.random(6, true, false).replace(\"0\", \"5\");\n\t\tlead = lead+\" Bank\";\n\t\treturn lead;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate MICR number\n\t * @return        :  micrNumber return generated value\n\t */",
        "description": "This Java method, `generateBankName()`, generates a random bank name. It uses the Apache Commons Lang library's `RandomStringUtils` class to generate a random string of length 6 (containing only non-zero characters), replaces all occurrences of \"0\" with \"5\", and appends \" Bank\" to the end. The resulting string is then returned as a `String`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generate9DigitMICRNumber",
        "code": "public String generate9DigitMICRNumber() {\n\t\tString micrNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2, set3;\n\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 6;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 100;\n\n\t\t\tset3 = generator.nextInt(899) + 1000;\n\n\t\t\tmicrNumber = set1 + \"\" + num2 + num3 + set2 + set3;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate MICR Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn micrNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate barcode value\n\t * @return        :  barCodeNumber return generated value\n\t */",
        "description": "This Java method generates a random 9-digit MICR (Magnetic Ink Character Recognition) number. It uses the `Random` class to generate three sets of numbers: set1, num2 and num3, which are used to create the MICR number along with two more sets of numbers (set2 and set3). The method returns the generated MICR number as a string. If any exception occurs during generation, it logs an error message using the `testStepFailed` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateRandomBarCode",
        "code": "public String generateRandomBarCode() {\n\t\t\n\t\tRandom generator = new Random();\n\n\t\tArrayList<String> numberlist = new ArrayList<>();\n\t\tArrayList<String> Alphabeticlist = new ArrayList<>();\n\t\tArrayList<String> specialCharList = new ArrayList<>(Arrays.asList(\"!\", \"@\", \"#\", \"$\", \"/\", \"^\", \"%\", \"&\"));\n\t\tArrayList<String> mainlist = new ArrayList<>();\n\n\t\tfor (int i = 1; i <= 9; i++) {\n\t\t\tnumberlist.add(String.valueOf(i));\n\t\t}\n\n\t\tfor (char i = 'A'; i <= 'Z'; i++) {\n\t\t\tAlphabeticlist.add(Character.toString(i));\n\t\t}\n\t\tmainlist.addAll(numberlist);\n\t\tmainlist.addAll(Alphabeticlist);\n\t\tmainlist.addAll(specialCharList);\n\t\tmainlist.addAll(mainlist);\n\n\t\tint initialDigit = 2;\n\t\tint set1 = generator.nextInt(567) + 100;\n\t\tint set2 = generator.nextInt(645) + 100;\n\t\tint set3 = generator.nextInt(64) + 10;\n\t\tString number = initialDigit + \"\" + set1 + set2 + set3;\n\n\t\tint num = Integer.parseInt(number);\n\t\tint count = 0;\n\t\twhile (num != 0) {\n\t\t\tcount = count + num % 10;\n\t\t\tnum = num / 10;\n\t\t}\n\t\tString lastCharacter = mainlist.get(count - 1);\n\t\tString barCodeNumber = initialDigit + \"\" + set1 + set2 + set3 + \"\" + lastCharacter;\n\n\t\treturn barCodeNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate BIN number\n\t * @return        :  binNumber return generated value\n\t */",
        "description": "This Java method, `generateRandomBarCode()`, generates a random bar code number. It does this by combining numbers (1-9), uppercase letters ('A'-'Z'), and special characters (\"!\", \"@\", \"#\", \"$\", \"/\", \"^\", \"%\", \"&\") in an ArrayList. The method then uses the Random class to generate three sets of numbers, combines them with an initial digit, and calculates a checksum based on the resulting number. The final bar code number is generated by appending the last character from the mainlist ArrayList to the calculated number.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generate6DigitBINNumber",
        "code": "public String generate6DigitBINNumber() {\n\t\tString binNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2;\n\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 4;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 100;\n\n\t\t\tbinNumber = set1 + \"\" + num2 + num3 + set2;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate BIN Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn binNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method is used to wait for the element until the element is visible.\n\t * @param         :  provide the object locator for which element to wait\n\t */",
        "description": "This Java method generates a 6-digit BIN (Bank Identification Number) number. It uses the `Random` class to generate random numbers and concatenates them to form the BIN number. The generated number is then returned as a string. If any exception occurs during the generation process, it calls a method named `testStepFailed()` with the exception details.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "waitForElementUntilVisible",
        "code": "public void waitForElementUntilVisible(String element) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tint count = 0;\n\t\t\tdo {\n\t\t\t\tif (isElementPresent(element)) {\n\t\t\t\t\tif (isElementDisplayed(element)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\t\tcount = count + 5;\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tif (count == 120) {\n\t\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\t\tcount = count / 60;\n\t\t\t\t\t\t\ttestStepInfo(\"Waited \" + count + \" minutes for the element.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tThread.sleep(5000);\n\t\t\t\t\tcount = count + 5;\n\t\t\t\t\tflag = true;\n\t\t\t\t\tif (count == 120) {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t\tcount = count / 60;\n\t\t\t\t\t\ttestStepInfo(\"Waited \" + count + \" minutes for the element.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (flag);\n\t\t} catch (InterruptedException e) {\n\t\t\t  testStepFailed(\"Failed in waitForElementUntilVisible \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to scroll by coordinates\n\t * @param \t      :  x is the value of coordinates\n\t */",
        "description": "This Java method, `waitForElementUntilVisible(String element)`, waits for an element with the specified ID (`String element`) to be both present and visible on the screen. The method uses a loop that checks if the element is present using the `isElementPresent(element)` method and if it's displayed using the `isElementDisplayed(element)` method.\n\nIf the element is not yet visible, the method sleeps for 5 seconds (5000 milliseconds) and increments a counter (`count`). It continues to do this until the element is displayed or the maximum waiting time of 2 minutes (120 seconds) is reached. If the maximum waiting time is exceeded, it resets the counter and updates the test step information.\n\nIf an `InterruptedException` occurs during the waiting process, the method catches the exception and reports a failure in the test step.",
        "input": [
            "String element"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "scrollbycordinates",
        "code": "public void scrollbycordinates(String x) {\n\t\ttry {\n\t\t\tWebElement ele = findWebElement(x);\n\t\t\tWebElement ee = ele;\n\t\t\tPoint p = ee.getLocation();\n\t\t\tint y = p.getY() - 250;\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"window.scrollTo(\" + p.getX() + \",\" + y + \");\");\n\t\t\tThread.sleep(1000);\n\t\t} catch (InterruptedException e) {\n\t\t\t testStepFailed(\"Failed in scrollbycordinates \" + e.getClass().getName());\n\t\t}\n\t}\n\t\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  method to randomly generate mobile number starts with 6\n\t * @return \t      :  mobileNumber is value of random mobile number\n\t */",
        "description": "Here is a brief description for the Java method:\n\n**Method:** `scrollbycordinates(String x)`\n\n**Description:** This method scrolls the web page to a specific location (x-coordinate) using JavaScript. It takes a string parameter `x` which represents the x-coordinate of the element to be scrolled to.\n\nThe method first finds an element with the given `x` value, gets its location, calculates the y-coordinate by subtracting 250 from the current y-coordinate, and then uses a `JavascriptExecutor` to execute a JavaScript script that scrolls the page to the specified coordinates. The method waits for 1 second before completing.\n\nIf any exception occurs during the execution of this method, it catches the exception and reports a test step failure with the error message.",
        "input": [
            "String x"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateMobileNumber",
        "code": "public String generateMobileNumber() {\n\t\tString mobileNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2, set3;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 6;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 100;\n\t\t\tset3 = generator.nextInt(8999) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num2 + num3 + set2 + set3;\n\t\t\tmobileNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Mobile Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn mobileNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :\n\t * Description    :  method to randomly generate mobile number starts with 7\n\t * @return \t      :  mobileNumber is value of random mobile number\n\t */",
        "description": "This Java method, `generateMobileNumber()`, generates a random mobile phone number that starts with the digit \"7\". The method uses the `Random` class to generate three sets of digits: one for the first part of the number (6), and two for the second part. The generated numbers are concatenated together to form a valid 11-digit mobile phone number, which is then returned as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateMobileNumber1",
        "code": "public String generateMobileNumber1() {\n\t\tString mobileNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2, set3;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 7;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 100;\n\t\t\tset3 = generator.nextInt(8999) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num2 + num3 + set2 + set3;\n\t\t\tmobileNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Mobile Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn mobileNumber;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select tabs in FOS and QC Org         \n\t * @param \t      :  optionToClick is the value to navigate\n\t */",
        "description": "This Java method, `generateMobileNumber1`, generates a random mobile number. It uses the `Random` class to generate three sets of numbers: `set1`, `num2`, and `num3`. These numbers are then concatenated together with some static values (`set2` and `set3`) to form a complete mobile number. If any exception occurs during this process, it catches the exception and logs an error message using the `testStepFailed` method. The generated mobile number is then returned as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "selectTabs",
        "code": "public void selectTabs(String optionToClick) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString navigationOption = \"'\" + optionToClick + \"' navigation option #xpath=//span[text()='\" + optionToClick\n\t\t\t\t\t+ \"']//parent::a | //a[text()='\" + optionToClick+\"']//parent::a\";\t\t\n\t\t\twaitForElement(navigationOption, 10);\n\t\t\tif (isElementDisplayed(navigationOption, 10)) {\n\t\t\t\tscrollbycordinates(navigationOption);\n\t\t\t\tclickOnSpecialElement(navigationOption);\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepPassed(\"'\" + optionToClick + \"' navigation option is clicked successfully\");\n\t\t\t} else {\n\t\t    \ttestStepFailed(\"'\" + optionToClick + \"' navigation option is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectTabs. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to click buttons\n\t * @param         :  value is the name of button to click\n\t */",
        "description": "This Java method, `selectTabs`, is used to select a tab or navigation option on a webpage. It takes a string parameter `optionToClick` which represents the text of the tab or navigation option to be clicked.\n\nThe method first waits for the page to load using the `waitForPageToLoad()` method. Then it constructs an XPath expression based on the provided `optionToClick` and uses it to wait for the element to appear using the `waitForElement()` method.\n\nOnce the element is found, the method checks if it's displayed using the `isElementDisplayed()` method. If it is, the method scrolls to the element using the `scrollbycordinates()` method, clicks on it using the `clickOnSpecialElement()` method, waits for a short period of time using the `waitTime()` method, and then reloads the page using the `waitForPageToLoad()` method.\n\nIf the element is not displayed, the method fails the test step. If any exception occurs during the execution of the method, it also fails the test step with an error message including the type of exception that occurred.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value[normalize-space()]='\" + value + \"']\";\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tmanualScreenshot(\"Successfully Clicked On : \"+value);\n\t\t\t\twaitTime(5);\n\t\t\t\tif (value.equalsIgnoreCase(\"Pass\")) {\n\t\t\t\t\tprintErrorMessageInQcField();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" +value+ e.getClass().getName());\n\t\t}\n\t}\n\t\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  method to transfer control from current tab\n\t * @param \t      :  index is the integer value of tab we need to switch\n\t * @param         :  closeAllWindow is the boolean value whether need to close current tab or not\n\t */",
        "description": "This Java method, `clickOnButton`, simulates a click on an element (either a button or input field) with the given `value`. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided value.\n2. It checks if the element is displayed within 10 seconds using the `isElementDisplayed` method.\n3. If the element is displayed, it scrolls to the element using `scrollToElement`, highlights it with `highLighterMethod`, and clicks it with `clickOnSpecialElement`.\n4. After clicking, it takes a manual screenshot with `manualScreenshot` and waits for 5 seconds.\n5. If the value matches \"Pass\", it prints an error message in the QC field using `printErrorMessageInQcField`.\n6. If the element is not displayed, it fails the test step with a message indicating that the element is not present.\n7. In case of any exception during execution, it fails the test step with a message including the class name of the exception and the value being processed.\n\nThis method seems to be part of an automation framework for web testing, possibly using Selenium WebDriver.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "transferControlToWindow",
        "code": "public void transferControlToWindow(int index, boolean closeAllWindow) {\n\t\ttry {\n\t\t\tSet<String> AllHandles = driver.getWindowHandles();\n\t\t\tList<String> HandlesToList = new ArrayList<String>();\n\t\t\tHandlesToList.addAll(AllHandles);\n\t\t\tint windows = HandlesToList.size();\n\t\t\tif (windows >= 2) {\n\t\t\t\tif (index == 1 || index == 2) {\n\t\t\t\t\tfor (int iterBrowWind = (HandlesToList.size() - 1); iterBrowWind > (index - 1); iterBrowWind--) {\n\t\t\t\t\t\tdriver.switchTo().window(HandlesToList.get(iterBrowWind));\n\t\t\t\t\t\tif (closeAllWindow) {\n\t\t\t\t\t\t\tdriver.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdriver.switchTo().window(HandlesToList.get(index - 1));\n\t\t\t\t} else if (index <= HandlesToList.size()) {\n\t\t\t\t\tdriver.switchTo().window(HandlesToList.get(index - 1));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdriver.switchTo().window(HandlesToList.get(0));\n\t\t\t\tif (index >= 2) {\n\t\t\t\t\ttestStepFailed(\"The given window \\\"\" + index + \"\\\" is failed to open\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  method to highlight field and take screenshot\n\t * @param \t      :  element is the path need to highlight\n\t * @param         :  LabelName is the name of field\n\t */",
        "description": "This Java method, `transferControlToWindow`, transfers control to a specific window in a browser. It takes two parameters: `index` (the index of the window to switch to) and `closeAllWindow` (a boolean indicating whether to close all other windows).\n\nThe method first retrieves a list of all open windows using WebDriver's `getWindowHandles()` method, then iterates through this list to find the specified window. If there are multiple windows open, it will close all but the one at the specified index, if `closeAllWindow` is true.\n\nIf an exception occurs during execution, the method catches and logs the error.",
        "input": [
            "int index",
            "boolean closeAllWindow"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "highLighterMethodManualScreenShot",
        "code": "public void highLighterMethodManualScreenShot(String element, String LabelName) {\n\t\ttry {\n\t\t\tWebElement e = findWebElement(element);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", e);\n\t\t//\tThread.sleep(2000);\n\t\t\tmanualScreenshot(LabelName);\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', arguments[1]);\", e, \"\");\n\t\t\tSystem.out.println(\"Highlighted Successfully \" + element);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  method to open new tab\n\t */",
        "description": "The `highLighterMethodManualScreenShot` method is used to highlight a specific element on the screen and take a manual screenshot of it. \n\nIt takes two parameters: \n- `element`: The name of the element to be highlighted (e.g., a button, link, etc.)\n- `LabelName`: A label or description for the screenshot\n\nThe method attempts to find the specified `element` using the `findWebElement` method, and then uses JavaScript to add a yellow background and red border around it. It then takes a manual screenshot of the highlighted element using the `manualScreenshot` method and stores it with the provided `LabelName`. Finally, it removes the highlighting style from the element.\n\nIf any exception occurs during this process, the method catches it and logs an error message using the `testStepFailed` method.",
        "input": [
            "String element",
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "openNewTab",
        "code": "public void openNewTab() {\n\t\ttry {\n\t\t\t((JavascriptExecutor) driver).executeScript(\"window.open();\");\n\t\t\twaitForPageToLoad();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  Method to randomly generate 4 digit aadhaar number\n\t * @return        :  aadhaarNumber is the value of 4digit number\n\t */",
        "description": "Here are the brief descriptions for the two Java methods:\n\n**Method 1: `openNewTab()`**\n\nOpens a new tab in the current browser window using JavaScript and waits for the page to load. If any exceptions occur during this process, it marks the test step as failed.\n\n**Method 2: `randomlyGenerateAadhaarNumber()`**\n\nGenerates a random 4-digit Aadhaar number. The method is not implemented here, but based on its description, it appears to use some algorithm or library function to generate a unique 4-digit number and return it as the value of `aadharnumber`.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateAadhaar4DigitNumber",
        "code": "public String generateAadhaar4DigitNumber() {\n\t\tString aadhaarNumber = null;\n\t\ttry {\n\t\t\tRandom generator = new Random();\n\t\t\tString value = String.format(\"%04d\", generator.nextInt(9686));\n\t\t\taadhaarNumber = value;\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Generate Aadhaar 4 Digit Number. Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn aadhaarNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  method to randomly generate PAN number\n\t * @return \t      :  panNumber is the value of random PAN number\n\t */",
        "description": "This Java method, `generateAadhaar4DigitNumber()`, generates a random 4-digit Aadhaar number. It uses the `Random` class to produce a random integer between 0 and 9686 (inclusive), formats it as a string with leading zeros to ensure it's always 4 digits long, and returns the resulting Aadhaar number as a `String`. If any exception occurs during this process, the method catches it and logs an error message using the `testStepFailed()` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generatePanNumber",
        "code": "public String generatePanNumber() {\n\t\tString panNumber = null;\n\t\ttry {\n\t\t\tString First_char = \"ABCDE\";\n\t\t\tString middle_number = \"7839\";\n\t\t\tString last_char = \"R\";\n\t\t\tStringBuilder sb = new StringBuilder();\n\t\t\tStringBuilder sb1 = new StringBuilder();\n\t\t\tStringBuilder sb2 = new StringBuilder();\n\t\t\tRandom rnd = new Random();\n\t\t\twhile (sb.length() < 3) { // length of the random string.\n\t\t\t\tint index = (int) (rnd.nextFloat() * First_char.length());\n\t\t\t\tsb.append(First_char.charAt(index));\n\t\t\t}\n\t\t\twhile (sb1.length() < 1) { // length of the random string.\n\t\t\t\tint index = (int) (rnd.nextFloat() * First_char.length());\n\t\t\t\tsb1.append(First_char.charAt(index));\n\t\t\t}\n\n\t\t\twhile (sb2.length() < 4) { // length of the random string.\n\t\t\t\tint index = (int) (rnd.nextFloat() * middle_number.length());\n\t\t\t\tsb2.append(middle_number.charAt(index));\n\t\t\t}\n\n\t\t\tString rndomStr = sb.toString();\n\t\t\tString rndomStr1 = sb1.toString();\n\t\t\tString rndomStr2 = sb2.toString();\n\t\t\tGOR.panNumber = \"\" + rndomStr + \"P\" + rndomStr1 + \"\" + rndomStr2 + \"\" + last_char + \"\";\n\t\t\tpanNumber = \"\" + rndomStr + \"P\" + rndomStr1 + \"\" + rndomStr2 + \"\" + last_char + \"\";\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Pan Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn panNumber;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/02/2022\n\t * Description    :  method to randomly generate 4digit invoice number\n\t * @return \t      :  cardNumber is the value of random invoice number\n\t */",
        "description": "This Java method generates a random PAN (PAN Number) number. A PAN number is typically a unique identifier used for tax purposes in India.\n\nThe method uses three `StringBuilder` objects to generate the first character, middle characters, and last character of the PAN number. It uses a `Random` object to randomly select characters from predefined strings.\n\nThe generated PAN number has the following format: \n\n- First 3 characters are randomly selected from \"ABCDE\"\n- The next character is randomly selected from \"ABCDE\" again\n- Next 4 characters are randomly selected from \"7839\"\n- Last character is always \"R\"\n\nIf any exception occurs during the generation process, it catches the exception and logs a failure message using `testStepFailed()` method. Finally, it returns the generated PAN number.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateInvoiceNumber",
        "code": "public String generateInvoiceNumber() {\n\t\tString cardNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tString set1;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = \"6\";\n\t\t\tnum2 = generator.nextInt(45) + 10;\n\t\t\tnum3 = generator.nextInt(783) + 100;\n\t\t\tGOR.Mobile = set1 + \"\" + num3 + num2;\n\t\t\tcardNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Invoice Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn cardNumber;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :\n\t * Description    :  method to get current date and time\n\t * @return \t      :  dateTime is the value of current date and time\n\t */",
        "description": "This Java method, `generateInvoiceNumber()`, generates a unique invoice number. It uses a combination of fixed strings and random numbers to create a unique identifier. The method first initializes some variables and then uses a `Random` object to generate two random numbers (`num2` and `num3`). These numbers are combined with the fixed string \"6\" to form the invoice number, which is stored in the `cardNumber` variable. If any exception occurs during this process, it catches the exception and logs an error message using a method called `testStepFailed()`. The method then returns the generated invoice number as a `String`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentDate",
        "code": "public String getCurrentDate() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn dateTime;\n\t}",
        "description": "This Java method, `getCurrentDate()`, returns the current date in the format \"dd/MM/yyyy\" as a string. It uses the `SimpleDateFormat` class to format a `Date` object, which represents the current date and time. If an exception occurs while trying to get or format the date, the method catches it and reports the error by calling two other methods: `testStepFailed()` and `writeToLogFile()`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentDate1",
        "code": "public String getCurrentDate1() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"M/dd/yyyy\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn dateTime;\n\t}\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to enter value in text field     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the text to enter\n\t */",
        "description": "This Java method, `getCurrentDate1`, returns a string representation of the current date in the format \"M/dd/yyyy\". It uses the `SimpleDateFormat` class to format the current date (`new Date()`) into a string. If any exception occurs during this process, it catches the exception and logs an error message to the log file using the `writeToLogFile` method. The method then returns the formatted date as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::lightning-input//input | //label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tif (findWebElement(field).isEnabled()) {\n\t\t\t\t\tscrollToElement(field);\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :\n\t * Description    :  Method to randomly generate 11 digit bank account number\n\t * @return \t      :  accountNumber is value of random bank account number\n\t */",
        "description": "This Java method, `enterValueInField`, is used to enter a given value into a field on a web page. The method takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided label name to locate the corresponding input field or text box. It then waits for the element to be displayed, checks if it's enabled, and if so, enters the given value into the field using the `typeIn` method. If the field is disabled or not present, the test fails.\n\nThe method also includes logging and screenshot functionality (using `highLighterMethodManualScreenShot`) to capture any issues that may occur during the test execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generatebankaccountNumber",
        "code": "public String generatebankaccountNumber() {\n\t\tString cardNumber = null;\n\t\ttry {\n\t\t\tint num2, num3, num4;\n\t\t\tString set1;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = \"4\";\n\t\t\tnum2 = generator.nextInt(453) + 100;\n\t\t\tnum3 = generator.nextInt(783) + 100;\n\t\t\tnum4 = generator.nextInt(2511) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num3 + num2 + num4;\n\t\t\tcardNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate bank Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn cardNumber;\n\t}",
        "description": "This Java method generates a random bank account number. It uses the `Random` class to generate three integer values, and then combines them with a fixed prefix (\"4\") to create a unique 16-digit bank account number. The generated number is stored in the `cardNumber` variable and returned by the method. If any exception occurs during the generation process, it catches the exception and logs an error message using the `testStepFailed` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generate14DigitBankAccountNumber",
        "code": "public String generate14DigitBankAccountNumber() {\n\t\tString cardNumber = null;\n\t\ttry {\n\t\t\tint num2, num3, num4, num5;\n\t\t\tString set1;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = \"4\";\n\t\t\tnum2 = generator.nextInt(453) + 100;\n\t\t\tnum3 = generator.nextInt(783) + 100;\n\t\t\tnum4 = generator.nextInt(783) + 100;\n\t\t\tnum5 = generator.nextInt(2511) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num3 + num2 + num4 + num5;\n\t\t\tcardNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate bank Number Exception: \" +e.getClass().getName());\n\t\t}\n\t\treturn cardNumber;\n\t}\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to click button in edit box and customer details page\n\t */",
        "description": "This Java method, `generate14DigitBankAccountNumber()`, generates a random 14-digit bank account number. It uses the `Random` class to generate five numbers between 100 and certain maximum values, and then concatenates them with a fixed prefix \"4\" to form the complete bank account number. The method returns the generated bank account number as a string. If any exception occurs during generation, it catches the exception and logs an error message using `testStepFailed()`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonInPopup",
        "code": "public void clickOnButtonInPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//span[text()='\" + buttonName + \"']//parent::button | (//lightning-button//button[text()='\" + buttonName + \"'])[2] | //lightning-layout-item//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopup`, attempts to click on a specific button within a popup window. The method takes a string parameter `buttonName` which is used to construct an XPath expression to locate the desired button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression using the provided `buttonName` and some predefined strings.\n2. It waits for the element matching the XPath expression to be displayed (up to 10 seconds).\n3. If the element is displayed, it clicks on the button.\n4. If the element is not displayed after 10 seconds, it fails the test step with a message indicating that the button was not found.\n5. If any exception occurs during this process, it also fails the test step with a message including the type of exception.\n\nIn summary, this method is used to interact with a specific button within a popup window by clicking on it, and it provides error handling if the button is not found or an unexpected issue arises.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonInPopupWithoutWaitTime",
        "code": "public void clickOnButtonInPopupWithoutWaitTime(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//span[text()='\" + buttonName + \"']//parent::button | (//lightning-button//button[text()='\" + buttonName + \"'])[2]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopupWithoutWaitTime \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopupWithoutWaitTime`, simulates a mouse click on a button with the specified name within a popup window. It uses an XPath expression to locate the button by its text value. The method waits for the element to be displayed and then clicks it if it is present. If the element is not found, it marks the test step as failed. The method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonInRecallPopup",
        "code": "public void clickOnButtonInRecallPopup(String buttonName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString button = \"Button#xpath=(//span[text()='\" + buttonName + \"']//parent::button)[2]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInRecallPopup \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to click buttons\n\t * @param         :  value is the name of button to click\n\t */",
        "description": "This Java method, `clickOnButtonInRecallPopup`, is used to simulate a click on a specific button within a recall popup. The method takes a `String` parameter `buttonName` which represents the name of the button to be clicked.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the button with the given `buttonName`.\n3. It waits for the element (button) to be displayed within a certain time limit (10 seconds).\n4. If the button is displayed, it simulates a click on the button and then waits for 5 seconds.\n5. If the button is not displayed, it marks the test step as failed.\n\nThe method also has error handling in place to catch any exceptions that may occur during its execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonWithoutWaitTime",
        "code": "public void clickOnButtonWithoutWaitTime(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOn(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" +value+ e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  Method used to verify and print error message\n\t * @param         :  expectedErrorValidation is expected message to compare \n\t */",
        "description": "This Java method, `clickOnButtonWithoutWaitTime`, attempts to click on a button or input field with the given value. It first constructs an XPath locator based on the provided value and then uses it to locate the element. The method waits for the element to be displayed using the `waitForElement` method and checks if the element is actually displayed using the `isElementDisplayed` method. If the element is found, it scrolls to the element, highlights it (using a highlighter method), and clicks on it. If the element is not found within a certain time limit (10 seconds), the test step fails with an error message. The method also catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyAndPrintErrorPopupMessage",
        "code": "public void verifyAndPrintErrorPopupMessage(String expectedErrorValidation) {\n\t\ttry {\n\t\t\twaitForElementToDisplay(errorTitle_Msg, 3);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 5)) {\n\t\t\t\tif (isElementDisplayed(error_Msg, 3)) {\n\t\t\t\t\tString errorValidation = getText(error_Msg);\n\t\t\t\t\tif (errorValidation.contains(expectedErrorValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - Got '\" + errorValidation + \"' instead of \"\n\t\t\t\t\t\t\t\t+ expectedErrorValidation);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to click main buttons in FOS and QcOrg        \n\t * @param \t      :  optionToClick is the button name to click\n\t */",
        "description": "This Java method, `verifyAndPrintErrorPopupMessage`, verifies if an error popup message is displayed with a specific expected error validation message. Here's a brief summary of what it does:\n\n1. Waits for an element (`errorTitle_Msg`) to be displayed.\n2. Checks if the element is actually displayed within a certain time limit (5 seconds).\n3. If the element is displayed, checks if another element (`error_Msg`) is also displayed.\n4. Retrieves the text content of `error_Msg` and checks if it contains the expected error validation message provided as a parameter (`expectedErrorValidation`).\n5. If the expected error validation message is found, takes a manual screenshot with a descriptive filename.\n6. If the expected error validation message is not found or if any of the above steps fail, marks the test step as failed and provides an error message.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed with an error message.",
        "input": [
            "String expectedErrorValidation"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "selectOptionfromSideArrowButton",
        "code": "public void selectOptionfromSideArrowButton(String optionValue) {\n\t\ttry {\n\t\t\tString menu = \"#xpath=//li[contains(@class,'oneActionsDropDown')] | //span[text()='Show more actions']//parent::button\";\n\t\t\twaitForElement(menu, 20);\n\t\t\tif (isElementPresent(menu)) {\n\t\t\t\tscrollToElement(menu);\n\t\t\t\tscrollToWebElement(menu);\n\t\t\t\tclickOn(menu);\n\t\t\t\twaitTime(3);\n\t\t\t\tString option = optionValue + \"#xpath=//li//a//span[text()='\"+optionValue+\"']\";\n\t\t\t\tif (isElementDisplayed(option, 20)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Side arrow is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOptionfromSideArrowButton failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOptionFromSideArrowButton`, is used to select an option from a dropdown menu that appears when clicking on a side arrow button. The method takes a `String` parameter `optionValue` which represents the value of the option to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It defines a XPath expression for the menu element.\n2. It waits for the menu element to be present and visible on the page.\n3. If the menu is present, it scrolls to the element, clicks on it, and waits for 3 seconds.\n4. It then defines another XPath expression for the specific option with the given `optionValue`.\n5. It checks if the option is displayed on the page within a timeout of 20 seconds. If it is, it clicks on the option.\n6. If the option is not present, it fails the test step.\n7. If any exception occurs during the execution of the method, it writes an error message to a log file and fails the test step.\n\nIn summary, this method automates the process of selecting an option from a dropdown menu that appears when clicking on a side arrow button in a web application.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickMainButtons",
        "code": "public void clickMainButtons(String optionToClick) {\n        try {\n        \trefreshPage();\n        \twaitTime(3);\n            String navigationOption = \"'\" + optionToClick + \"' navigation option #xpath=//div[text()='\" + optionToClick\n                    + \"'] | //lightning-button//button[text()='\"+optionToClick+\"']\";\n            String menu = \"#xpath=//li[contains(@class,'oneActionsDropDown')] | //span[text()='Show more actions']//parent::button\";\n            waitForElement(navigationOption, 10);\n            if (isElementDisplayed(navigationOption, elementLoadWaitTime)) {\n            \tscrollToElement(navigationOption);\n                scrollbycordinates(navigationOption);\n                clickOnSpecialElement(navigationOption);\n                waitTime(15);\n                testStepPassed(\"'\" + optionToClick + \"' option is clicked successfully\");\n            }else if (isElementDisplayed(menu)) {\n            \tscrollToElement(menu);\n                selectOptionfromSideArrowButton(optionToClick);\n                waitForPageToLoad();\n                waitTime(15);\n            }  \n \n            else {\n                testStepFailed(\"'\" + optionToClick + \"' option is not present\");\n            }\n        } catch (Exception e) {\n        \ttestStepFailed(\"Failed in clickMainButtons. Exception: \" + e.getClass().getName());\n        }\n    }\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify success message\n\t * @param         :  message is success message need to capture\n\t */",
        "description": "This Java method, `clickMainButtons`, simulates a click on the main buttons (options) in a web page. It takes a string parameter `optionToClick` which specifies the option to be clicked.\n\nThe method first refreshes the page and waits for a few seconds. Then, it uses Selenium WebDriver commands to:\n\n1. Wait for an element matching the specified XPath or CSS selector.\n2. Check if the element is displayed after a certain time period (elementLoadWaitTime).\n3. If the element is displayed, scroll to it, click on it, and wait for 15 seconds.\n4. Verify that the option was clicked successfully by checking if a success message is displayed.\n\nIf the specified option is not present, it will fail the test step with an error message.\n\nThe method also has a catch block to handle any exceptions that may occur during execution. If an exception occurs, it will fail the test step with an error message indicating the type of exception.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage(String message) {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]//span[text()='\"+message+\"']\";\n\t\t\twaitForElement(successPopup, 5);\n\t\t\tif (isElementDisplayed(successPopup, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared : \"+message);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture \"+message+\" success message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  method to verify error message      \n\t * @param \t      :  validation is the expected message need to compare\n\t */",
        "description": "This Java method, `verifySuccessMessage`, verifies if a specific success message appears on the page. It uses WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element containing the success message to be displayed within a certain time limit (5 seconds). If the element is displayed, it takes a manual screenshot with the message as part of the filename. If the element is not displayed, it logs an error message. The method also catches any exceptions that may occur during execution and logs them as test step failures.",
        "input": [
            "String message"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyErrorPopupMessage",
        "code": "public void verifyErrorPopupMessage(String validation) {\n\t\tString errorValidation =null;\n\t\ttry {\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\terrorValidation = findWebElement(error_Msg).getText().trim();\n\t\t\t\tif (errorValidation.contains(validation)) {\n\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Expected validation is not fire - Got '\" + errorValidation + \"' - instead of \" + validation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  method to verify two error message      \n\t * @param \t      :  validation1 is the expected message need to compare\n\t * @param \t      :  validation2 is the expected message need to compare\n\t */",
        "description": "This Java method, `verifyErrorPopupMessage`, verifies if an expected error message is displayed on the UI. It takes a string parameter `validation` which represents the expected error message. The method checks if the error message is displayed within a certain time limit (5 seconds) using the `isElementDisplayed` method. If the error message is displayed, it extracts the text content of the element and trims any leading or trailing whitespace. It then checks if the extracted text contains the expected validation message. \n\nIf the expected validation message is found, it takes a screenshot and marks the test as passed. If not, it fails the test step with an error message indicating that the expected validation message was not found. If the error message is not displayed within the time limit, it also fails the test step.\n\nIn case of any exception during the execution of this method, it catches the exception and fails the test step with an error message containing the type of exception that occurred.",
        "input": [
            "String validation"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyTwoErrorPopupMessage",
        "code": "public void verifyTwoErrorPopupMessage(String validation1, String validation2) {\n\t\tString errorValidation = null;\n\t\ttry {\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\tList<WebElement> messages = findWebElements(error_Msg);\n\t\t\t\tfor (int iterate = 0; iterate <= 1; iterate++) {\n\t\t\t\t\terrorValidation = messages.get(iterate).getText().trim();\n\t\t\t\t\tif (errorValidation.equalsIgnoreCase(validation1)\n\t\t\t\t\t\t\t|| errorValidation.equalsIgnoreCase(validation2)) {\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - \" + errorValidation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTwoErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/06/2022\n\t * Description    :  method to randomly generate ATOS Deal Id\n\t * @return        :  cardNumber return generated value\n\t */",
        "description": "This Java method, `verifyTwoErrorPopupMessage`, is used to verify the error messages displayed on a webpage. It takes two string parameters, `validation1` and `validation2`, which are expected error messages. The method:\n\n1. Checks if an element with the specified `error_Msg` is displayed within 5 seconds.\n2. If the element is displayed, it retrieves all the web elements with that message and iterates through them.\n3. For each message, it checks if the text matches either of the expected validation messages (`validation1` or `validation2`). \n4. If a match is found, it takes a manual screenshot with a description including the matched error message.\n5. If no match is found, it marks the test step as failed and reports an error message.\n6. If the element is not displayed, it also marks the test step as failed and reports an error message.\n\nThe method catches any exceptions that may occur during its execution and marks the test step as failed if one occurs.",
        "input": [
            "String validation1",
            "String validation2"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateATOSDealID",
        "code": "public String generateATOSDealID() {\n\t\tString atosDealId = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2;\n\t\t\tString set3;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 47;\n\t\t\tset3 = \"CS\";\n\t\t\tnum2 = generator.nextInt(85);\n\t\t\tnum3 = generator.nextInt(763);\n\t\t\tset2 = generator.nextInt(3459) + 10000;\n\t\t\tGOR.Mobile = set3 + set1 + \"\" + num2 + num3 + set2;\n\t\t\tatosDealId = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate ATOS Deal Id Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn atosDealId;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  17/06/2022\n\t * Description    :  method to change date format\n\t * @param         :  dateValue is the input to date to change format\n\t * @return        :  value return date with new format\n\t */",
        "description": "This Java method, `generateATOSDealID`, generates a unique deal ID in the format \"CS47XXXXXYYYY\" where:\n\n- XXXXX is a random number between 0 and 84 (inclusive)\n- YYYY is a random number between 10000 and 34599 (inclusive)\n\nThe method uses the `Random` class to generate these numbers, concatenates them with the strings \"CS\", \"47\", and an empty string (\"\") to form the deal ID. If any exception occurs during this process, it logs the error message using the `testStepFailed` method. The generated deal ID is then returned as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "changeDateFormat",
        "code": "public String changeDateFormat(String dateValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tvalue = formatter2.format(formatter1.parse(dateValue));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `changeDateFormat`, takes a string input representing a date in the format \"dd/MM/yyyy\" and attempts to convert it to the format \"yyyy-MM-dd\". It uses two `SimpleDateFormat` objects to achieve this. If the conversion is successful, the method returns the formatted date as a string. However, if an exception occurs during the conversion process (e.g., the input string cannot be parsed into a date), the method catches the exception, logs an error message, and returns null.",
        "input": [
            "String dateValue"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "changeDateFormat1",
        "code": "public String changeDateFormat1(String dateValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd-MMM-yyyy\");\n\t\t\tvalue = formatter2.format(formatter1.parse(dateValue));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `changeDateFormat1`, takes a string representing a date in the format \"dd/MM/yyyy\" and returns it in the format \"dd-MMM-yyyy\". It uses two `SimpleDateFormat` objects to achieve this: one for parsing the input date string, and another for formatting the result. If an exception occurs during the process (e.g., if the input date string is not in the expected format), the method catches the exception, logs an error message, and returns null.",
        "input": [
            "String dateValue"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "changeDateFormat3",
        "code": "public String changeDateFormat3(String dateValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"MM/d/yyyy\");\n\t\t\tvalue = formatter2.format(formatter1.parse(dateValue));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  17/06/2022\n\t * Description    :  method to get next date from current date\n\t * @return        :  nextDate return generated value\n\t */",
        "description": "This Java method, `changeDateFormat3`, takes a string parameter `dateValue` and attempts to convert it from the format \"dd/MM/yyyy\" to \"MM/d/yyyy\". If the conversion is successful, it returns the converted date in the new format. However, if an exception occurs during the conversion process (e.g., if the input date is not in the expected format), the method catches the exception and logs an error message before returning a null value.",
        "input": [
            "String dateValue"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getNextDate",
        "code": "public String getNextDate() {\n\t\tString nextDate = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.plusDays(1);\n\t\t\tnextDate = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tnextDate = formatter2.format(formatter1.parse(nextDate));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextDate Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn nextDate;\n\t}",
        "description": "This Java method, `getNextDate()`, returns the date that is one day ahead of the current date. It uses the `LocalDate` class from the Java Time API to get the current date and then adds one day to it using the `plusDays()` method. The resulting date string is formatted in two different ways: \"yyyy-MM-dd\" and \"dd/MM/yyyy\", and the latter format is returned as a string.\n\nIf any exception occurs during the execution of this method (for example, if there's an issue parsing the date), it will catch the exception and log an error message using the `testStepFailed()` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getBeforeDate",
        "code": "public String getBeforeDate() {\n\t\tString nextDate = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.minusDays(1);\n\t\t\tnextDate = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tnextDate = formatter2.format(formatter1.parse(nextDate));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextDate Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn nextDate;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  17/06/2022\n\t * Description    :  method to add 10 year with current date\n\t * @return        :  year return generated value\n\t */",
        "description": "This Java method, `getBeforeDate()`, returns a string representation of the date that is one day before the current date. It uses the `LocalDate` class from the `java.time` package to get the current date and then subtracts one day using the `minusDays()` method. The resulting date is then formatted as \"dd/MM/yyyy\" using two `SimpleDateFormat` objects. If any exception occurs during this process, it catches the exception and logs a failure message using the `testStepFailed()` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "toAddYears",
        "code": "public String toAddYears() {\n\t\tString year = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.plusYears(10);\n\t\t\tyear = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tyear = formatter2.format(formatter1.parse(year));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"toAddYears Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn year;\n\t}",
        "description": "This Java method, `toAddYears`, takes the current date and adds 10 years to it. It then formats the resulting date string in the format \"dd/MM/yyyy\" and returns it. If any exception occurs during this process, it will catch the exception and report a test step failure with the exception class name.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyTwoValues",
        "code": "public boolean verifyTwoValues(String actualValue, String expectedValue) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tif (actualValue.equalsIgnoreCase(expectedValue)) {\n\t\t\t\ttestStepPassed(\n\t\t\t\t\t\t\"Actual value - [ \" + actualValue + \" ] is same as expected value - [ \" + expectedValue + \" ]\");\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\"Actual value - \" + actualValue + \" is not as same as expected value - \" + expectedValue);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTwoValues \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyTwoValues`, is used to compare two strings (`actualValue` and `expectedValue`) and returns a boolean indicating whether they are equal or not. \n\nThe method first sets a default value of `flag` to `false`. It then attempts to convert both strings to the same case (either both uppercase or both lowercase) using the `equalsIgnoreCase()` method. If the actual value matches the expected value, it calls a method named `testStepPassed()` with a message indicating that the values are equal, and sets `flag` to `true`. \n\nIf the actual value does not match the expected value, it calls a method named `testStepFailed()` with a message indicating that the values are not equal. In either case where an assertion fails (i.e., the actual value does not match the expected value), it also logs the failure in the test results.\n\nThe method catches any exceptions that may occur during this process and, if one is thrown, calls `testStepFailed()` with a message indicating that the verification failed due to an exception. \n\nFinally, the method returns the value of `flag`, which indicates whether the actual value matched the expected value or not.",
        "input": [
            "String actualValue",
            "String expectedValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnCrossButton",
        "code": "public void clickOnCrossButton() {\n        try {\n            String link =\"Button#xpath=//span[text()='Clear'] | //button[contains(@title,'Close')]\";\n            waitForElement(link, 10);\n            if (isElementDisplayed(link, 10)) {\n                scrollToWebElement(link);\n                clickOnSpecialElement(link);\n            } else {\n                testStepFailed(\"Clear Button is not present.\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed to click the Clear Button \"+ e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `clickOnCrossButton`, attempts to locate and click on a cross/clear button with an XPath expression. The method uses a try-catch block to handle any exceptions that may occur during execution.\n\nHere's a step-by-step breakdown:\n\n1. It defines a string variable `link` containing the XPath expression for locating the clear button.\n2. It calls the `waitForElement` method, waiting up to 10 seconds for the element to be present on the page.\n3. If the element is displayed within the given time frame, it proceeds to:\n\t* Call the `scrollToWebElement` method to scroll the page to the element if necessary.\n\t* Call the `clickOnSpecialElement` method to click on the element.\n4. If the element is not present or cannot be clicked within the given time frame, it calls the `testStepFailed` method with an error message indicating that the clear button was not found.\n\nIf any exception occurs during execution (e.g., the element is not found), the method catches the exception and calls the `testStepFailed` method to report a failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getPastDate",
        "code": "public String getPastDate() {\n\t\tString pastDate = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.minusDays(3);\n\t\t\tpastDate = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tpastDate = formatter2.format(formatter1.parse(pastDate));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextDate Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn pastDate;\n\t}",
        "description": "This Java method, `getPastDate`, returns a string representation of the current date minus 3 days. It uses the `LocalDate` class from the Java Time API to calculate the past date and then formats it using two different SimpleDateFormat objects to convert the date into a \"dd/MM/yyyy\" format. If any exception occurs during the process, it catches the exception and calls the `testStepFailed` method with an error message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generatePassportNumber",
        "code": "public String generatePassportNumber() {\n\t\tString binNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2;\n\n\t\t\tRandom r = new Random();\n\t\t\tchar c = (char)(r.nextInt(26) + 'A');\n\t\t\t \n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 4;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 1000;\n\t\t\tbinNumber =c + \"\" +set1 + num2 + num3 + set2;\n\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Passport Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn binNumber;\n\t}",
        "description": "This Java method generates a random passport number. It starts by creating a character `c` from uppercase letters ('A' to 'Z') and then combines it with three parts:\n\n1. A fixed part `set1` set to 4.\n2. Two digits (`num2` and `num3`) randomly generated between 0 and 7 (inclusive).\n3. A random number (`set2`) generated between 1000 and 1643 (inclusive).\n\nThe resulting string is the generated passport number. If an exception occurs during the generation process, the method catches it and calls a test step failure method with a message indicating the type of exception that occurred.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentUrlAndCompare",
        "code": "public String getCurrentUrlAndCompare(String value) {\n\t\tString url = null;\n\t\ttry {\n\t\t\turl = driver.getCurrentUrl();\n\t\t\tif (url.contains(value)) {\n\t\t\t\tmanualScreenshot(url + \" url is Successfully launched\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to launch url\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getCurrentUrlAndCompare Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn url;\n\t}",
        "description": "This Java method, `getCurrentUrlAndCompare`, is used to retrieve the current URL of a webpage and compare it with a given value. It uses the WebDriver's `getCurrentUrl()` method to get the current URL and then checks if that URL contains the specified value using the `contains()` method. If the URL contains the value, it takes a manual screenshot with a message indicating successful launch. If not, it marks the test step as failed. The method also catches any exceptions that may occur during the process and reports them as test failures. Finally, it returns the current URL.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifySuccessMessage1",
        "code": "public void verifySuccessMessage1(String message) {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]//span[text()='\"+message+\"']\";\n\t\t\twaitForElement(successPopup, 5);\n\t\t\tif (isElementDisplayed(successPopup, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared : \"+message);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cannot able to capture \"+message+\" success message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage1 \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessage1`, is used to verify the presence of a specific success message on a webpage. The method takes a `String` parameter `message` which represents the expected success message.\n\nHere's what it does:\n\n1. It constructs an XPath expression that identifies the element containing the success message.\n2. It waits for up to 5 seconds for the specified element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it checks if the text of the element matches the provided `message`.\n4. If the element is displayed and the text matches, it takes a manual screenshot with a message indicating that the success popup appeared with the given message.\n5. If the element is not displayed or the text does not match, it marks the test step as failed with an error message.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if one occurs.",
        "input": [
            "String message"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getNextNumber",
        "code": "public String getNextNumber(String value) {\n\t\tString nextNumber = \"\";\n\t\ttry {\n\t\t\tint i=Integer.parseInt(value);  \n\t\t\ti=Math.incrementExact(i);\t\n\t\t\tnextNumber=String.valueOf(i);\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextNumber Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn nextNumber;\n\t}",
        "description": "This Java method, `getNextNumber`, takes a string input representing an integer and returns the next integer value. It increments the input integer by 1 using the `Math.incrementExact` method, which is designed to handle overflows safely. If the input string cannot be parsed into an integer (i.e., it's not a valid integer), the method catches the exception and logs a failure message instead of returning an error or throwing an exception.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getBeforeNumber",
        "code": "public String getBeforeNumber(String value) {\n\t\tString beforeNumber = \"\";\n\t\ttry {\n\t\t\tint i=Integer.parseInt(value);  \n\t\t\ti=Math.decrementExact(i);\t\n\t\t\tbeforeNumber=String.valueOf(i);\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getBeforeNumber Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn beforeNumber;\n\t}",
        "description": "This Java method, `getBeforeNumber`, takes a string input `value` and attempts to parse it as an integer. It then decrements the integer value by 1 using the `Math.decrementExact()` method and converts the result back to a string. If the parsing or decrement operation fails (e.g., due to non-numeric input), the method catches the exception, logs a failure message using `testStepFailed()`, and returns an empty string (`\"\"`). Otherwise, it returns the decremented integer as a string.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "scrollToElement",
        "code": "public void scrollToElement(String objectLocator) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(objectLocator, 8)) {\n\t\t\t\tWebElement element = findWebElement(objectLocator);\n\t\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\t\tjs.executeScript(\"arguments[0].scrollIntoView();\", element);\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in scrollToElement: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `scrollToElement`, takes a string parameter `objectLocator` and scrolls the element located by that locator into view. It uses the Selenium WebDriver's JavaScriptExecutor to execute a script that scrolls the element into view. The method also checks if the element is displayed before attempting to scroll it into view. If any exceptions occur during execution, it logs an error message using the `testStepFailed` method.",
        "input": [
            "String objectLocator"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "scrollToElementTillPresent",
        "code": "public void scrollToElementTillPresent(String objectLocator) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tint yaxis = 500;\n\t\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\t\t\tdo {\n\t\t\t\ttry {\n\t\t\t\t\tparseidentifyByAndlocator(objectLocator);\n\t\t\t\t\tflag = driver.findElement(By.xpath(locator)).isDisplayed();\n\t\t\t\t\tflag = true;\n\t\t\t\t} catch (org.openqa.selenium.NoSuchElementException e) {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\tjse.executeScript(\"window.scrollTo(0, \" + yaxis + \")\");\n\t\t\t\t\tyaxis = yaxis + 1000;\n\t\t\t\t\tThread.sleep(2500);\n\t\t\t\t}\n\t\t\t\tif (yaxis >= 25000) {\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t} while (!flag);\n\t\t} catch (NoSuchElementException | InterruptedException e) {\n\t\t\ttestStepFailed(\"Failed in scrollToElementTillPresent \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `scrollToElementTillPresent`, is used to scroll an element into view until it becomes visible. The method takes a string parameter `objectLocator` which is likely the XPath or CSS locator of the element to be scrolled.\n\nThe method uses a do-while loop to repeatedly scroll the page down by 1000 pixels every 2.5 seconds, checking after each scroll if the element is now visible (i.e., its display property is true). The scrolling continues until the element becomes visible or the maximum scrolling limit of 25,000 pixels is reached.\n\nIf an exception occurs during execution (e.g., `NoSuchElementException` or `InterruptedException`), the method catches it and logs a failure message using the `testStepFailed` method.",
        "input": [
            "String objectLocator"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generatebankaccountNumber15_digit",
        "code": "public String generatebankaccountNumber15_digit() {\n\t\tString cardNumber = null;\n\t\ttry {\n\t\t\tint num2, num3, num4;\n\t\t\tString set1;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = \"4\";\n\t\t\tnum2 = generator.nextInt(453) + 100;\n\t\t\tnum3 = generator.nextInt(783) + 100;\n\t\t\tnum4 = generator.nextInt(2511) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num3 + num2 + num4 + \"\" + \"1995\";\n\t\t\tcardNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate bank Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn cardNumber;\n\t}",
        "description": "This Java method generates a 15-digit bank account number. It uses the `Random` class to generate three random numbers, combines them with a fixed prefix (\"4\"), and appends the year \"1995\" to create the bank account number. The generated number is stored in a `String` variable called `cardNumber`, which is then returned by the method. If any exception occurs during the generation process, it catches the exception and logs an error message using the `testStepFailed` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentDateAndTime",
        "code": "public String getCurrentDateAndTime() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"dd/MM/yyyy, h:mm a\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn dateTime;\n\t}",
        "description": "This Java method, `getCurrentDateAndTime()`, returns a string representation of the current date and time in the format \"dd/MM/yyyy, h:mm a\". It uses the `SimpleDateFormat` class to format a `Date` object into a string. If an exception occurs during this process (e.g., due to a formatting error), it logs the error and sets the returned string to null.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentTime",
        "code": "public String getCurrentTime() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"h:mm aa\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date).toLowerCase();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn dateTime;\n\t}",
        "description": "This Java method, `getCurrentTime()`, returns the current time in a string format. The time is formatted as hours and minutes (e.g., 3:45 PM) using the `SimpleDateFormat` class. If any exception occurs during the execution of this method, it catches the exception, logs an error message to a log file, and marks the test step as failed.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getCurrentDateAndTime1",
        "code": "public String getCurrentDateAndTime1() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"MM/dd/yyyy, h:mm a\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getClass().getName());\n\t\t}\n\t\treturn dateTime;\n\t}",
        "description": "This Java method, `getCurrentDateAndTime1()`, returns the current date and time in the format \"MM/dd/yyyy, h:mm a\" as a string. It uses the `SimpleDateFormat` class to format a `Date` object representing the current date and time. If an exception occurs during this process (e.g., due to issues with the system clock), it catches the exception, logs an error message to a log file, and sets the return value to `null`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "closeBrowserIfPresent",
        "code": "public void closeBrowserIfPresent() {\n        if (driver != null) {\n            driver.close();\n            waitTime(1); // a small wait for a safer side\n            driver.quit();\n            waitTime(2); // a small wait in order to accommodate the opening of a subsequent session\n            driver = null; // re-initializing driver\n        }\n    }",
        "description": "This Java method, `closeBrowserIfPresent`, is used to close the browser instance if it is present. It checks if the `driver` object is not null, and if so, it performs the following actions:\n\n1. Closes the browser using the `driver.close()` method.\n2. Waits for a short period of time (1 second) to ensure the browser has closed safely.\n3. Quits the driver using the `driver.quit()` method.\n4. Waits again for a slightly longer period of time (2 seconds) to allow for any remaining processes to complete before opening a new session.\n5. Re-initializes the `driver` object by setting it to null.\n\nThis method is likely used in automated testing or other situations where multiple browser sessions need to be managed, and it helps ensure that each session is properly closed before moving on to the next one.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "closePreviousBrowser",
        "code": "public void closePreviousBrowser() {\n        driver.close();\n        waitTime(1); // a small wait for a safer side\n        driver.quit();\n        waitTime(2); // a small wait in order to accommodate the opening of a subsequent session\n        driver = null; // re-initializing driver\n    }",
        "description": "This Java method, `closePreviousBrowser`, is used to close and quit the previous browser session when using Selenium WebDriver. Here's what it does:\n\n1. It closes the current browser window using `driver.close()`.\n2. Waits for a brief period of 1 second (`waitTime(1)`) to ensure the browser has closed safely.\n3. Quits the WebDriver session using `driver.quit()`, which releases any system resources used by the driver.\n4. Waits again for 2 seconds (`waitTime(2)`) to give time for the previous session to completely shut down and accommodate the opening of a subsequent session.\n5. Finally, it sets the `driver` variable to `null`, effectively re-initializing it for use in a new browser session.\n\nThis method is useful when you want to close the current browser window and start fresh with a new session, perhaps for testing or automation purposes.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]\";\n\t\t\twaitForElement(successPopup, 5);\n\t\t\tif (isElementDisplayed(successPopup, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture success message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" +e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessage`, is used to verify the display of a \"success\" popup message on a web page. The method attempts to locate an element with the specified XPath (`//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]`) and waits for up to 5 seconds for it to appear. If the element is displayed, it takes a manual screenshot as proof of success. If the element does not appear within the given time frame, an error message is logged. The method also catches any exceptions that may occur during execution and logs them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "borderHighLighterMethod",
        "code": "public void borderHighLighterMethod(String element) {\n        try {\n            WebElement e = findWebElement(element);\n            JavascriptExecutor js = (JavascriptExecutor) driver;\n            js.executeScript(\"arguments[0].setAttribute('style', 'border: 2px solid red;');\", e);\n            Thread.sleep(2000);\n        } catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in borderHighLighterMethod \" +e.getClass().getName());\n        }\n    }",
        "description": "This Java method, named `borderHighLighterMethod`, is used to highlight a specific web element on a webpage by adding a red border around it. It takes a string parameter `element` which represents the name of the web element to be highlighted.\n\nThe method uses Selenium WebDriver's `findWebElement` method to locate the specified web element, and then uses JavaScript execution to set the style attribute of that element to add a 2-pixel solid red border. The `Thread.sleep(2000)` line is used to pause the execution for 2 seconds after highlighting the element.\n\nIf any exception occurs during the execution of this method, it will be caught and logged as a test step failure using the `testStepFailed` method.",
        "input": [
            "String element"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "checkUpperCase",
        "code": "public void checkUpperCase(String value) {\n\t\ttry {\n\t\t\tif (value.matches(\".*[A-Z].*\")&&(!value.matches(\".*[a-z].*\"))) {\n\t\t\t\ttestStepInfo(value+\" The String contains only Uppercase letter\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value+\" has lowercase letter\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"checkLowerCase Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `checkUpperCase`, checks if a given string contains only uppercase letters. It uses regular expressions to match the pattern of having at least one uppercase letter (`[A-Z]`) and no lowercase letters (`[a-z]`). If the string matches this pattern, it indicates that the string contains only uppercase letters, and the method logs a success message with the test step information. Otherwise, it logs a failure message indicating that the string has lowercase letters. The method also catches any exceptions that may occur during execution and logs an error message if one occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "checkLowerCase",
        "code": "public void checkLowerCase(String value) {\n\t\ttry {\n\t\t\tif (value.matches(\".*[a-z].*\")&&(!value.matches(\".*[A-Z].*\"))) {\n\t\t\t\ttestStepInfo(value+\" The String contains only lowercase letter\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value+\" has uppercase letter\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"checkLowerCase Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `checkLowerCase`, takes a `String` as input and checks if the string contains only lowercase letters. If it does, it passes the test step with a message indicating that the string contains only lowercase letters. If the string contains uppercase letters or any other characters, it fails the test step with a message indicating that the string has uppercase letters. The method also catches any exceptions that may occur during execution and reports them as failed test steps.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "pageScrollUp",
        "code": "public void pageScrollUp() {\n        JavascriptExecutor jse = (JavascriptExecutor) driver;\n        jse.executeScript(\"scroll(0, -550);\");\n    }",
        "description": "This Java method, `pageScrollUp`, uses Selenium's WebDriver API to scroll up a web page by 550 pixels. It does this by executing a JavaScript script using the `executeScript` method of the `JavascriptExecutor`. The script itself, `\"scroll(0, -550);\"`, takes two arguments: the x-coordinate (set to 0) and the y-coordinate (-550). This effectively scrolls the page up by 550 pixels.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "ApiUpdate",
        "code": "public void ApiUpdate(String EndPointURl,String apiHeaders,String apiBody,String response) {\n\t\ttry {\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\t\t\n\t\t\t\ttestStepInfo(\"Service URL : \" + EndPointURl);\n\t\t\t\ttestStepInfo(\"Request Body : \"+ apiBody);\n\t\t\t\tString endPointAuth = EndPointAuthToUpdate(EndPointURl, apiHeaders, apiBody);\n\t\t\t\tif (endPointAuth.contains(response)) {\n\t\t\t\t\ttestStepPassed(\"Got expected response : \" + endPointAuth);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(endPointAuth);\n\t\t\t\t}\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ApiUpdate \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `ApiUpdate`, is used to update an API endpoint. It takes four parameters: the URL of the endpoint, the headers for the request, the body of the request, and the expected response.\n\nThe method first logs some test information, including the service URL and the request body. Then it calls another method, `EndPointAuthToUpdate`, which is not shown in this code snippet, to get the authentication details for the endpoint.\n\nThe method then checks if the authentication details contain the expected response. If they do, it marks the test step as passed; otherwise, it fails the test step and logs an error message.\n\nIf any exception occurs during the execution of the method, it catches the exception and fails the test step with a generic error message.",
        "input": [
            "String EndPointURl",
            "String apiHeaders",
            "String apiBody",
            "String response"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "EndPointAuthToUpdate",
        "code": "public String EndPointAuthToUpdate(String apiURI, String apiHeaders, String apiBody) {\n\t\ttry {\n\t\t\tString[] apiHeadersArray = apiHeaders.split(\",\");\n\t\t\tint numberOfApiHeaders = apiHeadersArray.length;\n\t\t\tint i;\n\t\t\tList<Header> headersList = new ArrayList<Header>();\n\t\t\tString[] individualHeaderArray;\n\t\t\tfor (i = 0; i < numberOfApiHeaders; i++) {\n\t\t\t\tindividualHeaderArray = apiHeadersArray[i].split(\":\");\n\t\t\t\theadersList.add(new Header(individualHeaderArray[0],individualHeaderArray[1]));\n\t\t\t}\n\t\t\tfor (i = 1; i <= 6; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = null; // nullifying the response at the start\n\t\t\t\t\tresponse = given().headers(new Headers(headersList)).body(apiBody).relaxedHTTPSValidation().when()\n\t\t\t\t\t\t\t.post(apiURI);\n\t\t\t\t\tSystem.out.println(response.getBody().asString());\n\t\t\t\t\ttestStepPassed(\"API command executed successfully\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tif (i == 6) {\n\t\t\t\t\t\tstepFailed(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\twaitTime(10); // a small before trying again\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in EndPointAuthToUpdate \" + e.getClass().getName());\n\t\t}\n\t\treturn response.getBody().asString();\n\t}",
        "description": "This Java method, named `EndPointAuthToUpdate`, appears to be a part of an API testing framework. It takes three parameters: `apiURI` (the URL of the API endpoint), `apiHeaders` (a string containing HTTP headers in the format \"header1:value1, header2:value2, ...\"), and `apiBody` (the request body).\n\nThe method attempts to execute a POST request to the specified API endpoint with the provided headers and body. It uses a loop to retry the request up to 6 times if an exception occurs. The response from the API is printed to the console, and the test step is marked as passed or failed based on the outcome.\n\nIf all retries fail, the method will mark the test step as failed and print an error message. Finally, it returns the response body as a string.",
        "input": [
            "String apiURI",
            "String apiHeaders",
            "String apiBody"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "readProperties",
        "code": "public String readProperties(String data) {\n\t\tString dataFromProp = null;\n\t\ttry {\n\t\t\tString path = \"./config/ApiBody.properties\";\n\t\t\tFileReader reader = new FileReader(path);\n\t\t\tProperties prop = new Properties();\n\t\t\tprop.load(reader);\n\t\t\tdataFromProp = prop.getProperty(data);\n\t\t} catch (IOException e) {\n\t\t\ttestStepFailed(\"Failed in readProperties \" + e.getClass().getName());\n\t\t}\n\t\treturn dataFromProp;\n\t}\n\t\n\t// The response would be given as encrypted\n    // The below function can be used to decrypt the response",
        "description": "This Java method, `readProperties`, reads a property from an external file named `ApiBody.properties` located in the `./config/` directory. The method takes a string parameter `data` which is the name of the property to read.\n\nThe method uses a `FileReader` and `Properties` class to load the properties file and then retrieves the value of the specified property using the `getProperty()` method. If an `IOException` occurs during the reading process, it catches the exception and calls a method named `testStepFailed` with the error message and the name of the exception's class.\n\nThe method returns the decrypted response as a string.",
        "input": [
            "String data"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "decryptResponse",
        "code": "public String decryptResponse(String encryptedResponse, String encryptionKey, String initializationVector) {\n        String decryptedResponse = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n            cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptionKey.getBytes(), \"AES\"),\n                    new IvParameterSpec(initializationVector.getBytes()));\n            BASE64Decoder decoder = new BASE64Decoder();\n            decryptedResponse = new String(cipher.doFinal(decoder.decodeBuffer(encryptedResponse)));\n            testStepPassed(\"Decrypted response: \" + decryptedResponse);\n        } catch (Exception e) {\n            stepFailed(\"Error while decrypting: \" + e.getClass().getName());\n        }\n        return decryptedResponse;\n    }\n\t\n // The 'API' functions are not getting executed with the default 'API' commands\n    // of 'iSafe'\n    // So, we had created our own method as below\n    // The below method would set the headers and the body before executing the\n    // 'API' function",
        "description": "This Java method, `decryptResponse`, takes three parameters: an encrypted response string, an encryption key string, and an initialization vector string. It uses these inputs to decrypt the encrypted response using the Advanced Encryption Standard (AES) with CBC mode and PKCS#5 padding.\n\nThe method first initializes a Cipher object in decryption mode, then sets its secret key and initialization vector. The encrypted response is decoded from Base64 format, and the decrypted response is obtained by finalizing the cipher operation on the decoded buffer.\n\nIf any exception occurs during the decryption process, the method catches it and logs an error message. Finally, the decrypted response is returned as a string.\n\nThe purpose of this method seems to be to decrypt API responses that have been encrypted using AES with CBC mode and PKCS#5 padding. The method also includes some logging functionality to indicate whether the decryption was successful or not.",
        "input": [
            "String encryptedResponse",
            "String encryptionKey",
            "String initializationVector"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "executeAPIMethod",
        "code": "public Response executeAPIMethod(String apiURI, String apiHeaders, String apiBody) {\n\n \n\n        // For 'OTP', 'Auth' etc., there are only two headers - Content Type and Seal\n        // But for certain other 'APIs', there are three headers\n        // So, we have given 'line-separated' headers in the 'TestData.xls' file as\n        // below:\n        // Content-Type,application json\n        // SealValue,123123AFDasd\n        // We form a list of headers with the line-separated headers read from the test\n        // data file\n        // and set this headers list in the command\n        // We do the following:\n        // Let us assume that the line-separated headers in the test data file is as\n        // below:\n        // Content-Type,application json\n        // SealValue,seal\n        // 1. Splitting by '\\n' would cause headers array as follows:\n        // headers array[0] = content-Type,application/json\n        // headers-array[1] = SealValue,123123AFDasd\n        // 2. Splitting each of the above headers array element by ',' would separate\n        // the header name and header value as below:\n        // Content-Type and application/json\n        // SealValue and 123123AFDasd\n        // 3. Adding each of the header name and value into a big headers list\n        // 4. Setting this headers list in the 'API' command via. the '.headers'\n        // function\n        String[] apiHeadersArray = apiHeaders.split(\"\\\\n\");\n        int numberOfApiHeaders = apiHeadersArray.length;\n        int i;\n        List<Header> headersList = new ArrayList<Header>();\n        String[] individualHeaderArray;\n        for (i = 0; i < numberOfApiHeaders; i++) {\n            individualHeaderArray = apiHeadersArray[i].split(\",\");\n            headersList.add(new Header(individualHeaderArray[0], individualHeaderArray[1]));\n        }\n\n \n\n        // At times, when the network or VPN is slow, an exception might be thrown\n        // So, instead of attempting execution just once, we are attempting six times\n        // with a '10-second' wait between each attempts\n        for (i = 1; i <= 6; i++) {\n            try {\n                response = null; // nullifying the response at the start\n                response = given().headers(new Headers(headersList)).body(apiBody).relaxedHTTPSValidation() // In order\n                                                                                                            // for the\n                                                                                                            // 'API' to\n                                                                                                            // work, we\n                                                                                                            // need to\n                                                                                                            // ignore\n                                                                                                            // the\n                                                                                                            // security\n                                                                                                            // certificate\n                        .when().post(apiURI);\n                testStepPassed(\"API command executed successfully\");\n                break;\n            } catch (Exception e) {\n                if (i == 6) {\n                    stepFailed(\n                            \"Exception while attempting to execute the API method  - '\" + e.getClass().getName() + \"'\");\n                } else {\n                    testStepInfo(\n                            \"Exception while attempting to execute the API method  - '\" + e.getClass().getName() + \"'\");\n                    waitTime(10); // a small before trying again\n                }\n            }\n        }\n        return response;\n    }\n\t\n // The 'API' methods of 'Bajaj Finserv' would accept the 'Paylod JSON' only in\n    // an encrypted form\n    // So, we are encrypting it with a 'Public Key' and an 'Initialization Vector'",
        "description": "This Java method, `executeAPIMethod`, executes an API call using the provided API URI, headers, and body. It also handles exceptions that may occur during the execution process.\n\nHere's a brief summary of what the method does:\n\n1. It splits the provided API headers into individual header-name-value pairs.\n2. It constructs a list of `Header` objects from these pairs.\n3. It attempts to execute the API call six times with a 10-second wait between each attempt, in case of network or VPN issues.\n4. If the execution is successful, it logs a success message and returns the response.\n5. If an exception occurs during the execution process, it logs an error message and waits for 10 seconds before attempting to execute again.\n6. After six attempts, if the exception still persists, it logs a failure message and returns null.\n\nThe method also handles API-specific requirements, such as ignoring security certificates (relaxedHTTPSValidation) and encrypting the payload JSON using a public key and initialization vector.",
        "input": [
            "String apiURI",
            "String apiHeaders",
            "String apiBody"
        ],
        "output": "Response"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "encryptJSON",
        "code": "public String encryptJSON(String clearJSON, String publicKey, String initializationVector) {\n        String encryptedJSON = null;\n        try {\n            Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5Padding\");\n            cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(publicKey.getBytes(), \"AES\"),\n                    new IvParameterSpec(initializationVector.getBytes()));\n            BASE64Encoder encoder = new BASE64Encoder();\n            encryptedJSON = encoder.encode(cipher.doFinal(clearJSON.getBytes(\"UTF-8\")));\n\n \n\n            // The Encrypted String is somehow given in multiple lines as below:\n            // q7BUOszoUdWv7MM3qerbIURzW4o2YvfclMjwOo6cb2dZPKbMGHXc+q0HU0TuFf/j0O6P31gSasdW\n            // dXM3vh/l/lWh3OErK2ea4aF0egLemm84iKMp2dwYFUX2T5bJC22YKZWZTV4h1bcvAKk78dDAOze2\n            // P2EWN5kVCFinYGPCibie8VEQMldXKrlfIChv7XvQ\n            // Somehow, the 'Seal' gets generated only when the encrypted string is in a\n            // single line as follows:\n            // q7BUOszoUdWv7MM3qerbIURzW4o2YvfclMjwOo6cb2dZPKbMGHXc+q0HU0TuFf/j0O6P31gSasdWdXM3vh/l/...\n            // So, we had removed the 'New Line Character' from the encrypted string to make\n            // it as one line\n            encryptedJSON = encryptedJSON.replace(\"\\r\\n\", \"\");\n            testStepPassed(\"Encrypted JSON: \" + encryptedJSON);\n        } catch (Exception e) {\n            stepFailed(\"Error while encrypting: \" + e.getClass().getName());\n        }\n        return encryptedJSON;\n    }",
        "description": "This Java method, `encryptJSON`, takes three parameters:\n\n1. `clearJSON`: The input JSON string to be encrypted.\n2. `publicKey`: A public key used for encryption.\n3. `initializationVector`: An initialization vector used in the encryption process.\n\nThe method uses the AES (Advanced Encryption Standard) algorithm with CBC (Cipher Block Chaining) mode and PKCS5 padding to encrypt the input JSON string. The encrypted result is then encoded using Base64.\n\nThe method also includes some logging statements, specifically a call to `testStepPassed` when the encryption is successful, and a call to `stepFailed` if an exception occurs during the encryption process.\n\nFinally, the method removes newline characters from the encrypted result before returning it.",
        "input": [
            "String clearJSON",
            "String publicKey",
            "String initializationVector"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "printErrorMessageInQcField",
        "code": "public void printErrorMessageInQcField() {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//span[@class='slds-has-error']\";\n\t\t\tif (isElementPresent(errorField)) {\n\t\t\t\tList<WebElement> findWebElements = findWebElements(errorField);\n\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\tif (!text.isEmpty()) {\n\t\t\t\t\t\ttestStepFailed(\"Error Message : \" + text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepPassed(\"QC Document Passed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInQcField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `printErrorMessageInQcField()`, attempts to find and print any error messages present in a specified field (identified by an XPath expression) of a QC document. \n\nHere's what it does:\n\n1. It checks if the specified error field is present.\n2. If the field is present, it retrieves all web elements within that field using Selenium WebDriver.\n3. For each web element found, it extracts the text content and checks if the text is not empty.\n4. If the text is not empty, it marks a test step as failed with the error message text.\n5. If the error field is not present or no error messages are found, it marks a test step as passed.\n\nThe method also includes a catch block to handle any exceptions that may occur during execution and reports the failure with the exception type.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyAndClickButton",
        "code": "public void verifyAndClickButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value[normalize-space()]='\"\n\t\t\t\t\t+ value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tString buttonName = getText(link);\n\t\t\tif (!buttonName.equalsIgnoreCase(value)) {\n\t\t\t\tscrollbycordinates(link);\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(value + \" Button already clicked\");\n\t\t\t}\n\t\t\twaitTime(5);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyAndClickButton(String value)` - This method verifies if an element with the given `value` exists on the page and clicks it if found. It uses various methods (e.g., `waitForElement`, `scrollbycordinates`, `scrollToElement`, `scrollToWebElement`, `highLighterMethod`, and `clickOnSpecialElement`) to interact with the element. If the element is not found, it reports a failure.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "convertDateFormat",
        "code": "public String convertDateFormat(String paramDate, String paramExistingDateformat, String paramNewDateFormat) {\n\t\tString returnDate = \"\";\n\t\ttry {\n\t\t\tDate date = new SimpleDateFormat(paramExistingDateformat).parse(paramDate);\n\t\t\treturnDate = new SimpleDateFormat(paramNewDateFormat).format(date).toString();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in convert Date Format\");\n\t\t\tstepFailed(\"Exception while attempting to convert date format :'\" + e.getClass().getName());//stepFailed would not give screenshots        \n\t\t}\n\t\treturn returnDate;\n\t}",
        "description": "This Java method, `convertDateFormat`, takes three parameters: a date string (`paramDate`), the original date format (`paramExistingDateformat`), and the desired new date format (`paramNewDateFormat`). The method attempts to parse the input date string using the original format, and then formats it according to the new format. If any exceptions occur during this process (e.g., invalid date string or unsupported date format), the method catches the exception, logs an error message, and returns an empty string. Otherwise, it returns the formatted date string in the desired format.",
        "input": [
            "String paramDate",
            "String paramExistingDateformat",
            "String paramNewDateFormat"
        ],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "pageScrollDown",
        "code": "public void pageScrollDown() {\n\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\t\tjse.executeScript(\"scroll(0, 550);\");\n\t}",
        "description": "The `pageScrollDown()` method is used to scroll down a web page by a specified amount using Selenium WebDriver in Java. This method uses the JavaScript Executor to execute a script that scrolls the page down by 550 pixels from its current position. The scrolling starts from the top of the page and moves downwards by the specified distance.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyHandleErrorMessageForBarcode",
        "code": "public String verifyHandleErrorMessageForBarcode() {\n\n\t\tboolean flag = false;\n\n\t\tString errorValue=null;\n\n\t\ttry {\n\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields']\";\n\n\t\t\tif (isElementDisplayed(error, 4)) {\n\n\t\t\t\tflag = true;\n\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\n\t\t\t\t\terrorValue=errorsList.get(i).getText().trim();\n\n\t\t\t\t}\n\n\t\t\t\tif (flag) {\n\n\t\t\t\t\ttestStepInfo(\"Due to above errors : \"+errorValue +\" , We cannot move further.\");\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\telse {\n\n\t\t\t\ttestStepInfo(\"There is no error while entering the fields\");\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\n\t\t}\n\n\t\treturn errorValue;\n\n\t}",
        "description": "This Java method, `verifyHandleErrorMessageForBarcode`, is used to verify the error message displayed on a webpage for a barcode. \n\nIt first checks if an error message is displayed using the `isElementDisplayed` method. If an error message is found, it then extracts the list of errors from the webpage and takes manual screenshots of each error along with its text. The method returns the last error value encountered.\n\nIf no error message is found, it logs a success message indicating that there are no errors while entering fields. \n\nIn case any exception occurs during the execution of this method, it logs an error message indicating that the method `verifyErrorMessageInSqcPopup` has failed.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "enterValueInFieldTWFRewamp",
        "code": "public void enterValueInFieldTWFRewamp(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input | //label[contains(text(),'\"+labelName+\"')]//following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tscrollToElementTillPresent(field);\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field filled with value of : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enter ValueIn Field \"+labelName);\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldTWFRewamp`, is used to enter a given value into a specific field on a web page. The method takes two string parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided `labelName` to locate the corresponding input field. It then uses various methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToElement`) to ensure the element is present, visible, and scrollable.\n\nOnce the element is ready, it enters the given `value` into the field using the `typeIn` method. After successful entry, it takes a manual screenshot of the filled field using the `highLighterMethodManualScreenShot` method.\n\nIf any exception occurs during this process, the method catches and logs the error using the `testStepFailed` method, indicating that the test step failed to enter the value into the specified field.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getNextMonthDate",
        "code": "public String getNextMonthDate() {\n\t\tString nextMonth = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.plusMonths(1);\n\t\t\tnextMonth = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tnextMonth = formatter2.format(formatter1.parse(nextMonth));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextDate Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn nextMonth;\n\t}",
        "description": "This Java method, `getNextMonthDate`, returns the date of the next month as a string in the format \"dd/MM/yyyy\". It uses the `LocalDate` class from the Java Time API to get the current date and then adds one month to it. The resulting date is converted to a string using two different formats: \"yyyy-MM-dd\" and then \"dd/MM/yyyy\", before being returned by the method. If any exception occurs during this process, the method catches it and reports an error.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "getPreviousMonthDate",
        "code": "public String getPreviousMonthDate() {\n\t\tString nextMonth = \"\";\n\t\ttry {\n\t\t\tLocalDate date = LocalDate.now();\n\t\t\tdate = date.minusMonths(1);\n\t\t\tnextMonth = date.toString();\n\t\t\tSimpleDateFormat formatter1 = new SimpleDateFormat(\"yyyy-MM-dd\");\n\t\t\tSimpleDateFormat formatter2 = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tnextMonth = formatter2.format(formatter1.parse(nextMonth));\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"getNextDate Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn nextMonth;\n\t}",
        "description": "This Java method, `getPreviousMonthDate()`, returns the date of the previous month. It uses the `LocalDate` class to get the current date, then subtracts one month using the `minusMonths()` method. The resulting date is converted to a string in the format \"yyyy-MM-dd\" and then reformatted to \"dd/MM/yyyy\". If an exception occurs during this process, it calls a test step failure method with the exception's class name as the message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "generateMobileNumber2",
        "code": "public String generateMobileNumber2() {\n\t\tString mobileNumber = null;\n\t\ttry {\n\t\t\tint num2, num3;\n\t\t\tint set1, set2, set3;\n\t\t\tRandom generator = new Random();\n\t\t\tset1 = 9;\n\t\t\tnum2 = generator.nextInt(8);\n\t\t\tnum3 = generator.nextInt(8);\n\t\t\tset2 = generator.nextInt(643) + 100;\n\t\t\tset3 = generator.nextInt(8999) + 1000;\n\t\t\tGOR.Mobile = set1 + \"\" + num2 + num3 + set2 + set3;\n\t\t\tmobileNumber = GOR.Mobile;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Generate Mobile Number Exception: \" + e.getClass().getName());\n\t\t}\n\t\treturn mobileNumber;\n\t}",
        "description": "This Java method generates a random mobile number. It uses the `Random` class to generate three sets of numbers: set1, num2 and num3, and set2 and set3. These numbers are then combined to form a mobile number in the format \"9xx xxxxxxx\". If an exception occurs during the generation process, it catches the exception and logs a test step failure with the exception details. The generated mobile number is returned as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "selectOptionFromListViewDropdown",
        "code": "public void selectOptionFromListViewDropdown(String optionValue) {\n\t\ttry {\n\t\t\tString menu = \"#xpath=//button[contains(@title,'Select a List View')]\";\n\t\t\twaitForElement(menu, 10);\n\t\t\tif (isElementPresent(menu)) {\n\t\t\t\tscrollToWebElement(menu);\n\t\t\t\tclickOn(menu);\n\t\t\t\tString option = optionValue + \"#xpath=//span[text()='\" + optionValue + \"']\";\n\t\t\t\tif (isElementDisplayed(option, 10)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"List View drop down is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOptionFromListViewDropdown failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOptionFromListViewDropdown`, is used to select an option from a list view dropdown menu in a web application. \n\nThe method takes one parameter, `optionValue`, which represents the value of the option to be selected.\n\nHere's what the method does:\n\n1. It waits for the List View dropdown menu to appear using the provided XPath expression.\n2. If the menu is present, it scrolls to the menu and clicks on it.\n3. Then, it checks if an option with the given `optionValue` is displayed within the menu.\n4. If the option is displayed, it clicks on that option.\n5. If the option is not displayed or any other exception occurs during the process, the method fails the test step.\n\nThe method also includes error handling to catch and log any exceptions that may occur during its execution.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "verifyTwoValues1",
        "code": "public boolean verifyTwoValues1(Object actualValue, Object expectedValue) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tif (actualValue.equals(expectedValue)) {\n\t\t\t\ttestStepPassed(\n\t\t\t\t\t\t\"Actual value - [ \" + actualValue + \" ] is same as expected value - [ \" + expectedValue + \" ]\");\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\"Actual value - \" + actualValue + \" is not as same as expected value - \" + expectedValue);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTwoValues \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyTwoValues1`, is used to compare two values and report the result of the comparison. It takes two `Object` parameters, `actualValue` and `expectedValue`. The method checks if the two values are equal using the `equals()` method. If they are equal, it calls a `testStepPassed` method with a message indicating that the actual value matches the expected value. If the values are not equal, it calls a `testStepFailed` method with a message indicating that the actual value does not match the expected value. The method also catches any exceptions that may occur during the comparison and reports a failure if an exception is thrown. The method returns a boolean value indicating whether the verification was successful or not.",
        "input": [
            "Object actualValue",
            "Object expectedValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonInPopupRevamp",
        "code": "public void clickOnButtonInPopupRevamp(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//span[text()='\" + buttonName + \"']//parent::button | (//lightning-button//button[text()='\" + buttonName + \"'])[2] | //lightning-layout-item//button[text()='\"+buttonName+\"'] \";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopup \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopupRevamp`, attempts to click on a button with the given name that is present in a popup. It uses XPath expressions to locate the button and then performs the following steps:\n\n1. Waits for the element to be displayed using `waitForElement` method.\n2. Checks if the element is displayed using `isElementDisplayed` method.\n3. If the element is displayed, it clicks on the button using `clickOn` method and waits for 5 seconds using `waitTime` method.\n4. If the element is not displayed, it reports a test step failure with the message \"ButtonName button is not present\".\n\nIf any exception occurs during the execution of this method, it catches the exception and reports a test step failure with the error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonInRequiredDetails",
        "code": "public void clickOnButtonInRequiredDetails(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//button[contains(@class,'btn_save') and text()='Save']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInRequiredDetails \" + e.getMessage());\n \n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInRequiredDetails`, attempts to click on a specific button with the name \"Save\" and class \"btn_save\" within a specified time limit. It uses Selenium WebDriver's built-in methods for waiting for an element to be present and clickable, clicking on it, and handling exceptions. The method takes a string parameter `buttonName` which is used to log test step failures.\n\nHere are the key steps the method performs:\n\n1. Waits up to 10 seconds for an element with the specified XPath (a button with class \"btn_save\" and text \"Save\").\n2. Checks if the element is displayed within the same time limit.\n3. If the element is present and clickable, clicks on it and waits for 5 seconds.\n4. If the element is not present or not clickable, fails the test step with a message indicating that the button was not found.\n\nThe method also includes error handling to catch any exceptions that may occur during execution, logging failures with a descriptive message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "ApplicationKeywords",
        "function_name": "clickOnButtonUsingAction",
        "code": "public void clickOnButtonUsingAction(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value[normalize-space()]='\" + value + \"']\";\n\t    \twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t//\tclickOnSpecialElement(link);\n\t\t\t\tActions act= new Actions(driver);\n\t\t\t\tact.moveToElement(findWebElement(link)).click().perform();\n\t\t\t\tmanualScreenshot(\"Successfully Clicked On : \"+value);\n\t\t\t\twaitTime(10);\n\t\t\t\tif (value.equalsIgnoreCase(\"Pass\")) {\n\t\t\t\t\tprintErrorMessageInQcField();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" +value+ e.getClass().getName());\n\t\t}\n\t}\n}",
        "description": "This Java method, `clickOnButtonUsingAction`, simulates a click on an element that matches the given value using XPath or attribute values. It takes a string parameter `value` which is used to construct the XPath expression or attribute value.\n\nHere's what it does in detail:\n\n1. It constructs an XPath expression by concatenating the input `value` with specific strings.\n2. It waits for the element matching the constructed XPath expression using `waitForElement`.\n3. If the element is present, it:\n\t* Scrolls to the element using `scrollToElement` and `scrollToWebElement`.\n\t* Highlights the element using `highLighterMethod`.\n\t* Simulates a mouse hover on the element using `Actions` class.\n\t* Performs a click on the element using `Actions` class.\n\t* Takes a manual screenshot with the message \"Successfully Clicked On : `<value>`\".\n\t* Waits for 10 seconds using `waitTime`.\n\t* If the value is \"Pass\", it prints an error message in the Qc field using `printErrorMessageInQcField`.\n4. If the element is not present, it fails the test step with a message indicating that the element is not present.\n5. It catches any exceptions that occur during execution and fails the test step with an error message.\n\nNote that this method seems to be part of a larger framework for automated testing, as it uses various utility methods (e.g., `waitForElement`, `scrollToElement`, `highLighterMethod`) and has specific logging and reporting mechanisms.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\t\tArrayList<File> summaryPages = getSummaryPageList();\n\n\t\tfor (File file : summaryPages) {\n\t\t\tcreateFailureList(file);\n\t\t}\n\n\t\tuniquefailedMessage = getUniqueFailedMessage();\n\n\t\tfor (String key : reportType.equalsIgnoreCase(\"UI\") ? uniquefailedMessage.keySet() : stepsToRepoMap.keySet()) {\n\t\t\tString repoValue = stepsToRepoMap.get(key).toString();\n\t\t\tSystem.out.println(key + \" - \" + repoValue);\n\t\t\tSystem.out.println(key + \" - \" + screenshots.get(key));\n\t\t\tcreateBugAPI(key, repoValue);\n\t\t}\n\n\t\tmarkDuplicateBugForReporting();\n\n\t\tfor (File file : summaryPages) {\n\t\t\tupdateReport(file);\n\t\t}\n\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThe `main` method is the entry point of the program. It performs several tasks related to generating and reporting bugs from a list of summary pages.\n\n1. It calls a method to get a list of summary pages, then iterates through each page to create a failure list.\n2. It retrieves a set of unique failed messages and iterates through it to print out information about each bug, including the repository value and screenshot, and creates an API call for each bug.\n3. It marks duplicate bugs for reporting purposes.\n4. Finally, it updates each summary page with the generated report.\n\nIn summary, this method is responsible for processing a list of summary pages, generating bug reports, and updating the pages with the results.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "getUniqueFailedMessage",
        "code": "private static Map<String, String> getUniqueFailedMessage() {\n\t\ttry {\n\t\t\tSystem.out.println(\"Before removing duplicates: \" + failedMessage);\n\t\t\tSystem.out.println(\"\");\n\n\t\t\tSet<String> existing = new HashSet<>();\n\t\t\tMap<String, String> uniquefailedMessage = failedMessage.entrySet().stream()\n\t\t\t\t\t.filter(entry -> existing.add(entry.getValue()))\n\t\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\t\t\tSystem.out.println(\"After removing duplicates: \" + uniquefailedMessage);\n\n\t\t\treturn uniquefailedMessage;\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in the get unique failure message method\");\n\t\t}\n\t\treturn null;\n\t}",
        "description": "This Java method, `getUniqueFailedMessage()`, removes duplicate values from a given map of failed messages and returns the resulting map with only unique messages. It uses a HashSet to keep track of unique values and then collects the entries that have not been added to the set (i.e., duplicates) into a new map. The method also prints out the original and resulting maps for debugging purposes. If any exception occurs during execution, it catches and logs the error message.",
        "input": [],
        "output": "Map"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "getSummaryPageList",
        "code": "private static ArrayList<File> getSummaryPageList() {\n\t\tArrayList<File> summaryFileList = new ArrayList<File>();\n\t\ttry {\n\t\t\tFile dir = new File(reportPath);\n\n\t\t\tFile[] files = dir.listFiles();\n\t\t\tfor (File file : files) {\n\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\tif (new File(file + \"//SummaryPage.html\").exists())\n\t\t\t\t\t\tsummaryFileList.add(new File(file + \"//SummaryPage.html\"));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed while getting report summary page\");\n\t\t}\n\t\treturn summaryFileList;\n\t}",
        "description": "This Java method, `getSummaryPageList`, returns a list of files that represent the \"Summary Page\" for each directory within a specified report path. It iterates through all directories and subdirectories in the given report path, checks if each directory has a file named \"SummaryPage.html\", and adds it to an ArrayList if found. If any exceptions occur during this process, it prints an error message to the system console and returns the list of files.",
        "input": [],
        "output": "ArrayList"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "createFailureList",
        "code": "private static void createFailureList(File file) {\n\t\ttry {\n\t\t\tDocument doc = Jsoup.parse(file, \"UTF-8\");\n\t\t\tArrayList<Element> testCases = doc.selectXpath(\"//div[@id='exectable'][1]//tbody//td[text()='Fail']/..//a\");\n\n\t\t\tfor (Element testCase : testCases) {\n\t\t\t\tString testCaseName = testCase.text();\n\n\t\t\t\tArrayList<Element> failedDataSets = doc.selectXpath(\"//div[@id='exectable'][2]//tbody[@name='\"\n\t\t\t\t\t\t+ testCaseName + \"']//td[text()='Fail']//preceding-sibling::td/a\");\n\n\t\t\t\tif (failedDataSets.size() > 0) {\n\t\t\t\t\tif (reportType.equalsIgnoreCase(\"API\")) {\n\t\t\t\t\t\tfor (Element failedDataSet : failedDataSets)\n\t\t\t\t\t\t\topenHyperlink(testCaseName, failedDataSet, file);\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (reportType.equalsIgnoreCase(\"UI\")) {\n\t\t\t\t\t\tfor (Element failedDataSet : failedDataSets)\n\t\t\t\t\t\t\topenHyperlink(testCaseName + \" || \" + failedDataSet.text(), failedDataSet, file);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\topenHyperlink(testCaseName, testCase, file);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tbugIdMap.put(testCaseName, \"Skipped bug creation due to reporting issue\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in createFailureList method\");\n\t\t}\n\t}",
        "description": "This Java method, named `createFailureList`, is designed to parse a given HTML file and extract information about failed test cases. Here's a brief overview of what the method does:\n\n1. It takes a `File` object as input, which represents the HTML file to be parsed.\n2. The method uses Jsoup (a Java library for working with HTML documents) to parse the HTML file and select specific elements based on XPath expressions.\n3. It identifies failed test cases by selecting elements that contain the text \"Fail\" within a specific table structure.\n4. For each failed test case, it extracts the corresponding data sets that also indicate failures (based on the presence of \"Fail\" text).\n5. Depending on the `reportType` variable (which can be either \"API\", \"UI\", or something else), the method opens hyperlinks to additional information related to each failed test case.\n6. If no failed data sets are found for a given test case, it adds an entry to a `bugIdMap` with a message indicating that the bug creation was skipped due to reporting issues.\n\nThe method catches any exceptions that may occur during execution and prints an error message if something goes wrong.",
        "input": [
            "File file"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "openHyperlink",
        "code": "private static void openHyperlink(String testcase, Element datasetElement, File file) {\n\t\ttry {\n\t\t\tString link = datasetElement.select(\"a[href]\").attr(\"href\");\n\t\t\tDocument dataSetReport = Jsoup.parse(new File(file.getParentFile() + link), \"UTF-8\");\n\n\t\t\tString valueToGetFromReport = \"//font[starts-with(text(),'$')]\";\n\n\t\t\tif (dataSetReport.selectXpath(valueToGetFromReport).size() > 0) {\n\n\t\t\t\tif (reportType.equalsIgnoreCase(\"UI\"))\n\t\t\t\t\tstepsToRepoMap.put(testcase, \"Evidence : \");\n\n\t\t\t\tArrayList<Element> evidences = dataSetReport.selectXpath(valueToGetFromReport);\n\t\t\t\tfor (Element evidence : evidences) {\n\t\t\t\t\tif (reportType.equalsIgnoreCase(\"UI\"))\n\t\t\t\t\t\tstepsToRepoMap.put(testcase, evidence.text().replace(\"$\", \"\"));\n\n\t\t\t\t\telse\n\t\t\t\t\t\tstepsToRepoMap.put(testcase, datasetElement.text() + \" : \" + evidence.text().replace(\"$\", \"\"));\n\t\t\t\t}\n\n\t\t\t\tstepsToRepoMap.put(testcase, \" \");\n\t\t\t}\n\n\t\t\tif (dataSetReport.selectXpath(\"//font[@class='ReportFail']//following::img\").size() > 0) {\n\t\t\t\tString ssPath = dataSetReport.selectXpath(\"//font[@class='ReportFail']//following::img\").first()\n\t\t\t\t\t\t.attr(\"src\");\n\t\t\t\tscreenshots.put(testcase, file.getAbsolutePath() + ssPath);\n\t\t\t\tcreateStepToReproduce(dataSetReport, file, testcase);\n\t\t\t} else {\n\t\t\t\tbugIdMap.put(testcase, \"Skipped bug creation due to no failure message or image\");\n\t\t\t\tstepsToRepoMap.removeAll(testcase);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in openHyperlink method for - \" + testcase + \" - \" + datasetElement.text());\n\t\t}\n\n\t}",
        "description": "This is a Java method named `openHyperlink` that appears to be part of a test automation framework. The method takes three parameters:\n\n* `testcase`: a string representing the current test case being executed\n* `datasetElement`: an Element object representing a specific element in an HTML report\n* `file`: a File object representing the file path where the report is stored\n\nThe method attempts to parse the HTML report using Jsoup, and then extracts specific information from the report based on XPath expressions. Specifically:\n\n1. It looks for font elements with text starting with a dollar sign (`$`), which it assumes contain evidence or steps related to the current test case.\n2. If such elements are found, it stores their text in a map called `stepsToRepoMap`.\n3. It also checks if there is an image element with a class of \"ReportFail\" and extracts its source path (ssPath). If such an image exists, it adds the screenshot to a map called `screenshots` and calls another method (`createStepToReproduce`) to create steps to reproduce the failure.\n4. If no failure message or image is found, it sets a bug ID map entry indicating that the test case was skipped, and removes any existing entries from the `stepsToRepoMap`.\n\nThe method catches any exceptions that may occur during execution and prints an error message if an issue arises.",
        "input": [
            "String testcase",
            "Element datasetElement",
            "File file"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "createStepToReproduce",
        "code": "private static void createStepToReproduce(Document testcaseReport, File file, String testCase) {\n\t\tint serialNo = 1;\n\t\tString errorMessage = \"\";\n\t\tint errorInstance = 1;\n\n\t\ttry {\n\t\t\tArrayList<Element> errorMessagesList = testcaseReport.selectXpath(\"//font[@class='ReportFail']\");\n\n\t\t\tfor (Element errorMessageElement : errorMessagesList) {\n\t\t\t\tboolean BugFlag = checkForErrorMessagePresentInErrorSkipArray(errorMessageElement.text());\n\t\t\t\tif (BugFlag) {\n\t\t\t\t\terrorInstance++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (errorMessagesList.size() >= errorInstance) {\n\t\t\t\terrorMessage = errorMessagesList.get(errorInstance - 1).text();\n\n\t\t\t\tArrayList<Element> stepsWithHash = testcaseReport.selectXpath(\"(//font[@class='ReportFail'])[\"\n\t\t\t\t\t\t+ errorInstance + \"]//preceding::font[starts-with(text(),'#') and @class='ReportInfo']\");\n\n\t\t\t\tif (stepsWithHash.size() > 0) {\n\n\t\t\t\t\tif (stepsWithHash.get(0).text().contains(\"DataSet\"))\n\t\t\t\t\t\tstepsWithHash.remove(0);\n\n\t\t\t\t\tif (stepsWithHash.size() > 0) {\n\t\t\t\t\t\tstepsToRepoMap.put(testCase, \"Steps To Reproduce :\");\n\n\t\t\t\t\t\tfor (Element steps : stepsWithHash) {\n\t\t\t\t\t\t\tstepsToRepoMap.put(testCase, serialNo + \". \" + steps.text().replace(\"#\", \"\").trim());\n\t\t\t\t\t\t\tserialNo++;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tElement lastHashStep = stepsWithHash.get(stepsWithHash.size() - 1);\n\t\t\t\t\t\tint lastHashIndex = lastHashStepInstance(stepsWithHash, lastHashStep);\n\n\t\t\t\t\t\tString subStepPath = \"(//font[@class='ReportFail'])[\" + errorInstance\n\t\t\t\t\t\t\t\t+ \"]/preceding::font[(preceding::font[contains(text(),\";\n\n\t\t\t\t\t\tsubStepPath = lastHashStep.text().contains(\"'\")\n\t\t\t\t\t\t\t\t? subStepPath.concat(\"\\\"\" + lastHashStep.text() + \"\\\"\")\n\t\t\t\t\t\t\t\t: subStepPath.concat(\"'\" + lastHashStep.text() + \"'\");\n\n\t\t\t\t\t\tArrayList<Element> subSteps = testcaseReport\n\t\t\t\t\t\t\t\t.selectXpath(subStepPath + \")])[\" + lastHashIndex + \"]]\");\n\n\t\t\t\t\t\tfor (Element subStep : subSteps) {\n\t\t\t\t\t\t\tString step = subStep.text().trim();\n\t\t\t\t\t\t\tif (!(step.contains(\"Total load time for current page is\") || step.equals(\"\")\n\t\t\t\t\t\t\t\t\t|| step.contains(\"$\"))) {\n\t\t\t\t\t\t\t\tstepsToRepoMap.put(testCase, serialNo + \". \" + step);\n\t\t\t\t\t\t\t\tserialNo++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfailedMessage.put(testCase, errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbugIdMap.put(testCase,\n\t\t\t\t\t\t\"Skipped to create bug because the failure message matches with the value in 'Error_Messages_To_Skip'\");\n\t\t\t\tstepsToRepoMap.removeAll(testCase);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tstepsToRepoMap.removeAll(testCase);\n\t\t\tSystem.err.println(\"Failed in createStepToReproduce Method - \" + testCase);\n\t\t}\n\t}",
        "description": "This Java method, `createStepToReproduce`, is used to extract steps to reproduce a bug from a test case report. It takes three parameters: `testcaseReport` (an instance of the `Document` class), `file` (a `File` object), and `testCase` (a `String` representing the name of the test case).\n\nThe method iterates through the XML elements in the report, searching for specific XPath expressions to extract relevant information. It checks if a failure message matches a predefined list of skipped error messages. If it does, it skips creating steps to reproduce the bug and removes any existing steps from the map.\n\nIf the failure message is not skipped, the method extracts the corresponding steps to reproduce the bug by finding all preceding elements that start with \"#\" (hash symbol) and contain specific text. It then adds these steps to a map called `stepsToRepoMap`.\n\nThe method also keeps track of failed test cases in a separate map called `failedMessage`. If an exception occurs during the execution of this method, it removes any existing steps from the map and prints an error message to the console.\n\nIn summary, this method is used to extract relevant information from a test case report and create steps to reproduce a bug.",
        "input": [
            "Document testcaseReport",
            "File file",
            "String testCase"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "checkForErrorMessagePresentInErrorSkipArray",
        "code": "private static boolean checkForErrorMessagePresentInErrorSkipArray(String actualErrorMessage) {\n\t\tfor (String errorMessage : errorMessagesToSkipArray) {\n\t\t\tif (errorMessage.trim().equalsIgnoreCase(actualErrorMessage.trim()))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}",
        "description": "This Java method, `checkForErrorMessagePresentInErrorSkipArray`, checks if a given `actualErrorMessage` is present in an array of error messages to skip (`errorMessagesToSkipArray`). It iterates through the array and uses the `equalsIgnoreCase` method to compare the trimmed versions of each error message in the array with the given `actualErrorMessage`. If a match is found, it returns `true`, indicating that the error message should be skipped. If no match is found after iterating through the entire array, it returns `false`.",
        "input": [
            "String actualErrorMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "lastHashStepInstance",
        "code": "private static int lastHashStepInstance(ArrayList<Element> stepsWithHash, Element lastHashStep) {\n\t\tint index = 0;\n\t\tString lastHashText = lastHashStep.text();\n\t\tfor (Element element : stepsWithHash) {\n\t\t\tif ((element.text()).equals(lastHashText)) {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}",
        "description": "This Java method, `lastHashStepInstance`, takes two parameters: an ArrayList of elements (`stepsWithHash`) and the last hash step element (`lastHashStep`). It returns the number of occurrences of the `lastHashStep` in the `stepsWithHash`. The method iterates through each element in `stepsWithHash`, checks if the text of each element matches the text of `lastHashStep`, and increments a counter `index` whenever it finds a match. Finally, it returns the value of `index`, which represents the number of times `lastHashStep` appears in `stepsWithHash`.",
        "input": [
            "ArrayList stepsWithHash",
            "Element lastHashStep"
        ],
        "output": "int"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "createBugAPI",
        "code": "private static String createBugAPI(String testcaseName, String failedDatasets) {\n\n\t\tString bug_id = null;\n\t\tHashMap<String, String> apiBody = new HashMap<>();\n\t\tString ReproSteps = \"\";\n\n\t\tfor (String steps : failedDatasets.substring(1, failedDatasets.length() - 1).split(\",\")) {\n\t\t\tReproSteps += steps.trim() + \"\\n\";\n\t\t}\n\t\tString[] testCaseName = testcaseName.split(\"TC_01_||TC_02_\", 2);\n\t\ttry {\n\t\t//\tapiBody.put(\"Title\", \"TWF - \" +currentDate() + \" || \" + testCaseName[1] + \" || \" + failedMessage.get(testcaseName));\n\t\t\tapiBody.put(\"Title\", \"TWF - \"+bugEnvironment+\" - \" +currentDate() + \" || \" + testCaseName[1] + \" || \" +failedMessage.get(testcaseName));\n\t\t\tapiBody.put(\"BugReportedBy\", reportedBy);\n\t\t\tapiBody.put(\"BugDetectedIn\", bugDetectedIn);\n\t\t\tapiBody.put(\"BugEnvironment\", bugEnvironment);\n\t\t\tapiBody.put(\"BugSeverity\", bugSeverity);\n\t\t\tapiBody.put(\"BuildNumber\", buildNumber);\n\t\t\tapiBody.put(\"Devices\", devices);\n\t\t\tapiBody.put(\"OS\", os);\n\t\t\tapiBody.put(\"ReproSteps\", ReproSteps);\n\t\t\tapiBody.put(\"AreaPath\", areaPath);\n\t\t\tapiBody.put(\"AssignedTo\", assignedTo);\n\t\t\tapiBody.put(\"ParentWorkitemId\", parentWorkitemId);\n\t\t\tapiBody.put(\"PAT\", PAT);\n\t\t\t\n\t\t\t\n\t\t\tif (createBugsUnderUSTask.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tString USTaskID = getUSTaskIDFromTestCaseSetting(testcaseName);\n\n\t\t\t\tif (USTaskID != null)\n\t\t\t\t\tapiBody.put(\"ParentWorkitemId\", USTaskID);\n\t\t\t}\n\n\t\t\tRequestSpecification request = RestAssured.given()\n\t\t\t\t\t.header(\"Content-Type\", \"multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\")\n\t\t\t\t\t.formParams(apiBody);\n\n\t\t\tif (reportType.equalsIgnoreCase(\"API\"))\n\t\t\t\trequest.multiPart(\"file\", new File(reportPath + \"..\\\\..\\\\\" + getConfigProperty(\"TestDataFile\")));\n\n\t\t\tif (screenshots.containsKey(testcaseName)) {\n\t\t\t\tfor (String file : screenshots.get(testcaseName)) {\n\t\t\t\t\trequest.multiPart(\"file\", new File(file));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tResponse response = request.when().post(endURI);\n\n\t\t\tint postStatusCode = response.statusCode();\n\t\t\tif (postStatusCode == 200) {\n\t\t\t\tString resp = response.getBody().asString();\n\n\t\t\t\tif (resp.contains(\"Workitem created\")) {\n\t\t\t\t\tString bugId = resp.split(\"=\")[1].trim();\n\t\t\t\t\tbugIdMap.put(testcaseName, bugId);\n\t\t\t\t\tSystem.out.println(\"BugID for \" + testcaseName + \" : \" + bugId);\n\t\t\t\t} else {\n\t\t\t\t\tbugIdMap.put(testcaseName, \"Error\");\n\t\t\t\t\tSystem.out.println(\"BugID not Created \" + testcaseName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Failed to create the auto bug and return the status code as: \" + postStatusCode);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in Create Bug API - \" + testcaseName);\n\t\t}\n\t\treturn bug_id;\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThe `createBugAPI` method creates a new bug report using an API. It takes two parameters: `testcaseName` and `failedDatasets`. The method constructs a JSON payload with various details such as title, reporter, environment, severity, and repro steps. It then sends a POST request to the bug tracking system's API endpoint with the JSON payload. If the creation is successful, it extracts the bug ID from the response and stores it in a map. If the creation fails or an exception occurs, it prints an error message. The method returns `null`.",
        "input": [
            "String testcaseName",
            "String failedDatasets"
        ],
        "output": "String"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "getUSTaskIDFromTestCaseSetting",
        "code": "private static String getUSTaskIDFromTestCaseSetting(String testcaseName) {\n\t\ttry {\n\t\t\tString testCaseDescription = (String) PropertiesFile.tcDescription.get(testcaseName.split(\" \")[0]);\n\n\t\t\tif (testCaseDescription != null)\n\t\t\t\tif (testCaseDescription.startsWith(\"US\"))\n\t\t\t\t\treturn (testCaseDescription.split(\" \")[1]);\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Error while getting Task ID from TestCaseSetting\");\n\t\t}\n\t\treturn null;\n\t}",
        "description": "This Java method, `getUSTaskIDFromTestCaseSetting`, takes a string parameter `testcaseName` and attempts to retrieve the task ID associated with it. The task ID is determined by looking up the test case description in a properties file using the first word of the test case name as the key. If the description starts with \"US\", the method returns the second word of the description, which is assumed to be the task ID. If an error occurs during this process, the method prints an error message and returns `null`.",
        "input": [
            "String testcaseName"
        ],
        "output": "String"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "markDuplicateBugForReporting",
        "code": "private static void markDuplicateBugForReporting() {\n\n\t\ttry {\n\t\t\tfor (Entry<String, String> entry : failedMessage.entrySet()) {\n\t\t\t\tString key = entry.getKey();\n\t\t\t\tif (!bugIdMap.containsKey(key)) {\n\t\t\t\t\tString value = entry.getValue();\n\t\t\t\t\tString keyByValue = getKeysByValue(uniquefailedMessage, value);\n\t\t\t\t\tbugIdMap.put(key, \"Duplicate Bug! Already created for - \" + keyByValue\n\t\t\t\t\t\t\t+ \" with same failure. BugID - \" + bugIdMap.get(keyByValue));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed while marking Duplicate bugs\");\n\t\t}\n\t}",
        "description": "This Java method, `markDuplicateBugForReporting`, is used to identify and mark duplicate bugs in a given set of failed messages. It iterates through the `failedMessage` map, checking each key-value pair for duplicates. If a duplicate bug is found, it adds an entry to the `bugIdMap` with a description indicating that the bug has been marked as duplicate, including the original bug ID and the new bug ID. The method also catches any exceptions that may occur during execution and prints an error message if necessary.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "getKeysByValue",
        "code": "public static <T, E> String getKeysByValue(Map<T, E> map, E value) {\n\t\ttry {\n\t\t\tSet<T> set = map.entrySet().stream().filter(entry -> Objects.equals(entry.getValue(), value))\n\t\t\t\t\t.map(Map.Entry::getKey).collect(Collectors.toSet());\n\t\t\treturn set.stream().findFirst().get().toString();\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in getKeysByValue method for value - \" + value);\n\t\t}\n\t\treturn null;\n\t}",
        "description": "This Java method, `getKeysByValue`, takes a `Map` and a specific value as input. It returns the key(s) from the map that correspond to the given value. If multiple keys have the same value, it will return one of them (the first one found). If no matching key is found, it will print an error message to the console and return null. The method uses Java 8's Stream API to filter the map entries by their values and then collect the corresponding keys into a set.",
        "input": [
            "Map map",
            "E value"
        ],
        "output": "String"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "updateReport",
        "code": "private static void updateReport(File summaryFile) {\n\t\tString bugsTogglePrefix = \"<tr class=\\\"accordion-row\\\"><td colspan=\\\"11\\\"><div class='accordion-content'> <ul>\\r\\n\";\n\t\tString bugsToggleSuffix = \"</ul>  </div>  </td>  </tr>\";\n\t\ttry {\n\t\t\tDocument doc = Jsoup.parse(summaryFile, \"UTF-8\");\n\t\t\tArrayList<Element> testCases = doc.selectXpath(\"//div[@id='exectable'][1]//tbody//a\");\n\n\t\t\tdoc.selectXpath(\"//div[@id='exectable']/table[@class='column-options']//tr\").first().appendElement(\"th\")\n\t\t\t\t\t.appendText(\"BugId\");\n\n\t\t\tfor (Element testCase : testCases) {\n\t\t\t\tString testcaseName = testCase.text();\n\n\t\t\t\tElement testCaseElement = doc.selectXpath(\"//td[@id='\" + testcaseName + \"']/..\").first();\n\n\t\t\t\ttestCaseElement.appendElement(\"td\").attr(\"class\", \"bug-td\").attr(\"onclick\", \"toggleAccordion(this);\")\n\t\t\t\t\t\t.appendElement(\"span\").attr(\"class\", \"bug-text\").attr(\"style\", \"color: blue;\")\n\t\t\t\t\t\t.appendText(\"Bug(s)\");\n\n\t\t\t\tString BugLinks = \"\";\n\t\t\t\tfor (Entry<String, String> mapEntry : bugIdMap.entries()) {\n\t\t\t\t\tString bugid = mapEntry.getValue();\n\t\t\t\t\tString bugText = bugid;\n\n\t\t\t\t\tif (bugid.contains(\"Duplicate!\")) {\n\t\t\t\t\t\tbugid = bugid.substring(bugid.indexOf(\"[\")).replace(\"[\", \"\").replace(\"]\", \"\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (mapEntry.getKey().startsWith(testcaseName)) {\n\t\t\t\t\t\tBugLinks += \"<li>\" + mapEntry.getKey() + \" : <a href=\\\"https://dev.azure.com/\" + organization\n\t\t\t\t\t\t\t\t+ \"/\" + areaPath + \"/_workitems/edit/\" + bugid + \"\\\" target=\\\"_blank\\\">\" + bugText\n\t\t\t\t\t\t\t\t+ \"</a></li> \";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttestCaseElement.after(bugsTogglePrefix + BugLinks + bugsToggleSuffix);\n\t\t\t}\n\n\t\t\t// Write the updated HTML back to the Summary file\n\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(summaryFile));\n\t\t\twriter.write(doc.outerHtml().toString());\n\t\t\twriter.close();\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in the method - updateReport for Auto Bug - \" + summaryFile.getParent());\n\n\t\t}\n\t}",
        "description": "This Java method, `updateReport`, is designed to parse an HTML file representing a test report and update it by adding bug information from a provided map. The method takes a `File` object as input, which is the summary file to be updated.\n\nHere's what the method does:\n\n1. It defines two constant strings: `bugsTogglePrefix` and `bugsToggleSuffix`, which are used to create HTML elements for toggling accordion sections.\n2. It attempts to parse the summary file using Jsoup library, assuming it contains HTML content in UTF-8 encoding.\n3. It selects all `<a>` elements within a specific XPath expression (`//div[@id='exectable'][1]//tbody//a`) and stores them in an `ArrayList` called `testCases`.\n4. For each test case, it:\n\t* Gets the text content of the `<a>` element (the test case name).\n\t* Finds the corresponding `<td>` element with an ID matching the test case name.\n\t* Appends a new `<td>` element to this `<td>` element with a class of \"bug-td\" and attributes for toggling an accordion section. It also appends a `<span>` element within this `<td>` with a class of \"bug-text\" and blue text color.\n\t* Populates the `BugLinks` string by iterating over the bug ID map, matching bug IDs to test case names, and creating HTML links to Azure DevOps work item pages for each matched bug.\n5. It appends the `bugsTogglePrefix`, `BugLinks`, and `bugsToggleSuffix` strings to the `<td>` element after updating the report.\n6. Finally, it writes the updated HTML back to the original summary file using a `BufferedWriter`.\n\nIf any exceptions occur during this process, they are caught and printed to the console with an error message indicating the parent directory of the failed file.",
        "input": [
            "File summaryFile"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeReport",
        "function_name": "currentDate",
        "code": "public static String currentDate() {\n\t\tString dateTime = null;\n\t\ttry {\n\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\t\tDate date = new Date();\n\t\t\tdateTime = obj.format(date);\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getMessage());\n\t\t}\n\t\treturn dateTime;\n\t}\t\n\t\n}",
        "description": "This Java method, `currentDate()`, returns the current date in the format \"dd/MM/yyyy\" as a string. It uses the `SimpleDateFormat` class to format a `Date` object, which is set to the current system time using the `new Date()` constructor. If any exception occurs during this process, it will be caught and logged to a log file using the `writeToLogFile()` method. The method returns the formatted date string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getCurrentNodeUsername",
        "code": "public String getCurrentNodeUsername() {\n\t\tString machineUsername = null;\n\t\ttry {\n\t\t\tmachineUsername = System.getProperty(\"user.name\");\n\t\t\tif (machineUsername.equals(\"i2520\")) {\n\t\t\t\tmachineUsername = machineUsername.toUpperCase();\n\t\t\t}\n\t\t\tSystem.out.println(\n\t\t\t\t\t\"Getting current node's username to verify the exported file in 'C:/Users/[username]/Downloads' folder. Current node's username = \"\n\t\t\t\t\t\t\t+ machineUsername);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"[e] Exception thrown :: Please do check the log file\");\n\t\t}\n\t\treturn machineUsername;\n\t}",
        "description": "This Java method, `getCurrentNodeUsername()`, returns the username of the current node (machine) on which it is executed. It retrieves the username using the `System.getProperty(\"user.name\")` method and then checks if the username is \"i2520\". If it is, the username is converted to uppercase. The method also prints a message indicating that it is retrieving the current node's username. In case of any exception, it catches and logs the error. Finally, it returns the retrieved username as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getLatestFilefromDir",
        "code": "private File getLatestFilefromDir(String dirPath) {\n\t\tFile dir = new File(dirPath);\n\t\tFile[] files = dir.listFiles();\n\t\tif (files == null || files.length == 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\tFile lastModifiedFile = files[0];\n\t\tfor (int i = 1; i < files.length; i++) {\n\t\t\tif (lastModifiedFile.lastModified() < files[i].lastModified()) {\n\t\t\t\tlastModifiedFile = files[i];\n\t\t\t}\n\t\t}\n\t\treturn lastModifiedFile;\n\t}",
        "description": "This Java method, `getLatestFilefromDir`, takes a directory path as input and returns the latest file in that directory based on its last modified timestamp. If the directory is empty or null, it returns null. The method iterates through the files in the directory, keeping track of the file with the most recent modification time (i.e., the \"latest\" file).",
        "input": [
            "String dirPath"
        ],
        "output": "File"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getLatestFromLocalMachine",
        "code": "public String getLatestFromLocalMachine(String nodeUsername, String FileName) {\n\t\tString fileLocation = null;\n\t\ttry {\n\t\t\tFile dir = new File(\"C:\\\\Users\\\\\" + nodeUsername + \"\\\\Downloads\");\n\n\t\t\tString path = dir.getAbsolutePath();\n\t\t\tFile getLatestFile = getLatestFilefromDir(path);\n\t\t\tString downloadedFileName = getLatestFile.getName();\n\n\t\t\tif (downloadedFileName.contains(FileName)) {\n\t\t\t\tSystem.out.println(\"File is downloaded successfully.\");\n\t\t\t\tfileLocation = getLatestFile.toString();\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Failed to download the file.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"[e] Exception thrown :: Please do check the log file\");\n\t\t}\n\t\treturn fileLocation;\n\n\t}",
        "description": "This Java method, `getLatestFromLocalMachine`, takes two parameters: `nodeUsername` and `FileName`. It attempts to find the latest downloaded file from a specific directory (`C:\\\\Users\\<nodeUsername>\\Downloads`) that matches the specified `FileName`. If the file is found, it returns the full path of the file. If not, it prints an error message indicating that the file was not found. The method also catches any exceptions that may occur during execution and logs them to the console.",
        "input": [
            "String nodeUsername",
            "String FileName"
        ],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "deleteFileFromLocalMachine",
        "code": "public void deleteFileFromLocalMachine(String fileLocation) {\n\t\ttry {\n\t\t\tFile file = new File(fileLocation);\n\t\t\tif (file.delete()) {\n\t\t\t\tSystem.out.println(\"Downloaded file is successfully deleted.\");\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Downloaded file is not deleted.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"[e] Exception thrown :: Please do check the log file\");\n\t\t}\n\t}",
        "description": "This Java method, `deleteFileFromLocalMachine`, takes a string parameter `fileLocation` representing the location of a file on the local machine. The method attempts to delete the file at that location using the `delete()` method of the `File` class. If the deletion is successful, it prints a success message to the console. If an exception occurs during the deletion process (e.g., the file does not exist or cannot be deleted), it catches the exception and prints an error message with a suggestion to check the log file for more information.",
        "input": [
            "String fileLocation"
        ],
        "output": "void"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "readPDFInString",
        "code": "public String readPDFInString(String fileName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString currentNode = getCurrentNodeUsername();\n\t\t\tString fileLocation = getLatestFromLocalMachine(currentNode, fileName);\n\t\t\tFile file = new File(fileLocation);\n\t\t\tPDDocument document = PDDocument.load(file);\n\t\t\tPDFTextStripper pdfStripper = new PDFTextStripper();\n\t\t\ttext = pdfStripper.getText(document);\n\t\t\tdocument.close();\n\t\t\tdeleteFileFromLocalMachine(fileLocation);\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `readPDFInString`, reads a PDF file located on a remote machine and converts its contents into a string. The method takes the name of the PDF file as an input parameter. It first determines the current node username using the `getCurrentNodeUsername` method, then uses this information to locate the file on the remote machine using the `getLatestFromLocalMachine` method. Once the file is located, it is loaded into a `PDDocument` object and its text content is extracted using a `PDFTextStripper`. The extracted text is stored in a string variable called `text`. Finally, the method closes the PDF document and deletes the file from the local machine using the `deleteFileFromLocalMachine` method. If any exceptions occur during this process, they are caught but not handled. The method returns the extracted text as a string.",
        "input": [
            "String fileName"
        ],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getCurrentDateandTime",
        "code": "public String getCurrentDateandTime() {\n\t\tString timeStamp = new SimpleDateFormat(\"yyyy_MM_dd_HH_mm_ss\").format(new java.util.Date());\n\t\treturn timeStamp;\n\t}",
        "description": "This Java method, `getCurrentDateandTime`, returns a string representation of the current date and time in the format \"yyyy_MM_dd_HH_mm_ss\", where:\n\n* \"yyyy\" represents the year\n* \"MM\" represents the month (01-12)\n* \"dd\" represents the day of the month (1-31)\n* \"HH\" represents the hour of the day (00-23)\n* \"mm\" represents the minute of the hour (00-59)\n* \"ss\" represents the second of the minute (00-59)\n\nThe method uses a `SimpleDateFormat` object to format a new `Date` object, which represents the current date and time. The resulting string is then returned by the method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "convertPDFToExcelFormat",
        "code": "public String convertPDFToExcelFormat(String fileName) {\n\t\tString fileDestination = null;\n\t\ttry {\n\t\t\tString currentNode = getCurrentNodeUsername();\n\t\t\tString fileLocation = getLatestFromLocalMachine(currentNode, fileName);\n\t\t\tSystem.out.println(fileLocation);\n\t\t\tDocument doc = new Document(fileLocation);\n\t\t\tExcelSaveOptions options = new ExcelSaveOptions();\n\t\t\toptions.setFormat(ExcelSaveOptions.ExcelFormat.XLSX);\n\t\t\toptions.setMinimizeTheNumberOfWorksheets(true);\n\t\t\tString convertedFileName = fileName + \"_\" + getCurrentDateandTime();\n\t\t\tfileDestination = \"./PDF_File/\" + convertedFileName + \".xlsx\";\n\t\t\tdoc.save(fileDestination, options);\n\t\t\tSystem.out.println(\"Successfully file converted into Excel\");\n\t\t\tdeleteFileFromLocalMachine(fileLocation);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn fileDestination;\n\t}\n\n\tXSSFWorkbook workbook;",
        "description": "This Java method, `convertPDFToExcelFormat`, takes a PDF file name as input and converts it into an Excel file in XLSX format. It uses the Apache POI library to read the PDF file and then saves it as an Excel file with a modified name that includes the current date and time. The method also prints success messages to the console and deletes the original PDF file from the local machine. If any exceptions occur during the conversion process, they are caught and printed to the console. The method returns the path of the converted Excel file.",
        "input": [
            "String fileName"
        ],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "readExcel",
        "code": "public XSSFSheet readExcel(String filePath) {\n\t\tXSSFSheet sh = null;\n\t\ttry {\n\t\t\tFileInputStream fs = new FileInputStream(filePath);\n\t\t\tworkbook = new XSSFWorkbook(fs);\n\t\t\tsh = workbook.getSheetAt(0);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn sh;\n\t}",
        "description": "This Java method, `readExcel`, reads an Excel file (.xlsx) and returns the first sheet of the workbook. It takes a string parameter `filePath` representing the path to the Excel file. The method uses Apache POI's XSSFWorkbook class to read the Excel file and get the first sheet (`getSheetAt(0)`). If any exception occurs during the reading process, it is caught and printed to the console using `e.printStackTrace()`.",
        "input": [
            "String filePath"
        ],
        "output": "XSSFSheet"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getNextCellValueInExcelForLTS",
        "code": "public String getNextCellValueInExcelForLTS(String filePath, String Header, int startingRow) {\n\t\tString value1 = null;\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tXSSFSheet sh = readExcel(filePath);\n\t\t\tint rowCount = sh.getLastRowNum();\n\t\t\tfor (int rows = 0; rows <= rowCount; rows++) {\n\t\t\t\tXSSFRow row = sh.getRow(rows);\n\t\t\t\tSystem.out.println(row.getLastCellNum());\n\t\t\t\tif (rows >= startingRow) {\n\t\t\t\t\tfor (int cell = 0; cell <= row.getLastCellNum(); cell++) {\n\t\t\t\t\t\tSystem.out.println(cell);\n\t\t\t\t\t\tXSSFCell cell1 = row.getCell(cell);\n\t\t\t\t\t\tDataFormatter dataFormatter = new DataFormatter();\n\t\t\t\t\t\tString value = dataFormatter.formatCellValue(cell1).trim();\n\t\t\t\t\t\tSystem.out.println(value);\n\t\t\t\t\t\tif (value.equals(Header)) {\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tXSSFCell cell2 = row.getCell(cell + 1);\n\t\t\t\t\t\t\tvalue1 = dataFormatter.formatCellValue(cell2).trim();\n\t\t\t\t\t\t\tworkbook.close();\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn value1;\n\t}",
        "description": "This Java method, `getNextCellValueInExcelForLTS`, reads an Excel file specified by the `filePath` parameter and returns the next cell value in the Excel sheet after a specific header row.\n\nHere's a brief overview of what the method does:\n\n1. It reads the Excel file using Apache POI library.\n2. It iterates through each row in the Excel sheet, starting from the specified `startingRow`.\n3. For each row, it checks if the cell value matches the provided `Header` string.\n4. If a match is found, it extracts the next cell value (i.e., the one after the header) and returns it as a trimmed string.\n\nThe method uses various Apache POI classes, such as `XSSFSheet`, `XSSFRow`, `XSSFCell`, and `DataFormatter`, to interact with the Excel file. It also handles exceptions that may occur during the execution of the method.",
        "input": [
            "String filePath",
            "String Header",
            "int startingRow"
        ],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "closeFloatingWindow",
        "code": "public void closeFloatingWindow() {\n\n\t\ttry {\n\t\t\tString closeButton = \"Close window #xpath=//button[@title='Close this window']\";\n\t\t\twaitForElement(closeButton, 10);\n\t\t\tif (isElementDisplayed(closeButton, 10)) {\n\t\t\t\tclickOnSpecialElement(closeButton);\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cannot able to close window\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepInfo(\"Failed in closeFloatingWindow. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `closeFloatingWindow()`, attempts to close a floating window by clicking on the \"Close this window\" button. It uses WebDriver's `waitForElement()` and `isElementDisplayed()` methods to wait for the button to be present and visible before attempting to click it. If the button is not found or displayed within a certain time limit, the method will fail with an error message. The method also includes try-catch logic to handle any exceptions that may occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getDatefromFileData",
        "code": "public String getDatefromFileData(String docValue, CharSequence expectedValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\ttestStepInfo(\"Actual value get from Doc : \" + docValue);\n\t\t\tString[] split = docValue.split(\"\\\\n\");\n\t\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\t\tSystem.out.println(split[26]);\n\t\t\t\tboolean contentEquals = split[26].contains(expectedValue);\n\t\t\t\tif (contentEquals) {\n\t\t\t\t\ttestStepPassed(\"Invoice date is \" + split[26].replaceAll(\":\\\\s+\", \"\"));\n\t\t\t\t\tvalue = split[26].replaceAll(\":\", \"\");\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Excepted value is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getDatefromFileData`, takes two parameters: `docValue` and `expectedValue`. It appears to extract a date from a file or document (`docValue`) and checks if the expected date matches the extracted one. \n\nHere's what it does:\n\n1. It splits the `docValue` into an array of strings, using newline characters (`\\n`) as separators.\n2. It then iterates through this array, printing out the 27th element (index 26 in Java, since arrays are zero-indexed).\n3. For each element, it checks if that element contains the expected value. \n4. If the expected value is found, it extracts the date from that element by removing any colon (`:`) characters, and returns this extracted date.\n5. If the expected value is not found, it marks a test step as failed.\n\nNote: The method does not handle exceptions well. It catches all exceptions and does nothing with them. This can lead to unexpected behavior or bugs if an exception is thrown.",
        "input": [
            "String docValue",
            "CharSequence expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "PdFToExcelConvert",
        "function_name": "getValuefromFileData",
        "code": "public String getValuefromFileData(String docValue, CharSequence expectedValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\ttestStepInfo(\"Actual value get from Doc : \" + docValue);\n\t\t\tString[] split = docValue.split(\"\\\\n\");\n\t\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\t\tboolean contentEquals = split[i].contains(expectedValue);\n\t\t\t\tif (contentEquals) {\n\t\t\t\t\tString amount = split[i].toString();\n\t\t\t\t\tvalue = amount;\n\t\t\t\t\tString[] split2 = amount.split(\" \");\n\t\t\t\t\tfor (int j = 0; j < split2.length; j++) {\n\t\t\t\t\t\tif (split2[j] != null && split2[j].matches(\"[0-9.]+\")) {\n\t\t\t\t\t\t\tvalue = split2[j];\n\t\t\t\t\t\t\ttestStepPassed(expectedValue + \" Amount : \" + value);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tSystem.out.println(\"String value : \" + split2[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in getValuefromFileData. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}\n\t\n}",
        "description": "This Java method, `getValuefromFileData`, retrieves a specific value from a file data string based on an expected value and returns the result as a string.\n\nHere's a step-by-step breakdown:\n\n1. It takes two parameters: `docValue` (the file data string) and `expectedValue` (the value to search for).\n2. The method splits the `docValue` into individual lines using the newline character (`\\n`) as the delimiter.\n3. It then iterates through each line, checking if it contains the `expectedValue`. If a match is found, it extracts the relevant value from that line.\n4. The extracted value is further processed by splitting it into substrings and searching for numeric values (using regular expressions). This suggests that the method is designed to extract specific numerical amounts from the file data string.\n5. If a matching numeric value is found, the method sets the `value` variable to that amount and logs a success message using `testStepPassed`.\n6. In case of an exception, the method logs an error message using `testStepInfo`.\n7. Finally, the method returns the extracted value.\n\nIn summary, this method searches for specific values in a file data string, extracts relevant numeric amounts, and returns the result.",
        "input": [
            "String docValue",
            "CharSequence expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "ShortRun",
        "function_name": "main",
        "code": "public static void main(String[] args) throws IOException {\n        ProcessBuilder pb = new ProcessBuilder(\"cmd.exe\", \"/C\", \"Start\", \"run.bat\");\n        File dir = new File(\".\\\\\");\n        pb.directory(dir);\n        Process p = pb.start();\n\n        System.exit(0);\n\n    }  \n}",
        "description": "This Java method, `main`, is the entry point of a Java program. It takes an array of strings as arguments (`String[] args`) and throws an `IOException`. \n\nThe method starts by creating a `ProcessBuilder` object, which is used to create and run a new process. The process is set up to run the command \"cmd.exe\" with the options \"/C\", \"Start\", and \"run.bat\". This suggests that the program is trying to start a batch file named \"run.bat\" using the Windows command prompt.\n\nThe method then sets the current directory of the process builder to the current working directory (`File dir = new File(\".\\\\\");`) and starts the process. \n\nFinally, the method calls `System.exit(0)`, which terminates the Java program with an exit status of 0 (indicating successful termination).",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "test",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\t\t\tString dateTime = null;\n\t\t\ttry {\n\t\t\t\tSimpleDateFormat obj = new SimpleDateFormat(\"M/dd/yyyy\");\n\t\t\t\tDate date = new Date();\n\t\t\t\tdateTime = obj.format(date);\n\t\t\t} catch (Exception e) {\n\t\t//\t\ttestStepFailed(\"Failed to get Current Date And Time\");\n\t\t//\t\twriteToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getMessage());\n\t\t\t}\n\t//\t\treturn dateTime;\n\t\t}\t\n\t}",
        "description": "This Java method, `main`, is the entry point of a Java program. It attempts to get the current date and time in the format \"M/dd/yyyy\" using the `SimpleDateFormat` class. If any exception occurs during this process (e.g., an invalid format string), it catches the exception but does not handle it further. The method does not return anything, as its return type is declared as `void`.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "TestDriver",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\t\ttry {\n\t\t\tCommon common = new Common();\n\t\t\tcommon.startup();\n\t\t\tTestNG testng = new TestNG();\n\t\t\tList<String> suites = new ArrayList<String>();\n\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Windows\\\\chromedriver.exe\");\n\t\t\tsuites.add(\"./Config/testng.xml\");\n\t\t\ttestng.setOutputDirectory(outputDirectory + \"/testng\");\n\t\t\ttestng.setTestSuites(suites);\n\t\t\ttestng.run();\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tcleanup();\t\t\n\t\t\t\tif (getConfigProperty(\"CreateAutoBug\").equals(\"Yes\"))\n\t\t\t\t\tAutoBugFromiSafeReport.main(args);\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t\t} finally {\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t\twriteToLogFile(\"INFO\", \"Script Execution Complete\");\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t}\n\t\t}\n\t}\n\n}",
        "description": "This Java method is the entry point of a program, marked as `public static void main(String[] args)`. It performs the following actions:\n\n1. Creates an instance of the `Common` class and calls its `startup()` method.\n2. Creates instances of the `TestNG` class and initializes it with a list of test suites (in this case, one suite specified by a file path).\n3. Sets the output directory for the test results.\n4. Runs the test suites using the `run()` method of the `TestNG` class.\n\nThe method also includes error handling:\n\n* If any exception occurs during execution, it catches and logs the error to a log file using the `writeToLogFile()` method.\n* It then performs cleanup operations using the `cleanup()` method.\n\nFinally, if a specific configuration property is set to \"Yes\", it calls another Java program named `AutoBugFromiSafeReport.main()` with the same command-line arguments. The program logs some informational messages to the log file upon completion.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String Value) {\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//label[contains(text(),'Environment:')]//following-sibling::select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, Value);\n\t\t\t\tselect.getFirstSelectedOption().getText();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Environment dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, selects a value from a dropdown menu based on the given string `Value`. \n\nIt first tries to find the dropdown element using XPath and waits for it to be displayed. If the dropdown is present, it scrolls to the element, highlights it (using the `highLighterMethod`), selects the specified value from the dropdown using the `Select` class, and then gets the text of the selected option.\n\nIf the dropdown is not present or an exception occurs during the process, the method fails the test step.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "clickOnTermsCheckbox",
        "code": "public void clickOnTermsCheckbox() {\n\t\ttry {\n\t\t\tString checkbox = \" #xpath=//input[@id='termsAccepted']\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (isElementDisplayed(checkbox, 4)) {\n\t\t\t\tclickOn(checkbox);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Term checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\ttestStepFailed(\"Failed in selection of check box\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnTermsCheckbox()`, attempts to click on a checkbox with the id \"termsAccepted\" using an XPath locator. It waits for up to 10 seconds for the element to be present and then checks if it is displayed within 4 seconds. If the element is not found or not displayed, the test step fails. The method also catches any exceptions that occur during execution and reports them as a failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String value) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[normalize-space(@value)='\" + value + \"']\";\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tmanualScreenshot(\"Clicked \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value+\" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnButton \"+e.getClass().getName());\n\t\t}\n\t}\n\n\t/*public static void writeDataLineByLine(String filePath, String[] headerarrays, String[] valuearrays) {\n\t\tFile file = new File(filePath);\n\t\ttry {\n\t\t\tFileWriter outputfile = new FileWriter(file);\n\t\t\tCSVWriter writer = new CSVWriter(outputfile);\n\t\t\tString[] header = headerarrays;\n\t\t\twriter.writeNext(header);\n\t\t\tString[] data1 = valuearrays;\n\t\t\twriter.writeNext(data1);\n\t\t\twriter.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}*/\n\n\t  /* public static void writeDataLineByLine(String filename, String[] headerarrays, String[] valuearrays) {\t        \n\t        File file = new File(filename);\n\t        String tempFilePath = file.getAbsolutePath();\n\t        String filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t        filePath =    filePath + \"\\\\UploadDocuments\\\\\" + filename;\n\t        try {\n\t            FileWriter outputfile = new FileWriter(filePath);\n\t            CSVWriter writer = new CSVWriter(outputfile);\n\t            String[] header = headerarrays;\n\t            writer.writeNext(header);\n\t            String[] data1 = valuearrays;\n\t            writer.writeNext(data1);\n\t            writer.close();\n\t        } catch (IOException e) {\n\t            e.printStackTrace();\n\t        }\n\t    }*/\n\t   \n\t/*public void writeDataIntoCsv(String filePath, String[] headerarrays, String[] valuearrays) {\n\t\twriteDataLineByLine(filePath, headerarrays, valuearrays);\n\t}*/",
        "description": "Here are brief descriptions for the Java methods:\n\n**`clickOnButton(String value)`**\n\nThis method attempts to click on a button with a specific value. It uses an XPath expression to locate the button and then performs the following actions:\n\n1. Scrolls to the button if it's not already visible.\n2. Highlights the button using a highlighting method (not shown).\n3. Clicks on the special element (button) associated with the value.\n4. Takes a manual screenshot of the button being clicked.\n\nIf the button is not present, the method fails the test step. If an exception occurs during any of these steps, it also fails the test step and logs the error.\n\n**`writeDataLineByLine(String filePath, String[] headerarrays, String[] valuearrays)`**\n\nThis method writes data to a CSV file line by line. It takes three parameters:\n\n1. `filePath`: The path and name of the output CSV file.\n2. `headerarrays`: An array of strings representing the header row of the CSV file.\n3. `valuearrays`: An array of strings representing the data rows to be written to the CSV file.\n\nThe method creates a `FileWriter` object, uses a `CSVWriter` object to write the header and data rows to the file, and then closes the writer. If an `IOException` occurs during writing, it prints the error to the console.\n\n**`writeDataIntoCsv(String filePath, String[] headerarrays, String[] valuearrays)`**\n\nThis method is simply a wrapper for the `writeDataLineByLine()` method, calling it with the provided parameters and doing nothing else.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "readAndReplaceDataInCsvFile",
        "code": "public void readAndReplaceDataInCsvFile(String filename, String headerLabel, String value) {\n\t\ttry {\n\t\t\tFile file = new File(filename);\n\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\tfilePath = filePath + \"\\\\UploadDocuments\\\\\" + filename;\n\n\t\t\tCSVReader reader = new CSVReader(new FileReader(filePath));\n\t\t\tList<String[]> dcument = reader.readAll();\n\t\t\tString[] First_Row = dcument.get(0);\n\t\t\tCSVWriter writer = new CSVWriter(new FileWriter(filePath));\n\t\t\twriter.writeNext(First_Row);\n\n\t\t\tfor (int i = 0; i < First_Row.length; i++) {\n\t\t\t\tif (First_Row[i].equals(headerLabel)) {\n\t\t\t\t\tfor (int j = 1; j < dcument.size(); j++) {\n\t\t\t\t\t\tString[] Temp = dcument.get(j);\n\t\t\t\t\t\tTemp[i] = value;\n\t\t\t\t\t\twriter.writeNext(Temp);\n\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treader.close();\n\t\t\twriter.flush();\n\t\t\twriter.close();\n\t\t} catch (IOException e) {\n\t\t\ttestStepFailed(\"Failed to readAndReplaceDataInCsvFile \"+e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method reads a CSV file, replaces the value in a specific column with a given replacement value, and writes the updated data back to the same file. The method takes three parameters: `filename` (the name of the CSV file), `headerLabel` (the label of the header row that contains the column to be replaced), and `value` (the new value to replace the existing values in the specified column).",
        "input": [
            "String filename",
            "String headerLabel",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "selectValueFromGlobalDropdown",
        "code": "public void selectValueFromGlobalDropdown(String dropDown,String Value) {\n\t\ttry {\n\t\t\tString dropdown = \"Utilities#xpath=//span[text()='\" + dropDown + \"']\";\n\t\t\tString dropdownValue = \"Value#xpath=//ul//li//a[text()='\" + Value + \"']\";\n\t\t\twaitForElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tif (isElementDisplayed(dropdownValue, 9)) {\n\t\t\t\t\tclickOn(dropdownValue);\n\t\t\t\t\tmanualScreenshot(\"Successfully Selected the Dropdown Value is \" + Value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(Value + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Data dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromGlobalDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromGlobalDropdown`, selects a value from a global dropdown menu. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method creates XPath expressions for the dropdown and its corresponding value.\n2. It waits for the dropdown element to appear using `waitForElement`.\n3. If the dropdown is displayed, it scrolls to the element using `scrollToWebElement` and clicks on it using `clickOn`.\n4. If the selected dropdown has a child element with the specified value, it clicks on that element as well.\n5. The method takes a manual screenshot if the selection is successful.\n6. If any of these steps fail (e.g., the dropdown isn't present or the value isn't displayed), the method reports a test step failure.\n\nThe method catches any exceptions that occur during its execution and reports a test step failure with the exception's details.",
        "input": [
            "String dropDown",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "selectObjectTypeValue",
        "code": "public void selectObjectTypeValue(String Value) {\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//td[text()='Object Type']//parent::tr//following::select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, Value);\n\t\t\t\tselect.getFirstSelectedOption().getText();\n\t\t\t\tmanualScreenshot(\"Selected object type as \"+Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select Environment dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectEnvironment \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectObjectTypeValue`, is used to select a value from a dropdown list with the label \"Object Type\" on a web page. \n\nThe method first tries to find an element matching the specified XPath (`\"#xpath=//td[text()='Object Type']//parent::tr//following::select\"`), then waits for this element to be displayed and scrollable (if necessary). If the element is found, it selects the value from the dropdown list using the `Select` class. The selected option's text is also retrieved and a manual screenshot is taken with the selected object type as the description.\n\nIf the element is not found or any other exception occurs during the execution of this method, the test step fails.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String label) {\n\t\ttry {\n\t\t\tString radiobox = \"radiobox #xpath=//label[normalize-space(text())='\" + label + \"']\";\t\t\t\n\t\t\tif (isElementDisplayed(radiobox, 2)) {\n\t\t\t\tclickOn(radiobox);\n\t\t\t\ttestStepPassed(label + \" radiobox is clicked \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" radiobox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOn radiobox\" + label + \" Exception - \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRadioButton`, attempts to locate and click on a radio button with the specified label. It uses an XPath expression to find the radio button by its label text. The method checks if the element is displayed within a certain time limit (2 seconds), and if so, it clicks on the radio button. If the element is not found or the click operation fails, the method reports a test step failure with an error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "toUploadFile",
        "code": "public void toUploadFile(String fileName) {\n\t\ttry {\n\t\t\twaitForElement(chooseFile, 10);\n\t\t\tif (isElementDisplayed(chooseFile, elementLoadWaitTime)) {\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\tfindWebElement(chooseFile).sendKeys(filePath + \"\\\\UploadDocuments\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded\" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\" Failed in toUploadFile Exception :\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `toUploadFile`, attempts to upload a file with the given filename (`fileName`) using a UI element identified as `chooseFile`. The method waits for the element to be displayed and then simulates sending the file path to the element. If the file is successfully uploaded, it logs a \"passed\" test step. If the upload button is not present or an exception occurs during the process, it logs a \"failed\" test step with the reason.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "enterValueInURLField",
        "code": "public void enterValueInURLField(String value) {\n        try {\n            String field = value + \"#xpath=//input[@value='Execute']//preceding-sibling::input[@id='urlInput']\";\n            waitForElement(field, 10);\n            if (isElementDisplayed(field, 10)) {\n                scrollToWebElement(field);\n                typeIn(field, value);\n                waitForPageToLoad();\n                highLighterMethodManualScreenShot(field, value);\n            } else {\n                testStepFailed(\"URL field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in enterValueInURLField. Exeception : \" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `enterValueInURLField`, enters a given value into a specific URL input field on a web page. Here's a brief breakdown:\n\n1. It creates a string `field` by concatenating the provided `value` with an XPath expression that targets the desired URL input field.\n2. The method waits for the element to be present and visible using `waitForElement`.\n3. If the element is displayed, it scrolls to the element using `scrollToWebElement`, types the value into the field using `typeIn`, and then waits for the page to load using `waitForPageToLoad`.\n4. After successful entry, it takes a manual screenshot of the screen using `highLighterMethodManualScreenShot` (likely highlighting the entered value).\n5. If the element is not present or visible within the specified timeout, the method fails the test step with an error message \"URL field is not present\".\n6. In case of any exceptions during execution, it catches and logs the error, failing the test step with a message like \"Failed in enterValueInURLField. Exeception : <exception class name>\".\n\nThis method appears to be part of a larger automation framework for web testing, possibly using a library like Selenium WebDriver.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "enterValueInTextArea",
        "code": "public void enterValueInTextArea(String labelName, String value) {\n        try {\n            String field = labelName + \"#xpath=//strong[text()='\"+labelName+\"']/../following-sibling::textarea\";\n            waitForElement(field, 10);\n            if (isElementDisplayed(field, 10)) {\n                scrollToWebElement(field);\n                typeIn(field, value);\n                waitForPageToLoad();\n                highLighterMethodManualScreenShot(field, labelName);\n            } else {\n                testStepFailed(labelName + \" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in enterValueInTextArea. Exeception : \" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `enterValueInTextArea`, enters a given value into a text area field on a web page. It takes two parameters: `labelName` and `value`. \n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the text area field based on the provided `labelName`.\n2. It waits for the element to be displayed (up to 10 seconds) using the `waitForElement` method.\n3. If the element is displayed, it scrolls to that element using the `scrollToWebElement` method and enters the given `value` into the text area field using the `typeIn` method.\n4. It waits for the page to load again using the `waitForPageToLoad` method.\n5. Finally, it takes a manual screenshot of the current screen using the `highLighterMethodManualScreenShot` method.\n\nIf any of these steps fail (e.g., the element is not displayed), the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "verifyWorkbenchStatus",
        "code": "public void verifyWorkbenchStatus() {\n\t\ttry {\n\t\t\tString link = \"#xpath=//th[text()='Result']/..//..//td[text()='Success'] | //div[@class='results']//li[text()='success: ']//strong[text()='true']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tmanualScreenshot(\"# Workbench result status is success #\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Workbench Result is not Success\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyWorkbenchStatus \"+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyWorkbenchStatus`, verifies the status of a workbench result. It attempts to locate an element on the page using an XPath expression and waits for it to be displayed within a certain time limit (10 seconds). If the element is found and displayed, the method scrolls to that element, highlights it using a highlighting method (`highLighterMethod1`), and takes a manual screenshot with the comment \"Workbench result status is success\". If the element is not found or displayed, the test step fails. In case of any exception during this process, the test step also fails with an error message indicating that the verification failed.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tnew WebDriverWait(driver, 5)\n\t\t\t\t\t.until(ExpectedConditions\n\t\t\t\t\t\t\t.elementToBeClickable(By.xpath(\"//input[normalize-space(@name)='\" + labelName + \"']\")))\n\t\t\t\t\t.click();\n\t\t\tnew WebDriverWait(driver, 5)\n\t\t\t\t\t.until(ExpectedConditions\n\t\t\t\t\t\t\t.elementToBeClickable(By.xpath(\"//input[normalize-space(@name)='\" + labelName + \"']\")))\n\t\t\t\t\t.sendKeys(value);\n\t\t\ttestStepPassed(\"enter the \" + value + \" for the Feild \" + labelName);\n\t\t\tmanualScreenshot(labelName);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, is used to enter a value into a form field with a specific label name. It uses the Selenium WebDriver and WebDriverWait classes to:\n\n1. Find the element with the given label name using an XPath query.\n2. Click on the element to make it focusable (if necessary).\n3. Enter the provided `value` into the field.\n4. Take a manual screenshot of the current page for testing purposes.\n5. Report whether the test step passed or failed based on whether the value was successfully entered.\n\nThe method uses try-catch block to handle any exceptions that may occur during execution, such as if the element is not found or cannot be interacted with.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "getRawResponseAndCompare",
        "code": "public String getRawResponseAndCompare(String value) {\n\t\tString response = \"\";\n\t\ttry {\n\t\t\tString link = \"#xpath=//strong[text()='Raw Response']/..//p\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tresponse = getText(link);\n\t\t\t\tif (response.contains(value)) {\n\t\t\t\t\tmanualScreenshot(\"Got expected response \" + response);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Not received expected response \" + response);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Raw Response not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to getRawResponseAndCompare \" + e.getClass().getName());\n\t\t}\n\t\treturn response;\n\t}",
        "description": "This Java method, `getRawResponseAndCompare`, is used to retrieve the raw response from a web page and compare it with a given value. Here's a brief summary of what the method does:\n\n1. It waits for an element on the page that contains the raw response.\n2. If the element is displayed, it scrolls to the element, highlights it (using `highLighterMethod1`), retrieves the text content of the element (i.e., the raw response).\n3. It checks if the raw response contains the given value (`value`). If it does, it takes a manual screenshot and considers the test step as passed.\n4. If the raw response does not contain the expected value, or if the element is not displayed, it marks the test step as failed.\n5. In case of any exceptions during the process, it also marks the test step as failed.\n\nThe method returns the retrieved raw response as a string.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBench",
        "function_name": "getRawResponse",
        "code": "public String getRawResponse() {\n\t\tString response = \"\";\n\t\ttry {\n\t\t\tString link = \"#xpath=//strong[text()='Raw Response']/..//p\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tresponse = getText(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Raw Response not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to getRawResponseAndCompare \" + e.getClass().getName());\n\t\t}\n\t\treturn response;\n\t}",
        "description": "This Java method, `getRawResponse()`, retrieves the raw response from a web page and returns it as a string. It uses various selenium WebDriver methods such as `waitForElement()`, `isElementDisplayed()`, `scrollToWebElement()`, and `highLighterMethod1()` to locate and interact with an element on the page that contains the desired response.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It sets an empty string variable `response` to store the raw response.\n2. It attempts to locate an element on the page using an XPath expression (`#xpath=//strong[text()='Raw Response']/..//p`). The expression targets a `<strong>` element with text \"Raw Response\" and then navigates to the parent element's child `<p>` element.\n3. If the element is found, it waits for the element to be displayed (up to 10 seconds).\n4. If the element is displayed, it scrolls the page to make the element visible, highlights the element using `highLighterMethod1()`, and retrieves the text content of the element using `getText()` method.\n5. It assigns this text content to the `response` variable.\n6. If the element is not found or an error occurs during the process, it calls a `testStepFailed()` method with an appropriate error message.\n\nThe method returns the raw response as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBench",
        "function_name": "mapFieldsFromDropdown",
        "code": "public void mapFieldsFromDropdown(String labelName,String Value) {\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//td[text()='\"+labelName+\"']//parent::tr//following::select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, Value);\n\t\t\t\tselect.getFirstSelectedOption().getText();\n\t\t\t\tmanualScreenshot(\"Selected \"+Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in mapFieldsFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `mapFieldsFromDropdown`, maps a field from a dropdown menu to a specified value. It takes two parameters: `labelName` and `Value`. \n\nThe method first tries to locate the dropdown menu by its label using an XPath expression. If the element is found, it waits for the dropdown to be displayed, scrolls into view if necessary, selects the specified value from the dropdown, highlights the selected option, and takes a manual screenshot of the selected value.\n\nIf the dropdown menu is not present or the method encounters any exceptions during execution, it fails the test step.",
        "input": [
            "String labelName",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "selectWorkbenchSetting",
        "code": "public void selectWorkbenchSetting(String selectValue) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//img[contains(@src,'workbench')]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tActions act = new Actions(driver);\n\t\t\t\tact.moveToElement(findWebElement(link)).perform();\n\t\t\t\tString value = \"#xpath=//img[contains(@src,'workbench')]//ancestor::a//following-sibling::ul//a[text()='\"+selectValue+\"']\";\n\t\t\t\tact.moveToElement(findWebElement(value)).click().perform();\n\t\t\t\ttestStepPassed(selectValue+\" Clicked successfully in Workbench\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Workbench Result is not Success\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyWorkbenchStatus \"+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectWorkbenchSetting`, selects a specific workbench setting from a dropdown menu. It uses Selenium WebDriver and Java to perform the following actions:\n\n1. Waits for an image with a specified XPath (`#xpath=//img[contains(@src,'workbench')]`) to be displayed.\n2. Scrolls to the element if it's not already visible.\n3. Highlights the element using `highLighterMethod1`.\n4. Moves the mouse cursor over the element and then clicks on the specific setting option that matches the provided `selectValue` parameter.\n5. Verifies that the selection was successful by calling `testStepPassed`.\n\nIf any of these steps fail, it will throw an exception and call `testStepFailed` with a descriptive message.",
        "input": [
            "String selectValue"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//label[text()='\"+labelName+\"']//ancestor::tr//td//input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tscrollToElementTillPresent(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox based on the provided label name and status (either \"check\" or \"uncheck\"). \n\nHere's how it works:\n\n1. It constructs an XPath expression to locate the checkbox element using its label name.\n2. It waits for the checkbox element to be present, then scrolls to it if necessary.\n3. If the status is \"check\", it checks if the checkbox is not already selected and, if not, selects it. \n4. If the status is \"uncheck\", it checks if the checkbox is already selected and, if so, deselects it.\n5. After each operation, it takes a manual screenshot of the result.\n6. If the checkbox is not present or an exception occurs during the process, it fails the test step.\n\nThis method can be used to automate tests that involve selecting or deselecting checkboxes on a web page.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "enterQueryInQueryFieldSOQL",
        "code": "public void enterQueryInQueryFieldSOQL(String value) {\n        try {\n            String field = \"#xpath=//td[contains(text(),'Enter or modify a SOQL query below:')]//textarea\";\n            waitForElement(field, 10);\n            if (isElementDisplayed(field, 10)) {\n                scrollToWebElement(field);\n                findWebElement(field).clear();\n                typeIn(field, value);\n                waitForPageToLoad();\n                highLighterMethod1(field);\n                manualScreenshot(\"\");\n            } else {\n                testStepFailed(\"Enter or modify a SOQL query below: field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in enterValueInTextArea. Exeception : \" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, named `enterQueryInQueryFieldSOQL`, enters a given value into a textarea field on a web page. The method attempts to:\n\n1. Locate the textarea element using an XPath expression.\n2. Wait for the element to be displayed and scrollable.\n3. Clear any existing text in the textarea.\n4. Enter the provided `value` into the textarea.\n5. Wait for the page to load completely.\n6. Highlight the entered value (likely for testing purposes).\n7. Take a manual screenshot of the updated page.\n\nIf the textarea field is not present, the method will fail the test step with an error message. If any exceptions occur during execution, the method will also fail the test step and report the exception type.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBench",
        "function_name": "getQueryResults",
        "code": "public String getQueryResults() {\n\t\tString totalCount=null;\n\t\ttry {\n\t\t\tString link = \"#xpath=(//h2[text()='Query Results']//parent::div//table//tr)[last()]//td[1]\";\n\t\t\tString empty = \"#xpath=//p[text()='Sorry, no records returned.']//parent::div\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\ttotalCount=getText(link);\n\t\t\t\thighLighterMethodManualScreenShot(link, \"Query Results count is : \"+totalCount);\n\t\t\t\ttestStepPassed(\"Query Results count is : \"+totalCount);\t\t\t\t\n\t\t\t}else if (isElementPresent(empty)) {\n\t\t\t\tscrollToWebElement(empty);\n\t\t\t\tmanualScreenshot(\"Sorry, no records returned.\");\n\t\t\t\ttotalCount=\"0\";\n\t\t\t} \n\t\t\telse {\n\t\t\t\ttestStepFailed(\"Query Results is not Success\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyWorkbenchStatus \"+ e.getClass().getName());\n\t\t}\n\t\treturn totalCount;\n\t}",
        "description": "This Java method, `getQueryResults`, appears to be a part of a web automation test. Its primary function is to retrieve the total count of query results from a webpage and store it in a string variable named `totalCount`. \n\nThe method uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `getText` to interact with the webpage. It also utilizes manual screenshot capabilities for visual verification purposes.\n\nThe method first attempts to locate an element on the webpage using XPath, waits for it to be displayed, scrolls to that element, retrieves its text content (which should contain the total count of query results), and then highlights the element in a manual screenshot. \n\nIf this process is successful, the method assumes that the query results are present and sets `totalCount` accordingly. However, if the expected element is not found or if a different message (\"Sorry, no records returned.\") is displayed instead, the method captures a manual screenshot with a failure message. In either case, it also logs the outcome as a test step (either passed or failed). \n\nIf any exception occurs during this process, the method catches it and logs a failure message, indicating that the query results verification has failed. The method ultimately returns the `totalCount` string value.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBench",
        "function_name": "getQueryResultsForInsuranceCalculation",
        "code": "public float getQueryResultsForInsuranceCalculation() {\n\t\tfloat finalvalue = 0;\n\t\ttry {\n\t\t\tString link = \"#xpath=(//h2[text()='Query Results']//parent::div//table//tr//th[text()='Insurance_EW_Premium_Master__c.Premium__c'])//..//..//tr//td[5]\";\n\t\t\tString empty = \"#xpath=//p[text()='Sorry, no records returned.']//parent::div\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tList<WebElement> findWebElements = findWebElements(link);\n\t\t\t\tfor (WebElement string : findWebElements) {\n\t\t\t\t\tString value=string.getText();\n\t\t\t\t\tfloat totalValue=Float.parseFloat(value);\n\t\t\t\t\tfinalvalue=Float.sum(finalvalue, totalValue);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Query Results count is : \"+finalvalue);\t\t\t\t\n\t\t\t}else if (isElementPresent(empty)) {\n\t\t\t\tscrollToWebElement(empty);\n\t\t\t\tmanualScreenshot(\"Sorry, no records returned.\");\n\t\t\t\tfinalvalue=0;\n\t\t\t}  \n\t\t\t\n\t\t\telse {\n\t\t\t\ttestStepFailed(\"Query Results is not Success\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyWorkbenchStatus \"+ e.getClass().getName());\n\t\t}\n\t\treturn finalvalue;\n\t}\n}",
        "description": "Here is a brief description of the Java method:\n\nThis method retrieves query results for an insurance calculation and returns the total value as a float. It uses Selenium WebDriver to interact with the web page, performing actions such as waiting for an element, scrolling to it, and extracting text values. The method handles two possible scenarios: 1) if the query results are displayed, it calculates the total value by summing up the individual values; or 2) if no records are returned (displaying a \"Sorry, no records returned\" message), it takes a manual screenshot and sets the final value to 0. If an exception occurs during the process, the method fails the test step with a descriptive error message.",
        "input": [],
        "output": "float"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button |//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button|//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//following-sibling::select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[@aria-label='\"+dropdownName+\"']//span//span[text()='\"+value+\"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(dropdownName + \" has listed values\");\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 03/04/2022 Description : method to select value from drop\n\t * down\n\t * \n\t * @param : dropdownName is the name of the field\n\t * \n\t * @param : value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromDropdown`, is used to select a specific value from a dropdown list in a web page. The method takes two parameters: `dropdownName` (the name of the field) and `value` (the value to be selected).\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the dropdown element based on its name.\n3. It waits for the dropdown element to be displayed.\n4. If the dropdown is displayed, it clicks on the dropdown and then selects the specified value from the list of options.\n5. It takes a manual screenshot after selecting the value to confirm that the selection was successful.\n6. If the value is not present in the dropdown or the dropdown is not displayed, it fails the test step.\n\nThe method also includes some error handling using try-catch blocks. If any exception occurs during the execution of the method, it will fail the test step and report an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromPanValidationDropdown",
        "code": "public void selectValueFromPanValidationDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | //label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//parent::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"'] | //label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromPanValidationDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 29/03/2022 Description : method to select value from drop\n\t * down\n\t * \n\t * @param : dropdownName is the name of the field\n\t * \n\t * @param : value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromPanValidationDropdown`, is used to select a specific value from a dropdown list in a Salesforce page. The method takes two parameters: `dropdownName` (the name of the dropdown field) and `value` (the value to be selected).\n\nThe method first waits for the page to load, then it locates the dropdown element using an XPath expression. It then clicks on the dropdown to open its list of options.\n\nNext, the method uses a loop to repeatedly check if the desired value is present in the dropdown list and click on it if found. If the value is not found after two attempts, the test step fails with a message indicating that the option is not present in the dropdown.\n\nIf the dropdown element is not displayed, the test step also fails with a message indicating that the dropdown is not present.\n\nThe method uses several other utility methods to perform these actions, including `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, and `clickOnSpecialElement`. It also takes manual screenshots of successful steps and logs failures using `testStepFailed` method.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromOvdPoaTypeDropdown",
        "code": "public void selectValueFromOvdPoaTypeDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button|//span[contains(text(),'Customer Details')]//ancestor::lightning-accordion-section//..//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::div//select | //label[text()='\"+dropdownName+\"']//parent::div//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);;\n\t\t\t\twaitTime(3);\n\t\t\t\tString valueSelect=\"#xpath=//label[text()='\"+dropdownName+\"']//parent::div//..//lightning-base-combobox-item//span//span[text()='\"+value+\"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\n\t\t\t\t\twaitForElement(valueSelect, 5);\n\t\t\t\t\tif (isElementDisplayed(valueSelect, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(valueSelect);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromOvdTypeDropdown \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 29/03/2022 Description : method to select value from drop\n\t * down\n\t * \n\t * @param : dropdownName is the name of the field\n\t * \n\t * @param : value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromOvdPoaTypeDropdown`, is used to select a specific value from a drop-down menu. The method takes two parameters: `dropdownName` (the name of the field) and `value` (the value to be selected).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the drop-down menu based on the provided `dropdownName`.\n3. It waits for the drop-down menu to be displayed using the `waitForElement()` method with a timeout of 10 seconds.\n4. If the drop-down menu is displayed, it scrolls to the element and clicks on it using the `clickOnSpecialElement()` method.\n5. It then selects the specified `value` from the drop-down menu by clicking on it.\n6. The method waits for the selection to be confirmed and takes a manual screenshot if the selection is successful.\n7. If the value is not present in the drop-down menu, the method fails the test step.\n8. If an exception occurs during the execution of the method, it catches the exception and reports the failure.\n\nThe method uses several other helper methods, such as `waitForElement()`, `isElementDisplayed()`, `scrollToWebElement()`, `clickOnSpecialElement()`, `waitTime()`, and `manualScreenshot()`. These methods are not shown in this code snippet.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromOvdPoaTypeDropdown1",
        "code": "public void selectValueFromOvdPoaTypeDropdown1(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t/*\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button|//span[contains(text(),'Customer Details')]//ancestor::lightning-accordion-section//..//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::div//select| //label[text()='\"+dropdownName+\"']//parent::div//..//button\";*/\n\t\t\t\t\t\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"+ dropdownName + \"']//parent::lightning-combobox//div//button |//label[text()='\" + dropdownName\t+ \"']//ancestor::lightning-combobox//div//button|//label[text()='\"+dropdownName+\"']//following-sibling::select\";\n\t\t\t\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOn(dropdown);;\n//\t\t\t\tWebElement field=driver.findElement(By.xpath(\"//span[contains(text(),'Customer Details')]//ancestor::lightning-accordion-section//..//label[text()='\"+dropdownName+\"']//parent::div//select\"));\n//\t\t\t\tSelect select = new Select(field);\n//\t\t\t\tselect.selectByVisibleText(value);\n//\t\t\t\tflag = true;\n//\t\t\t\tmanualScreenshot(\n//\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n//\t\t\t\tclickOnSpecialElement(dropdown);;\n\t\t\t\twaitTime(3);\n\t\t\t\tString valueSelect=\"#xpath=//label[text()='\"+dropdownName+\"']//parent::div//select//option[text()='\"+value+\"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\n\t\t\t\t\twaitForElement(valueSelect, 5);\n\t\t\t\t\tif (isElementDisplayed(valueSelect, 10)) {\n\t\t\t\t\t\tclickOn(valueSelect);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tflag = true;\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromOvdTypeDropdown \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromOvdPoaTypeDropdown1`, is used to select a value from a dropdown menu with the given name and value. \n\nHere's what it does:\n\n- It waits for the page to load.\n- It tries to find the dropdown element using an XPath expression.\n- If the dropdown is found, it scrolls to the element, clicks on it, and then selects the specified value from the dropdown options.\n- If the selection is successful, it takes a manual screenshot and waits for 3 seconds before moving forward.\n- If the selection fails (i.e., the value is not present in the dropdown), it marks the test step as failed.\n\nThe method also includes some error handling. If an exception occurs during the execution of this method, it will mark the test step as failed with a message indicating what went wrong.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "expandArrowsOfficeAddressEndrichment",
        "code": "public void expandArrowsOfficeAddressEndrichment(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel + \"']/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(fieldLabel + \" Expanded SUccessfully\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t/*\n\t * @author : Pradeep T\n\t * \n\t * @created Date : 29/03/2022 Description : method to enter value in text field\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the text to enter\n\t */",
        "description": "This Java method, `expandArrowsOfficeAddressEndrichment`, is used to expand an arrow icon (button) on a webpage that has a specific label. The method takes a `String` parameter `fieldLabel` which represents the label of the arrow button.\n\nHere's what the method does:\n\n1. It constructs a XPath expression by concatenating the `fieldLabel` with a static XPath string.\n2. It waits for the element to be present and visible on the page using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using `scrollToElement` and then uses `scrollToWebElement` to bring it into view.\n4. It gets the aria-expanded attribute of the button using `findWebElement` and checks if its value is \"false\".\n5. If the value is \"false\", it clicks on the button using `clickOnSpecialElement`.\n6. After clicking, it waits for the page to load completely using `waitForPageToLoad`.\n7. Finally, it takes a manual screenshot with the label as the filename to verify that the arrow has been successfully expanded.\n\nIf the element is not present or displayed within a certain time limit (10 seconds), the method will fail and log an error message. If any exception occurs during the execution of this method, it will also be logged.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterTextInCustomerProcess",
        "code": "public void enterTextInCustomerProcess(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-primitive-input-simple//input | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-input//input | //span[contains(text(),'Customer Details')]//ancestor::lightning-accordion-section//..//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tif(findWebElement(field).isEnabled())\n\t\t\t\t{\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" Field entered with value :\" + value);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttestStepFailed(labelName + \" field is disabled\");\n\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerProcess \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `enterTextInCustomerProcess`, enters a given text value into a Salesforce customer process form field. It takes two parameters: `labelName` and `value`. \n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the field with the given label name.\n2. It waits for the field to be present on the page (up to 10 seconds).\n3. If the field is displayed, it checks if the field is enabled. \n4. If the field is enabled, it scrolls into view, types in the given value, and then waits for the page to load.\n5. It takes a manual screenshot of the highlighted field with the entered value as part of the screenshot name.\n6. If the field is disabled or not present, it fails the test step.\n\nIf any exception occurs during these steps, it also fails the test step with an error message including the type of exception that occurred.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterValueInOvdPoaTypeField",
        "code": "public void enterValueInOvdPoaTypeField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-primitive-input-simple//input | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-input//input | //span[contains(text(),'Customer Details')]//ancestor::lightning-accordion-section//..//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tfindWebElement(field).clear();\n\t\t\t\tfindWebElement(field).sendKeys(value);\n\t\t\t\tfindWebElement(field).sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" Field entered with value :\" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerProcess \" + e.getClass().getName());\n\n\t\t}\n\t}\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 29/03/2022 Description : method to enter value in text field\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the text need to enter\n\t */",
        "description": "This Java method, `enterValueInOvdPoaTypeField`, enters a given value into an input field with a specified label name. It uses XPath expressions to locate the field and then performs the following actions:\n\n1. Waits for the field to be displayed.\n2. Scrolls to the field if it's not already visible.\n3. Clears any existing text in the field.\n4. Enters the given value into the field.\n5. Presses the Enter key.\n6. Waits for the page to load completely.\n7. Takes a manual screenshot of the field with the entered value.\n\nIf the field is not present or an exception occurs during the process, the method will fail the test step and report the error.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterTextInCustomerDetails",
        "code": "public void enterTextInCustomerDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::lightning-input-field//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field entered with value : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Pradeep T\n\t * \n\t * @created Date : 29/03/2022 Description : method to enter DOB\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the date\n\t */",
        "description": "This Java method, `enterTextInCustomerDetails`, is used to enter text into a customer details form field with the specified label name. It takes two parameters: `labelName` (the name of the field) and `value` (the text to be entered).\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `labelName` to locate the corresponding input field.\n2. It waits for the element to be present and visible using `waitForElement`.\n3. If the `value` is not empty, it checks if the element is displayed using `isElementDisplayed`. If it is, it scrolls to the element using `scrollToWebElement`, enters the value using `typeIn`, and then waits for the page to load using `waitForPageToLoad`. Finally, it takes a manual screenshot using `highLighterMethodManualScreenShot` with a message indicating that the field has been entered.\n4. If the `value` is empty or the element is not present, it reports a test step failure using `testStepFailed`.\n\nThe method also includes error handling using a catch block to report any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input)[1]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field enter Date with : \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDob \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Pradeep T\n\t * \n\t * @created Date : 29/03/2022 Description : method to enter the value in input\n\t * Field and select the corresponding result\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the zipcode value\n\t */",
        "description": "This Java method, `enterDob`, is used to enter a value into an input field with a specified label name. The method takes two parameters: `labelName` and `value`. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `labelName`.\n2. It waits for the element identified by the XPath expression to be displayed.\n3. If the element is displayed, it scrolls to that element, enters the provided `value`, and then waits for the page to load.\n4. After successful entry of the value, it takes a manual screenshot (using `highLighterMethodManualScreenShot`) with a descriptive name including the label name and entered value.\n\nIf any exception occurs during this process, it logs the failure as a test step failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterZipCode",
        "code": "public void enterZipCode(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li[@data-value='\" + value + \"']//span//div\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" filed Zipcode entered as : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterZipCode \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 30/03/2022 Description : method to select tabs in FOS\n\t * \n\t * @param : optionToClick is the value to navigate\n\t */",
        "description": "This Java method, `enterZipCode`, enters a zip code into a specific field on a web page and verifies that the entered value is present in a dropdown list. Here's a step-by-step breakdown:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the input field.\n2. The method waits for the element to be displayed (up to 10 seconds) using the `waitForElement` and `isElementDisplayed` methods.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n4. It enters the provided `value` into the input field using the `typeIn` method.\n5. The method waits for the page to load fully using `waitForPageToLoad`.\n6. It constructs another XPath expression to locate an item in a dropdown list with the same value entered earlier.\n7. If the item is displayed (up to 30 seconds), it clicks on that item using the `clickOn` method and takes a manual screenshot of the highlighted element using the `highLighterMethodManualScreenShot` method.\n8. If the item is not present, it fails the test step with an error message.\n9. If the input field is not displayed (or any other exception occurs), it also fails the test step.\n\nNote that this method uses various utility methods (`waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `typeIn`, `clickOn`, and others) that are likely defined elsewhere in the codebase.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectCustomerTabs",
        "code": "public void selectCustomerTabs(String optionToClick) {\n\t\ttry {\n\t\t\tString navigationOption = \"'\" + optionToClick + \"' navigation option #xpath=//a[text()='\" + optionToClick\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(navigationOption, 10);\n\t\t\tif (isElementDisplayed(navigationOption, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(navigationOption);\n\t\t\t\tclickOnSpecialElement(navigationOption);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(10);\n\t\t\t\tString attribute = getAttributeValue(navigationOption, \"aria-selected\");\n\t\t\t\tif (attribute != \"true\") {\n\t\t\t\t\tclickOnSpecialElement(navigationOption);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(optionToClick + \" Customer Tab already clicked\");\n\t\t\t\t}\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(\"'\" + optionToClick + \"' navigation option is clicked successfully\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"'\" + optionToClick + \"' navigation option is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectCustomerTabs. Exception: \" + e.getClass());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 30/03/2022 Description : method to click edit icon\n\t * \n\t * @param : fieldLabel is the field name\n\t * \n\t * @param : ScrollElement is the section to scroll\n\t */",
        "description": "This Java method, `selectCustomerTabs`, selects a customer tab based on an option provided as a string parameter. The method:\n\n1. Constructs an XPath expression to locate the element with text matching the provided option.\n2. Waits for the element to be displayed and navigable.\n3. Scrolls to the element if necessary.\n4. Clicks on the element.\n5. Verifies that the tab is selected (i.e., its aria-selected attribute is \"true\").\n6. If the tab is not selected, clicks on it again to select it.\n7. Takes a manual screenshot to confirm the selection was successful.\n8. Handles exceptions and logs test step failures if necessary.\n\nThe method can be used to automate the process of selecting customer tabs in an application, such as clicking on \"John Doe\" or \"Jane Smith\" to navigate to their respective pages.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String ScrollElement, String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div//..//button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 30/03/2022 Description : method to click on opportunity Link\n\t * \n\t * @return : opportunityValue is the opportunity id\n\t */",
        "description": "This Java method, `clickEditOptionWithTitle`, simulates a click on an edit button with a specific title. Here's a brief description of what it does:\n\n1. Waits for the page to load.\n2. Constructs two XPath expressions:\n\t* `scrollElement`: The element containing the scrollable content (e.g., a table or list) with the specified label (`ScrollElement`).\n\t* `editOption`: The edit button with the specified label (`fieldLabel`) as its text.\n3. Scrolls to the `scrollElement` using the `scrollbycordinates` method, waits for it to be displayed, and then scrolls to the `editOption` using `scrollToWebElement`.\n4. Clicks on the `editOption` using `clickOnSpecialElement`.\n5. Waits for 3 seconds before moving on.\n6. If the edit button is not present, fails the test step with a message indicating that the button was not found.\n\nThe method catches any exceptions that occur during execution and logs an informative error message if one occurs.",
        "input": [
            "String ScrollElement",
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnOppurtunityNameLink",
        "code": "public String clickOnOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')] | //div[text()='OPPORTUNITY NAME']//parent::div//a\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\ttestStepInfo(\"$ Created Opportunity Id - $\"+opportunityValue);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, opportunityValue);\n\t\t\t\tclickOn(opportunity);\n//\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\twaitTime(10);\n\t\t\t\tif (isElementPresent(opportunity)) {\n\t\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\t}\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 30/03/2022 Description : method to select scheme\n\t * \n\t * @param : schemeValue is the scheme to select\n\t */",
        "description": "This Java method, `clickOnOppurtunityNameLink`, simulates a click on an opportunity name link in a web page. The method:\n\n1. Waits for the page to load.\n2. Locates the opportunity name link using XPath or CSS selector (based on the provided string).\n3. Waits for the element to be displayed and scrollable.\n4. Retrieves the text of the opportunity name link.\n5. Performs a manual screen shot with the opportunity name highlighted.\n6. Clicks on the opportunity name link.\n7. Waits for a short period before checking if the element is still present (in case it's a dynamic page).\n8. If the element is still present, clicks on a special element (presumably a dropdown or a button) associated with the opportunity.\n9. Refreshes the page three times to ensure any changes are reflected.\n\nThe method returns the value of the opportunity name link. If an exception occurs during the execution, it fails the test step and logs the error.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectSchemeWithValue",
        "code": "public void selectSchemeWithValue(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\t\t\t\tdo {\n\t\t\t\t\tString scheme = schemeValue\n\t\t\t\t\t\t\t+ \" Scheme select button#xpath=//div//h2//span//div//Strong[contains(text(),'\" + schemeValue\n\t\t\t\t\t\t\t+ \"')]//..//..//..//..//..//..//button[contains(text(),'Select')] | \";\n\t\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" scheme value is present.\");\n\t\t\t\t\t\tfindWebElement(scheme).click();\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tmanualScreenshot(\"Successfully \" + schemeValue + \" scheme value is selected.\");\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isElementDisplayed(disabledNxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (!conditionFlag);\n\t\t\t\tif (failFlag) {\n\t\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Jeeva R\n\t * \n\t * @created Date : 31/03/2022 Description : method to enter the value in input\n\t * Field and select the corresponding result\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the model name\n\t */",
        "description": "This Java method, `selectSchemeWithValue`, is used to select a scheme with a given value. The method takes a string parameter `schemeValue` and attempts to find an element on the page that matches the scheme value.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the `schemeValue` is not empty.\n2. If it's not empty, it enters a loop that continues until a condition is met (i.e., `conditionFlag` becomes true).\n3. Inside the loop, it:\n\t* Waits for the page to load and then waits for an element with the specified scheme value to be displayed.\n\t* Scrolls to the element, highlights it, and takes a manual screenshot if the element is found.\n\t* Clicks on the element to select the corresponding result.\n4. After clicking on the element, it checks if the `conditionFlag` is still false (i.e., the element was not found). If so, it:\n\t* Checks if another button with text \"Next Schemes\" and disabled status is displayed. If yes, sets `failFlag` to true.\n\t* Otherwise, clicks on the \"Next Schemes\" button.\n5. Once the loop exits, it checks if `failFlag` is still true (i.e., the scheme value was not found). If so, it reports a test step failure.\n\nThe method also catches any exceptions that may occur during its execution and reports a test step failure with the exception details.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectModelName",
        "code": "public void selectModelName(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div//input[@placeholder='\" + labelName + \"']|//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//following-sibling::c-model-lookup-revamp//div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li//span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Model Name Selected : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModelName \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Jeeva R\n\t * \n\t * @created Date : 31/03/2022 Description : method to enter the value in input\n\t * Field and select the corresponding result\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is input need to select\n\t */",
        "description": "This Java method, `selectModelName`, is used to enter a value in an input field and then select the corresponding result from a dropdown list. The method takes two parameters: `labelName` (the name of the field) and `value` (the input value to be selected).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the `labelName` parameter, which is used to locate the input field.\n2. The method waits for the element to be displayed using `waitForElement`.\n3. If the element is displayed, it scrolls to the element using `scrollToWebElement`, enters the `value` in the input field using `typeIn`, and then waits for the page to load using `waitForPageToLoad`.\n4. It checks if a specific lookup value (constructed by concatenating the `value` with an XPath expression) is displayed within 35 seconds.\n5. If the lookup value is displayed, it selects the corresponding result from the dropdown list using `clickOn`, waits for the page to load again, and takes a manual screenshot to confirm the selection.\n6. If the lookup value is not displayed, or if any of the previous steps fail, the method reports a test step failure.\n\nThe method also includes error handling using a `catch` block that catches any exceptions thrown during execution and reports a test step failure with the exception details.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\n\t\t\t\t// String searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t// \t\t+ \"')]//../following-sibling::div//input | //label[contains(text(),'\" + labelName\n\t\t\t\t// \t\t+ \"')]//../following-sibling::div//input \";\n\n//\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\"+labelName+\"')]/parent::div//div[@part='input-container']//input\";\n\n\n\t\t\t\tString searchField = labelName + \" #xpath=//label[text()='\"+labelName+\"']//..//div[@part='input-container']//input\";\n\n\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\tString popupSearchField = labelName + \" #xpath=//div[@role='dialog']//span[contains(text(),'\"\n\t\t\t\t\t\t+ labelName + \"')]//../following-sibling::div//input\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value\n\t\t\t\t\t\t\t+ \"')] | //label[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//..//span[contains(@title,'Show All Results for')]\";\n\t\t\t\t\tString popupsearch_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t} else if (isElementDisplayed(popupSearchField, elementLoadWaitTime)) {\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).clear();\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).sendKeys(value);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(popupsearch_icn);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Jeeva R\n\t * \n\t * @created Date : 31/03/2022 Description : method to search address\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is address need to select\n\t */",
        "description": "This Java method, `chooseValueFromSearchAndListField`, searches for a specific value in a list or dropdown field and selects it. The method takes two parameters: `labelName` (the name of the field) and `value` (the address to be selected).\n\nHere's what the method does:\n\n1. It checks if the provided `value` is not empty.\n2. If the value is not empty, it constructs an XPath expression based on the `labelName` to locate the search field.\n3. It waits for the search field to be displayed and scrolls to it if necessary.\n4. It types in the `value` into the search field and selects it from the list or dropdown.\n5. If the selected value is a link, it clicks on it. Otherwise, it checks if there's a popup search field and performs the same actions (typing in the value and selecting it).\n6. If any of these steps fail, it reports an error.\n\nThe method also includes some error handling using `try`-`catch` blocks to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "customerSearchAddress",
        "code": "public void customerSearchAddress(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tscrollbycordinates(field);\n\t\t\tString substring = value.substring(0, 5);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, substring);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOnSpecialElement(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" Search Field selected as value : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 01/04/2022 Description : method to select value from CKYC\n\t * part\n\t * \n\t * @param : dropdownName is the name of the field\n\t * \n\t * @param : value is input need to select\n\t */",
        "description": "This Java method, `customerSearchAddress`, is used to search for a customer address in a system. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the `labelName` to locate the corresponding input field. It then waits for the element to be displayed, scrolls to it if necessary, and types in the provided `value` substring.\n\nAfter typing the value, the method checks if the search result is displayed by looking for an element with a specific XPath expression containing the original `value`. If the result is found, it clicks on that element. \n\nIf the search result is not found or the input field is not present, the method fails the test step and reports the issue.\n\nThe method also includes some error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromCkycDropdown",
        "code": "public void selectValueFromCkycDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//following-sibling::div//a | //label[text()='\" + dropdownName + \"']//parent::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=(//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"'])[1] | //div[contains(@id,'dropdown')]//span[text()='\" + value + \"']\";\n\t\t\t\tString dropdownListValue = value\n\t\t\t\t\t\t+ \" value#xpath=(//div[contains(@class,'select-options')]//ul/li/a[text()='\" + value + \"'])[2]\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\thighLighterMethod1(dropdownList);\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (isElementDisplayed(dropdownListValue, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownListValue);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\thighLighterMethod1(dropdownListValue);\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Pradeep T\n\t * \n\t * @created Date : 01/04/2022 Description : method to select value from drop\n\t * down\n\t * \n\t * @param : dropdownName is the name of the field\n\t * \n\t * @param : value is input with special character need to select\n\t */",
        "description": "This Java method, `selectValueFromCkycDropdown`, selects a value from a dropdown menu (also known as a select box or combobox) in a web application. It takes two parameters: `dropdownName` and `value`.\n\nHere's what the method does:\n\n1. Waits for the page to load.\n2. Locates the dropdown menu using an XPath expression that combines the dropdown name with a specific syntax.\n3. Waits for the dropdown menu to be displayed.\n4. Scrolls down to the dropdown menu if it's not already visible.\n5. Clicks on the dropdown menu to expand it.\n6. Waits for the dropdown list to appear.\n7. If the value is found in the dropdown list, clicks on it and takes a manual screenshot of the selected value.\n8. If the value is not found in the dropdown list, fails the test step with an error message.\n9. If the dropdown menu is not present, fails the test step with an error message.\n\nThe method uses various helper methods, such as `waitForPageToLoad`, `waitForElement`, `scrollToWebElement`, `clickOnSpecialElement`, and `highLighterMethod1`, to perform these steps. It also takes manual screenshots at specific points in the process.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownWithSpecialCharacter",
        "code": "public void selectValueFromDropdownWithSpecialCharacter(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tchar ph = '\"';\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//span//span[contains(text(),\" + ph + \"\" + value + \"\" + ph\n\t\t\t\t\t\t+ \")]\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownWithSpecialCharacter \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 30/03/2022 Description : Method to click button in kyc tab\n\t * \n\t * @param : value is the name of button to click\n\t */",
        "description": "This Java method, `selectValueFromDropdownWithSpecialCharacter`, is used to select a specific value from a dropdown menu that contains special characters (such as quotes) in its text. The method takes two parameters: `dropdownName` and `value`.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the dropdown menu based on the provided `dropdownName`.\n3. It waits for the dropdown menu to be displayed, then clicks on it.\n4. It waits for the dropdown list to be displayed and checks if the desired value is present in the list.\n5. If the value is found, it selects it by clicking on the corresponding element.\n6. The method takes a screenshot as proof of successful selection.\n7. If the value is not found or the dropdown menu is not displayed, the method fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnButtonInKycTab",
        "code": "public void clickOnButtonInKycTab(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//lightning-button//button[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t//\thighLighterMethod(link);\n\t\t\t\tWebElement ele = findWebElement(link);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\tif (value.equalsIgnoreCase(\"Validate PAN\")) {\n\t\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t}\n\t\t\t\ttestStepInfo(\"successfuly clicked On : \" + value + \" Button\");\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to expand side arrows\n\t * \n\t * @param : fieldLabel is the section name need to expand\n\t */",
        "description": "This Java method, named `clickOnButtonInKycTab`, simulates a click on a button with a specific text value within a Lightning tab. The method takes a `String` parameter `value` which represents the text of the button to be clicked.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `value` with a fixed XPath string.\n2. It waits for the element matching the constructed XPath to appear (up to 10 seconds).\n3. If the element is displayed, it scrolls to that element and simulates a click on it using the `Actions` class.\n4. If the button's text matches \"Validate PAN\", it calls another method `clickOnSpecialElement(link)` to perform some special action.\n5. It logs a success message with the test step information if the click operation is successful.\n6. If the element is not displayed within 10 seconds, it logs a failure message and marks the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during the execution of the method.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "expandArrows",
        "code": "public void expandArrows(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::button | //span[contains(text(),'\" + fieldLabel + \"')]/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(fieldLabel+\" is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `expandArrows`, expands an arrow icon on a webpage based on the provided `fieldLabel`. Here's a step-by-step breakdown:\n\n1. It constructs a string `arrow` that combines the `fieldLabel` with some XPath syntax to identify the arrow element.\n2. It waits for the arrow element to be present using the `waitForElement` method, and then checks if it is displayed using the `isElementDisplayed` method.\n3. If the arrow is present and not expanded (i.e., its aria-expanded attribute has a value of \"false\"), it scrolls to the arrow, clicks on it using the `clickOnSpecialElement` method, and waits for the page to load again.\n4. After expanding the arrow, it takes a manual screenshot with the label \"fieldLabel is present\".\n5. If the arrow is not present or already expanded, it logs an error message using the `testStepFailed` method.\n\nThe method also catches any exceptions that may occur during its execution and logs them as test step information using the `testStepInfo` method.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "expandArrow",
        "code": "public void expandArrow(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel + \"']/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to add model\n\t */",
        "description": "This Java method, `expandArrow`, is used to expand an arrow icon in a web page. It takes a string parameter `fieldLabel` which seems to be the label of the field associated with the arrow.\n\nHere's what the method does:\n\n1. It constructs a new XPath expression by concatenating the `fieldLabel` with some static text and an XPath selector.\n2. It uses this XPath expression to wait for the element to appear on the page (up to 10 seconds).\n3. If the element is displayed, it scrolls to the element and then expands it if it's not already expanded (i.e., its `aria-expanded` attribute is set to \"false\").\n4. If the element is not present or expansion fails, it reports a test step failure.\n\nThe method also includes error handling, logging any exceptions that occur during execution.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectModel",
        "code": "public void selectModel(String tabName, String modelNameLabel, String modelNameValue, String buttonName,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Select Model Name #\");\n//\t\t\tif (GOR.environmentValue.equals(\"UAT\")) {\n//\t\t\t\tselectTabs(tabName);\n//\t\t\t}\n\t\t\tselectModelName(modelNameLabel, modelNameValue);\n\t\t\tclickOnButton(buttonName);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModel \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete ckyc pan\n\t * validation section\n\t */\n\n/*\tpublic void ckycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\n\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\t\texpandArrows(ckycTypeLabel);\n//\t\t\t\tselectValueFromDropdown(ckycTypeLabel, ckycTypeValue);\n//\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n//\t\t\t\tenterDob(dobLabel, dobValue);\n//\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\twaitForPageToLoad();\n//\t\t\t\tverifySuccessMessage(successMessage1);\n//\t\t\t\twaitForPageToLoad();\n////\t\t\t\tselectValueFromDropdownWithSpecialCharacter(byPassReasonLabel, byPassReasonValue);\n////\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\tclickOnRadioButton(\"MOBILE\");\n//\t\t\t\tclickOnButtonInPopupWithoutWaitTime(\"Initiate EKYC\");\n//\t\t\t}else {\n\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\t\tenterDob(dobLabel, dobValue);\n\t\t\t\tclickOnButtonInKycTab(\"Save\");\n//\t\t\t\twaitForPageToLoad();\n\t\t\t\tverifySuccessMessage(successMessage1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepInfo(\"# Account Aggregator #\");\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\texpandArrows(\"KYC Validation\");\n\t\t\t\tString radibutton = \"Radio Button#xpath=//div[normalize-space(text()) = 'Mobile']//input\";\n\t\t\t\tif (isElementPresent(radibutton)) {\n\t\t\t\t\tclickOnRadioButtonInCKYC(\"Mobile\");\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Initiate EKYC\");\n\t\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\t\t\tmanualScreenshot(\"Counter is started\");\n\t\t\t\t\t\twaitTime(45);\n\t\t\t\t\t\tselectDropdownValue(\"Ekyc Bypass Reason\",\"Customer details are not received through EKYC\");\n\t\t\t\t\t\tclickOnButton(\"Save EKYC Bypass\");\n\t\t\t\t\t\tverifySuccessMessage(successMessage2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\texpandArrows(\"Account Aggregator\");\n\t\t\t\tselectValueFromDropdown(\"Bank Name\", \"HDFC Bank\");\n\t\t\t\tString link = \"#xpath=//button[text()='Proceed with 3in1 AA'] | //input[@value='Proceed with 3in1 AA']\";\n\t\t\t\tif (isElementPresent(link)) {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed with 3in1 AA\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twaitTime(elementLoadWaitTime);\n\t\t\t\tclickOnButton(\"Proceed to AA\");\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Didn't receive AA SMS\");\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Customer didn't receive OTP\");\n\t\t\t\t}\n\t\t\t\n\t\t\t\tclickOnButton(\"Save\");\n//\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}*/\n\t\n/*\tpublic void ckycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\n\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\t\texpandArrows(ckycTypeLabel);\n//\t\t\t\tselectValueFromDropdown(ckycTypeLabel, ckycTypeValue);\n//\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n//\t\t\t\tenterDob(dobLabel, dobValue);\n//\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\twaitForPageToLoad();\n//\t\t\t\tverifySuccessMessage(successMessage1);\n//\t\t\t\twaitForPageToLoad();\n////\t\t\t\tselectValueFromDropdownWithSpecialCharacter(byPassReasonLabel, byPassReasonValue);\n////\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\tclickOnRadioButton(\"MOBILE\");\n//\t\t\t\tclickOnButtonInPopupWithoutWaitTime(\"Initiate EKYC\");\n//\t\t\t}else {\n\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\t\tenterDob(dobLabel, dobValue);\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\",\"Save\");\n\t\t\t\t}else {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Save\");\n\t\t\t\t}\n\t\t\t\t\t\n//\t\t\t\twaitForPageToLoad();\n\t\t\t\tverifySuccessMessage(successMessage1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepInfo(\"# Account Aggregator #\");\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\texpandArrows(\"KYC Validation\");\n\t\t\t\tString radibutton = \"Radio Button#xpath=//div[normalize-space(text()) = 'Mobile']//input\";\n\t\t\t\tif (isElementPresent(radibutton)) {\n\t\t\t\t\tclickOnRadioButtonInCKYC(\"Mobile\");\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Initiate EKYC\");\n//\t\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\t\t\tmanualScreenshot(\"Counter is started\");\n\t\t\t\t\t\twaitTime(45);\n\t\t\t\t\t\tselectDropdownValue(\"Ekyc Bypass Reason\",\"Customer details are not received through EKYC\");\n\t\t\t\t\t\tclickOnButton(\"Save EKYC Bypass\");\n\t\t\t\t\t\tverifySuccessMessage(successMessage2);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\texpandArrows(\"Account Aggregator\");\n\t\t\t\tselectValueFromDropdown(\"Bank Name\", \"HDFC Bank\");\n\t\t\t\tString link = \"#xpath=//button[text()='Proceed with 3in1 AA'] | //input[@value='Proceed with 3in1 AA']\";\n\t\t\t\tif (isElementPresent(link)) {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed with 3in1 AA\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\twaitTime(elementLoadWaitTime);\n\t\t\t\tclickOnButton(\"Proceed to AA\");\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Didn't receive AA SMS\");\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Customer didn't receive OTP\");\n\t\t\t\t}\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tclickOnAddressEnrichmentButton(\"Account Aggregator\",\"Save\");\n\t\t\t\t}else {\n\t\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\n//\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "The Java method `selectModel` is used to select a model name from a dropdown list and click on the associated button. The method takes six parameters:\n\n1. `tabName`: The name of the tab where the model selection dropdown is located.\n2. `modelNameLabel`: The label of the model selection dropdown.\n3. `modelNameValue`: The value (model name) to be selected from the dropdown.\n4. `buttonName`: The name of the button that will be clicked after selecting the model.\n5. `successMessage`: A message that is expected to appear after successfully completing the model selection and button click.\n\nThe method first attempts to execute the test step, which involves selecting the model name from the dropdown and clicking on the associated button. If any exceptions occur during this process, the method catches them and reports a failure with an error message.\n\nThe `ckycPanValidation` method is used for completing the CKYC PAN validation section in the customer process. This method takes 14 parameters:\n\n1-8: Same as the `selectModel` method.\n9-10: The label and value of the by-pass reason dropdown.\n11: The name of the button to be clicked after selecting the by-pass reason.\n12-13: Success messages for the validation section.\n\nThe method first attempts to execute a test step, which involves selecting the model name from the dropdown, entering PAN details, and clicking on the associated button. If any exceptions occur during this process, the method catches them and reports a failure with an error message.\n\nNote that there are two versions of the `ckycPanValidation` method provided, one for UAT (User Acceptance Testing) environment and another for non-UAT environments. The differences between these two methods are mainly related to button clicks and address enrichment actions.",
        "input": [
            "String tabName",
            "String modelNameLabel",
            "String modelNameValue",
            "String buttonName",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "ckycPanValidation",
        "code": "public void ckycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\t\t\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\t\texpandArrows(ckycTypeLabel);\n//\t\t\t\tselectValueFromDropdown(ckycTypeLabel, ckycTypeValue);\n//\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n//\t\t\t\tenterDob(dobLabel, dobValue);\n//\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\twaitForPageToLoad();\n//\t\t\t\tverifySuccessMessage(successMessage1);\n//\t\t\t\twaitForPageToLoad();\n////\t\t\t\tselectValueFromDropdownWithSpecialCharacter(byPassReasonLabel, byPassReasonValue);\n////\t\t\t\tclickOnButtonInKycTab(\"Validate PAN/CKYC\");\n//\t\t\t\tclickOnRadioButton(\"MOBILE\");\n//\t\t\t\tclickOnButtonInPopupWithoutWaitTime(\"Initiate EKYC\");\n//\t\t\t}else {\n\t\t\tString codeDeclaration = \"#xpath=//div[text()='Zip Code Declaration']\";\n\t\t\tif (isElementPresent(codeDeclaration)) {\n\t\t\t\thighLighterMethodManualScreenShot(codeDeclaration, \"Zip Code Declaration is Available as Expected\");\n\t\t\t\tchooseValueFromSearchAndListFieldInRequireDetails(\"Declared Zip Code\", \"411014\");\n\t\t\t\tclickOnAddressEnrichmentButton(\"Declared Zip Code\", \"Save\");\n\t\t\t\twaitTime(5);\n\t\t\t}\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\t\tenterDob(dobLabel, dobValue);\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\",\"Save\");\n\t\t\t\t}else {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Save\");\n\t\t\t\t}\n//\t\t\t\twaitForPageToLoad();\n\t\t\t\tverifySuccessMessage(successMessage1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepInfo(\"# Account Aggregator #\");\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\texpandArrows(\"KYC Validation\");\n\t\t\t\tString radibutton = \"Radio Button#xpath=//div[normalize-space(text()) = 'Mobile']//input\";\n\t\t\t\tif (isElementPresent(radibutton)) {\n\t\t\t\t\tclickOnRadioButtonInCKYC(\"Mobile\");\n\t\t\t\t\tclickOnButton(\"Initiate EKYC\");\n//\t\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\t\t\tmanualScreenshot(\"Counter is started\");\n\t\t\t\t\t\twaitTime(45);\n\t\t\t\t\t\tselectDropdownValue(\"Ekyc Bypass Reason\",\"Customer details are not received through EKYC\");\n\t\t\t\t\t\tclickOnButton(\"Save EKYC Bypass\");\n\t\t\t\t\t\tverifySuccessMessage(successMessage2);\n//\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\texpandArrows(\"Account Aggregator\");\n\t\t\t\tselectValueFromDropdown(\"Bank Name\", \"HDFC Bank\");\n\t\t\t\tString link = \"#xpath=//button[text()='Proceed with 3in1 AA'] | //input[@value='Proceed with 3in1 AA']\";\n\t\t\t\tif (isElementPresent(link)) {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed with 3in1 AA\");\n\t\t\t\t}\n\t\t\t\twaitTime(elementLoadWaitTime);\n\t\t\t\t//clickOnButton(\"Proceed to AA\");\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Didn't receive AA SMS\");\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Customer didn't receive OTP\");\n\t\t\t\t}\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tclickOnAddressEnrichmentButton(\"Account Aggregator\",\"Save\");\n\t\t\t\t}else {\n\t\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\t}\n\n//\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `ckycPanValidation` that appears to be part of an automated testing framework. The method takes 17 string parameters and performs various actions on a web application.\n\nHere's a brief description of what the method does:\n\n1. It starts by logging test steps using the `testStepInfo` method.\n2. It then enters customer process information, including PAN/CKYC validation, zip code declaration (if applicable), and account aggregator details.\n3. The method interacts with various UI elements, such as dropdown menus, text fields, radio buttons, and buttons, to perform actions like selecting values, entering data, clicking on links, and verifying success messages.\n4. It also waits for page loads, performs manual screenshots, and verifies the presence of certain elements using XPath expressions.\n5. The method catches any exceptions that occur during execution and reports them as test failures.\n\nThe method seems to be specific to a particular application or feature, as it references environment values (e.g., \"PREPROD\", \"UAT\") and performs different actions based on these values.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String ckycTypeLabel",
            "String ckycTypeValue",
            "String panNumberLabel",
            "String panNumberValue",
            "String dobLabel",
            "String dobValue",
            "String buttonName",
            "String byPassReasonLabel",
            "String byPassReasonValue",
            "String byPassButton",
            "String successMessage1",
            "String successMessage2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnRadioButtonInCKYC",
        "code": "public void clickOnRadioButtonInCKYC(String radiobutton) {\n\t\ttry {\n\t\t\tString link = radiobutton + \"#xpath=//div[normalize-space(text()) = '\"+radiobutton+\"']//input | //header[normalize-space(text()) = '\"+radiobutton+\"']//input\";\n\t\t\twaitForElement(link, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tmanualScreenshot(\"Selected \" + radiobutton + \" radio button\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(radiobutton + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnAddressEnrichmentButton \" + radiobutton);\n\n\t\t}\n\t}\n\n\n\t/*\n\t * @author : Saraswathi\n\t * \n\t * @created Date : 01/04/2022 Description : method to enter mother/father value\n\t * in text field\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the text need to enter\n\t */",
        "description": "This Java method, `clickOnRadioButtonInCKYC`, is used to click on a radio button with a specific label in the CKYK (Customer Knowledge and Yielding) section. \n\nThe method takes a string parameter `radiobutton` which represents the label of the radio button. It uses this label to construct an XPath expression that identifies the radio button element.\n\nThe method then performs the following actions:\n\n1. Waits for the radio button element to be displayed using the `waitForElement` and `isElementDisplayed` methods.\n2. Scrolls to the radio button element using the `scrollToWebElement` method.\n3. Clicks on the radio button element using the `clickOnSpecialElement` method.\n4. Takes a manual screenshot after clicking the radio button with the label provided.\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an error message indicating that the radio button was not present or could not be clicked.",
        "input": [
            "String radiobutton"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterValueInFatherMotherTextField",
        "code": "public void enterValueInFatherMotherTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]//../following-sibling::input | //label[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInFatherMotherTextField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFatherMotherTextField`, enters a given value into a text field with a specified label name. The method uses XPath to locate the text field based on the label name and then performs the following actions:\n\n1. Waits for the element to be displayed.\n2. Scrolls the element into view.\n3. Types in the value provided.\n4. Waits for the page to load.\n5. Takes a manual screenshot of the highlighted element.\n\nIf the text field is not present, the method fails the test step with an error message. If any exception occurs during the execution, it also fails the test step and logs the error.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnAddressEnrichmentButton",
        "code": "public void clickOnAddressEnrichmentButton(String labelName ,String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//span[contains(text(),'\"+labelName+\"')]/..//..//..//..//button[text()='\"\n\t\t\t\t\t+ value + \"'] | //label[contains(text(),'\"+labelName+\"')]/..//..//..//..//button[text()='\"+value+\"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tif (labelName.equalsIgnoreCase(\"PAN Validation\")) {\n\t\t\t\t\tclickOn(link);\n\t\t\t\t}\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n \n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnAddressEnrichmentButton \" + value);\n \n\t\t}\n\t}\n \n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete address\n\t * enrichment section\n\t */",
        "description": "This Java method, `clickOnAddressEnrichmentButton`, is used to click on a specific button in the address enrichment section of an application. The method takes two parameters: `labelName` and `value`. \n\nThe method first constructs a link string by combining the provided value with XPath expressions to locate the button or label with the specified text. It then uses a wait function (`waitForElement`) to ensure the element is present, and if it is, it scrolls to the element, highlights it (using `highLighterMethod`), clicks on it (using `clickOnSpecialElement`), and waits for 5 seconds. \n\nIf the button or label is not found within a certain time limit (10 seconds), the method reports a test step failure. If an exception occurs during the execution of the method, another test step failure is reported.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "addressEnrichment",
        "code": "public void addressEnrichment(String applicantTab, String expandTabName, String enterPincodeLabel,\n\t\t\tString enterPincodeValue, String searchAddressLabel, String searchAddressValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue, String addressLine1Label, String addressLine1Value, String saveButton,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Address Enrichment #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\n//\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n//\t\t\t\texpandArrows(expandTabName);\n//\t\t\t}\n//            if (GOR.environmentValue.equals(\"UAT\")) {\n//                if (!applicantTab.equals(\"Applicant\")) {\n//                \tselectOrDeselectAddressEnrichmentCheckBox(\"Address Changing Flag\");\n//                } else {\n//                    selectOrDeselectCheckBox(\"Primary Address Change\", \"check\");\n//                }\n//            }\n\t\t\tenterTextInCustomerProcess(enterPincodeLabel, enterPincodeValue);\n\t\t\tcustomerSearchAddress(searchAddressLabel, searchAddressValue);\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tchooseSearchAndListField(\"BFL Branch\", \"411014\");\n\t\t//\tchooseSearchAndListField(\"BFL Branch\", \"208027 - Surat\");US specific\n\t\t\tclickOnAddressEnrichmentButton(expandTabName,\"save\");\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `addressEnrichment`, is used to automate the process of entering and enriching an applicant's address information. The method takes 11 string parameters that represent various UI elements such as labels, values, and button names.\n\nThe method performs the following steps:\n\n1. It logs a test step info message indicating that it is about to enter address enrichment.\n2. It selects the specified customer tab (e.g., \"Applicant\" or \"Other\").\n3. It expands the arrow(s) on the UI based on the `expandTabName` parameter.\n4. It enters text into various fields, including:\n\t* Pincode: using `enterTextInCustomerProcess`\n\t* Search address: using `customerSearchAddress`\n\t* Residence type: using `selectValueFromDropdown`\n\t* Address line 1: using `enterTextInCustomerProcess`\n5. It chooses a specific search and list field value (in this case, \"BFL Branch\" with the value \"411014\").\n6. It clicks on the address enrichment button based on the `expandTabName` parameter.\n7. Finally, it verifies that the success message is displayed.\n\nIf any exceptions occur during these steps, the method catches them and logs a test step failed message indicating the type of exception that occurred.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String enterPincodeLabel",
            "String enterPincodeValue",
            "String searchAddressLabel",
            "String searchAddressValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String addressLine1Label",
            "String addressLine1Value",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "addressEnrichmentWithoutCheckbox",
        "code": "public void addressEnrichmentWithoutCheckbox(String applicantTab, String expandTabName, String addressLine1Label,\n\t\t\tString addressLine1Value, String addressLine2Label, String addressLine2Value, String addressLine3Label,\n\t\t\tString addressLine3Value, String areaLocalityLabel, String areaLocalityValue, String landmarkLabel,\n\t\t\tString landmarkValue, String residenceTypeLabel, String residenceTypeValue, String zipcodeLabel,\n\t\t\tString zipcodeValue, String saveButton, String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Address Enrichment-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\twaitForPageToLoad();\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tenterTextInCustomerProcess(addressLine2Label, addressLine2Value);\n\t\t\tenterTextInCustomerProcess(addressLine3Label, addressLine3Value);\n\t\t\tenterTextInCustomerProcess(areaLocalityLabel, areaLocalityValue);\n\t\t\tenterTextInCustomerProcess(landmarkLabel, landmarkValue);\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tchooseSearchAndListField(zipcodeLabel, zipcodeValue);\n\t\t\tclickOnAddressEnrichmentButton(expandTabName,saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichmentWithoutCheckbox \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete customer details\n\t * section\n\t */\n\n\t/*public void customerDetails(String applicantTab, String expandTabName, String firstNameLabel, String firstNameValue,\n\t\t\tString panNoLabel, String panNoValue, String dobLabel, String dobValue, String lastNameLabel,\n\t\t\tString lastNameValue, String genderLabel, String genderValue, String ovdTypeLabel, String ovdTypeValue,\n\t\t\tString ovdNumberLabel, String ovdNumberValue, String poaTypeLabel, String poaTypeValue, String poaNoLabel,\n\t\t\tString poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Customer Details #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tenterTextInCustomerProcess(\"Primary Middle Name\", \"MOHAN\");\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerProcess(\"Middle Name\", \"MOHAN\");\n\t\t\t}\n//\t\t\tenterTextInCustomerProcess(panNoLabel, panNoValue);\n\t\t\tclickOnGenderButtonWithoutWaitTime(genderLabel, genderValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\n\t\t\t\n\t\t\tif (!applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tselectValueFromOvdPoaTypeDropdown1(ovdTypeLabel, ovdTypeValue);\n\t\t\t\tselectValueFromOvdPoaTypeDropdown1(poaTypeLabel, poaTypeValue);\n\t\t\t}else {\n\t\t\t\tselectValueFromOvdPoaTypeDropdown(ovdTypeLabel, ovdTypeValue);\n\t\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\t}\n\t\t\t}else {\n\t\t\t\tif (!applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(ovdTypeLabel, ovdTypeValue);\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(poaTypeLabel, poaTypeValue);\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(ovdTypeLabel, ovdTypeValue);\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(poaTypeLabel, poaTypeValue);\n\t\t\t}}\n\t\t\tenterValueInOvdPoaTypeField(ovdNumberLabel, ovdNumberValue);\n\t\t\tenterValueInOvdPoaTypeField(poaNoLabel, poaNoValue);\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tselectValueFromDropdown(\"Relationship with Co-Applicant\", \"Son\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerDetails \" + e.getClass().getName());\n\n\t\t}\n\t}*/",
        "description": "This is a Java method named `addressEnrichmentWithoutCheckbox` that performs an address enrichment process without using a checkbox. The method takes 17 parameters, including the names of various labels and values related to addresses.\n\nHere's a brief summary of what the method does:\n\n1. It selects a customer tab based on the provided `applicantTab` parameter.\n2. It expands the arrows for the selected tab using the `expandArrows` method.\n3. It waits for the page to load using the `waitForPageToLoad` method.\n4. It enters text into various fields related to addresses, including line 1, line 2, line 3, area locality, landmark, and residence type.\n5. It selects a value from a dropdown menu for the residence type field.\n6. It chooses a search and list field for the zip code field.\n7. It clicks on an address enrichment button using the `clickOnAddressEnrichmentButton` method.\n8. Finally, it verifies a success message using the `verifySuccessMessage` method.\n\nIf any exceptions occur during the execution of this method, it catches them and reports the failure using the `testStepFailed` method.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String addressLine1Label",
            "String addressLine1Value",
            "String addressLine2Label",
            "String addressLine2Value",
            "String addressLine3Label",
            "String addressLine3Value",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String landmarkLabel",
            "String landmarkValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String zipcodeLabel",
            "String zipcodeValue",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "customerDetails",
        "code": "public void customerDetails(String applicantTab, String expandTabName, String firstNameLabel, String firstNameValue,\n\t\t\tString middleNameLabel, String middleNameValue, String dateOfBirthLabel, String primaryMiddleNameValue, String lastNameLabel,\n\t\t\tString lastNameValue, String genderLabel, String genderValue, String ovdTypeLabel, String ovdTypeValue,\n\t\t\tString ovdNumberLabel, String ovdNumberValue, String poaTypeLabel, String poaTypeValue, String poaNoLabel,\n\t\t\tString poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Customer Details #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tenterTextInCustomerProcess(\"Primary Middle Name\", \"Test\");\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerProcess(\"Middle Name\", \"NARAYANA\");\n\t\t\t}\n//\t\t\tenterTextInCustomerProcess(panNoLabel, panNoValue);\n\t\t\tclickOnGenderButtonWithoutWaitTime(genderLabel, genderValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\t\tif (!applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(ovdTypeLabel, ovdTypeValue);\n\t\t\t\t\tselectValueFromDropdownInCustomerDetailsPOAOVDType(poaTypeLabel, poaTypeValue);\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromOvdPoaTypeDropdown(ovdTypeLabel, ovdTypeValue);\n\t\t\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\t\t\t}\n\t\t\t\tString sixDigitNumber = generate6DigitBINNumber();\n\t\t\tenterValueInOvdPoaTypeField(ovdNumberLabel, sixDigitNumber);\n\t\t\tenterValueInOvdPoaTypeField(poaNoLabel, sixDigitNumber);\n\t\t\t\n\t\t\tif(!(poaTypeValue.equalsIgnoreCase(\"Aadhaar\") | poaTypeValue.equalsIgnoreCase(\"Voter ID\") ))\n\t\t\t{\n\t\t\tif(!applicantTab.equalsIgnoreCase(\"Applicant\"))\n\t\t\t{\n\t\t\tenterDate(\"POA Expiry/Issued/Billed Date\", convertDateFormat\n\t\t\t\t\t(getNextDate(),\"dd/MM/yyyy\",\"dd-MM-yyyy\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterDate(\"Primary POA Expiry Date\",changeDateFormat1(getNextDate()));\n\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tselectValueFromDropdown(\"Relationship with Co-Applicant\", \"Son\");\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerDetails \" + e.getClass().getName());\n \n\t\t}\n\t}",
        "description": "This is a Java method named `customerDetails` that appears to be part of an automation test for a web application. The method takes 24 input parameters, which are all strings representing various labels and values used in the application's user interface.\n\nThe method performs several actions:\n\n1. It logs a test step information with the label \"# Enter Customer Details #\".\n2. It selects a customer tab based on the `applicantTab` parameter.\n3. It expands an arrow button with the name specified by the `expandTabName` parameter.\n4. It enters text into various fields in the application, including first name, middle name (if applicable), last name, gender, and other details.\n5. If the applicant tab is not \"Applicant\", it selects values from dropdown menus for OVD type and POA type.\n6. It generates a 6-digit BIN number and enters it into two fields: one for OVD number and another for POA number.\n7. If the POA type is not Aadhaar or Voter ID, it enters a date value into a field labeled \"POA Expiry/Issued/Billed Date\" (or \"Primary POA Expiry Date\" if the applicant tab is \"Applicant\").\n8. Finally, it selects a value from a dropdown menu for \"Relationship with Co-Applicant\" if the applicant tab is \"Applicant\".\n\nThe method catches any exceptions that occur during its execution and logs an error message if one occurs.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String firstNameLabel",
            "String firstNameValue",
            "String middleNameLabel",
            "String middleNameValue",
            "String dateOfBirthLabel",
            "String primaryMiddleNameValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String genderLabel",
            "String genderValue",
            "String ovdTypeLabel",
            "String ovdTypeValue",
            "String ovdNumberLabel",
            "String ovdNumberValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNoLabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "customerDetails1",
        "code": "public void customerDetails1(String applicantTab, String expandTabName, String firstNameLabel, String firstNameValue,\n\t\t\tString panNoLabel, String panNoValue, String dobLabel, String dobValue, String lastNameLabel,\n\t\t\tString lastNameValue, String genderLabel, String genderValue, String ovdTypeLabel, String ovdTypeValue,\n\t\t\tString ovdNumberLabel, String ovdNumberValue, String poaTypeLabel, String poaTypeValue, String poaNoLabel,\n\t\t\tString poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Customer Details #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tenterTextInCustomerProcess(\"Primary Middle Name\", \"MOHAN\");\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerProcess(\"Middle Name\", \"MOHAN\");\n\t\t\t}\n//\t\t\tenterTextInCustomerProcess(panNoLabel, panNoValue);\n//\t\t\tclickOnGenderButtonWithoutWaitTime(genderLabel, genderValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\tselectValueFromOvdPoaTypeDropdown1(genderLabel, genderValue);\n\t\t\tif (!applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tselectValueFromOvdPoaTypeDropdown1(ovdTypeLabel, ovdTypeValue);\n\t\t\t\tselectValueFromOvdPoaTypeDropdown1(poaTypeLabel, poaTypeValue);\n\t\t\t}else {\n\t\t\t\tselectValueFromOvdPoaTypeDropdown(ovdTypeLabel, ovdTypeValue);\n\t\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\t}\n\t\t\tenterValueInOvdPoaTypeField(ovdNumberLabel, ovdNumberValue);\n\t\t\tenterValueInOvdPoaTypeField(poaNoLabel, poaNoValue);\n\t\t\tif (applicantTab.equalsIgnoreCase(\"Applicant\")) {\n\t\t\t\tselectValueFromDropdown(\"Relationship with Co-Applicant\", \"Son\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerDetails \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `customerDetails1`, is used to enter customer details into a web application. It takes 17 string parameters that represent various fields such as first name, pan number, date of birth, last name, gender, and others.\n\nThe method performs the following actions:\n\n1. Logs a test step information message.\n2. Selects a customer tab based on the `applicantTab` parameter.\n3. Expands an arrow (likely a dropdown menu) with the name specified in the `expandTabName` parameter.\n4. Enters text values into various fields using the `enterTextInCustomerProcess` method, which is not shown here.\n5. Selects values from dropdown menus related to gender, OVD/PoA type, and relationship (if applicable).\n6. Enters values into OVD/PoA number fields.\n7. If the applicant tab is \"Applicant\", it selects a specific value for the \"Relationship with Co-Applicant\" field.\n\nThe method catches any exceptions that occur during execution and logs a test step failure message if an exception occurs.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String firstNameLabel",
            "String firstNameValue",
            "String panNoLabel",
            "String panNoValue",
            "String dobLabel",
            "String dobValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String genderLabel",
            "String genderValue",
            "String ovdTypeLabel",
            "String ovdTypeValue",
            "String ovdNumberLabel",
            "String ovdNumberValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNoLabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "ckycPanValidationForCoApplicant",
        "code": "public void ckycPanValidationForCoApplicant(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectValueFromDropdown(\"Is Primary PAN Available?\", \"Yes\");\n\t\t\t}else {\n\t\t\t\tselectValueFromDropdown(\"Is Primary PAN Available ?\", \"Yes\");\n\t\t\t}\n\t\t\t\n\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\",\"Save\");\n\t\t\t}else {\n\t\t\t\tclickOnButtonWithoutWaitTime(\"Save\");\n\t\t\t}\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectValueFromDropdownWithSpecialCharacter(byPassReasonLabel, byPassReasonLabel);\n//\t\t\t\tclickOnButtonInKycTab();\n//\t\t\t\tverifySuccessMessage(successMessage2);\n//\t\t\t}\n\t\t\t\ttestStepInfo(\"-----Account Aggregator-----\");\n\t\t\t\texpandArrows(\"KYC Validation\");\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tclickOnRadioButton(\"Mobile\");\n\t\t\t\t}else {\n\t\t\t\t\tclickOnRadioButton(\"MOBILE\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tclickOnButtonWithoutWaitTime(\"Initiate EKYC\");\t\t\n\t\t\t\t\tmanualScreenshot(\"Counter is started\");\n\t\t\t\t\twaitTime(50);\n\t\t\t\t\tselectDropdownValue(\"Ekyc Bypass Reason\",\"Customer details are not received through EKYC\");\n\t\t\t\t\tclickOnButton(\"Save EKYC Bypass\");\n\t\t\t\t\tverifySuccessMessage(successMessage2);\n\n\t\t\t\t\t\n\t\t\t\tString field = \"#xpath=//label[text()='Bank Name']//parent::lightning-input//input | //label[text()='Bank Name']//parent::div//input\";\n\t\t\t\tif (isElementPresent(field)) {\n\n\t\t\t\t\tenterValueInField(\"Bank Name\", \"hdfc\");\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed to AA\");\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Didn't receive AA SMS\");\n\t\t\t\t}else {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Customer didn't receive OTP\");\n\t\t\t\t}\n\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\t}\n\t\t\t\t\n//\t\t\t\t\n//\t\t\t\tclickOnButton(\"Proceed with 3in1 AA\");\n//\t\t\t\twaitTime(45);\n//\n//\t\t\t\tclickOnButton(\"Proceed to AA\");\n//\t\t\t\t\n//\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n//\n//\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\",\"Didn't receive AA SMS\");\n//\n//\t\t\t\t}else {\n//\n//\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\",\"PAN not available\");\n//}\n//\t\t\t\tclickOnButton(\"Save\");\n//\t\t\t\t}\n//\t\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete address\n\t * enrichment section\n\t */",
        "description": "This Java method, `ckycPanValidationForCoApplicant`, is used for validating the PAN (Permanent Account Number) of a co-applicant in a customer application process. The method attempts to perform various steps in the application process, including:\n\n1. Selecting the correct tabs and expanding arrows.\n2. Entering PAN number and date of birth (DOB).\n3. Performing address enrichment by clicking on the \"Save\" button.\n4. Verifying success messages.\n5. Initiating EKYC (Electronic Know Your Customer) and bypassing it if necessary.\n6. Filling out additional fields, such as bank name and skip reason.\n\nThe method uses various helper methods to perform these steps, including `testStepInfo` for logging test steps, `selectCustomerTabs`, `expandArrows`, `enterTextInCustomerProcess`, `enterDob`, `clickOnAddressEnrichmentButton`, `verifySuccessMessage`, `selectValueFromDropdown`, and others.\n\nThe method also includes error handling using a `try-catch` block. If an exception occurs during the execution of the method, it will log the failure and continue with the test.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String ckycTypeLabel",
            "String ckycTypeValue",
            "String panNumberLabel",
            "String panNumberValue",
            "String dobLabel",
            "String dobValue",
            "String buttonName",
            "String byPassReasonLabel",
            "String byPassReasonValue",
            "String byPassButton",
            "String successMessage1",
            "String successMessage2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "addressEnrichmentForCoApplicant",
        "code": "public void addressEnrichmentForCoApplicant(String applicantTab, String expandTabName, String enterPincodeLabel,\n\t\t\tString enterPincodeValue, String searchAddressLabel, String searchAddressValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue, String addressLine1Label, String addressLine1Value, String saveButton,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Address Enrichment #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\n\t\t\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\texpandArrows(expandTabName);\n\t\t\t\n//            if (GOR.environmentValue.equals(\"PREPROD\")) {\n//                if (!applicantTab.equals(\"Applicant\")) {\n//                \tselectOrDeselectAddressEnrichmentCheckBox(\"Secondary Address Change Flag\");\n//                } else {\n//                \t\n//                \tselectOrDeselectAddressEnrichmentCheckBox(\"Address Change Flag\");\n//                }\n//            }\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tenterTextInCustomerProcess(enterPincodeLabel, enterPincodeValue);\n\t\t\tcustomerSearchAddress(searchAddressLabel, searchAddressValue);\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tclickOnAddressEnrichmentButton(expandTabName,saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `addressEnrichmentForCoApplicant` that performs the following steps:\n\n1. Logs a test step message indicating that it's entering address enrichment.\n2. Selects the specified customer tab (e.g., \"Applicant\" or \"Secondary\").\n3. Expands the arrow in the specified tab name (e.g., \"Address Enrichment\").\n4. If the environment is set to \"PREPROD\", checks if the applicant tab is not equal to \"Applicant\". If it's not, selects or deselects a checkbox for secondary address change.\n5. Selects a value from a dropdown list using the `residenceTypeLabel` and `residenceTypeValue`.\n6. Enters text in a customer process field using the `enterPincodeLabel` and `enterPincodeValue`.\n7. Searches for an address using the `searchAddressLabel` and `searchAddressValue`.\n8. Enters text in another customer process field using the `addressLine1Label` and `addressLine1Value`.\n9. Clicks on the \"Save\" button to save the address enrichment.\n10. Verifies that a success message is displayed.\n\nThe method catches any exceptions that occur during these steps and logs an error message if one occurs.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String enterPincodeLabel",
            "String enterPincodeValue",
            "String searchAddressLabel",
            "String searchAddressValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String addressLine1Label",
            "String addressLine1Value",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "addressEnrichmentForCoApplicant1",
        "code": "public void addressEnrichmentForCoApplicant1(String applicantTab, String expandTabName, String enterPincodeLabel,\n\t\t\tString enterPincodeValue, String searchAddressLabel, String searchAddressValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue, String addressLine1Label, String addressLine1Value, String saveButton,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Address Enrichment #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\n\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\texpandArrows(expandTabName);\n\t\t\t}\n            if (GOR.environmentValue.equals(\"PREPROD\")) {\n                if (applicantTab.equals(\"Applicant\")) {\n                \tselectOrDeselectAddressEnrichmentCheckBox(\"Primary Address Change\");\n                } else {\n                \t\n                \tselectOrDeselectAddressEnrichmentCheckBox(\"Secondary Address Change\");\n                }\n            }\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tenterTextInCustomerProcess(enterPincodeLabel, enterPincodeValue);\n\t\t\tcustomerSearchAddress(searchAddressLabel, searchAddressValue);\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tclickOnAddressEnrichmentButton(expandTabName,saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete financial info\n\t * section\n\t */\n//\tpublic void financialInfo(String applicantTab, String expandTabName, String processTypeLabel,\n//\t\t\tString processTypeValue, String creditProgramLabel, String creditProgramValue, String employmentTypeLabel,\n//\t\t\tString employmentTypeValue, String rsaLabel, String rsaValue, String dataEntryStatusLabel,\n//\t\t\tString dataEntryStatusValue, String submitForApprovalButton, String successMessage) {\n//\t\ttry {\n//\t\t\ttestStepInfo(\"# Enter Financial Info #\");\n//\t\t\tselectCustomerTabs(applicantTab);\n//\t\t\texpandArrows(expandTabName);\n//\t\t\tselectValueFromDropdown(processTypeLabel, processTypeValue);\n//\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n//\t\t\tselectValueFromDropdown(employmentTypeLabel, employmentTypeValue);\n//\t\t\tselectValueFromDropdown(rsaLabel, rsaValue);\n//\t\t\tselectValueFromDropdown(dataEntryStatusLabel, dataEntryStatusValue);\n//\t\t\tclickOnButtonWithoutWaitTime(submitForApprovalButton);\n//\n//\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n//\t\t\t\tString errorValidation = findWebElement(error_Msg).getText().trim();\n//\t\t\t\tif (errorValidation.contains(\"Same Customer\")) {\n//\t\t\t\t\tenterTextInCustomerProcess(\"PAN No\", generatePanNumber());\n//\t\t\t\t\tString fourDigitNumber = generateAadhaar4DigitNumber();\n//\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", fourDigitNumber);\n//\t\t\t\t\tenterTextInCustomerProcess(\"POA No\", fourDigitNumber);\n//\t\t\t\t\tclickOnButtonWithoutWaitTime(submitForApprovalButton);\n//\t\t\t\t}\n//\t\t\t}\n//\n//\t\t\tverifySuccessMessage(successMessage);\n//\t\t\twaitTime(5);\n//\t\t\twaitForPageToLoad();\n//\n//\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n//\t\t\t\tif (dataEntryStatusValue.equalsIgnoreCase(\"Completed\")) {\n//\t\t\t\t\twaitTime(10);\n//\t\t\t\t\tString customerName = getCustomerName(\"Customer\");\n//\t\t\t\t\tString parent = driver.getWindowHandle();\n//\t\t\t\t\topenNewTab();\n//\t\t\t\t\tSet<String> AllHandles = driver.getWindowHandles();\n//\t\t\t\t\tList<String> HandlesToList = new ArrayList<String>();\n//\t\t\t\t\tHandlesToList.addAll(AllHandles);\n//\t\t\t\t\tint windows = HandlesToList.size();\n//\t\t\t\t\tdriver.switchTo().window(HandlesToList.get(windows - 1));\n//\n//\t\t\t\t\tflag = loginLogoutPage.loginToSalesForce(GOR.adminURL, GOR.adminUserName, GOR.adminPassword);\n//\t\t\t\t\tif (flag) {\n//\t\t\t\t\t\treturn;\n//\t\t\t\t\t}\n//\t\t\t\t\thomePageAdmin.switchToApplicationClassicOrLightning(GOR.mode);\n//\t\t\t\t\thomePageAdmin.globalSalesSearch(customerName);\n//\t\t\t\t\thomePageAdmin.clickOnGlobalSearchResult(customerName);\n//\n//\t\t\t\t\tcustomerPageAdmin.clickEditIcon(\"Underwriting Status\");\n//\t\t\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Underwriting Status\", \"Response Received\");\n//\t\t\t\t\tclickOnButton(\"Save\");\n//\t\t\t\t\tloginLogoutPage.logoutFromSalesForce();\n//\t\t\t\t\tdriver.close();\n//\t\t\t\t\tdriver.switchTo().window((parent));\n//\t\t\t\t}\n//\t\t\t}\n//\t\t} catch (Exception e) {\n//\t\t\ttestStepFailed(\"Failed in financialInfo \" + e.getClass().getName());\n//\t\t}\n//\t}",
        "description": "This is a Java method named `addressEnrichmentForCoApplicant1` that automates the process of completing address enrichment for a co-applicant. The method takes 12 string parameters and performs the following actions:\n\n1. Enters test step information.\n2. Selects the applicant tab.\n3. Expands arrows on the specified tab name.\n4. If the environment is PREPROD, it selects or deselects an address enrichment checkbox based on the applicant tab.\n5. Selects a residence type from a dropdown menu.\n6. Enters pincode value in the customer process.\n7. Searches for an address using a search function.\n8. Enters address line 1 value.\n9. Clicks the save button to complete address enrichment.\n10. Verifies that a success message is displayed.\n\nIf any of these steps fail, the method catches the exception and reports the failure with a test step failed message.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String enterPincodeLabel",
            "String enterPincodeValue",
            "String searchAddressLabel",
            "String searchAddressValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String addressLine1Label",
            "String addressLine1Value",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "chooseValueFromSearchAndListFieldInRequireDetails",
        "code": "public void chooseValueFromSearchAndListFieldInRequireDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//label[text()='\"+labelName+\"']//following-sibling::div//input\";\n\t\t\t\tString searchFieldValue = labelName + \" #xpath=//label[text()='\"+labelName+\"']//following-sibling::div//ul//li\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tif (isElementDisplayed(searchFieldValue, elementLoadWaitTime)) {\n\t\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t\tclickOn(searchFieldValue);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListFieldInRequireDetails`, is used to select a value from a search and list field in the \"Require Details\" section of an application. The method takes two parameters: `labelName` (the name of the label) and `value` (the value to be selected).\n\nHere's a brief summary of what the method does:\n\n1. It checks if the provided `value` is not empty.\n2. If the value is not empty, it searches for an input field with the given `labelName` using XPath.\n3. If the input field is found, it scrolls to that field and types in the provided `value`.\n4. After typing in the value, it checks if a search icon (represented by `searchFieldValue`) is present next to the input field.\n5. If the search icon is present, it clicks on it and waits for the page to load.\n6. If the search icon is not present or any other exception occurs during the process, it fails the test step.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getCustomerName",
        "code": "public String getCustomerName(String labelName) {\n        String value = \"\";\n        try {\n            String targetField = \"#xpath=//div[text()='\" + labelName + \"']/..//following-sibling::div//span | //div[contains(text(),'\"+labelName+\"')]//div\";\n            waitForElement(targetField, 10);\n            if (isElementDisplayed(targetField, 5)) {\n            \tscrollToWebElement(targetField);\n            \tscrollToElementTillPresent(targetField);\n                value = getText(targetField);\n                highLighterMethodManualScreenShot(targetField, labelName + \" field has \" + value);\n            } else {\n                testStepFailed(labelName + \" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in getCustomerName\" + e.getMessage());\n        }\n        return value;\n    }",
        "description": "This Java method, `getCustomerName`, retrieves the name of a customer based on a given label name. It uses an XPath expression to locate the corresponding element on the screen and then extracts the text content using the `getText` method. The method also includes error handling and logging mechanisms to report any issues that may occur during execution.\n\nHere's a breakdown of what the method does:\n\n1. It takes a `labelName` as input, which is used to construct an XPath expression to locate the corresponding element on the screen.\n2. It uses a `try-catch` block to execute the following steps:\n\t* Waits for the target field to be displayed using the `waitForElement` method.\n\t* Checks if the target field is displayed using the `isElementDisplayed` method.\n\t* If the field is displayed, it scrolls to the element using the `scrollToWebElement` method and then waits until the element is present using the `scrollToElementTillPresent` method.\n\t* Extracts the text content of the target field using the `getText` method.\n\t* Logs a manual screenshot with a highlight on the target field, including the extracted value.\n3. If any exceptions occur during execution, it logs an error message and marks the test step as failed.\n\nThe method returns the extracted customer name as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "financialInfo",
        "code": "public void financialInfo(String applicantTab, String expandTabName, String processTypeLabel,\n\t\t\tString processTypeValue, String creditProgramLabel, String creditProgramValue, String employmentTypeLabel,\n\t\t\tString employmentTypeValue, String rsaLabel, String rsaValue, String dataEntryStatusLabel,\n\t\t\tString dataEntryStatusValue, String submitForApprovalButton, String successMessage) {\n\t\ttry {\n\n\t\t\ttestStepInfo(\"# Enter Financial Info #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(processTypeLabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tselectValueFromDropdown(employmentTypeLabel, employmentTypeValue);\n\t\t\tselectValueFromDropdown(rsaLabel, rsaValue);\n\n\t\t\t\tclickOnButtonWithoutWaitTime(\"Save as Draft\");\n\t\t\t\n\t\t\t\tif(!applicantTab.equalsIgnoreCase(\"Co-Applicant\"))\n\t\t\t\t{\n\t\t\tclickOnButtonWithoutWaitTime(submitForApprovalButton);\n\t\t\t\n\t\t\t\t\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\t\tString errorValidation = findWebElement(error_Msg).getText().trim();\n\t\t\t\t\tif (errorValidation.contains(\"Customer Submitted for Approval\")) {\n\t\t\t\t\t\tmanualScreenshot(errorValidation);\n\t\t\t\t\t}\n\t\t\t\t\telse if (errorValidation.contains(\"Same Customer\")) {\n\t\t\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\t\t\tenterTextInCustomerProcess(\"PAN Number\", generatePanNumber());\n\t\t\t\t\t\tenterDob(\"Date of Birth\", \"01-Oct-1995\");\n\t\t\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\", GOR.saveLabel);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\texpandArrows(\"Customer Details\");\n\t\t\t\t\t\tString fourDigitNumber = generate6DigitBINNumber();\n\t\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", fourDigitNumber);\n\t\t\t\t\t\tenterTextInCustomerProcess(\"POA Number\", fourDigitNumber);\n\t\t\t\t\t\tclickOnButtonUsingAction(\"Save as Draft\");\n\t\t\t\t\t\tclickOnButton(submitForApprovalButton);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t\tString navigationOption = \"#xpath=//a[text()='Loan Details']//parent::a\";\n\t\t\t\t\t\tif (isElementDisplayed(navigationOption, 5)) {\n\t\t\t\t\t\t\tmanualScreenshot(\"Customer Navigate to Loan Page\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\t\t\t\tenterTextInCustomerProcess(\"PAN Number\", generatePanNumber());\n\t\t\t\t\t\t\tenterDob(\"Date of Birth\", \"01-Oct-1995\");\n\t\t\t\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\", GOR.saveLabel);\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\texpandArrows(\"Customer Details\");\n\t\t\t\t\t\t\tString sixDigitNumber = generate6DigitBINNumber();\n\t\t\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", sixDigitNumber);\n\t\t\t\t\t\t\tenterTextInCustomerProcess(\"POA Number\", sixDigitNumber);\n\t\t\t\t\t\t\tclickOnButtonUsingAction(\"Save as Draft\");\n\t\t\t\t\t\t\tclickOnButton(submitForApprovalButton);\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\tString customerName1 = getCustomerName(\"Customer\");\n\t\t\t\t\t\t\ttestStepInfo(\"$ Customer Created - $\" + customerName1);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Due to error: \" + errorValidation + \" cant move further\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tverifySuccessMessage(successMessage);\n\t\t\t\twaitTime(10);\n\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t\tString navigationOption = \"#xpath=//a[text()='Loan Details']//parent::a\";\n\t\t\t\tif (isElementDisplayed(navigationOption, 5)) {\n\t\t\t\t\tmanualScreenshot(\"Customer Navigate to Loan Page\");\n\t\t\t\t} else {\n\t\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t\t\tselectValueFromDropdown(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\t\tenterTextInCustomerProcess(\"PAN Number\", generatePanNumber());\n\t\t\t\t\tenterDob(\"Date of Birth\", \"01-Oct-1995\");\n\t\t\t\t\tclickOnAddressEnrichmentButton(\"PAN Validation\", GOR.saveLabel);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\texpandArrows(\"Customer Details\");\n\t\t\t\t\tString sixDigitNumber = generate6DigitBINNumber();\n\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", sixDigitNumber);\n\t\t\t\t\tenterTextInCustomerProcess(\"POA Number\", sixDigitNumber);\n\t\t\t\t\tclickOnButtonUsingAction(\"Save as Draft\");\n\t\t\t\t\tclickOnButton(submitForApprovalButton);\n\t\t\t\t\twaitTime(10);\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString customerName1 = getCustomerName(\"Customer\");\n\t\t\t\ttestStepInfo(\"$ Customer Created - $\" + customerName1);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in financialInfo \" + e.getClass().getName());\n\t\t}\n\n\t}",
        "description": "This is a Java method named `financialInfo` that appears to be part of an automation test for a web-based application. The method takes 14 string parameters and performs the following actions:\n\n1. It enters a test step information with the label \"# Enter Financial Info #\".\n2. It selects a customer tab based on the `applicantTab` parameter.\n3. It expands an arrow based on the `expandTabName` parameter.\n4. It selects values from dropdown menus for process type, credit program, employment type, and RSA (based on the `processTypeLabel`, `creditProgramLabel`, `employmentTypeLabel`, and `rsaLabel` parameters).\n5. It clicks a \"Save as Draft\" button without waiting for any time.\n6. If the applicant tab is not \"Co-Applicant\", it submits the form for approval by clicking a \"Submit For Approval\" button.\n7. It takes a manual screenshot if an error message is displayed within 5 seconds.\n8. It waits for the page to load and then verifies that the success message matches the `successMessage` parameter.\n\nIf there are any errors, it catches the exception and reports a test step failure with the error message.\n\nThe method also includes some conditional logic to handle specific scenarios related to PAN (Permanent Account Number) validation and customer creation.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String processTypeLabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String employmentTypeLabel",
            "String employmentTypeValue",
            "String rsaLabel",
            "String rsaValue",
            "String dataEntryStatusLabel",
            "String dataEntryStatusValue",
            "String submitForApprovalButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "modelSelection",
        "code": "public void modelSelection(String tabName, String exShowroomPriceLabel, String exShowroomPriceValue,\n\t\t\tString taxAmountLabel, String taxAmountValue, String insuranceAmountLabel, String insuranceAmountValue,\n\t\t\tString loanAmountLabel, String loanAmountValue, String addToCartButton, String schemeValue,\n\t\t\tString successMessage1) {\n\t\ttry {\n//\t\t\trefreshPage();\n//\t\t\twaitForPageToLoad();\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"Preprod\")) {\n//\t\t\t\tString customerName = getCustomerName(\"Customer\");\n//\t\t\t\tString parent = driver.getWindowHandle();\n//\t\t\t\topenNewTab();\n//\t\t\t\tSet<String> AllHandles = driver.getWindowHandles();\n//\t\t\t\tList<String> HandlesToList = new ArrayList<String>();\n//\t\t\t\tHandlesToList.addAll(AllHandles);\n//\t\t\t\tint windows = HandlesToList.size();\n//\t\t\t\tdriver.switchTo().window(HandlesToList.get(windows - 1));\n//\t\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n//\t\t\t\t\tflag = loginLogoutPage.loginToSalesForce(GOR.n2p_adminURL, GOR.n2p_adminUserName,\n//\t\t\t\t\t\t\tGOR.n2p_adminPassword);\n//\t\t\t\t\tif (flag) {\n//\t\t\t\t\t\treturn;\n//\t\t\t\t\t}\n//\t\t\t\t} else {\n//\t\t\t\t\tflag = loginLogoutPage.loginToSalesForce(GOR.uat_adminURL, GOR.uat_adminUserName,\n//\t\t\t\t\t\t\tGOR.uat_adminPassword);\n//\t\t\t\t\tif (flag) {\n//\t\t\t\t\t\treturn;\n//\t\t\t\t\t}\n//\t\t\t\t}\n//\t\t\t\thomePageAdmin.switchToApplicationClassicOrLightning(GOR.mode);\n//\t\t\t\thomePageAdmin.globalSalesSearch(customerName);\n//\t\t\t\thomePageAdmin.clickOnGlobalSearchResult(customerName);\n//\t\t\t\twaitForPageToLoad();\n//\t\t\t\tcustomerPageAdmin.clickEditIcon(\"Underwriting Status\");\n//\t\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Underwriting Status\", \"Response Received\");\n//\t\t\t\tclickOnButton(\"Save\");\n//\t\t\t\twaitTime(3);\n//\n//\t\t\t\twaitForPageToLoad();\n//\t\t\t\tdriver.close();\n//\t\t\t\tdriver.switchTo().window((parent));\n//\t\t\t}\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n//\t\t\trefreshPage();\n//\t\t\twaitForPageToLoad();\n\t\t\trefreshPage();\n\t\t\twaitTime(elementLoadWaitTime);\n\t\t\ttestStepInfo(\"# Enter Loan Details and Scheme Selection #\");\n\t\t\tselectTabs(tabName);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(3);\n\t\t\tString fieldName = \"#xpath=//label[contains(text(),'Referral Name')]//parent::slot//following-sibling::select\";\n\n\t\t\tif (isElementPresent(fieldName)) {\n\t\t\tselectSchemeTypeInModelSelection(\"Referral Name\",\"None\");\n\t\t\t}\n\t\t\tselectSchemeTypeInModelSelection(\"Scheme Type\",\"Special\");\n\t\t\tenterValueInFieldTWFRewamp(exShowroomPriceLabel, exShowroomPriceValue);\n\t\t\tenterValueInFieldTWFRewamp(taxAmountLabel, taxAmountValue);\n\t\t\tenterValueInFieldTWFRewamp(insuranceAmountLabel, \"1000\");\n\t\t\tenterValueInFieldTWFRewamp(\"Accessories Amount\", \"2000\");\n\t\t\tenterValueInFieldTWFRewamp(loanAmountLabel, loanAmountValue);\n\t\t\t\n//\t\t\tchooseSearchAndListField(\"Scheme Name\", schemeValue);\n\t\t\tclickOnButton(addToCartButton);\n\t\t\tverifySuccessMessage(successMessage1);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\tselectSchemeCheckboxWithoutValue();\n//\t\t\t} else {\n//\t\t\t\tselectSchemeCheckboxWithValue(schemeValue);\n//\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in modelSelection \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete required details\n\t * section\n\t */\n\n\t/*public void requiredDetails(String tabName, String motherNameLabel, String motherNameValue, String fatherNameLabel,\n\t\t\tString fatherNameValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String nameOfCompanyLabel,\n\t\t\tString nameOfCompanyValue, String officePhoneNoLabel, String officePhoneNoValue, String mothlyIncomeLabel,\n\t\t\tString mothlyIncomeValue, String alternateNoLabel, String alternateNoValue, String designationLabel,\n\t\t\tString designationValue, String nameOncardLabel, String nameOncardValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officeAddressLine2Label, String officeAddressLine2Value,\n\t\t\tString officeAddressLine3Label, String officeAddressLine3Value, String officePinCodeLabel,\n\t\t\tString officePinCodeValue, String qualificationLabel, String qualificationValue,\n\t\t\tString prefferedLanguageLabel, String prefferedLanguageValue, String maritalStatusLabel,\n\t\t\tString maritalStatusValue, String prefferedMailingAddressLabel, String prefferedMailingAddressValue,\n\t\t\tString emailLabel, String emailValue, String bflBranchLabel, String bflBranchValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\tselectTabs(\"Opportunity Details\");\n\t\t\twaitTime(10);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\texpandArrow(\"Office Address Enrichment\");\n//\t\t\t}\n\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tenterTextInCustomerDetails(\"Enter Pincode\", \"411014\");\n\t\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\",\n\t\t\t\t\t\t\"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\t\tchooseSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tclickEditOptionWithTitle(tabName, officePhoneNoTypeLabel);\n//\t\t\t}\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\n//\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n//\t\t\t\tchooseValueFromSearchAndListField(nameOfCompanyLabel, nameOfCompanyValue);\n//\t\t\t}\n\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\n\t\t\t// selectValueFromCkycDropdown(qualificationLabel,qualificationValue);\n\t//\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n//\t\t\t}\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n//\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tchooseValueFromSearchAndListField(\"Name of Company/Business\", \"Bajaj Finserv\");\n\n\t\t\tclickOnButtonInPopupRevamp(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetails \" + e.getClass().getName());\n\n\t\t}\n\t}*/",
        "description": "This is a Java method named `modelSelection` that appears to be part of an automated testing framework. The method takes 14 input parameters, which are all strings:\n\n1. `tabName`: the name of the tab to select\n2-13: various labels and values for entering loan details and scheme selection\n\nThe method's purpose is to complete a required details section in a web application. It performs the following steps:\n\n1. Refreshes the page and waits for it to load.\n2. Selects the specified tab using the `selectTabs` method.\n3. Waits for the page to load again.\n4. Enters values into various fields, including:\n\t* Loan details: showroom price, tax amount, insurance amount, loan amount\n\t* Scheme selection: referral name, scheme type\n5. Clicks on the \"Add to Cart\" button.\n6. Verifies a success message is displayed.\n7. Selects or doesn't select a scheme checkbox based on the environment value (either \"PREPROD\" or not).\n\nThe method also includes some error handling using a `catch` block, which logs an error message if any exception occurs during execution.\n\nNote that this method appears to be part of a larger framework for automating testing of a web application. The specific implementation details and the purpose of the method may depend on the context in which it is used.",
        "input": [
            "String tabName",
            "String exShowroomPriceLabel",
            "String exShowroomPriceValue",
            "String taxAmountLabel",
            "String taxAmountValue",
            "String insuranceAmountLabel",
            "String insuranceAmountValue",
            "String loanAmountLabel",
            "String loanAmountValue",
            "String addToCartButton",
            "String schemeValue",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "requiredDetails",
        "code": "public void requiredDetails(String tabName, String motherNameLabel, String motherNameValue, String fatherNameLabel,\n\t\t\tString fatherNameValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String nameOfCompanyLabel,\n\t\t\tString nameOfCompanyValue, String officePhoneNoLabel, String officePhoneNoValue, String mothlyIncomeLabel,\n\t\t\tString mothlyIncomeValue, String alternateNoLabel, String alternateNoValue, String designationLabel,\n\t\t\tString designationValue, String nameOncardLabel, String nameOncardValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officeAddressLine2Label, String officeAddressLine2Value,\n\t\t\tString officeAddressLine3Label, String officeAddressLine3Value, String officePinCodeLabel,\n\t\t\tString officePinCodeValue, String qualificationLabel, String qualificationValue,\n\t\t\tString prefferedLanguageLabel, String prefferedLanguageValue, String maritalStatusLabel,\n\t\t\tString maritalStatusValue, String prefferedMailingAddressLabel, String prefferedMailingAddressValue,\n\t\t\tString emailLabel, String emailValue, String bflBranchLabel, String bflBranchValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\tselectTabs(\"Opportunity Details\");\n\t\t\twaitTime(10);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\texpandArrow(\"Address Details\");\n\t\t\t}\n\t\t\tString field1 = officeAddressLine1Label + \"#xpath=//label//span[text()='\" + officeAddressLine1Label\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input | //label[text()='\" + officeAddressLine1Label\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\n\t\t\tif (isElementPresent(field1)) {\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tenterTextInCustomerDetails(\"Enter Pincode\", \"411014\");\n\t\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\",\n\t\t\t\t\t\t\"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\t\tchooseSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\t}\n\t\t\t\n\t\t\tclickOnAddressEnrichmentButton(\"Office Address Enrichment\", saveLabel);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tclickEditOptionWithTitle(tabName, officePhoneNoTypeLabel);\n//\t\t\t}\n\t\t\t}\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\n\t\t\t\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n \n//\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n//\t\t\t\tchooseValueFromSearchAndListField(nameOfCompanyLabel, nameOfCompanyValue);\n//\t\t\t}\n \n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n \n\t\t\t// selectValueFromCkycDropdown(qualificationLabel,qualificationValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n//\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n//\t\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n//\t\t\t}\n//\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n//\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tchooseValueFromSearchAndListFieldInRequireDetails(\"Name of Company/Business\", \"Bajaj Finserv\");\n\t\t\t\n\t\t\tselectOrDeselectCheckBox(\"OSV Flag\", \"check\");\n\t\t\tclickOnButtonInRequiredDetails(saveLabel);\n \n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetails \" + e.getClass().getName());\n \n\t\t}\n\t}\n \n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete model selection\n\t * section\n\t */\n\n//\tpublic void modelSelection(String tabName, String exShowroomPriceLabel, String exShowroomPriceValue,\n//\t\t\tString taxAmountLabel, String taxAmountValue, String insuranceAmountLabel, String insuranceAmountValue,\n//\t\t\tString loanAmountLabel, String loanAmountValue, String addToCartButton, String schemeValue,\n//\t\t\tString successMessage1) {\n//\t\ttry {\n//\t\t\trefreshPage();\n//\t\t\twaitForPageToLoad();\n//\t\t\trefreshPage();\n//\t\t\twaitForPageToLoad();\n//\t\t\twaitTime(5);\n//\t\t\ttestStepInfo(\"# Enter Loan Details and Scheme Selection #\");\n//\t\t\tselectTabs(tabName);\n//\t\t\tenterValueInFieldTWFRewamp(exShowroomPriceLabel, exShowroomPriceValue);\n//\t\t\tenterValueInFieldTWFRewamp(taxAmountLabel, taxAmountValue);\n//\t\t\tenterValueInFieldTWFRewamp(insuranceAmountLabel, insuranceAmountValue);\n//\t\t\tenterValueInFieldTWFRewamp(\"Accessories Amount\", \"2000\");\n//\t\t\tenterValueInFieldTWFRewamp(loanAmountLabel, loanAmountValue);\n//\t\t\tchooseSearchAndListField(\"Scheme Name\", schemeValue);\n//\t\t\tclickOnButton(addToCartButton);\n//\t\t\tverifySuccessMessage(successMessage1);\n//\t\t\tselectSchemeWithValue(schemeValue);\n//\t\t} catch (Exception e) {\n//\t\t\ttestStepFailed(\"Failed in modelSelection \" + e.getClass().getName());\n//\t\t}\n//\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to validate PAN details\n\t */",
        "description": "This Java method is used to enter and validate post-approval customer details in a web application. The method takes numerous string parameters that represent various labels, values, and buttons used in the application.\n\nHere's a brief overview of what the method does:\n\n1. It selects the \"Opportunity Details\" tab.\n2. If the environment is UAT, it expands the \"Address Details\" section.\n3. It enters the office address details (line 1, line 2, line 3, and pin code) and then enriches the office address using a search function.\n4. It clicks on the \"Office Address Enrichment\" button and waits for the page to load.\n5. It enters values in various fields such as father's name, mother's name, monthly income, alternate phone number, designation, preferred language, marital status, and email.\n6. It selects values from dropdown menus such as office phone type, monthly income, and designation.\n7. It chooses a value from the \"Name of Company/Business\" search list field.\n8. It selects or deselects a checkbox for OSV flag.\n9. Finally, it clicks on the \"Save\" button.\n\nThe method also includes error handling using a try-catch block to handle any exceptions that may occur during the execution of the method.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String nameOfCompanyLabel",
            "String nameOfCompanyValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "validatePanDetails",
        "code": "public void validatePanDetails(String validatePanDetailsLabel, String panNoValidationLabel,\n\t\t\tString panNoValidationValue, String nsdlDocumentTypeLabel, String nsdlDocumentTypeValue,\n\t\t\tString submitButton, String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Validate PAN Details #\");\n\t\t\tselectTabs(validatePanDetailsLabel);\n\t\t\tclickOnButton(\"Validate PAN\");\n\t\t\t/*selectValueFromPanValidationDropdown(panNoValidationLabel, panNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(nsdlDocumentTypeLabel, nsdlDocumentTypeValue);\n\t\t\tclickOnButton(submitButton);\n\t\t\tverifySuccessMessage(successMessage);*/\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validatePanDetails \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 04/04/2022 Description : method to complete required co\n\t * applicant details\n\t */\n\n/*\tpublic void requiredCoApplicantDetails(String tabName, String motherNameLabel, String motherNameValue,\n\t\t\tString fatherNameLabel, String fatherNameValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String mothlyIncomeLabel, String mothlyIncomeValue,\n\t\t\tString nameOfCompanyLabel, String nameOfCompanyValue, String designationLabel, String designationValue,\n\t\t\tString officeAreaLocalityLabel, String officeAreaLocalityValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String nameOncardLabel, String nameOncardValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue, String emailLabel,\n\t\t\tString emailValue, String bflBranchLabel, String bflBranchValue, String qualificationLabel,\n\t\t\tString qualificationValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString primaryNameOfCompanyLabel, String primaryNameOfCompanyValue, String primaryMotherNameLabel,\n\t\t\tString primaryMotherNameValue, String primaryFatherNameLabel, String primaryFatherNameValue,\n\t\t\tString primaryMothlyIncomeLabel, String primaryMothlyIncomeValue, String primaryQualificationLabel,\n\t\t\tString primaryQualificationValue, String primaryMaritalStatusLabel, String primaryMaritalStatusValue,\n\t\t\tString primaryDesignationLabel, String primaryDesignationValue, String relationshipLabel,\n\t\t\tString relationshipValue, String primaryPrefferedLanguageLabel, String primaryPreferredLanguageValue,\n\t\t\tString primaryEmailLabel, String primaryEmailValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details - Co Applicant #\");\n\t\t\t\t\t\t\t\t\n\t\t\tclickEditOptionWithTitle(tabName, prefferedLanguageLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\t// chooseValueFromSearchAndListField(nameOfCompanyLabel, nameOfCompanyValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tchooseValueFromSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n\n\t\t\ttestStepInfo(\"Primary Applicant Required Details\");\n\n\t\t\t// chooseValueFromSearchAndListField(primaryNameOfCompanyLabel,\n\t\t\t// primaryNameOfCompanyValue);\n\t\t\tenterValueInFatherMotherTextField(primaryMotherNameLabel, primaryMotherNameValue);\n\t\t\tenterValueInFatherMotherTextField(primaryFatherNameLabel, primaryFatherNameValue);\n\t\t\tselectValueFromCkycDropdown(primaryMothlyIncomeLabel, primaryMothlyIncomeValue);\n\t\t\tselectValueFromCkycDropdown(primaryQualificationLabel, primaryQualificationValue);\n\t\t\tselectValueFromCkycDropdown(primaryMaritalStatusLabel, primaryMaritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(primaryDesignationLabel, primaryDesignationValue);\n\t\t\tselectValueFromCkycDropdown(relationshipLabel, relationshipValue);\n\t\t\tselectValueFromCkycDropdown(primaryPrefferedLanguageLabel, primaryPreferredLanguageValue);\n\t\t\tenterTextInCustomerDetails(primaryEmailLabel, primaryEmailValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredCoApplicantDetails \" + e.getClass().getName());\n\t\t}\n\t}\n*/",
        "description": "This Java method is used to validate PAN details on a web application. It attempts to perform the following actions:\n\n1. Selects a tab with the label `validatePanDetailsLabel`.\n2. Clicks on the \"Validate PAN\" button.\n3. (Comments out) Selects values from pan validation dropdown for PAN number and NSDL document type.\n4. Clicks on the submit button.\n5. Verifies that a success message is displayed.\n\nIf any of these actions fail, the method catches the exception and reports it as a test step failure with a message indicating what went wrong.",
        "input": [
            "String validatePanDetailsLabel",
            "String panNoValidationLabel",
            "String panNoValidationValue",
            "String nsdlDocumentTypeLabel",
            "String nsdlDocumentTypeValue",
            "String submitButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownInRequiredDetails",
        "code": "public void selectValueFromDropdownInRequiredDetails(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\"+dropdownName+\"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(dropdownName+\" has listed values\");\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//div[@aria-label='\"+dropdownName+\"']//lightning-base-combobox-item[contains(@role,'option')]//span//span[@title='\"+value+\"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInRequiredDetails`, selects a value from a dropdown list on a web page. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what the method does:\n\n1. Waits for the page to load.\n2. Locates the dropdown element using an XPath expression.\n3. Waits for the dropdown element to be displayed.\n4. Clicks on the dropdown element to open its list of values.\n5. Waits for the list of values to be displayed and then selects the specified value from the list.\n6. If the selection is successful, takes a manual screenshot as proof.\n7. If the value is not present in the dropdown or if the selection fails, marks the test step as failed and provides an error message.\n\nThe method also includes some error handling by catching any exceptions that may occur during execution and marking the test step as failed with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "requiredCoApplicantDetails",
        "code": "public void requiredCoApplicantDetails(String tabName, String motherNameLabel, String motherNameValue,\n\t\t\tString fatherNameLabel, String fatherNameValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String mothlyIncomeLabel, String mothlyIncomeValue,\n\t\t\tString nameOfCompanyLabel, String nameOfCompanyValue, String designationLabel, String designationValue,\n\t\t\tString officeAreaLocalityLabel, String officeAreaLocalityValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String nameOncardLabel, String nameOncardValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue, String emailLabel,\n\t\t\tString emailValue, String bflBranchLabel, String bflBranchValue, String qualificationLabel,\n\t\t\tString qualificationValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString primaryNameOfCompanyLabel, String primaryNameOfCompanyValue, String primaryMotherNameLabel,\n\t\t\tString primaryMotherNameValue, String primaryFatherNameLabel, String primaryFatherNameValue,\n\t\t\tString primaryMothlyIncomeLabel, String primaryMothlyIncomeValue, String primaryQualificationLabel,\n\t\t\tString primaryQualificationValue, String primaryMaritalStatusLabel, String primaryMaritalStatusValue,\n\t\t\tString primaryDesignationLabel, String primaryDesignationValue, String relationshipLabel,\n\t\t\tString relationshipValue, String primaryPrefferedLanguageLabel, String primaryPreferredLanguageValue,\n\t\t\tString primaryEmailLabel, String primaryEmailValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\tselectTabs(\"Opportunity Details\");\t\t\n\n\t\t\texpandArrow(\"Address Details\");\n\t\t\t\n\t\t\tString field1 = officeAddressLine1Label + \"#xpath=//label//span[text()='\" + officeAddressLine1Label\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input | //label[text()='\" + officeAddressLine1Label\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\n\t\t\tif (isElementPresent(field1)) {\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tenterTextInCustomerDetails(\"Enter Pincode\", \"411014\");\n\t\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\",\n\t\t\t\t\t\t\"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t} else {\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\t\tchooseSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\t}\n\t\t\t\n\t\t\tclickOnAddressEnrichmentButton(\"Office Address Enrichment\", saveLabel);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\t}\n\t\t\t\t\t\n\t//\t\tclickEditOptionWithTitle(tabName, prefferedLanguageLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\t\t\t\n\t\t\tchooseValueFromSearchAndListFieldInRequireDetails(nameOfCompanyLabel, nameOfCompanyValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(designationLabel, designationValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(maritalStatusLabel, maritalStatusValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\t\n\t\t//\tselectValueFromDropdownInRequiredDetails(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t//\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t//\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\t\n\n\t\t\ttestStepInfo(\"Primary Applicant Required Details\");\n\t\t\t\t\t\n\t\t\tenterValueInFatherMotherTextField(primaryMotherNameLabel, primaryMotherNameValue);\n\t\t\tenterValueInFatherMotherTextField(primaryFatherNameLabel, primaryFatherNameValue);\n\t\t\tchooseValueFromSearchAndListFieldInRequireDetails(primaryNameOfCompanyLabel, primaryNameOfCompanyValue);\n\t\t\tchooseValueFromSearchAndListFieldInRequireDetails(\"Primary BFL Branch\", bflBranchValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(primaryMothlyIncomeLabel, primaryMothlyIncomeValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(primaryDesignationLabel, primaryDesignationValue);\n\t\t\tenterTextInCustomerDetails(\"Primary Office Phone Number\", generateMobileNumber());\n\t\t\tselectValueFromDropdownInRequiredDetails(primaryMaritalStatusLabel, primaryMaritalStatusValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(primaryPrefferedLanguageLabel, primaryPreferredLanguageValue);\n\t\t\tenterTextInCustomerDetails(primaryEmailLabel, primaryEmailValue);\n\t\t\t\n\t\t//\tselectValueFromCkycDropdown(primaryQualificationLabel, primaryQualificationValue);\n\t\t//\tselectValueFromDropdownInRequiredDetails(relationshipLabel, relationshipValue);\n\t\t\t\n\t\t\tselectOrDeselectCheckBox(\"OSV Flag\", \"check\");\n\t\t\tclickOnButtonInRequiredDetails(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredCoApplicantDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to validate co applicant PAN\n\t * details\n\t */",
        "description": "This is a Java method named `requiredCoApplicantDetails` that appears to be part of a test automation framework. The method takes several string parameters and performs various actions on a web application.\n\nHere's a brief summary of what the method does:\n\n1. It attempts to enter post-approval customer details, including office address, phone numbers, email, marital status, and other information.\n2. It selects the \"Opportunity Details\" tab and expands the \"Address Details\" section.\n3. It enters various values in text fields, such as office address lines 1, 2, and 3, pin code, and preferred language.\n4. It chooses search results from dropdown lists or performs searches using search boxes.\n5. It selects values from dropdown menus for fields like monthly income, designation, phone number type, and marital status.\n6. It enters text in customer details fields, such as email address and office phone numbers.\n7. It validates primary applicant required details, including mother's name, father's name, company name, and other information.\n\nThe method also includes error handling using a `try`-`catch` block to catch any exceptions that may occur during the execution of the test.\n\nOverall, this method appears to be used for testing the \"requiredCoApplicantDetails\" page in a web application.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String nameOfCompanyLabel",
            "String nameOfCompanyValue",
            "String designationLabel",
            "String designationValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String primaryNameOfCompanyLabel",
            "String primaryNameOfCompanyValue",
            "String primaryMotherNameLabel",
            "String primaryMotherNameValue",
            "String primaryFatherNameLabel",
            "String primaryFatherNameValue",
            "String primaryMothlyIncomeLabel",
            "String primaryMothlyIncomeValue",
            "String primaryQualificationLabel",
            "String primaryQualificationValue",
            "String primaryMaritalStatusLabel",
            "String primaryMaritalStatusValue",
            "String primaryDesignationLabel",
            "String primaryDesignationValue",
            "String relationshipLabel",
            "String relationshipValue",
            "String primaryPrefferedLanguageLabel",
            "String primaryPreferredLanguageValue",
            "String primaryEmailLabel",
            "String primaryEmailValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "validateCoApplicantPanDetails",
        "code": "public void validateCoApplicantPanDetails(String validatePanDetailsLabel, String panNoValidationLabel,\n\t\t\tString panNoValidationValue, String nsdlDocumentTypeLabel, String nsdlDocumentTypeValue,\n\t\t\tString primaryPanNoValidationLabel, String primaryPanNoValidationValue, String primaryNsdlDocumentTypeLabel,\n\t\t\tString primatyNsdlDocumentTypeValue, String submitButton, String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Validate PAN Details - Co Applicant ###\");\n\t\t\tselectTabs(validatePanDetailsLabel);\n\t\t\tselectValueFromPanValidationDropdown(panNoValidationLabel, panNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(nsdlDocumentTypeLabel, nsdlDocumentTypeValue);\n\t\t\tselectValueFromPanValidationDropdown(primaryPanNoValidationLabel, primaryPanNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(primaryNsdlDocumentTypeLabel, primatyNsdlDocumentTypeValue);\n\t\t\tclickOnButton(submitButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validateCoApplicantPanDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete co applicant\n\t * additional information section\n\t */",
        "description": "This Java method, `validateCoApplicantPanDetails`, is used to validate the PAN (Permanent Account Number) details for a Co-Applicant in an application. The method attempts to perform the following steps:\n\n1. Logs a test step message indicating that it's validating the Co-Applicant's PAN details.\n2. Selects the tabs related to PAN validation.\n3. Fills in the PAN number and NSDL document type values for both the Co-Applicant and Primary applicant.\n4. Submits the form by clicking on the submit button.\n5. Verifies that a success message is displayed after submitting the form.\n\nIf any exception occurs during these steps, it catches the exception and logs a test step failed message with the exception's class name.",
        "input": [
            "String validatePanDetailsLabel",
            "String panNoValidationLabel",
            "String panNoValidationValue",
            "String nsdlDocumentTypeLabel",
            "String nsdlDocumentTypeValue",
            "String primaryPanNoValidationLabel",
            "String primaryPanNoValidationValue",
            "String primaryNsdlDocumentTypeLabel",
            "String primatyNsdlDocumentTypeValue",
            "String submitButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "coApplicantAdditonalInformation",
        "code": "public void coApplicantAdditonalInformation(String applicantTab, String expandTabName, String employmentTypeLabel,\n\t\t\tString employmentTypeValue, String rsaLabel, String rsaValue, String submitForApprovalButton) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Additional Information ###\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(employmentTypeLabel, employmentTypeValue);\n\t\t\tselectValueFromDropdown(rsaLabel, rsaValue);\n\t\t\tclickOnButtonWithoutWaitTime(\"Save as Draft\");\n\t\t\tclickOnButtonInKycTab(submitForApprovalButton);\n\t\t\twaitTime(5);\n\t\t\tmanualScreenshot(\"Successfully submitted Additional Information of Co Apllicant\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in coApplicantAdditonalInformation \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 07/04/2022 Description : Method used to verify and print\n\t * error message below fields\n\t * \n\t * @param : parameterList is the error list\n\t */",
        "description": "This Java method, `coApplicantAdditonalInformation`, is used to add additional information for a co-applicant in an application. The method performs the following actions:\n\n1. It logs a test step info with the message \"### Additional Information ###\".\n2. It selects the customer tab specified by the `applicantTab` parameter.\n3. It expands the arrow for the tab specified by the `expandTabName` parameter.\n4. It selects values from dropdown menus using the `employmentTypeLabel`, `employmentTypeValue`, `rsaLabel`, and `rsaValue` parameters.\n5. It clicks on the \"Save as Draft\" button without waiting for any specific time.\n6. It clicks on the submit-for-approval button in the KYC tab, specified by the `submitForApprovalButton` parameter.\n7. It waits for 5 seconds to allow any necessary operations to complete.\n8. Finally, it takes a manual screenshot with the message \"Successfully submitted Additional Information of Co Apllicant\" if all steps are successful.\n\nIf an exception occurs during these actions, the method catches the exception and logs a test step failure with the error message.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String employmentTypeLabel",
            "String employmentTypeValue",
            "String rsaLabel",
            "String rsaValue",
            "String submitForApprovalButton"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyAndPrintErrorMessageInField",
        "code": "public void verifyAndPrintErrorMessageInField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//div[contains(@class,'help')]\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tscrollToElement(errorField);\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage + \" in \" + labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \" + labelName + \" field\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInField. Exception : \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInField`, is used to verify that an expected error message is displayed for a given field label and take a screenshot if the validation fails or succeeds as expected.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the error message element based on the provided `labelName`.\n2. It checks if the error message element is displayed using the `isElementDisplayed` method.\n3. If the element is displayed, it scrolls to that element and extracts the text (i.e., the error message) using the `getText` method.\n4. It compares the extracted error message with the expected message provided as a parameter.\n5. If the messages match, it highlights the error message element using the `highLighterMethod1` method and takes a manual screenshot with a descriptive name indicating that the validation was successful.\n6. If the messages don't match or if the error message is not displayed, it marks the test step as failed using the `testStepFailed` method.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyErrorMessageNotPresentUnderField",
        "code": "public void verifyErrorMessageNotPresentUnderField(String labelName) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//div[contains(@class,'help')]\";\n\t\t\tif (!isElementDisplayed(errorField, 3)) {\n\t\t\t\tmanualScreenshot(\"Error message not present under the field \" + labelName + \" as expected\");\n\t\t\t} else {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\ttestStepFailed(errorMessage + \" Error message is displayed under \" + labelName + \" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorMessageNotPresentUnderField`, is used to verify that an error message is not present under a specific field with the given label name. \n\nThe method first constructs an XPath expression to locate the element containing the error message based on the provided label name. It then checks if this element is displayed using a utility function `isElementDisplayed`. If the element is not displayed, it takes a manual screenshot and marks the test as failed. If the element is displayed, it retrieves the text content of the element (i.e., the error message) and also marks the test as failed with the error message.\n\nIf any exception occurs during this process, the method catches it and marks the test as failed with an error message describing the exception.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyAndPrintErrorMessageInCKYCField",
        "code": "public void verifyAndPrintErrorMessageInCKYCField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage + \" in \" + labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \" + labelName + \" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInCKYCField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 08/04/2022 Description : method to get required details\n\t * mandatory field error message.\n\t * \n\t * @return : fields return list of error message\n\t */",
        "description": "This Java method, `verifyAndPrintErrorMessageInCKYCField`, is used to verify the error message displayed in a specific field (identified by the `labelName`) and print the expected and actual messages. \n\nThe method takes two parameters: `labelName` and `expectedMessage`. It first constructs an XPath expression to locate the field's error message element, then checks if the element is displayed within a specified timeout period.\n\nIf the error message is displayed, it compares the actual message with the expected one. If they match, it takes a manual screenshot for verification purposes. If not, it marks the test step as failed and provides an error message indicating that the validation was not fired or the incorrect message was displayed.\n\nIf the error message is not displayed, it also marks the test step as failed and provides an error message indicating that the message was not displayed under the specified field.\n\nThe method catches any exceptions that may occur during its execution and marks the test step as failed with a generic error message.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getRequiredDetailsListErrorMessage",
        "code": "public List<String> getRequiredDetailsListErrorMessage() {\n\t\tArrayList<String> value = null;\n\t\ttry {\n\t\t\tvalue = new ArrayList<String>();\n\t\t\tString field = \"Error Header#xpath=//span[text()='Review the following fields']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//ul[@class='errorsList']//li//a\";\n\t\t\twaitForElement(field, 5);\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tList<WebElement> list = findWebElements(fieldValidation);\n\t\t\t\tfor (int iterate = 0; iterate < list.size(); iterate++) {\n\t\t\t\t\tvalue.add(list.get(iterate).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no validation is displayed when saving the details\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessage \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/*\n\t * @author : Saraswathi L\n\t * \n\t * @created Date : 12/04/2022 Description : method to click on close Icon in\n\t * Validation Message.\n\t * \n\t * @param : labelName is the icon name\n\t */",
        "description": "This Java method, `getRequiredDetailsListErrorMessage()`, retrieves a list of strings containing error messages from a web page. It uses Selenium WebDriver to interact with the page and performs the following actions:\n\n1. Waits for an element with the specified XPath (`field`) to be present.\n2. If the element is present, it finds all elements matching another XPath (`fieldValidation`) and extracts the text content of each element, trimming any whitespace.\n3. Adds these error messages to a list (`value`).\n4. If the element is not present, it marks the test as failed with an error message.\n\nThe method returns this list of error messages as a `List<String>`.",
        "input": [],
        "output": "List"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnCloseIcon",
        "code": "public void clickOnCloseIcon(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"Close Icon #xpath=//button[@title='\" + labelName + \"']\";\n\t\t\twaitForElement(Element, 3);\n\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCloseIcon  \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 07/04/2022 Description : Method used to verify and print\n\t * error message in required details\n\t * \n\t * @param : validation is expected message to compare\n\t */",
        "description": "This Java method, `clickOnCloseIcon`, attempts to click on a close icon with the specified label name. It uses an XPath expression to locate the element and then waits for it to be displayed before attempting to click on it. If the element is not displayed within the specified time (3 seconds), it logs that the expected element was not found. If any exception occurs during this process, it catches and logs the error as \"Failed in clickOnCloseIcon\".",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getRequiredDetailsErrorMessage",
        "code": "public void getRequiredDetailsErrorMessage(String validation) {\n\t\tString errorMessage = null;\n\t\ttry {\n\t\t\tString field = \"Error Header#xpath=//div[contains(@class,'open active')]//span[text()='Review the following errors'] | //div[contains(@class,'open active')]//span[text()='Review the errors on this page.']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//div[contains(@class,'open active')]//ul[@class='errorsList']//li\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\terrorMessage = getText(fieldValidation);\n\t\t\t\tif (errorMessage.contains(validation)) {\n\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Expected validation is not fire - Got '\" + errorMessage + \"' instead of \" + validation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessage \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete required details\n\t * section except company name\n\t */",
        "description": "This Java method, `getRequiredDetailsErrorMessage`, is used to capture the error message when a validation fails in a web application. The method waits for an element with a specific XPath to be displayed, then checks if the element contains the expected error message. If the error message matches the expected validation, it takes a manual screenshot and marks the test step as passed. If the error message does not match the expected validation or if the element is not displayed, it fails the test step. The method also catches any exceptions that may occur during its execution.",
        "input": [
            "String validation"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "requiredDetailsWithoutCompanyName",
        "code": "public void requiredDetailsWithoutCompanyName(String tabName, String motherNameLabel, String motherNameValue,\n\t\t\tString fatherNameLabel, String fatherNameValue, String officeAreaLocalityLabel,\n\t\t\tString officeAreaLocalityValue, String officePhoneNoTypeLabel, String officePhoneNoTypeValue,\n\t\t\tString officePhoneNoLabel, String officePhoneNoValue, String mothlyIncomeLabel, String mothlyIncomeValue,\n\t\t\tString alternateNoLabel, String alternateNoValue, String designationLabel, String designationValue,\n\t\t\tString nameOncardLabel, String nameOncardValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officeAddressLine2Label, String officeAddressLine2Value,\n\t\t\tString officeAddressLine3Label, String officeAddressLine3Value, String officePinCodeLabel,\n\t\t\tString officePinCodeValue, String qualificationLabel, String qualificationValue,\n\t\t\tString prefferedLanguageLabel, String prefferedLanguageValue, String maritalStatusLabel,\n\t\t\tString maritalStatusValue, String prefferedMailingAddressLabel, String prefferedMailingAddressValue,\n\t\t\tString emailLabel, String emailValue, String bflBranchLabel, String bflBranchValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Required Details ###\");\n\t\t\tclickEditOptionWithTitle(tabName, officeAreaLocalityLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tchooseValueFromSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetailsWithoutCompanyName \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 04/04/2022 Description : method to complete co applicant\n\t * required details except company name\n\t */",
        "description": "This is a Java method named `requiredDetailsWithoutCompanyName` that completes the required details for a co-applicant, excluding the company name. The method takes several string parameters representing different labels and values for various fields.\n\nThe method performs the following actions:\n\n1. It logs a test step info message indicating that it is completing the \"Required Details\" section.\n2. It clicks on an edit option with a title matching the `tabName` parameter.\n3. It enters values in father-mother text fields using the `motherNameLabel`, `motherNameValue`, `fatherNameLabel`, and `fatherNameValue` parameters.\n4. It enters values in various customer details fields, such as office area locality, phone number type, monthly income, alternate no, designation, name on card, office address line 1-3, pin code, qualification, preferred language, marital status, preferred mailing address, email, and BFL branch.\n5. Finally, it clicks a save button in a popup.\n\nThe method catches any exceptions that occur during its execution and logs an error message if one occurs.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "requiredCoApplicantDetailsWithoutCompanyName",
        "code": "public void requiredCoApplicantDetailsWithoutCompanyName(String tabName, String motherNameLabel,\n\t\t\tString motherNameValue, String fatherNameLabel, String fatherNameValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String mothlyIncomeLabel, String mothlyIncomeValue, String designationLabel,\n\t\t\tString designationValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officeAddressLine1Label, String officeAddressLine1Value, String officePinCodeLabel,\n\t\t\tString officePinCodeValue, String officeAddressLine2Label, String officeAddressLine2Value,\n\t\t\tString officeAddressLine3Label, String officeAddressLine3Value, String nameOncardLabel,\n\t\t\tString nameOncardValue, String officePhoneNoTypeLabel, String officePhoneNoTypeValue,\n\t\t\tString officePhoneNoLabel, String officePhoneNoValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue, String emailLabel,\n\t\t\tString emailValue, String bflBranchLabel, String bflBranchValue, String qualificationLabel,\n\t\t\tString qualificationValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString primaryNameOfCompanyLabel, String primaryNameOfCompanyValue, String primaryMotherNameLabel,\n\t\t\tString primaryMotherNameValue, String primaryFatherNameLabel, String primaryFatherNameValue,\n\t\t\tString primaryMothlyIncomeLabel, String primaryMothlyIncomeValue, String primaryQualificationLabel,\n\t\t\tString primaryQualificationValue, String primaryMaritalStatusLabel, String primaryMaritalStatusValue,\n\t\t\tString primaryDesignationLabel, String primaryDesignationValue, String relationshipLabel,\n\t\t\tString relationshipValue, String primaryPrefferedLanguageLabel, String primaryPreferredLanguageValue,\n\t\t\tString primaryEmailLabel, String primaryEmailValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Required Details for Co Application ###\");\n\t\t\tclickEditOptionWithTitle(tabName, prefferedLanguageLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tchooseValueFromSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n\n\t\t\ttestStepInfo(\"Primary Applicant Required Details\");\n\n\t\t\tchooseValueFromSearchAndListField(primaryNameOfCompanyLabel, primaryNameOfCompanyValue);\n\t\t\tenterValueInFatherMotherTextField(primaryMotherNameLabel, primaryMotherNameValue);\n\t\t\tenterValueInFatherMotherTextField(primaryFatherNameLabel, primaryFatherNameValue);\n\t\t\tselectValueFromCkycDropdown(primaryMothlyIncomeLabel, primaryMothlyIncomeValue);\n\t\t\tselectValueFromCkycDropdown(primaryQualificationLabel, primaryQualificationValue);\n\t\t\tselectValueFromCkycDropdown(primaryMaritalStatusLabel, primaryMaritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(primaryDesignationLabel, primaryDesignationValue);\n\t\t\tselectValueFromCkycDropdown(relationshipLabel, relationshipValue);\n\t\t\tselectValueFromCkycDropdown(primaryPrefferedLanguageLabel, primaryPreferredLanguageValue);\n\t\t\tenterTextInCustomerDetails(primaryEmailLabel, primaryEmailValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredCoApplicantDetailsWithoutCompanyName \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 25/04/2022 Description : Method to select or deselect check\n\t * box\n\t * \n\t * @param : labelname is the name of check box\n\t * \n\t * @param : status is the input value check or uncheck\n\t */",
        "description": "This Java method, named `requiredCoApplicantDetailsWithoutCompanyName`, appears to be part of a test automation framework. Its purpose is to fill out required details for a co-application without entering a company name.\n\nHere's a breakdown of what the method does:\n\n1. It starts by logging a test step with the title \"### Required Details for Co Application ###\".\n2. It then performs various actions:\n\t* Clicks an edit option with the specified `tabName` and `prefferedLanguageLabel`.\n\t* Enters values in text fields for mother's name, father's name, monthly income, designation, office area locality, office address line 1, office pin code, etc.\n\t* Selects values from dropdown lists for preferred language, monthly income, designation, etc.\n\t* Chooses values from search-and-list fields for BFL branch and primary name of company.\n3. It then performs the same actions again for the \"Primary Applicant Required Details\" section.\n4. Finally, it clicks a save button in a popup window.\n\nThe method catches any exceptions that occur during its execution and logs a test step failure if an exception is thrown.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String designationLabel",
            "String designationValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String primaryNameOfCompanyLabel",
            "String primaryNameOfCompanyValue",
            "String primaryMotherNameLabel",
            "String primaryMotherNameValue",
            "String primaryFatherNameLabel",
            "String primaryFatherNameValue",
            "String primaryMothlyIncomeLabel",
            "String primaryMothlyIncomeValue",
            "String primaryQualificationLabel",
            "String primaryQualificationValue",
            "String primaryMaritalStatusLabel",
            "String primaryMaritalStatusValue",
            "String primaryDesignationLabel",
            "String primaryDesignationValue",
            "String relationshipLabel",
            "String relationshipValue",
            "String primaryPrefferedLanguageLabel",
            "String primaryPreferredLanguageValue",
            "String primaryEmailLabel",
            "String primaryEmailValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux'] | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']/../following-sibling::input | //div[@data-aura-class='forceChatterPublisherPresentationPanel']//span[text()='\"\n\n\t\t\t\t\t+ labelName + \"']/..//span[1] | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//input\";\n\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tscrollToElementTillPresent(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 07/04/2022 Description : Method used to verify and print\n\t * error message below fields in required details\n\t * \n\t * @param : parameterList is the error list\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox on a web page based on the provided label name and status (either \"check\" or \"uncheck\"). The method uses various Selenium WebDriver methods such as `waitForElement`, `isElementPresent`, `scrollToWebElement`, and `clickOnSpecialElement` to interact with the checkbox.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression using the provided label name to locate the checkbox element.\n2. It waits for the checkbox element to be present on the page, then scrolls to it if necessary.\n3. If the status is \"check\", it checks if the checkbox is not already selected. If not, it selects the checkbox and takes a manual screenshot as proof of successful selection.\n4. If the status is \"uncheck\", it does the opposite: it unchecks the checkbox only if it's currently checked, then takes another manual screenshot.\n5. If the checkbox is not present on the page, it reports a test failure with an error message.\n6. The method also catches any exceptions that may occur during execution and logs them to a log file before reporting a test failure.\n\nOverall, this method provides a way to interact with checkboxes on a web page in a controlled manner, while also providing visual confirmation of the actions taken.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyAndPrintErrorMessageInRDField",
        "code": "public void verifyAndPrintErrorMessageInRDField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//parent::div//following-sibling::li\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.contains(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \" + labelName + \" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInRDField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 16/05/2022 Description : method to get value from disabled\n\t * field\n\t * \n\t * @param : labelName is field name\n\t * \n\t * @return : value return retrieved value\n\t */",
        "description": "This Java method, `verifyAndPrintErrorMessageInRDField`, verifies if a specific error message is displayed for a given label name in an RD (Risk and Data) field. \n\nThe method takes two parameters: `labelName` and `expectedMessage`. It first constructs an XPath expression to locate the element containing the error message based on the provided `labelName`. \n\nIt then checks if the element is displayed using the `isElementDisplayed` method, with a timeout of 3 seconds. If the element is displayed, it retrieves the text content of the element and checks if it contains the expected error message.\n\nIf the expected error message is found, it takes a manual screenshot as proof. If not, it marks the test step as failed. \n\nIf the element is not displayed, it also marks the test step as failed. In case of any exception during the execution of this method, it catches and logs the exception, then marks the test step as failed.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getTextFromDisabledField",
        "code": "public String getTextFromDisabledField(String LabelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//label[text()='\" + LabelName + \"']//..//input | //span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//..//..//input|//label[text()='\" + LabelName + \"']//..//textarea | //label[text()='\"+LabelName+\"']//..//select\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = findWebElement(targetField).getAttribute(\"value\");\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDisabledField\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 16/05/2022 Description : method to verify line is present or\n\t * not\n\t * \n\t * @param : expectedValue is value need to compare\n\t */",
        "description": "This Java method, `getTextFromDisabledField`, is used to retrieve the text from a disabled field (e.g., input field, textarea, select) on a web page. The method takes a `LabelName` as an input parameter and uses XPath expressions to locate the target field.\n\nHere's what the method does:\n\n1. Waits for the page to load.\n2. Uses XPath expressions to find the target field with the given label name.\n3. Waits up to 10 seconds for the element to be displayed.\n4. Checks if the element is displayed within 5 seconds. If not, fails the test step.\n5. Retrieves the value of the disabled field using `getAttribute(\"value\")`.\n6. Highlights the found element (optional).\n7. Takes a manual screenshot with the label name and the retrieved value (if present).\n8. Verifies if the value is empty or not. If it's empty, fails the test step.\n9. Returns the retrieved value.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyLinesNotPresent",
        "code": "public void verifyLinesNotPresent(String expectedValue1, String expectedValue2) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='Approval Details']/..//div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).trim();\n\t\t\t\tif (!(value.contains(expectedValue1) && value.contains(expectedValue2))) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue1 + expectedValue2 + \" lines are not present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" lines are present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lines are not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyLinesNotPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 19/05/2022 Description : method to verify scheme attribute\n\t * \n\t * @param : schemeValue is the scheme to select\n\t */",
        "description": "This Java method, `verifyLinesNotPresent`, verifies that certain lines (represented by `expectedValue1` and `expectedValue2`) are not present in a web element with an XPath locator. \n\nHere's how it works:\n\n- It first waits for the element to be displayed using the `waitForElement` method.\n- If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n- Then, it retrieves the text of the element and trims any leading or trailing whitespace.\n- If the retrieved text does not contain both `expectedValue1` and `expectedValue2`, it highlights the element using the `highLighterMethod` and takes a manual screenshot with the expected values as the filename. \n- If the text contains both expected values, it fails the test step with a message indicating that the lines are present.\n- If the element is not displayed within the specified time (5 seconds), it fails the test step with a message indicating that the lines are not displayed.\n\nIf any exception occurs during this process, it catches the exception and fails the test step with a message including the type of exception.",
        "input": [
            "String expectedValue1",
            "String expectedValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyScheme",
        "code": "public String verifyScheme(String schemeValue, String parameter) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString param = schemeValue + \" Scheme select button#xpath=//div//h2//span//div//Strong[contains(text(),'\"\n\t\t\t\t\t+ schemeValue + \"')]//..//..//..//..//..//..//..//strong[contains(text(),'\" + parameter\n\t\t\t\t\t+ \"')]//..//following-sibling::div\";\n\t\t\twaitForElement(param, 20);\n\t\t\tif (isElementDisplayed(param, 10)) {\n\t\t\t\tscrollToWebElement(param);\n\t\t\t\tvalue = getText(param);\n\t\t\t\thighLighterMethod(param);\n\t\t\t\tmanualScreenshot(parameter + \" has values of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Scheme or Loan parameter is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyScheme. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 21/05/2022 Description : method to verify field is disabled\n\t * \n\t * @param : labelName is the field name\n\t */",
        "description": "This Java method, `verifyScheme`, verifies whether a specific scheme value is present on a web page. It takes two parameters: `schemeValue` and `parameter`. \n\nThe method attempts to locate an element on the page using XPath, which combines the provided `schemeValue` with other elements to form the full XPath expression. If the element is found and displayed within a certain time limit (20 seconds), it scrolls to that element, extracts its text value, highlights the element for visual verification, and takes a manual screenshot with the extracted value.\n\nIf the element is not found or displayed, the method fails the test step. In case of any exception during this process, it also fails the test step and logs the error message. The method returns the extracted text value if successful.",
        "input": [
            "String schemeValue",
            "String parameter"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyFieldIsDisabled",
        "code": "public void verifyFieldIsDisabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\"\n\t\t\t\t\t+ labelName + \"']/parent::div//input | //label[text()='\"+labelName+\"']/parent::div//select | //button[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is disabled as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 21/05/2022 Description : method to enter Date\n\t * \n\t * @param : labelName is the name of the field\n\t * \n\t * @param : value is the date\n\t */",
        "description": "This Java method, `verifyFieldIsDisabled`, is used to verify if a specific field (e.g., input field, dropdown, or button) with a given label name is disabled. The method uses Selenium WebDriver's `findWebElement` and `getAttribute` methods to locate the element and check its \"disabled\" attribute.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression using the provided `labelName` to uniquely identify the target field.\n2. It waits for the target field to be displayed using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the field is displayed, it checks if the field is disabled by getting its \"disabled\" attribute value and comparing it to \"true\".\n4. If the field is disabled, it takes a manual screenshot as evidence.\n5. If the field is not disabled or not present at all, it fails the test step with an error message.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterDate",
        "code": "public void enterDate(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input | //label[contains(text(),'\" + labelName+ \"')]//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field entered Date as \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 21/05/2022 Description : method to verify field is read only\n\t * \n\t * @param : labelName is the field name\n\t */",
        "description": "This Java method, `enterDate`, is used to enter a date value into a field with a given label name. The method uses Selenium WebDriver to interact with the web element, and it includes various checks and retries to ensure that the operation is successful.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding web element (a text input field).\n2. It waits for the element to be present and visible using the `waitForElement` and `isElementDisplayed` methods.\n3. If the element is displayed, it scrolls to the element, types in the provided `value`, and then waits for the page to load completely.\n4. After successful entry, it takes a manual screenshot of the highlighted field with a message indicating that the date has been entered successfully.\n5. If the element is not present or visible, it fails the test step with an error message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyFieldIsReadOnly",
        "code": "public void verifyFieldIsReadOnly(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName + \"']/..//following-sibling::div//span | //label[text()='\"+labelName+\"']//parent::div//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"readonly\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\thighLighterMethod(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" field is read only as Expeted\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not read only\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsReadOnly\" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete ckyc pan\n\t * validation section\n\t */",
        "description": "This Java method, `verifyFieldIsReadOnly`, is used to verify if a specific field (identified by its label name) on a web page is read-only. \n\nHere's how it works:\n\n1. It constructs an XPath expression based on the provided label name to locate the field.\n2. It waits for the element to be displayed and then checks if the element is actually present.\n3. If the element is present, it retrieves the value of the `readonly` attribute from the element.\n4. If the value is \"true\", it means the field is read-only, so it highlights the field (using a method called `highLighterMethod`) and takes a manual screenshot to confirm that the field is indeed read-only as expected.\n5. If the value is not \"true\" or if the element is not present, it fails the test step with an appropriate message.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that might occur during its execution and report them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "downloadCkycPanValidation",
        "code": "public void downloadCkycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel,\n\t\t\tString ckycTypeValue, String panNumberLabel, String panNumberValue, String dobLabel, String dobValue,\n\t\t\tString buttonName, String downloadButton, String successMessage1, String successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Process-----\");\n\t\t\ttestStepInfo(\"-----CKYC/PAN Validation-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(ckycTypeLabel, ckycTypeValue);\n\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tclickOnButtonInKycTab(buttonName);\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitTime(5);\n\t\t\tclickOnButtonInKycTab(downloadButton);\n\t\t\tverifySuccessMessage(successMessage2);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 16/05/2022 Description : method to get value from drop down\n\t * \n\t * @param : labelName is field name\n\t * \n\t * @return : fieldValue return retrieved value\n\t */",
        "description": "This Java method, `downloadCkycPanValidation`, performs a series of actions to validate the CKYC/PAN (Customer Know Your Customer and Permanent Account Number) process in an application. The method takes 13 input parameters:\n\n1. `applicantTab`: The name of the tab related to the applicant.\n2. `expandTabName`: The name of the tab that needs to be expanded.\n3. `ckycTypeLabel` and `ckycTypeValue`: The label and value of a dropdown menu related to CKYC type.\n4. `panNumberLabel` and `panNumberValue`: The label and value for entering PAN number.\n5. `dobLabel` and `dobValue`: The label and value for entering Date of Birth (DOB).\n6. `buttonName`: The name of the button that needs to be clicked in the Kyc tab.\n7. `downloadButton`: The name of the button that needs to be clicked to download the validation result.\n8. `successMessage1` and `successMessage2`: The expected success messages after clicking the buttons.\n\nThe method performs the following steps:\n\n1. Logs a test step message indicating the start of the CKYC/PAN validation process.\n2. Selects the applicant tab.\n3. Expands the specified tab.\n4. Selects the value from the dropdown menu for CKYC type.\n5. Enters the PAN number and DOB values.\n6. Clicks the button in the Kyc tab with the given name.\n7. Verifies a success message after clicking the button.\n8. Waits for 5 seconds.\n9. Clicks the download button.\n10. Verifies another success message after clicking the download button.\n\nIf any exception occurs during these steps, the method catches it and logs a test step failure message with the exception details.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String ckycTypeLabel",
            "String ckycTypeValue",
            "String panNumberLabel",
            "String panNumberValue",
            "String dobLabel",
            "String dobValue",
            "String buttonName",
            "String downloadButton",
            "String successMessage1",
            "String successMessage2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getTextFromDropdown",
        "code": "public String getTextFromDropdown(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='Customer Details']/..//..//..//..//button[contains(@aria-label,'\"\n\t\t\t\t\t+ labelName + \"')]/../../../../..//following-sibling::div//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = getText(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field value is not populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDropdown\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete customer details\n\t * section\n\t */",
        "description": "This Java method, `getTextFromDropdown`, is used to retrieve the text value from a dropdown field in a web page. The method takes a string parameter `labelName` which represents the label of the dropdown field.\n\nHere's what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It defines an XPath expression to locate the target dropdown field based on its label name.\n3. It waits for the target field to be displayed using the `waitForElement()` method with a timeout of 10 seconds.\n4. If the field is displayed, it retrieves the text value from the field using the `getText()` method and stores it in the `fieldValue` variable.\n5. If the field value is not empty, it takes a manual screenshot with the label name and field value as the filename. Otherwise, it marks the test step as failed if the field value is not populated.\n6. If the field is not displayed, it also marks the test step as failed.\n7. The method returns the `fieldValue` variable.\n\nThe method uses various helper methods such as `waitForPageToLoad()`, `waitForElement()`, `isElementDisplayed()`, and `getText()` to interact with the web page. It also includes error handling using a try-catch block to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "downloadCustomerDetails",
        "code": "public void downloadCustomerDetails(String applicantTab, String expandTabName, String firstNameLabel,\n\t\t\tString firstNameValue, String panNoLabel, String panNoValue, String lastNameLabel, String lastNameValue,\n\t\t\tString ovdTypeLabel, String ovdNumberLabel, String ovdNumberValue, String poaTypeLabel, String poaTypeValue,\n\t\t\tString poaNoLabel, String poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Download Customer Details-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tenterTextInCustomerProcess(panNoLabel, panNoValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\tgetTextFromDropdown(ovdTypeLabel);\n\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\tenterTextInCustomerProcess(ovdNumberLabel, ovdNumberValue);\n\t\t\tenterTextInCustomerProcess(poaNoLabel, poaNoValue);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in downloadCustomerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 31/03/2022 Description : method to complete address\n\t * enrichment section\n\t */",
        "description": "This Java method, `downloadCustomerDetails`, is used to download customer details from a web application. It takes in several string parameters that represent labels and values for various fields on the application's user interface.\n\nThe method attempts to perform the following actions:\n\n1. Log a test step information message.\n2. Select a specific tab (e.g., \"Applicant Tab\") using the `selectCustomerTabs` method.\n3. Expand an arrow (e.g., \"Expand Tab Name\") using the `expandArrows` method.\n4. Enter text values into various fields on the application's UI, including first name, PAN number, last name, OVD type, OVD number, POA type, and POA number.\n\nIf any of these actions fail or throw an exception, the method catches the exception and logs a test step failure message with the error details.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String firstNameLabel",
            "String firstNameValue",
            "String panNoLabel",
            "String panNoValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String ovdTypeLabel",
            "String ovdNumberLabel",
            "String ovdNumberValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNoLabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "downloadAddressEnrichment",
        "code": "public void downloadAddressEnrichment(String applicantTab, String expandTabName, String areaLocalityLabel,\n\t\t\tString areaLocalityValue, String landmarkLabel, String landmarkValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue, String zipcodeLabel, String zipcodeValue, String saveButton,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"### Download Address Enrichment ###\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(areaLocalityLabel, areaLocalityValue);\n\t\t\tenterTextInCustomerProcess(landmarkLabel, landmarkValue);\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tchooseSearchAndListField(zipcodeLabel, zipcodeValue);\n\t\t\tclickOnButton(saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 14/06/2022 Description : method to get Line value\n\t * \n\t * @param : expectedValue is the expected line value\n\t */",
        "description": "This Java method, named `downloadAddressEnrichment`, performs a series of actions in a web application to download address enrichment data. The method takes 11 parameters:\n\n1. `applicantTab`: The name of the customer tab.\n2. `expandTabName`: The name of the expandable tab.\n3. `areaLocalityLabel` and `areaLocalityValue`: Labels and values for entering area locality information.\n4. `landmarkLabel` and `landmarkValue`: Labels and values for entering landmark information.\n5. `residenceTypeLabel` and `residenceTypeValue`: Labels and values for selecting residence type from a dropdown list.\n6. `zipcodeLabel` and `zipcodeValue`: Labels and values for searching and listing fields by zipcode.\n7. `saveButton`: The name of the save button to click.\n8. `successMessage`: The expected success message after the download.\n\nThe method attempts to perform the following steps:\n\n1. Log a test step information with the title \"Download Address Enrichment\".\n2. Select the customer tab specified by `applicantTab`.\n3. Expand the tab specified by `expandTabName`.\n4. Enter text into customer process fields for area locality, landmark, and residence type.\n5. Choose search and list fields by zipcode.\n6. Click on the save button specified by `saveButton`.\n7. Verify that a success message matching `successMessage` is displayed.\n\nIf any of these steps fail, an exception is caught and logged as a test step failure with the message \"Failed in addressEnrichment\".",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String landmarkLabel",
            "String landmarkValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String zipcodeLabel",
            "String zipcodeValue",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getLineValue",
        "code": "public void getLineValue(String labelName, String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']/..//div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element);\n\t\t\t\tif (value.contains(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(value + \" Line value present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" lines are present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lines are not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLineValue\" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 14/06/2022 Description : method to get deal id\n\t * \n\t * @param : labelName is the field name\n\t * \n\t * @return : value is the retrieved deal id\n\t */",
        "description": "This Java method, `getLineValue`, is used to retrieve and verify the value of a specific line (or field) on a webpage. It takes two parameters: `labelName` (the name of the field) and `expectedValue` (the expected value of the field).\n\nThe method uses various web automation techniques such as:\n\n1. XPath locator to find the element\n2. Waiting for the element to be displayed\n3. Scrolling to the element if it's not visible\n4. Getting the text value of the element\n5. Verifying if the retrieved value contains the expected value\n\nIf the expected value is present, the method takes a screenshot and highlights the element. If the expected value is not present or the field is not displayed, the test step fails.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getDealId",
        "code": "public String getDealId(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//following-sibling::div//span | //div[contains(text(),'\" + labelName + \"')]//div\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tvalue = getText(targetField);\n\t\t\t\thighLighterMethod(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" field has \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getDealId\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 14/06/2022 Description : method to choose zip code/scheme\n\t * \n\t * @param : labelName is the field name\n\t * \n\t * @return : value is the zipcode/scheme need to select\n\t */",
        "description": "This Java method, `getDealId`, retrieves the deal ID associated with a given label name. It uses XPath expressions to locate the element containing the label name and its corresponding deal ID. The method waits for the element to be displayed, then extracts the deal ID text and highlights it using a separate method (`highLighterMethod`). If the element is not present, the test step fails. The method also takes a manual screenshot of the field with the extracted deal ID value. In case of any exceptions, the test step fails. The method returns the retrieved deal ID as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "chooseSearchAndListField",
        "code": "public void chooseSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input | //label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//following-sibling::c-model-lookup-revamp//.//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div/..//..//..//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')]| //label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//ancestor::lightning-input//following-sibling::div//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')] | //label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//ancestor::lightning-layout-item//following-sibling::div//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')]\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseSearchAndListField`, is used to interact with a search and list field on a web page. The method takes two string parameters: `labelName` and `value`. \n\nThe method first checks if the provided value is not empty. If it's not empty, it attempts to perform the following actions:\n\n1. Waits for an element matching the searchField XPath expression.\n2. Scrolls to the element using the scrollbycordinates method.\n3. Checks if the element is displayed within a certain time limit (elementLoadWaitTime).\n4. If the element is displayed, highlights it using the highLighterMethod, enters the provided value into the field using the typeIn method, waits for 2 seconds, and then checks if an element matching the lnk_zipCity XPath expression is displayed.\n5. If the lnk_zipCity element is displayed, highlights it and clicks on it using the clickOn method. Waits again for 2 seconds.\n\nIf any of these steps fail (i.e., the element is not found or the value cannot be entered), the testStepFailed method is called with an error message indicating the failure. If the provided value is empty, the method also calls testStepFailed to indicate that a value must be provided.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enableSmartAddressChange",
        "code": "public void enableSmartAddressChange(String label) {\n\t\ttry {\n\t\t\tString addresschange = \"\" + label + \" #xpath=//span[text()='\" + label + \"'] | //p[text()='\" + label + \" ']\";\n\t\t\twaitForElement(addresschange, 5);\n\t\t\tif (isElementDisplayed(addresschange, 5)) {\n\t\t\t\thighLighterMethodManualScreenShot(addresschange, \"Expected field is Available : \"+label);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enableSmartAddressChange \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enableSmartAddressChange`, enables a smart address change feature by searching for an element with the specified label and then verifying its presence on the screen. If the element is found, it takes a manual screenshot using the `highLighterMethodManualScreenShot` method. If the element is not found, it marks the test step as failed. The method uses a try-catch block to handle any exceptions that may occur during execution.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyAddressFieldsDisabled",
        "code": "public void verifyAddressFieldsDisabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is disabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n\t\t}\n\t}\n\n\t/*\n\t * public void verifySmartAddressChangeDisabled(String label) { try { String\n\t * addresschange = \"\" + label + \" #xpath=//span[text()='\" + label +\n\t * \"']/..//span[contains(@id,'toggle')]\"; waitForElement(addresschange, 5); if\n\t * (isElementDisplayed(addresschange, 5)) { String getareaDisabledAttributeValue\n\t * = findWebElement(addresschange).getAttribute(\"disabled\"); if\n\t * (getareaDisabledAttributeValue.equals(\"true\")) { manualScreenshot(label +\n\t * \" field is disabled as expected\"); } else { testStepFailed(label +\n\t * \" field is not disabled\"); } } else { testStepFailed(label +\n\t * \" is not present\"); } } catch (Exception e) {\n\t * testStepFailed(\"Failed in verifySmartAddressChangeDisabled \" +\n\t * e.getClass().getName()); } }\n\t */",
        "description": "Here are brief descriptions of the two Java methods:\n\n**1. `verifyAddressFieldsDisabled(String labelName)`**\n\nThis method verifies that a specific address field with the given label name is disabled. It uses an XPath expression to locate the input element, waits for it to be displayed, and then checks if its \"disabled\" attribute has a value of \"true\". If the field is indeed disabled, it takes a manual screenshot as confirmation. If not, it fails the test step.\n\n**2. `verifySmartAddressChangeDisabled(String label)`**\n\nThis method verifies that a specific smart address change toggle with the given label is disabled. It uses an XPath expression to locate the span element containing the toggle, waits for it to be displayed, and then checks if its \"disabled\" attribute has a value of \"true\". If the toggle is indeed disabled, it takes a manual screenshot as confirmation. If not, it fails the test step.\n\nIn both methods, if any error occurs during execution (e.g., element not found or timeout), the method catches the exception and reports a failure in the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifySmartAddressChangeDisabled",
        "code": "public void verifySmartAddressChangeDisabled(String label) {\n\t\ttry {\n\t\t\tString addresschange = \"\" + label + \" #xpath=//span[text()='\" + label + \"']//..//input\";\n\t\t\twaitForElement(addresschange, 5);\n\t\t\tif (isElementDisplayed(addresschange, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(addresschange).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.contains(\"true\")) {\n\t\t\t\t\tmanualScreenshot(label + \" field is disabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(label + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySmartAddressChangeDisabled \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySmartAddressChangeDisabled`, verifies that a specific smart address change field is disabled. It takes a string parameter `label` which represents the label of the field to be checked.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression based on the provided label.\n2. It waits for up to 5 seconds for the element identified by the XPath expression to be displayed using the `waitForElement` method.\n3. If the element is displayed, it checks if the \"disabled\" attribute of the element contains the value \"true\". If it does, it takes a manual screenshot as evidence that the field is disabled as expected.\n4. If the field is not disabled or is not present at all, the test step fails with an appropriate error message.\n5. If any exception occurs during the execution of this method, it catches the exception and reports a failure in verifying the smart address change field.\n\nIn summary, this method verifies that a specific smart address change field is disabled and takes a screenshot as evidence if it's expected to be disabled.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getTextFromCkycTable",
        "code": "public String getTextFromCkycTable(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//tbody//tr//td[contains(text(),'\" + labelName + \"')]//following-sibling::td\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = getText(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field value is not populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromCkycTable\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}",
        "description": "This Java method retrieves the text value from a table cell in a web page, specified by a given label name. It uses Selenium WebDriver to interact with the page and perform the following steps:\n\n1. Waits for the page to load.\n2. Finds the target table cell using an XPath expression that contains the provided label name.\n3. Waits for the element to be displayed (up to 10 seconds).\n4. Checks if the element is displayed within a certain time limit (5 seconds). If not, it fails the test step.\n5. Retrieves the text value from the target table cell and stores it in a variable `fieldValue`.\n6. If the field value is empty, it fails the test step with an error message indicating that the field value is not populated.\n\nThe method returns the retrieved text value as a string. If any exceptions occur during execution (e.g., page load failure or element not found), it catches the exception and fails the test step with an error message.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getTextvalue",
        "code": "public String getTextvalue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Field = labelName + \" value#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//button | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//span | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//following-sibling::div//span//span | //label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//following-sibling::input\";\n\t\t\twaitForElement(Field, 5);\n\t\t\tif (isElementDisplayed(Field, 3)) {\n\t\t\t\tvalue = getText(Field);\n\t\t\t\tif (value.isEmpty() || value == null) {\n\t\t\t\t\tvalue = getAttributeValue(Field, \"value\");\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(labelName + \" has value of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" Field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextvalue. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextvalue`, retrieves the text value associated with a given label name. It uses XPath expressions to locate the element containing the desired text value and then extracts the text or attribute value (if the element is an input field). The method also includes error handling and logging mechanisms.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getTextvalue1",
        "code": "public String getTextvalue1(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Field = labelName + \" value#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//..//input\";\n\t\t\twaitForElement(Field, 5);\n\t\t\tif (isElementDisplayed(Field, 3)) {\n\t\t\t\tvalue = findWebElement(Field).getAttribute(\"value\");\n\t\t\t\thighLighterMethod1(Field);\n\t\t\t\tmanualScreenshot(labelName + \" has value of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" Field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextvalue1. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, named `getTextvalue1`, takes a `String` parameter `labelName` and attempts to retrieve the text value associated with a UI element labeled with the provided name.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression by concatenating the `labelName` with some static text.\n2. It uses this XPath expression to locate the corresponding UI element (presumably an input field).\n3. If the element is found and displayed, it retrieves the value attribute of the element using `getAttribute(\"value\")`.\n4. It highlights the found element using a separate method `highLighterMethod1` and takes a manual screenshot with a descriptive filename.\n5. If the element is not present or cannot be retrieved within a certain timeout (3 seconds), it logs a test step failure.\n6. In case of any exception during this process, it logs another test step failure with the exception details.\n7. The method returns the retrieved text value as a `String`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickNearByButton",
        "code": "public void clickNearByButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"']//parent::lightning-button\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickNearByButton`, attempts to click a button with a specific text value near by. It takes a `String` parameter `value` which is used to construct an XPath locator for the button.\n\nHere's what it does:\n\n1. Constructs an XPath locator by concatenating the input `value` with an XPath expression that targets a button element with the same text value.\n2. Waits up to 10 seconds for the element to be displayed using the `waitForElement` method.\n3. Checks if the element is displayed within 10 seconds using the `isElementDisplayed` method.\n4. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method, highlights it using the `highLighterMethod`, and then clicks on it using the `clickOnSpecialElement` method.\n5. If the element is not displayed within 10 seconds or if any exception occurs during these steps, it fails the test step with a message indicating that the button was not found or an error occurred.\n\nNote that this method catches any exceptions that occur during its execution and reports them as test failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "checkMandatoryField",
        "code": "public void checkMandatoryField(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//label[text()='\" + value + \"']//abbr\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tvalue = getText(link);\n\t\t\t\tif (value.equalsIgnoreCase(\"*\")) {\n\t\t\t\t\tmanualScreenshot(value + \" mandatory fields are marked as *\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" mandatory fields are not marked as *\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to checkMandatoryField \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `checkMandatoryField`, checks if a specific mandatory field on the webpage is marked as `*` and takes a screenshot or reports a failure accordingly. \n\nThe method takes a `String` parameter `value`, which represents the name of the mandatory field to be checked. It uses this value to construct an XPath expression that locates the corresponding label element. The method then waits for the element to be displayed, scrolls to it if necessary, and highlights it using another method (not shown). \n\nIf the element is found and its text matches `*`, the method takes a manual screenshot with a message indicating that the mandatory field is marked as required. If the element's text does not match `*` or if the element is not found, the method reports a test step failure. In case of any exception during the execution of this method, it also reports a test step failure.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyCustomerImagePresent",
        "code": "public void verifyCustomerImagePresent() {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//div//img[contains(@src,'data')]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(\"Customer Image Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer Image Not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCustomerImagePresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyCustomerImagePresent`, is used to verify if a customer image is present on a web page. Here's what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad` method.\n2. It specifies an XPath expression (`targetField`) that targets an `<img>` element with a source attribute containing the string \"data\".\n3. It waits up to 10 seconds for the specified element to be displayed using the `waitForElement` method.\n4. If the element is displayed, it checks if the image is visible on the page within a 5-second timeout using the `isElementDisplayed` method. \n5. If the image is present, it takes a manual screenshot with the caption \"Customer Image Present\".\n6. If the image is not present or an exception occurs during execution, it fails the test step and logs an error message.\n\nThis method is likely part of a larger automated testing framework for web applications, possibly using a tool like Selenium WebDriver.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyModelNameList",
        "code": "public void verifyModelNameList(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div//input[@placeholder='\" + labelName + \"']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value\n\t\t\t\t\t\t+ \"#xpath=//div//input[@placeholder='Model Name']//ancestor::c-model-lookup//ul//li//span//following-sibling::span\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tList<WebElement> modelNames = findWebElements(lookupValue);\n\t\t\t\t\tfor (int i = 0; i < modelNames.size(); i++) {\n\t\t\t\t\t\tString model = modelNames.get(i).getText().trim();\n\t\t\t\t\t\tif (model.contains(value) || model.contains(value.toUpperCase())) {\n\t\t\t\t\t\t\thighLighterMethod(model);\n\t\t\t\t\t\t\tmanualScreenshot(labelName + \" field has same model lookup value - \" + model);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(labelName + \" field has differnt model lookup values \" + model\n\t\t\t\t\t\t\t\t\t+ \" instead of \" + value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyModelNameList \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyModelNameList`, is used to verify the model name lookup values against a given value. It takes two parameters: `labelName` and `value`. \n\nThe method first attempts to locate an input field with the specified `labelName` and placeholder text matching the `labelName`. If found, it scrolls to the element, types in the provided `value`, waits for the page to load, and then checks if a list of model names is displayed. \n\nIf the list of model names is present, it iterates through each model name, trimming any whitespace from the text, and checks if the model name contains the original `value` (case-insensitive). If a match is found, it highlights the matching model name using a separate method (`highLighterMethod`) and takes a screenshot with a descriptive filename. \n\nIf no matches are found or if the list of model names is not present, the test step fails with an appropriate error message. The method also catches any exceptions that may occur during execution and reports a failure with the exception's class name.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String RadioLabel) {\n\t\ttry {\n\t\t\tString radibutton = \"Radio Button#xpath=//lightning-tab[contains(@class,'show')]//span[text()='\"+RadioLabel+\"']/..//span[@class='slds-radio_faux'] | //div[text()='\"+RadioLabel+\" ']//input | //span[text()='\"+RadioLabel+\"']//parent::label[@class='slds-radio__label']/span[1]\";\n\t\t\twaitForElement(radibutton, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(radibutton, 5)) {\n\t\t\t\tscrollToWebElement(radibutton);\n\t\t\t\tclickOnSpecialElement(radibutton);\n\t\t\t\tmanualScreenshot(\"Selected \" + RadioLabel + \" radio button\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(RadioLabel + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on Radio Button. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRadioButton`, clicks on a radio button with the specified label using Selenium WebDriver. It takes a string parameter `RadioLabel` which is used to locate the radio button element.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the radio button element based on the provided `RadioLabel`.\n2. It waits for the element to be present using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element and clicks on it using the `clickOnSpecialElement` method.\n4. If the element is not displayed, it fails the test step with an error message indicating that the radio button is not present.\n5. In case of any exception during the execution of the method, it catches the exception and fails the test step with a detailed error message.\n\nThe method also takes manual screenshots after successfully selecting the radio button, which can be useful for debugging purposes.",
        "input": [
            "String RadioLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnGenerateOtpButton",
        "code": "public void clickOnGenerateOtpButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=(//button[text()='\" + value + \"'])[2]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOn(link);\n\t\t\t\tmanualScreenshot(\"Clicked on : \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnGenerateOtpButton`, simulates a click on a button with a specific text value. It takes a string parameter `value` which is used to construct an XPath locator for the button. The method waits for the element to be displayed, scrolls to it if necessary, highlights it using a highlighter tool (if available), and then clicks on it. If the element is not present or the click operation fails, the test step is marked as failed.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getOppurtunityId",
        "code": "public String getOppurtunityId() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Opportunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')]\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\ttestStepInfo(\"$ Opportunity ID Created : \" + opportunityValue);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, \" Opportunity ID Created : \" + opportunityValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opportunity id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOpportunityId \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `getOppurtunityId()`, retrieves the ID of an opportunity from a web page. It uses various Selenium WebDriver methods to:\n\n1. Wait for the page to load\n2. Find the opportunity element using XPath\n3. Verify if the element is displayed and scroll to it if necessary\n4. Get the text value of the opportunity element (i.e., the ID)\n5. Log a test step with the opportunity ID and take a manual screenshot\n\nIf any of these steps fail, the method catches the exception and logs a failure message. The method returns the retrieved opportunity ID as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getCustomerId",
        "code": "public String getCustomerId() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"customer/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\tmanualScreenshot(\"Successfully got customer id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get customer id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, `getCustomerId`, attempts to extract a customer ID from the current URL of a web driver. It splits the URL into parts using the substring \"customer/\" as a delimiter, then further splits the last part of the URL using \"/\" as a delimiter to extract the OCR ID. If the extraction is successful, it takes a manual screenshot with the extracted ID and returns it. If the extraction fails or an exception occurs, it reports a test step failure and returns null.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getRequiredDetailsErrorMessageWithFail",
        "code": "public void getRequiredDetailsErrorMessageWithFail() {\n\t\tString errorMessage = null;\n\t\ttry {\n\t\t\tString field = \"Error Header#xpath=//div[contains(@class,'open active')]//span[text()='Review the following errors'] | //div[contains(@class,'open active')]//span[text()='Review the errors on this page.']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//div[contains(@class,'open active')]//ul[@class='errorsList']//li\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\terrorMessage = getText(fieldValidation);\n\t\t\t\ttestStepFailed(\"Unable to save due to error : \" + errorMessage);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Successfully saved\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessageWithFail \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `getRequiredDetailsErrorMessageWithFail`, appears to be a part of an automated testing framework. It attempts to retrieve error messages related to saving data and handles potential failures by taking screenshots and recording test step failure.\n\nHere's a brief summary:\n\n1. The method waits for the specified element (`field`) to become visible within 10 seconds.\n2. If the element is displayed, it retrieves the text content of another element (`fieldValidation`) using the `getText()` method.\n3. It then checks if an error message was found and, if so, marks a test step as failed with the error message.\n4. If no error message is found, it takes a manual screenshot to confirm successful saving.\n5. The method catches any exceptions that may occur during execution and records a test step failure with the exception class name.\n\nIn summary, this method is designed to handle errors related to saving data and provides visual confirmation of success or failure through screenshots.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyMobileValidationError",
        "code": "public void verifyMobileValidationError(String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//lightning-tab[@role='tabpanel']//div\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired instead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(expectedMessage + \" Error message not displayed under\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyMobileValidationError. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMobileValidationError`, is used to verify if a specific error message is displayed when an expected validation error occurs on a mobile device. \n\nThe method takes one parameter, `expectedMessage`, which is the expected error message that should be displayed. The method checks if the error message field is displayed using the `isElementDisplayed` method, and then retrieves the actual error message text using the `getText` method.\n\nIf the error message matches the expected message, it highlights the error field using the `highLighterMethod1` method and takes a manual screenshot with the error message as the filename. If the error messages do not match, the test step fails. \n\nIf the error message field is not displayed, the test step also fails. The method catches any exceptions that may occur during execution and fails the test step if an exception is thrown.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyMobileValidationErrorNotPresent",
        "code": "public void verifyMobileValidationErrorNotPresent(String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//lightning-tab[@role='tabpanel']//div\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\ttestStepFailed(\"Validation is fired : \" + errorMessage);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(expectedMessage + \" Error message is not displayed as expected\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyMobileValidationErrorNotPresent. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMobileValidationErrorNotPresent`, is used to verify that a specific error message is not displayed on the screen after a certain action. \n\nThe method takes one parameter, `expectedMessage`, which is expected to be an error message. The method checks if an element with the specified XPath is displayed within 3 seconds using the `isElementDisplayed` method. If the element is displayed and contains an error message, it calls another method `highLighterMethod1` to highlight the element and then fails the test step with a message including the error message. \n\nIf the element is not displayed or does not contain the expected error message, the method takes a manual screenshot with the provided `expectedMessage` as the file name. If any exception occurs during this process, it also fails the test step with an error message that includes the type of exception.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnOppIdWithoutRefresh",
        "code": "public String clickOnOppIdWithoutRefresh() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')] |  //div[text()='OPPORTUNITY NAME']//parent::div//a\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\ttestStepInfo(\"$  Opportunity ID Created : $\" + opportunityValue);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, \" Opportunity ID Created : \" + opportunityValue);\n\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppIdWithoutRefresh \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnOppIdWithoutRefresh()`, simulates a user clicking on an Opportunity ID link without refreshing the page. \n\nHere's what it does:\n\n1. Waits for the page to load.\n2. Locates and waits for an Opportunity ID link (identified by its XPath) to be displayed within 10 seconds.\n3. If the link is displayed, scrolls to the link, gets its text value (the Opportunity ID), takes a manual screenshot of the screen highlighting the link, clicks on the link, and waits for 2 seconds.\n4. If the link is not displayed, fails the test step with an error message.\n5. In case of any exception during the execution of this method, it also fails the test step with an error message.\n\nThe method returns the text value (Opportunity ID) of the clicked link.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyDropDownValue",
        "code": "public void verifyDropDownValue(String labelName, String values) {\n\t\tString[] dropDownValues = values.split(\",\");\n\t\tList<String> value = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | //label[contains(text(),'\" + labelName\n\t\t\t\t+ \"')]//ancestor::div//div//button[contains(@aria-label,'\" + labelName + \"')]\";\n\t\t\tString dropDownList = \"Xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::lightning-combobox/div/lightning-base-combobox/div/div[@role='listbox']/lightning-base-combobox-item/span[@class='slds-media__body']/span | //label[contains(text(),'\" + labelName\n\t\t\t\t+ \"')]/ancestor::lightning-combobox//div/lightning-base-combobox//div/div[@role='listbox']/lightning-base-combobox-item/span[@class='slds-media__body']/span\";\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tif (isElementDisplayed(dropDownList, 10)) {\n\t\t\t\t\tList<WebElement> findWebElements = findWebElements(dropDownList);\n\t\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\t\tif (!text.equalsIgnoreCase(\"--None--\")) {\n\t\t\t\t\t\t\tvalue.add(text);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < dropDownValues.length; i++) {\n\t\t\t\t\t\tif (dropDownValues[i].equalsIgnoreCase(value.get(i))) {\n\t\t\t\t\t\t\ttestStepPassed(dropDownValues[i] + \" is present in the list\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value.get(i) + \" new value added in list\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmanualScreenshot(\"List of exepected values are present in \" + labelName);\n\t\t\t\t\tclickOn(dropdown);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Drop down values are not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDropDownValue \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDropDownValue`, is used to verify the values in a dropdown list. It takes two parameters: `labelName` and `values`. \n\nThe method first constructs an XPath expression to locate the dropdown element based on the provided label name. It then clicks on the dropdown and verifies if the expected values are present in the list. The expected values are passed as a comma-separated string.\n\nThe method checks each value from the list against the expected values and reports whether they match or not. If all values match, it takes a manual screenshot to capture the verification result. \n\nIf any step fails (e.g., dropdown is not present or values do not match), the method will report the failure and take a manual screenshot as well.\n\nThe method also catches any exceptions that might occur during its execution and reports them as failures.",
        "input": [
            "String labelName",
            "String values"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getCustomerTypeAndCompare",
        "code": "public String getCustomerTypeAndCompare(String labelName, String expectedValue) {\n\t\tString actualValue = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName + \"']/../div/div/span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tactualValue = getText(targetField);\n\t\t\t\tif (actualValue.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" has \" + actualValue + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(actualValue + \" Value is not matching with expected value \" + expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCustomerTypeAndCompare\" + e.getClass().getName());\n\t\t}\n\t\treturn actualValue;\n\t}",
        "description": "This Java method, `getCustomerTypeAndCompare`, compares the expected value with the actual value of a specific field on a web page. The method takes two input parameters: `labelName` and `expectedValue`. \n\nIt uses an XPath expression to locate the target field on the page, waits for the element to be displayed, and then retrieves its text content (actual value). If the actual value matches the expected value, it highlights the field using a custom highlighting method (`highLighterMethod1`) and takes a manual screenshot. If the values do not match, it marks the test step as failed. \n\nIf the target field is not present on the page, or if any other exception occurs during the process, the method will also mark the test step as failed. The actual value of the field is returned by the method.",
        "input": [
            "String labelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyFieldIsNotPresentInCustomerTab",
        "code": "public void verifyFieldIsNotPresentInCustomerTab(String lable) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//div[text()='\" + lable + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (!(isElementPresent(button))) {\n\t\t\t\tmanualScreenshot(lable + \" tabs is not present in the webpage as Expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(lable + \" Element is present in the webpage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyFieldIsNotPresentInCustomerTab \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsNotPresentInCustomerTab`, verifies that a specific field or button with the given label is not present in the customer tab of a webpage. The method uses Selenium WebDriver's `waitForElement` and `isElementPresent` methods to check if the element exists after a certain timeout period (10 seconds). If the element is found, it takes a manual screenshot as evidence of the failure and marks the test step as failed. If an exception occurs during the execution of this method, it also marks the test step as failed with an error message.",
        "input": [
            "String lable"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "validateSchemeDescription",
        "code": "public void validateSchemeDescription(String labelName, String value) {\n\t\ttry {\n\n\t\t\tString textValue = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//div//input\";\n\t\t\twaitForElement(textValue);\n\t\t\tif (isElementDisplayed(textValue, 10)) {\n\t\t\t\tscrollToWebElement(textValue);\n\t\t\t\ttypeIn(textValue, value);\n\t\t\t\twaitTime(2);\n\t\t\t\tString description = \"SchemeIDdescription#xpath=//li//span//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tString text = findWebElement(description).getText();\n\t\t\t\tString desc[] = text.split(\"\\\\|\");\n\t\t\t\tString schemename = desc[0] + \" \" + desc[1];\n\n\t\t\t\tif (desc[0].contains(value)) {\n\t\t\t\t\tmanualScreenshot(\"Scheme name: \" + schemename + \" is present in description\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Scheme ID is not present in description\");\n\t\t\t\t}\n\t\t\t\tif (desc[2].contains(\"%\")) {\n\t\t\t\t\tmanualScreenshot(\"Scheme LTV value: \" + desc[2] + \" is present in description\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Scheme LTV % is not present in description\");\n\t\t\t\t}\n\n\t\t\t\tif (desc[3].contains(\"%\")) {\n\t\t\t\t\tmanualScreenshot(\"ROI value: \" + desc[3] + \" is present in description\");\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"ROI % is not present in description\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present on page\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to enter value on \" + labelName + \" text box\" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, named `validateSchemeDescription`, validates the scheme description based on the given `labelName` and `value`. It performs the following tasks:\n\n1. Constructs an XPath expression to locate the element with the label name.\n2. Waits for the element to be displayed, scrolls to it if necessary, and types in the provided value.\n3. Verifies that the scheme name is present in the description by splitting the text using `|` as a delimiter and checking if the value is contained within the first two parts of the split string.\n4. Verifies that the LTV (Lifetime Value) percentage and ROI (Return on Investment) percentage are present in the description, splitting the text again to extract these values.\n5. If any of the above verifications fail, it logs a test step failure with an appropriate message.\n\nThe method also includes error handling using a `try`-`catch` block, which catches any exceptions that may occur during the execution and logs a test step failure with the exception type.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickEditIcon",
        "code": "public void clickEditIcon(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div//..//button\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditIcon. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditIcon`, simulates a click on an edit icon associated with a given label name. The method uses various Selenium WebDriver commands to:\n\n1. Construct an XPath expression to locate the edit button based on the provided label name.\n2. Wait for the element to be present and visible (up to 10 seconds).\n3. If the element is present, scroll to it, click on it, and wait for the page to load.\n4. If the element is not present, mark the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clearTextInCustomerDetails",
        "code": "public void clearTextInCustomerDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(field).clear();\n\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerDetails \" + e.getMessage());\n\t\t}\n\t}\n\n\t/*\n\t * New UI Methods\n\t */",
        "description": "This Java method, named `clearTextInCustomerDetails`, is used to clear the text input field associated with a specific label name on a web page. \n\nThe method takes two parameters: `labelName` and `value`. It first constructs an XPath expression based on the provided label name to locate the corresponding input field. \n\nIt then waits for the element to be present, and if it's not empty, it clears the existing text in the field by scrolling to the element, typing in the new value, waiting for a short period of time, and finally clearing the field.\n\nIf the field is not displayed or the method encounters any exceptions, it logs an error message indicating the failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectOrDeselectAddressEnrichmentCheckBox",
        "code": "public void selectOrDeselectAddressEnrichmentCheckBox(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//span[@part='indicator']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tscrollToElementTillPresent(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}else {\n\t\t\t\t\ttestStepInfo(labelName + \" checkbox is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" checkbox is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectAddressEnrichmentCheckBox`, is used to select or deselect a checkbox with the given label name on a web page. \n\nThe method first constructs an XPath expression based on the provided label name and waits for the corresponding element to be present. If the element is found, it scrolls to the element, checks if the checkbox is not selected (i.e., unchecked), and then selects it by clicking on the special element associated with the checkbox. If the checkbox was already checked, it logs a test step failure message.\n\nIf the element is not found or an exception occurs during the process, the method writes the error to the log file and reports the test as failed.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnGenderButtonWithoutWaitTime",
        "code": "public void clickOnGenderButtonWithoutWaitTime(String labelName, String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//label[text()='\" + labelName + \"']//..//following-sibling::div//button[text()='\"\n\t\t\t\t\t+ value + \"'] | //span[text()='\"+labelName+\"']//..//following-sibling::div//button[text()='\"+value+\"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnGenderButtonWithoutWaitTime`, simulates a click on a gender button based on the provided label name and value. Here's a brief overview of what it does:\n\n1. It constructs an XPath string to locate the gender button element based on the given label name and value.\n2. It waits for the element to be displayed using `waitForElement` method with a timeout of 10 seconds.\n3. If the element is displayed, it scrolls to the element using `scrollToWebElement`, highlights it using `highLighterMethod`, and then clicks on it using `clickOnSpecialElement`.\n4. If the element is not displayed within the given time limit (10 seconds), it marks the test step as failed with a message indicating that the element is not present.\n5. In case of any exception during the execution, it catches the exception and marks the test step as failed with a message indicating that the click operation failed.\n\nNote: The method seems to be part of a larger automation framework, and some of these methods (like `waitForElement`, `scrollToWebElement`, `highLighterMethod`, and `clickOnSpecialElement`) are not standard Java or Selenium WebDriver methods.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectSchemeCheckboxWithValue",
        "code": "public void selectSchemeCheckboxWithValue(String schemeValue) {\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\n\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//span[contains(text(),'\" + schemeValue\n\t\t\t\t\t\t+ \"')]//parent::div//input \";\n\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled]\";\n\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\tif (!isCheckBoxSelected(scheme)) {\n\t\t\t\t\t\tscrollToElement(scheme);\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\tclickOnSpecialElement(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" Scheme Value Check box is successfully checked\");\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\n\t\t\t\t\tclickOnButton(\"Proceed\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 10)) {\n\n\t\t\t\t\tif (!isElementPresent(disabledNxt_schemeBtn)) {\n\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\tselectSchemeCheckboxWithValue(schemeValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(schemeValue + \" not Present\");\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t/*\n\t * @author : Albert A\n\t * \n\t * @created Date : 07/02/2024 \n\t * Description : method to select scheme\n\t *\n\t */",
        "description": "This Java method, `selectSchemeCheckboxWithValue`, is used to select a scheme checkbox with the given value. The method attempts to find an element on the page that matches the provided scheme value and then checks if the checkbox associated with it is selected. If not, it clicks on the checkbox and takes a screenshot as confirmation. \n\nIf the \"Next Schemes\" button is displayed instead of the expected checkbox, the method checks if this button is enabled or disabled. If it's not disabled, it clicks on the button to proceed. If the button is disabled, it attempts to select the scheme again.\n\nThe method also handles any exceptions that may occur during its execution and logs a test step failure message with details about the exception if an error occurs.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectSchemeCheckboxWithoutValue",
        "code": "public void selectSchemeCheckboxWithoutValue() {\n\t\ttry {\n\t\t\t\tString scheme = \"#xpath=//div[@class='showScheme']//slot//lightning-layout-item//input[@class='checkBox']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\tif (!isCheckBoxSelected(scheme)) {\n\t\t\t\t\t\tscrollToElement(scheme);\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\tString schemeValue=getAttributeValue(scheme, \"value\");\n\t\t\t\t\t\tclickOnSpecialElement(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" Scheme Value Check box is successfully checked\");\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\n\t\t\t\tclickOnButton(\"Proceed\");\n\t\t\t\tmanualScreenshot(\"Scheme is Successfully selected\");\n\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"No Scheme were found in loan Details Section\");\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectSchemeCheckboxWithoutValue()`, is used to select a scheme checkbox without a value from the loan details section of a web page. \n\nHere's what it does:\n\n1. It waits for the page to load and then finds an element with the specified XPath (`#xpath=//div[@class='showScheme']//slot//lightning-layout-item//input[@class='checkBox']`).\n2. If the element is displayed, it scrolls to that element, highlights it, and checks if the checkbox is not selected.\n3. If the checkbox is not selected, it clicks on the checkbox, takes a manual screenshot of the successful check box selection, waits for the page to load again, and then clicks on the \"Proceed\" button.\n4. It also takes another manual screenshot after selecting the scheme.\n5. If no scheme is found in the loan details section, it fails the test step with an error message.\n6. In case of any exception during these steps, it catches the exception and fails the test step with a detailed error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectSchemeCheckboxWithoutValueAndProceed",
        "code": "public void selectSchemeCheckboxWithoutValueAndProceed() {\n\t\ttry {\n\t\t\t\tString scheme = \"#xpath=//div[@class='showScheme']//slot//lightning-layout-item//input[@class='checkBox']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\tif (!isCheckBoxSelected(scheme)) {\n\t\t\t\t\t\tscrollToElement(scheme);\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\tString schemeValue=getAttributeValue(scheme, \"value\");\n\t\t\t\t\t\tclickOnSpecialElement(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" Scheme Value Check box is successfully checked\");\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\t\t\t\n\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"No Scheme were found in loan Details Section\");\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectSchemeCheckboxWithoutValueAndProceed()`, is used to select a scheme checkbox without a value attribute and proceed with the test case. Here's a brief overview of what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It then uses the `waitForElement()` method to wait for an element matching the specified XPath (`\"#xpath=//div[@class='showScheme']//slot//lightning-layout-item//input[@class='checkBox']\"`).\n3. If the element is displayed, it scrolls to that element using the `scrollToWebElement()` method.\n4. It highlights the element using the `highLighterMethod()` method.\n5. If the checkbox is not selected, it proceeds to select the checkbox by:\n\t* Scrolling to the element again using `scrollToElement()` and `scrollToWebElement()`.\n\t* Getting the value attribute of the checkbox using `getAttributeValue()`.\n\t* Clicking on the special element (the checkbox) using `clickOnSpecialElement()`.\n\t* Taking a manual screenshot with a message indicating that the scheme value checkbox is successfully checked.\n6. If no scheme elements are found, it fails the test step with an error message.\n\nThe method also includes exception handling to catch any errors that may occur during execution and report them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectDropdownValue",
        "code": "public void selectDropdownValue(String label,String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//span//span[text()='\" + dealerName + \"']\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethodManualScreenShot(dealer, label +\" Selected values is : \"+dealerName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(label +\" dropdown is not present\");\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label +\" value is Empty.\");\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage\");\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectDropdownValue`, is used to select a value from a dropdown menu by label and dealer name. \n\nThe method takes two parameters: `label` (the text of the dropdown option) and `dealerName` (the name of the dealer). It uses Selenium WebDriver to interact with the webpage.\n\nHere's what it does:\n\n1. If the `dealerName` is not empty, it:\n   - Finds the dropdown menu by its label\n   - Scrolls down to the dropdown menu if necessary\n   - Clicks on the dropdown menu to expand it\n   - Checks if the dealer name is present in the dropdown options\n   - If the dealer name is found, clicks on it and waits for the page to load\n   - Takes a screenshot of the manual screen\n\n2. If the `dealerName` is empty, or if the dropdown menu is not found, or if the dealer name is not selected, it fails the test step with an appropriate error message.\n\n3. If any exception occurs during the process, it catches the exception and fails the test step with a generic error message.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectSchemeTypeInModelSelection",
        "code": "public void selectSchemeTypeInModelSelection(String label, String value) {\n\t\ttry {\n\t\t\tString fieldName = label + \"#xpath=//label[contains(text(),'\"+label+\"')]//parent::slot//following-sibling::select\";\n\t\t\tString fieldvalue = label + \"#xpath=//label[contains(text(),'\"+label+\"')]//parent::slot//following-sibling::select//option[@label='\"+value+\"']|//label[contains(text(),'\"+label+\"')]//parent::slot//following-sibling::select//option[text()='\"+value+\"']\";\n    \t\twaitForElement(fieldName, 10);\n\t\t\tif (isElementPresent(fieldName)) {\n\t\t\t\tclickOn(fieldName);\n\t\t\t\twaitForElement(fieldvalue);\n\t\t\t\tclickOn(fieldvalue);\n\t\t\t\ttestStepPassed(label + \" field selected value \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" Element is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to selectSchemeTypeInModelSelection \" + e.getClass().getName());\n\t\t}\n\t}\n\t/*\n\t * @author : Albert A\n\t * \n\t * @created Date : 04/12/2023 Description : method to drag the slider in Model Selection Tab\n\t * \n\t * @param : labelName is the field name\n\t * \n\t * @return : return as void\n\t */",
        "description": "This Java method, `selectSchemeTypeInModelSelection`, is used to select a specific value from a dropdown list (or \"select\" element) in a Model Selection tab. \n\nThe method takes two parameters: `label` and `value`. The `label` parameter specifies the label of the dropdown list, while the `value` parameter specifies the value to be selected from that list.\n\nHere's what the method does:\n\n1. It constructs XPath expressions for the dropdown list field and its corresponding option values based on the provided `label` and `value`.\n2. It waits for the dropdown list field to be present and then clicks on it.\n3. It waits for the specific value to be present in the dropdown list and then selects that value.\n4. If the selection is successful, it logs a test step pass message with the selected label and value. \n5. If any exception occurs during the execution of this method, it logs a test step failure message with the exception details.\n\nNote: This method seems to be part of an automation testing framework for a web application, possibly using Selenium WebDriver.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "dragSliderInSchemeSelectionTab",
        "code": "public void dragSliderInSchemeSelectionTab(String label) {\n\t\ttry {\n\t\t\tString fieldName = label + \"#xpath=//span[text()='\"+label+\"']//parent::div//div[@class='slds-form-element__control']\";\n\t\t\twaitForElement(fieldName, 10);\n\t\t\tif (isElementPresent(fieldName)) {\n\t\t\t\tActions act = new Actions(driver);\n\t\t\t\tact.dragAndDropBy(findWebElement(fieldName),0,129).perform();\n\t\t\t\ttestStepPassed(label +\" slider moved successfully\");;\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" Element is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to dragSliderInSchemeSelectionTab \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author : Albert A\n\t * \n\t * @created Date : 04/12/2023 Description : method to drag the slider in Model Selection Tab\n\t * \n\t * @param : labelName is the field name\n\t * \n\t * @return : return as void\n\t */",
        "description": "This Java method, `dragSliderInSchemeSelectionTab`, is used to automate the process of dragging a slider in the Model Selection tab. The method takes a `String` parameter, `label`, which represents the label name of the field that contains the slider.\n\nThe method uses Selenium WebDriver's `Actions` class and `waitForElement` method to wait for the specified element (identified by its XPath) and then drag the slider 129 pixels downwards using the `dragAndDropBy` method. If the element is present, the method logs a success message; otherwise, it logs an error message.\n\nIf any exception occurs during the execution of the method, it catches the exception and logs an error message with the type of exception that occurred.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifySchemeAvailablityAfterSlider",
        "code": "public void verifySchemeAvailablityAfterSlider() {\n\t\ttry {\n\t\t\t\tString scheme = \" Scheme select button#xpath=//div[@class='schemeCard']//div//span[@class='schemeCode']\";\n\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled]\";\n\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 5);\n\t\t\t\tif (isElementPresent(scheme)) {\n\t\t\t\tif (isElementDisplayed(nxt_schemeBtn, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\tfor (WebElement string : findWebElements(scheme)) {\n\t\t\t\t\t\tString text = string.getText();\n\t\t\t\t\t\ttestStepPassed(\"Schemes are available for After slider change : \"+text);\n\t\t\t\t\t}\n\t\t\t\t\tif (!isElementPresent(disabledNxt_schemeBtn)) {\n\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tverifySchemeAvailablityAfterSlider();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"No scheme were found\");\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t/*\n\t * @author : Janaki S\n\t * \n\t * @created Date : 21/05/2022 Description : method to verify field is disabled\n\t * \n\t * @param : labelName is the field name\n\t */",
        "description": "This Java method, `verifySchemeAvailablityAfterSlider`, verifies that scheme options are available after a slider change. \n\nHere's what it does:\n\n1. It waits for the page to load and then waits for an element with the specified XPath (`scheme`) to be present.\n2. If the element is found, it scrolls to that element, takes a manual screenshot, and then checks if any scheme options are available by verifying the text of each option.\n3. If at least one scheme option is available, it clicks on the \"Next Schemes\" button (if it's not disabled) and recursively calls itself to verify the availability of schemes again.\n4. If no scheme options are found, it takes a manual screenshot with the message \"No scheme were found\".\n5. If any exception occurs during this process, it fails the test step with an error message including the type of exception that occurred.\n\nThis method is likely part of a larger automated testing framework for a web application, and its purpose is to ensure that the scheme options are properly displayed after a slider change.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyButtonIsDisabledOrEnabled",
        "code": "public void verifyButtonIsDisabledOrEnabled(String labelName) {\n\t\tString getareaDisabledAttributeValue=null;\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//button[text()='\" + labelName + \"'] | //input[@value='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tgetareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue==null||getareaDisabledAttributeValue.isEmpty()) {\n\t\t\t\t\tgetareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"aria-disabled\");\n\t\t\t\t}\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" field is disabled as expected\");\n\t\t\t\t} else if (!getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" field is Enabled as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyButtonIsDisabledOrEnabled`, verifies whether a button or input field with the specified label name is disabled or enabled. It uses Selenium WebDriver to interact with the UI element.\n\nHere's what it does:\n\n1. It searches for an element (either a button or input field) with the given label name using XPath.\n2. If the element is found, it scrolls to the element and retrieves its `disabled` attribute value.\n3. If the attribute value is null or empty, it also checks the `aria-disabled` attribute value.\n4. Based on the attribute values, it verifies whether the field is disabled (if `getareaDisabledAttributeValue` equals \"true\") or enabled (if not).\n5. If the field is disabled, it highlights the element and takes a manual screenshot with a message indicating that the field is disabled as expected.\n6. If the field is enabled, it also highlights the element and takes a manual screenshot with a message indicating that the field is enabled as expected.\n7. If the field is not present or does not meet the expected state (disabled or enabled), it fails the test step.\n\nThe method catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnButtonInReappraisalPopup",
        "code": "public void clickOnButtonInReappraisalPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=(//button[text()='\" + buttonName + \"'])[1]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInReappraisalPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInReappraisalPopup`, simulates a user clicking on a specific button within a reappraisal popup. The method takes a `String` parameter `buttonName`, which is used to construct an XPath expression to locate the button.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression using the provided `buttonName` and searches for a button with that text.\n2. It waits for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it simulates a click on the button.\n4. If the element is not displayed within the timeout period, it marks the test step as failed with a message indicating that the button was not present.\n\nIf any exceptions occur during the execution of this method (e.g., if the element cannot be found or clicked), the method catches the exception and marks the test step as failed with a message describing the failure.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyFieldsAvailableInReappraisalPopup",
        "code": "public void verifyFieldsAvailableInReappraisalPopup(String fieldNames) {\n\t\ttry {\n\t\t\tString[] fieldValue=fieldNames.split(\",\");\n\t\t\tfor (int i = 0; i < fieldValue.length; i++) {\n\t\t\t\tString pathValue=\"#xpath=//div//label[text()='\"+fieldValue[i]+\"']\";\n\t\t\t\tif (isElementDisplayed(pathValue, 10)) {\n\t\t\t\t\tscrollToElement(pathValue);\n\t\t\t\t\tscrollToElementTillPresent(pathValue);\n\t\t\t\t\thighLighterMethodManualScreenShot(pathValue, fieldValue[i]+\" field is Available in Primary ReAppraisal\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldValue[i]+\" field is not present\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInReappraisalPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyFieldsAvailableInReappraisalPopup`, is used to verify the availability of specific fields in a ReAppraisal popup. The method takes a string parameter `fieldNames` which contains a comma-separated list of field names.\n\nThe method splits the input string into an array of field names and then iterates over each field name. For each field, it constructs an XPath expression using the field name and checks if the corresponding element is displayed on the screen using the `isElementDisplayed` method. If the element is displayed, it scrolls to that element, waits until the element is present using the `scrollToElementTillPresent` method, and takes a screenshot of the manual test step.\n\nIf any of these steps fail or if an exception occurs during the execution of the method, the method will report a test step failure.",
        "input": [
            "String fieldNames"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyReappraisalReasonDropdownAvailableInPopup",
        "code": "public void verifyReappraisalReasonDropdownAvailableInPopup(String fieldNames) {\n\t\ttry {\n\t\t\t\tString pathValue=\"#xpath=//label[text()='\"+fieldNames+\"']//parent::div\";\n\t\t\t\tif (isElementDisplayed(pathValue, 10)) {\n\t\t\t\t\tscrollToElement(pathValue);\n\t\t\t\t\tscrollToElementTillPresent(pathValue);\n\t\t\t\t\thighLighterMethodManualScreenShot(pathValue, fieldNames+\" field is Available in Primary ReAppraisal\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldNames+\" field is not present\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInReappraisalPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyReappraisalReasonDropdownAvailableInPopup`, is used to verify if a specific dropdown field named by the input parameter `fieldNames` is available and displayed in a popup. It uses various WebDriver methods such as `isElementDisplayed`, `scrollToElement`, and `highLighterMethodManualScreenShot` to perform the verification.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It takes a string input parameter `fieldNames` which represents the name of the field to be verified.\n2. It constructs an XPath path value using the input `fieldNames` and a predefined format (`\"#xpath=//label[text()='\"+fieldNames+\"']//parent::div\"`).\n3. It checks if the element at the constructed path is displayed within a certain time limit (10 seconds) using `isElementDisplayed`.\n4. If the field is displayed, it scrolls to that element using `scrollToElement`, then scrolls to the same element until it's present using `scrollToElementTillPresent`.\n5. It takes a manual screenshot of the highlighted element and field name using `highLighterMethodManualScreenShot`. This step is likely used for reporting or logging purposes.\n6. If the field is not displayed, it fails the test step with an error message.\n\nThe method also includes a catch block to handle any exceptions that might occur during the execution of the method. If an exception occurs, it fails the test step with an error message containing the type of exception that occurred.",
        "input": [
            "String fieldNames"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "getValueFromDisabledFieldInLoanDetails",
        "code": "public String getValueFromDisabledFieldInLoanDetails(String LabelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//label[contains(text(),'\"+LabelName+\"')]//parent::slot//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = findWebElement(targetField).getAttribute(\"value\");\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName +\" Value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDisabledField\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}",
        "description": "This Java method, `getValueFromDisabledFieldInLoanDetails`, retrieves the value from a disabled field with the specified label name in loan details. It uses Selenium WebDriver to interact with the webpage.\n\nHere's a step-by-step breakdown:\n\n1. The method waits for the page to load.\n2. It locates the target field by its XPath, which is a combination of a label containing the specified `LabelName` and an input field.\n3. It waits for the element to be displayed within 10 seconds.\n4. If the element is displayed, it retrieves the value attribute from the input field using Selenium's `getAttribute(\"value\")`.\n5. It highlights the target field using a separate method (`highLighterMethod1(targetField)`).\n6. If the value is not empty, it takes a manual screenshot with the label name and value.\n7. If the value is empty or the field is not present, it marks the test step as failed.\n\nThe method returns the retrieved value as a string. If an exception occurs during execution, it marks the test step as failed and returns `null`.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "validateSchemeDescriptionInLoanDetails",
        "code": "public String validateSchemeDescriptionInLoanDetails(String schemeValue) {\n\t\tString schemeparameter=\"\";\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\n\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//span[contains(text(),'\" + schemeValue\n\t\t\t\t\t\t+ \"')]//parent::div//input \";\n\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled]\";\n\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\tString schemeParameter = \"#xpath=//div[@data-name='\"+schemeValue+\"']/div//div[contains(text(),'Scheme LTV')]\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\tschemeparameter=getText(schemeParameter);\n\t\t\t\t\ttestStepPassed(schemeValue +\" get Scheme Ltv value sucessfully \"+schemeparameter);\n\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 10)) {\n\t\t\t\t\tif (!isElementPresent(disabledNxt_schemeBtn)) {\n\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\tselectSchemeCheckboxWithValue(schemeValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(schemeValue + \" not Present\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn schemeparameter;\n\t}",
        "description": "This Java method, named `validateSchemeDescriptionInLoanDetails`, is used to validate the scheme description in loan details. The method takes a `String` parameter `schemeValue` which represents the value of the scheme.\n\nHere's what the method does:\n\n1. It checks if the `schemeValue` is not empty.\n2. If it's not empty, it constructs several XPath expressions:\n\t* `scheme`: to locate the scheme select button with the given `schemeValue`.\n\t* `disabledNxt_schemeBtn` and `nxt_schemeBtn`: to locate the \"Next Schemes\" buttons, one of which might be disabled.\n\t* `schemeParameter`: to locate the div containing the scheme LTV value.\n3. It waits for the page to load and then waits for the `scheme` element to be displayed.\n4. If the `scheme` element is displayed, it scrolls to that element, gets the text of the `schemeParameter` element, and logs a test step as successful.\n5. If the `scheme` element is not displayed, but the \"Next Schemes\" button is, it checks if the disabled button is present. If it's not, it clicks on the \"Next Schemes\" button and selects the scheme with the given `schemeValue`.\n6. If any of these steps fail (e.g., the element is not found), it logs a test step as failed.\n7. Finally, it returns the value of the `schemeparameter` variable.\n\nThe method also includes some error handling using a `try-catch` block to catch and log any exceptions that might occur during its execution.",
        "input": [
            "String schemeValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownInCustomerDetailsPOAOVDType",
        "code": "public void selectValueFromDropdownInCustomerDetailsPOAOVDType(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString fieldName = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"+ dropdownName + \"']//parent::lightning-combobox//div//button |//label[text()='\" + dropdownName\t+ \"']//ancestor::lightning-combobox//div//button|//label[text()='\"+dropdownName+\"']//following-sibling::select\";\n//\t\t\tString fieldvalue = dropdownName + \"#xpath=//label[contains(text(),'\"+label+\"')]//parent::slot//following-sibling::select//option[@label='\"+value+\"']\";\n\t\t\twaitForElement(fieldName, 10);\n\t\t\tif (isElementPresent(fieldName)) {\n\t\t\t\tscrollToElement(fieldName);\n\t\t\t\tSelect select = new Select(findWebElement(fieldName));\n\t\t\t\tselect.selectByVisibleText(value);\n//\t\t\t\tclickOn(fieldName);\n//\t\t\t\twaitForElement(fieldvalue);\n//\t\t\t\tclickOn(fieldvalue);\n\t\t\t\thighLighterMethodManualScreenShot(fieldName, dropdownName + \" field selected value \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" Element is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to selectSchemeTypeInModelSelection \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `selectValueFromDropdownInCustomerDetailsPOAOVDType`, selects a value from a dropdown list in the Customer Details page of a Salesforce application. \n\nThe method takes two parameters: `dropdownName` (the name of the dropdown field) and `value` (the value to be selected). It uses Selenium WebDriver to perform the following actions:\n\n1. Waits for the dropdown element to be present.\n2. Scrolls to the dropdown element if it's not visible on the screen.\n3. Selects the specified value from the dropdown list using the `Select` class.\n\nIf the dropdown element is not present, the method fails the test step with an error message. If any exception occurs during the execution of this method, the method also fails the test step and logs the error.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "clickOnButtonInPostApprovalRevamp",
        "code": "public void clickOnButtonInPostApprovalRevamp(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//button[contains(text(),'\"+buttonName+\"')]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToElementTillPresent(button);\n\t\t\t\thighLighterMethodManualScreenShot(button, buttonName +\" button is Availabe in the page\");\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopupWithoutWaitTime \" + e.getClass().getName());\n\t\t}\n\t}\n\t/*\n\t * @author : Albert A\t * \n\t * @created Date : 15/04/2024 Description : method to enter Date\n\t * @param : labelName is the name of the field\n\t * @param : value is the date\n\t */",
        "description": "This Java method, `clickOnButtonInPostApprovalRevamp`, is used to click on a button with a specified name in a post-approval revamp scenario. The method uses various WebDriver methods and utilities to:\n\n1. Locate the button using an XPath expression.\n2. Wait for the element to be displayed (up to 10 seconds).\n3. Scroll to the element if it's not visible.\n4. Highlight the button and take a manual screenshot with the button name as part of the filename.\n5. Click on the button.\n\nIf the button is not present, the method fails the test step. In case of any exceptions, the method also fails the test step with an error message including the exception type.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "enterDateInRevamp",
        "code": "public void enterDateInRevamp(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"+labelName+\"')]//..//input\";////label//span[contains(text(),'\" + labelName+ \"')]//../following-sibling::div/input\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString m, y, d;\n\t\t\t\ty = value.split(\"-\")[0];\n\t\t\t\tm = value.split(\"-\")[1];\n\t\t\t\td = value.split(\"-\")[2];\n\t\t\t\ttypeIn(field, y);\n\t\t\t\tWebElement elm = driver.switchTo().activeElement();\n\t\t\t\telm.sendKeys(Keys.TAB);\n\t\t\t\telm.sendKeys(m);\n\t\t\t\telm.sendKeys(d);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field entered Date as \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate \" + e.getClass().getName());\n\t\t}\n\t}\n\t//Jaya Rames Added methos for regression",
        "description": "This Java method, `enterDateInRevamp`, enters a date value into a specific field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the input field based on the provided `labelName`. It then uses this expression to find the element, wait for it to be displayed, scroll to it if necessary, and enter the date value by typing in the year, month, and day using the `typeIn` method. \n\nAfter entering the date, the method waits for the page to load and takes a screenshot of the entered date as a manual screen shot. If the field is not present or any exception occurs during the process, it reports a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifySearchInExtendedWarrantiesValues",
        "code": "public String verifySearchInExtendedWarrantiesValues(String labelName, String value ,String expCondition) {\n\t\tString ccValue=\"\";\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()='\"+ labelName +\"']//..//div/input[contains(@placeholder,'Extended Warranties')]\";\n\t\t\twaitForElement(field, 30);;\n\t\t\tscrollbycordinates(field);\n//\t\t\tString substring = value.substring(0, 5);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tfindWebElement(field).clear();\n\t\t\t\ttypeIn(field,value );\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\"+value+\"')]\";\n\t\t\t\tList<WebElement> findWebElements = findWebElements(lookupValue);\n\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\tccValue= webElement.getText();\n\t\t\t\t\tif (ccValue.isEmpty()) {\n\t\t\t\t\t\ttestStepFailed(labelName + \" is Empty\");;\n\t\t\t\t\t}else {\n\t\t\t\t\tif (ccValue.contains(expCondition)) {\n\t\t\t\t\t\tmanualScreenshot(expCondition+\" is same as \"+ccValue);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttestStepFailed(expCondition + \"is same as\" +ccValue);\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\t\t}\n\t\treturn ccValue;\n\t}",
        "description": "This Java method, `verifySearchInExtendedWarrantiesValues`, verifies that a search value entered in an extended warranties field matches the expected condition. Here's a step-by-step breakdown:\n\n1. It takes three parameters: `labelName` (the label text), `value` (the input value), and `expCondition` (the expected condition).\n2. The method attempts to locate an element on the page using the provided `labelName` and an XPath expression.\n3. If the element is found, it scrolls to that element, clears any existing text, types in the new `value`, and waits for the page to load.\n4. It then searches for a web element with a specific XPath expression containing the original `value`.\n5. For each matching web element found, it extracts the text content (i.e., the lookup value) and checks if:\n\t* The extracted value is empty, in which case it fails the test step.\n\t* The extracted value contains the expected condition (`expCondition`), in which case it takes a manual screenshot to verify the match. If not, it fails the test step again.\n6. If the element is not found during the initial search, it fails the test step with an error message.\n7. In case of any exception, it catches the error and fails the test step with a generic error message.\n8. The method returns the final value of `ccValue`, which represents the matched lookup value.\n\nIn summary, this method is designed to verify that a search value entered in an extended warranties field matches the expected condition by searching for matching web elements and checking their text content.",
        "input": [
            "String labelName",
            "String value",
            "String expCondition"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "searchInExtendedWarranties",
        "code": "public void searchInExtendedWarranties(String labelName, String value) {\n\t\ttry {\n//\t\t\tString field = labelName + \"#xpath=//div[text()='\"+ labelName +\"']//..//div/input[contains(@placeholder,'Extended Warranties')]\";\n\t\t\tString field = labelName + \"#xpath=//div[text()='Available Extended Warranty(Search EXW)']//following::div/input[contains(@placeholder,'Search Available Extended Warranties')]\";\n\t\t\twaitForElement(field, 30);;\n//\t\t\tString substring = value.substring(0, 5);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field,value );\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOnSpecialElement(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Extended Warranty Selected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\t\t}\n\t}\n/*\n * @author        :  Albert A\n * @created Date  :  24/04/2024\n * Description    :  method to verify error message in Draft to Complete stage     \n * @param \t      :  validation is the expected message need to compare\n */",
        "description": "This Java method, `searchInExtendedWarranties`, is used to search for extended warranties based on a given label name and value. \n\nThe method takes two parameters: `labelName` and `value`. It uses these parameters to construct an XPath expression that targets the input field related to the specified label name. The method then waits for this element to be displayed, scrolls to it if necessary, types in the provided value, and verifies that the lookup value (i.e., the result of the search) is present on the page. If the lookup value is found, the method clicks on a special element related to the search result.\n\nIf any of these steps fail, the method reports an error by calling `testStepFailed`. The method also takes a manual screenshot when the extended warranty selection is successful.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyErrorPopupMessageInApprovalStage",
        "code": "public void verifyErrorPopupMessageInApprovalStage(String validation) {\n\tString errorValidation = null;\n\ttry {\n\t\tif (isElementPresent(error_Msg)) {\n\t\t\terrorValidation = findWebElement(error_Msg).getText().trim();\n\t\t\tif (errorValidation.contains(validation)) {\n\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t} else if (errorValidation.contains(\"Customer Submitted for Approval\")) {\n\t\t\t\tverifyErrorPopupMessageInApprovalStage(validation);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected validation is not fire - Got '\" + errorValidation + \"' - instead of \"\n\t\t\t\t\t\t+ validation);\n\t\t\t}\n\t\t} else {\n\t\t\ttestStepFailed(\"There is no error message is displayed\");\n\t\t}\n\t} catch (Exception e) {\n\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t}\n}",
        "description": "This Java method, `verifyErrorPopupMessageInApprovalStage`, verifies the content of an error popup message in an approval stage. \n\nThe method takes a `String` parameter `validation`, which is likely expected validation text. The method first checks if an element with the name `error_Msg` is present on the page. If it is, it retrieves the text of that element and trims any whitespace from the ends.\n\nIt then checks if the retrieved error message contains the provided `validation` string. If it does, the method takes a manual screenshot to capture the error message. \n\nIf the error message doesn't contain the expected validation, but instead contains the phrase \"Customer Submitted for Approval\", the method calls itself recursively with the same `validation` parameter.\n\nIf neither of these conditions is met, the method fails the test step because the expected validation was not found in the error message.\n\nFinally, if an exception occurs during the execution of this method, it fails the test step and logs the exception.",
        "input": [
            "String validation"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verify3in1StatusFields",
        "code": "public void verify3in1StatusFields(String label) {\n\ttry {\n\t\tString button = \"Button#xpath=//div[normalize-space(text())='\" + label + \"']\";\n\t\twaitForElement(button, 10);\n\t\tif (isElementPresent(button)) {\n\t\t\tborderHighLighterMethod(button);\n\t\t\tmanualScreenshot(label + \" is present in the Bajaj Finserv App Status as Expected\");\n\t\t} else {\n\t\t\ttestStepFailed(label + \"  is not present in the Bajaj Finserv App Status\");\n\t\t}\n\t} catch (Exception e) {\n\t\ttestStepFailed(\"Failed to verify3in1StatusFields \" + e.getClass().getName());\n\t}\n}",
        "description": "This Java method, `verify3in1StatusFields`, is used to verify the presence of a specific label in the Bajaj Finserv App Status. \n\nIt takes a `String` parameter `label` which represents the expected label to be found.\n\nThe method uses an XPath expression to locate an element with the given label within 10 seconds. If the element is present, it highlights the button using a `borderHighLighterMethod`, takes a manual screenshot with the label as the filename, and considers the test step as passed. \n\nIf the element is not found after 10 seconds or if any exception occurs during the execution of this method, it considers the test step as failed and logs the error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS_Revamp",
        "function_name": "verifyTextLineColorChange",
        "code": "public void verifyTextLineColorChange(String labelName, String value) {\n\ttry {\n\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"+labelName+\"')]//following-sibling::label\";\n\t\twaitForElement(field, 10);\n\t\tif (isElementDisplayed(field, 10)) {\n\t\t\tscrollToElement(field);\n\t\t\tscrollToWebElement(field);\n\t\t\tString valueofField=getAttributeValue(field,\"class\");\n\t\t\tif (valueofField.contains(value)) {\n\t\t\t\tmanualScreenshot(labelName+\" line colour is changed as expected\");\n\t\t\t}else {\n\t\t\t\ttestStepFailed(labelName+\" line colour is not changed\");\n\t\t\t}\t\t\n\t\t} \t\t\t\n\t\telse {\n\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t}\n\t} catch (Exception e) {\n\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t}\n}\n\n}",
        "description": "This Java method, `verifyTextLineColorChange`, verifies that the line color of a specific text label has changed as expected. \n\nThe method takes two parameters: `labelName` and `value`. It first constructs an XPath expression to locate the label element based on its name. The method then waits for the element to be displayed, scrolls to it if necessary, and checks if the element's class attribute contains the specified value. If it does, the test passes; otherwise, it fails.\n\nIf any exception occurs during the execution of this method, it will be caught and the test step will fail with a message indicating the error.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_FOS_Revamp",
        "function_name": "enterValueInGlobalSearchAndClick",
        "code": "public void enterValueInGlobalSearchAndClick(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\tString clickValue = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\twaitForElement(search,20);\n\t\t\tif (isElementDisplayed(search, 20)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchValue, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tif (isElementDisplayed(clickValue, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethodManualScreenShot(clickValue, \"Enter Value In Global Search : \"+value);\n\t\t\t\t\t\tclickOn(clickValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not auto populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchAndClick. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\t\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  01/04/2022\n\t * Description    :  Method to enter value in table search and click\n\t * @param         :  value is the value need search\n\t */",
        "description": "This Java method, `enterValueInGlobalSearchAndClick`, takes a string parameter `value` and performs the following actions:\n\n1. Waits for the page to load.\n2. Searches for an element with the specified XPath (`//div[@class='uiInput uiAutocomplete uiInput--default']//input`) and waits for it to be displayed within 20 seconds.\n3. If the element is found, types in the `value` into the search field using the `typeIn` method.\n4. Waits for the page to load again.\n5. Searches for an element with the XPath (`//a[@role='option']//parent::li[1]`) and waits for it to be displayed within 20 seconds (or the `elementLoadWaitTime`, whichever is longer).\n6. If the element is found, clicks on it using the `clickOn` method.\n7. Waits for the page to load again.\n8. Searches for an element with the XPath (`//a[@title='\" + value + \"']`) and waits for it to be displayed within 20 seconds (or the `elementLoadWaitTime`, whichever is longer).\n9. If the element is found, clicks on it using the `clickOn` method and takes a manual screenshot of the highlighted element.\n10. If any of the above steps fail, the method reports a test step failure with an error message.\n\nThe method also includes exception handling to catch and report any exceptions that may occur during execution.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_FOS_Revamp",
        "function_name": "enterValueInTableSearchAndClick",
        "code": "public void enterValueInTableSearchAndClick(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\tString searchValue = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchValue, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(searchValue, \"Enter Value In Table Search : \"+value);\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTableSearch. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  01/04/2022\n\t * Description    :  Method to enter get and click customer name\n\t * @return        :  value is return retrieved customer name\n\t */",
        "description": "This Java method, `enterValueInTableSearchAndClick`, enters a given value in a search table, clicks the search button, and then clicks on the resulting search result. The method uses Selenium WebDriver to interact with the web page. Here's a breakdown of what the method does:\n\n1. It takes a `String` parameter `value` that represents the value to be entered in the search table.\n2. It attempts to find an element matching the XPath expression `\"//div/input[@type='search']\"` (the search field) and waits for it to be displayed within 10 seconds.\n3. If the search field is found, it enters the given `value` into the field using Selenium's `sendKeys` method and then presses Enter to submit the search query.\n4. It waits for the page to load after submitting the search query.\n5. If a result matching the XPath expression `\"//a[@title='\" + value + \"']\"` (the search result) is displayed within 10 seconds, it highlights the element using `highLighterMethodManualScreenShot`, takes a screenshot of the element, and then clicks on the element using Selenium's `clickOn` method.\n6. If the search result is not found or the page does not load after submitting the search query, the method fails the test step with an error message.\n\nThe method also includes some basic error handling using a `try-catch` block to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_FOS_Revamp",
        "function_name": "clickCustomerName",
        "code": "public String clickCustomerName() {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString customerName = \"customerName #xpath=//span[@title='Customer']//parent::div//a\";\n\t\t\twaitForElement(customerName, 10);\n\t\t\tif (isElementDisplayed(customerName, 10)) {\n\t\t\t\tscrollToWebElement(customerName);\n\t\t\t\tvalue=getText(customerName);\n\t\t\t\thighLighterMethodManualScreenShot(customerName, \"Customer Name Available : \"+value);\n\t\t\t\tclickOn(customerName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer name is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickCustomerName. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n}",
        "description": "This Java method, `clickCustomerName`, is used to interact with a web element on a webpage that contains the customer name. Here's a brief description of what it does:\n\n1. It first defines an empty string variable `value` which will be used to store the text value of the customer name.\n2. The method then attempts to locate the customer name element using an XPath expression (`customerName`) and waits for 10 seconds for the element to appear.\n3. If the element is displayed, it scrolls to the element, retrieves its text value, and highlights the element with a manual screenshot (using `highLighterMethodManualScreenShot`).\n4. It then clicks on the customer name element using the `clickOn` method.\n5. If the element is not present or if any exception occurs during execution, it fails the test step with an appropriate error message.\n\nThe method returns the text value of the customer name (`value`).",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyCurrentStageOfOpportunity",
        "code": "public String verifyCurrentStageOfOpportunity(String stageName) {\n\t\tString stageValue=null;\n\t\ttry {\n\t\t\tString currentStage_Opp = \"Opprtunity In Stage#xpath=//li/a/span[contains(@class,'current')]/following-sibling::span\";\n\t\t\twaitForElement(currentStage_Opp, 20);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 10)) {\n\t\t\t\tstageValue = getText(currentStage_Opp);\n\t\t\t\tif (stageValue.equalsIgnoreCase(stageName)) {\n\t\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage as expected.\");\n\t\t\t\t\ttestStepInfo(\"$ Current Stage of Opp id - $\" +stageValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the opportunity stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn stageValue;\n\t}\n\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select value from drop down in edit box    \n\t * @param \t      :  dropdownName is the name of field\n\t * @param \t      :  value is input need to select\n\t */",
        "description": "This Java method, `verifyCurrentStageOfOpportunity`, verifies that an opportunity is currently in a specific stage. It takes a `stageName` as input and checks if the current stage of the opportunity matches the provided stage name.\n\nHere's what the method does:\n\n1. It waits for an element with the specified XPath to be displayed.\n2. If the element is displayed, it extracts the text value of that element (which represents the current stage of the opportunity).\n3. It compares the extracted stage value with the input `stageName`.\n4. If the values match, it takes a manual screenshot and logs a test step info message indicating that the opportunity is currently in the expected stage.\n5. If the values don't match or if the element is not displayed, it logs a test step failure message.\n\nThe method returns the extracted stage value as a `String`.",
        "input": [
            "String stageName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownInEditBox",
        "code": "public void selectValueFromDropdownInEditBox(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\"+dropdownName+\"']//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\"+dropdownName+\"']//..//following-sibling::div//span[text()='\"+value+\"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInEditBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select or deselect check box in document lib  \n\t * @param \t      :  labelname is the name of field\n\t * @param \t      :  status is whether select or deselect\n\t */",
        "description": "This Java method, `selectValueFromDropdownInEditBox`, is used to select a specific value from a dropdown list in an edit box. The method takes two parameters: `dropdownName` and `value`. \n\n- It first waits for the page to load and then locates the dropdown element with the given name.\n- If the dropdown is displayed, it then tries to locate the option with the given value within the dropdown.\n- If the option is found, it clicks on it and takes a manual screenshot as confirmation. \n- If the option is not found or the dropdown is not displayed, it fails the test step.\n\nThis method seems to be part of a larger automation framework for testing web applications, possibly using Selenium WebDriver.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectOrDeselectCheckBoxUnderDocumentLib",
        "code": "public void selectOrDeselectCheckBoxUnderDocumentLib(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = \"#xpath=//span[text()='\" + labelName + \"']/preceding-sibling::span/input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\ttestStepPassed(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(labelName + \" Check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\ttestStepPassed(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBoxUnderDocumentLib failed. Exception: \" + e.toString());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select click side arrow\n\t * @param \t      :  optionValue is option to click\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBoxUnderDocumentLib`, is used to check or uncheck a checkbox under a document library. It takes two parameters: `labelName` (the name of the label associated with the checkbox) and `status` (either \"check\" to select the checkbox or \"uncheck\" to deselect it). \n\nThe method uses Selenium WebDriver to perform the following actions:\n\n1. Locate the checkbox using an XPath expression.\n2. Wait for the element to be displayed.\n3. Check if the status is \"check\" or \"uncheck\".\n4. If the status is \"check\", check if the checkbox is not already selected, and if not, select it.\n5. If the status is \"uncheck\", check if the checkbox is already selected, and if so, deselect it.\n6. Log a test step as passed or failed based on the outcome.\n\nIf any exception occurs during execution, it logs an error message to a log file and fails the test.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectOptionfromSideArrowButton",
        "code": "public void selectOptionfromSideArrowButton(String optionValue) {\n\t\ttry {\n\t\t\tString menu = \"#xpath=//li[contains(@class,'oneActionsDropDown')] | //span[text()='Show more actions']//parent::button\";\n\t\t\twaitForElement(menu, 10);\n\t\t\tif (isElementPresent(menu)) {\n\t\t\t\tscrollToWebElement(menu);\n\t\t\t\tclickOn(menu);\n\t\t\t\tString option = optionValue + \"#xpath=//li//a//span[text()='\"+optionValue+\"']\";\n\t\t\t\tif (isElementDisplayed(option, 10)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Side arrow is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOptionfromSideArrowButton failed. Exception: \" + e.toString());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter date in edit box\n\t * @param \t      :  labelName is name of field\n\t * @param \t      :  value is date value\n\t */",
        "description": "This Java method, `selectOptionfromSideArrowButton`, selects an option from a dropdown menu that appears when clicking on the \"Show more actions\" button. \n\nIt takes one parameter `optionValue` which is the text of the option to be selected.\n\nThe method first waits for the dropdown menu to appear and then scrolls down to it if necessary. It then clicks on the menu and selects the specified option by clicking on its corresponding element. If the option is not present, the test fails with a message indicating that the option is missing. \n\nIf any exception occurs during this process, the method catches it, logs the error in a log file, and marks the test step as failed.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterDateInEditDialogueBox",
        "code": "public void enterDateInEditDialogueBox(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//label[contains(text(),'\"+labelName+\"')]//../following-sibling::div/input)[last()]\";\n\t\t\twaitForElement(field,10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDateInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter text in edit box\n\t * @param \t      :  labelName is name of field\n\t * @param \t      :  value is input value\n\t */",
        "description": "This Java method, `enterDateInEditDialogueBox`, enters a given `value` into an edit dialogue box with the specified `labelName`. The method uses Selenium WebDriver to perform the following steps:\n\n1. Creates an XPath expression to locate the edit field based on the `labelName`.\n2. Waits for the element to be displayed and clickable using `waitForElement` and `isElementDisplayed` methods.\n3. Scrolls to the element if it's not visible in the current viewport using `scrollToElement` method.\n4. Enters the `value` into the edit field using `typeIn` method.\n5. Waits for the page to load completely using `waitForPageToLoad` method.\n6. Takes a manual screenshot of the highlighted element using `highLighterMethodManualScreenShot` method.\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterValueInEditDialogueBox",
        "code": "public void enterValueInEditDialogueBox(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/..//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to upload document\n\t * @param \t      :  fileName is file location\n\t */",
        "description": "This Java method, `enterValueInEditDialogueBox`, is used to enter a value into an edit dialogue box with a specific label name. \n\nIt takes two parameters: \n- `labelName`: the name of the label associated with the edit field.\n- `value`: the value to be entered into the edit field.\n\nThe method attempts to find the edit field by its label name using XPath, waits for it to be displayed, scrolls to it if necessary, enters the provided value, and then takes a screenshot. If the element is not found or there's an exception during execution, the test step fails.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentToUpload",
        "code": "public void documentToUpload(String fileName) {\n\t\ttry {\n\t\t\twaitForElement(btn_upload, 10);\n\t\t\tif (isElementDisplayed(btn_upload, elementLoadWaitTime)) {\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\tfindWebElement(btn_upload).sendKeys(filePath + \"\\\\UploadDocuments\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded \" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\" Failed in documentToUpload Exception :\" + e.toString());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to get text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\n\t */",
        "description": "This Java method, `documentToUpload`, uploads a file with the specified filename. It waits for an upload button to be displayed and then attempts to send the file path and filename to the upload input field. If the upload button is not present or there's an exception during the process, it reports the failure as a test step failure.\n\nThe method takes one parameter `fileName`, which is the name of the file to be uploaded. It uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, and `findWebElement` to interact with the web page. The method also includes logging mechanisms using `testStepPassed` and `testStepFailed` to report the outcome of the test step.\n\nThe second code block appears to be a Javadoc comment that provides information about another Java method, possibly related to getting text values from a UI element.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "getNormalTextFieldValue",
        "code": "public String getNormalTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span/span\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tif(!value.isEmpty()){\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttestStepFailed(\"Value is not updated in \"+labelName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getNormalTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to get record type text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\n\t */",
        "description": "This Java method, `getNormalTextFieldValue`, retrieves the text value of a normal text field (e.g., a span element) based on the provided `labelName`. The method performs the following actions:\n\n1. Constructs an XPath expression to locate the target element.\n2. Waits for the element to be displayed using the `waitForElement` method.\n3. Checks if the element is displayed and scrollable using the `isElementDisplayed` and `scrollToWebElement` methods, respectively.\n4. Retrieves the text value of the element using the `getText` method.\n5. If the value is not empty, it highlights the element using the `highLighterMethod`, takes a manual screenshot, and logs success.\n6. If the value is empty or the element is not displayed, it fails the test step with an error message.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "getRecordTypeTextFieldValue",
        "code": "public String getRecordTypeTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span//..//div/span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getAttributeValue(Element, \"value\");\n\t\t\t\tif (value==null) {\n\t\t\t\t\tvalue = getText(Element);\n\t\t\t\t}\n\t\t\t\thighLighterMethodManualScreenShot(Element, labelName +\" Record Type Field Value : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRecordTypeTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\t\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter value in banking lookup field\n\t * @param         :  labelName is name of field\n\t * @param         :  value is input need to select\n\t */",
        "description": "This Java method, `getRecordTypeTextFieldValue`, retrieves the text value from a specific field (identified by its label name) on a web page. \n\nThe method uses Selenium WebDriver to interact with the webpage. It first constructs an XPath expression based on the provided label name and then:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not visible.\n3. Retrieves the text value of the element, or its attribute value (\"value\" attribute) if available.\n4. If no value is found, it retrieves the text content of the element instead.\n5. Takes a manual screenshot of the element with the retrieved value highlighted.\n\nThe method returns the retrieved text value as a string. If any exceptions occur during execution (e.g., the element not being displayed), it logs a test step failure and returns an empty string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterValueInLookUPFieldInIMPSPopup",
        "code": "public void enterValueInLookUPFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString lookupValue = value + \"#xpath=//span[text()='\" + value + \"']/parent::span\";\n\t\t\t\t\tif (isElementDisplayed(lookupValue, 20)) {\n\t\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName +\" LookUP Field in IMPSPopup values is : \"+value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not displayed\");\n\t\t\t\t}\n\t\t\t} else if (!ele.isEnabled()) {\n\t\t\t\tif (labelName.equalsIgnoreCase(\"Bank Name\")) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t\texpandArrows(\"Banking-IMPS Validation\");\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(labelName,value);\n\t\t\t} }\n\t\t\t\n\t\t\t\n\t\t\telse {\n\t\t\t\ttestStepFailed(labelName + \" is not enabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInLookUPFieldInIMPSPopup \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select drop down in banking\n\t * @param         :  dropdownName is name of field\n\t * @param         :  value is input need to select\n\t */",
        "description": "This Java method, `enterValueInLookUPFieldInIMPSPopup`, is used to enter a value into a lookup field in an IMPSPopup ( possibly a banking application). \n\nThe method takes two parameters: `labelName` and `value`. It attempts to locate the lookup field with the given label name using XPath, waits for it to be displayed and enabled, and then enters the provided value. If the entered value is found in the dropdown list, it selects that option.\n\nIf the field is not displayed or enabled, it will refresh the page if the label name matches \"Bank Name\", expand a specific node (\"Banking-IMPS Validation\") and retry entering the value. \n\nThe method also handles exceptions by reporting a test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\tchar ch = ' ';\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\tString dropdownList1 = value + \" value#xpath=//span[text()='\" + value + \"\" + ch+ \"\" + ch+ \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t\telse if (isElementDisplayed(dropdownList1,5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList1);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInIMPSPopup \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to select value from drop down       \n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, is used to select a specific value from a dropdown list in an IMPSS (Integrated Master Plan for Software Systems) popup. \n\nThe method takes two parameters: `dropdownName` and `value`. The `dropdownName` is the name of the field that contains the dropdown list, and the `value` is the specific option that needs to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression for the dropdown element using the provided `dropdownName`.\n2. It waits for the dropdown element to be displayed.\n3. If the dropdown element is displayed, it scrolls to the element and clicks on it.\n4. It then waits for the page to load.\n5. It checks if the selected value is present in the dropdown list by constructing two XPath expressions: one with the exact value and another with a slight modification (adding some characters like spaces) to account for any minor variations.\n6. If the value is found, it clicks on it and waits for the page to load again.\n7. It takes a manual screenshot to confirm that the selection was successful.\n8. If the value is not found, it fails the test step with an error message.\n9. If the dropdown element is not displayed, it also fails the test step with an error message.\n\nThe method catches any exceptions that may occur during execution and fails the test step if one occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectValueFromDropdownInEmandate",
        "code": "public void selectValueFromDropdownInEmandate(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//parent::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"'] | //label[text()='\" + dropdownName+ \"']//ancestor::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"+ value + \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInEmandate \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :\n\t * Description    :  Method to select or deselect check box\n\t * @param         :  labelname is the name of check box\n\t * @param         :  status is the input value check or uncheck\n\t */",
        "description": "This Java method, `selectValueFromDropdownInEmandate`, is used to select a specific value from a dropdown list in an application. The method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the dropdown element based on its name.\n3. It waits for the dropdown element to be displayed.\n4. If the dropdown is displayed, it clicks on the dropdown element.\n5. It then searches for the specified value in the dropdown list using another XPath expression.\n6. If the value is found, it clicks on that value and waits for the page to load again.\n7. If the value is selected successfully, it takes a manual screenshot as proof of success.\n8. If the value cannot be selected (e.g., because it's not present in the dropdown list), it marks the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and mark the test step as failed if an error occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectOrDeselectCheckBoxInCard",
        "code": "public void selectOrDeselectCheckBoxInCard(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//div[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" check box is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBoxInCard failed. Exception: \" + e.toString());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to expand side arrows   \n\t * @param \t      :  fieldLabel is the section name need to expand\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBoxInCard`, is used to select or deselect a checkbox with a given label name. The method takes two parameters: `labelName` and `status`. \n\n- If `status` is \"check\", the method checks if the checkbox is not already selected, scrolls to it if necessary, and then selects it.\n- If `status` is \"uncheck\", the method checks if the checkbox is already unchecked, scrolls to it if necessary, and then unselects it.\n\nThe method also includes error handling and logging mechanisms. It uses various helper methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `clickOnSpecialElement`) to interact with the GUI elements.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "expandArrows",
        "code": "public void expandArrows(String fieldLabel) {\n        try {\n            String arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n                    + \"']//parent::button[@aria-expanded='false']\";\n            String arrow1 = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n                    + \"']//parent::button[@aria-expanded='true']\";\n            waitForElement(arrow, 3);\n            if (isElementDisplayed(arrow, 3)) {\n                clickOnSpecialElement(arrow);\n                waitTime(2);\n            } else if (isElementDisplayed(arrow1, 3)) {\n                testStepInfo(\"Already expanded\");\n            } else {\n                testStepFailed(fieldLabel + \" is not present.\");\n            }\n        } catch (Exception e) {\n            testStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n        }\n    }\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete banking details      \n\t */",
        "description": "This Java method, `expandArrows`, is used to expand arrows in a web page. It takes a string parameter `fieldLabel` which seems to be the label of the field that needs to be expanded.\n\nThe method first constructs two XPath strings (`arrow` and `arrow1`) based on the provided `fieldLabel`. These XPaths are used to locate specific elements (buttons) with aria-expanded attributes set to either \"false\" or \"true\".\n\nThe method then uses a `waitForElement` call to wait for the element to be displayed, with a timeout of 3 seconds. If the element is displayed, it calls `clickOnSpecialElement` to click on the button.\n\nIf the element is not displayed (i.e., the arrow is already expanded), it logs a success message indicating that the field is already expanded. \n\nIf the element is not displayed and the method times out (after 3 seconds), or if an exception occurs during the execution of the method, it logs an error message with details about the exception.\n\nThe method seems to be part of a larger automation test suite for banking details, based on the provided author information and description.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "bankingDetails",
        "code": "public void bankingDetails(String tabName, String componentName, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountNumberLabel, String bankAccountNumberValue,String reEnterBankAccountNumberLabel, String accountTypeLabel,\n\t\t\tString accountTypeValue, String initiateIMPSLabel, String accountStatusLabel, String accountStatusValue,\n\t\t\tString saveLabel,String successMessage1) {\n\t\ttry {\n\t\t\tverifyCurrentStageOfOpportunity(\"DO Preparation\");\n\t\t\ttestStepInfo(\"# Enter Banking-UPI Mandate Details #\");\n\t\t\t\n\t\t\tselectTabs(tabName);\n\t\t\t\n\t\t\tString arrow = \"#xpath=//span[text()='Banking-UPI Mandate']/parent::button\";\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t\tselectValueFromDropdownInEmandate(\"UPI Bypass Reason\", \"Customer Refused UPI Mandate\");\n\t\t\t\tclickOnButton(\"Bypass UPI Mandate\");\n\t\t\t\t\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t\t\n\t\t\texpandArrows(componentName);\n\t\t\ttestStepInfo(\"# Enter IMPS Banking Details #\");\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInField(bankAccountNumberLabel, bankAccountNumberValue);\n\t\t\t\n\t\t\tenterValueInField(reEnterBankAccountNumberLabel, bankAccountNumberValue);\n\t\n\t\t\tselectValueFromDropdownInIMPSPopup(accountTypeLabel, accountTypeValue);\n\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitTime(5);\n\t\t\twaitForPageToLoad();\n\t\t\tselectValueFromDropdownInIMPSPopup(accountStatusLabel, accountStatusValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bankingDetails \" + e.getClass().getName());\n\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete emandate details      \n\t */",
        "description": "This Java method, `bankingDetails`, is used to automate the process of entering banking-UPI mandate details and completing IMPS (Immediate Payment Service) transactions. The method takes several string parameters that represent various labels and values for fields such as bank name, account number, account type, and status.\n\nThe method first verifies the current stage of an opportunity (\"DO Preparation\") and then enters the banking-UPI mandate details by selecting tabs, scrolling to elements, clicking on buttons, and entering values in fields. It also expands arrows, selects values from dropdowns, and clicks on save button.\n\nIf any exceptions occur during the execution of this method, it catches them and logs a failed test step with the exception's class name.",
        "input": [
            "String tabName",
            "String componentName",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountNumberLabel",
            "String bankAccountNumberValue",
            "String reEnterBankAccountNumberLabel",
            "String accountTypeLabel",
            "String accountTypeValue",
            "String initiateIMPSLabel",
            "String accountStatusLabel",
            "String accountStatusValue",
            "String saveLabel",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "emandateDetails",
        "code": "public void emandateDetails(String tabName, String componentName, String initiateEmandateButton,\n\t\t\tString requeryResponseLabel, String bypassEmandateReasonLabel, String bypassEmandateReasonValue,\n\t\t\tString saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Emandate Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t    clickOnButton(\"Normal\");\n\t\t\tclickOnButton(initiateEmandateButton);\n\t\t\twaitTime(10);\n\t\t\tclickOnButton(requeryResponseLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tselectValueFromDropdownInEmandate(bypassEmandateReasonLabel, bypassEmandateReasonValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in emandateDetails \" + e.getClass().getName());\n\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete cards details      \n\t */",
        "description": "Here is a brief description of the Java method:\n\n**Emandate Details Method**\n\nThis method simulates user interactions to enter and save Emandate details. It takes in several input parameters, including tab names, component names, button labels, and dropdown values.\n\nThe method performs the following steps:\n\n1. Enters test step information\n2. Selects a specific tab\n3. Expands arrows for a specified component\n4. Clicks on the \"Normal\" button\n5. Initiates an Emandate process by clicking on a specific button\n6. Waits for 10 seconds before proceeding\n7. Clicks on a requery response label\n8. Waits for the page to load\n9. Selects a value from a dropdown list in the Emandate section\n10. Saves the details by clicking on a save button\n\nIf any errors occur during these steps, the method catches the exception and reports a test step failure.",
        "input": [
            "String tabName",
            "String componentName",
            "String initiateEmandateButton",
            "String requeryResponseLabel",
            "String bypassEmandateReasonLabel",
            "String bypassEmandateReasonValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "cardsDetails",
        "code": "public void cardsDetails(String tabName, String componentName, String cardNameLabel, String cardStatus,\n\t\t\tString submitCardsLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Cards Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t\tselectOrDeselectCheckBoxInCard(cardNameLabel, cardStatus);\n\t\t\tclickOnButton(submitCardsLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in cardsDetails \" + e.getClass().getName());\n\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete primary applicant document lib details      \n\t */",
        "description": "This Java method, `cardsDetails`, is used to perform a series of actions in a web application related to cards details. The method takes six input parameters:\n\n1. `tabName`: the name of the tab to be selected\n2. `componentName`: the name of the component to expand or deselect\n3. `cardNameLabel`: the label of the card to select or deselect\n4. `cardStatus`: the status of the card (e.g., \"selected\" or \"deselected\")\n5. `submitCardsLabel`: the label of the submit button\n6. `successMessage`: the expected success message after submitting the cards details\n\nThe method performs the following steps:\n\n1. Logs a test step information with the comment \"# Enter Cards Details #\"\n2. Selects the specified tab using the `selectTabs` method\n3. Expands or deselects the component with the given name using the `expandArrows` and/or `deselectCheckBoxInCard` methods\n4. Selects or deselects the card with the given label and status using the `selectOrDeselectCheckBoxInCard` method\n5. Clicks on the submit button with the given label using the `clickOnButton` method\n6. Verifies that the expected success message is displayed after submitting the cards details using the `verifySuccessMessage` method\n\nIf any of these steps fail, the method catches the exception and logs a test step failure message with the error class name.",
        "input": [
            "String tabName",
            "String componentName",
            "String cardNameLabel",
            "String cardStatus",
            "String submitCardsLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadPrimaryApplicant",
        "code": "public void documentsUploadPrimaryApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadPrimaryApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `documentsUploadPrimaryApplicant`, appears to be a helper function for uploading and processing various documents related to a primary applicant. It takes 16 parameters:\n\n1-4: Labels for specific document types (e.g., customer photo, application form)\n5-8: Additional document labels\n9: Label for the customer photo upload field\n10: Label for the down payment receipt upload field\n11: Save button label\n12: Success message to verify after uploading documents\n\nThe method performs the following actions:\n\n1. Logs a test step information with the title \"Document Details\".\n2. Selects a specific tab based on the `tabName` parameter.\n3. Iterates through an array of document labels and:\n\t* Prints each label\n\t* Checks or unchecks a checkbox under the Document Library for each label using `selectOrDeselectCheckBoxUnderDocumentLib`.\n4. Uploads a customer photo using `documentToUpload` with the label from parameter 9.\n5. Clicks on the save button labeled by parameter 11 using `clickOnDocSaveButton`.\n6. Verifies that the success message matches the expected value from parameter 12 using `verifySuccessMessage`.\n\nIf any exception occurs during execution, it logs a test step failure message with the exception class name and type.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadPrimaryApplicantWithPOA",
        "code": "public void documentsUploadPrimaryApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Upload Documents #\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel,poaLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadPrimaryApplicantWithPOA \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `documentsUploadPrimaryApplicantWithPOA`, appears to be a part of an automation test script for uploading various documents related to a primary applicant with a Power of Attorney (POA). The method takes 13 string parameters:\n\n1. `tabName`: the name of the tab to select\n2-12: labels for different types of documents to upload (e.g., customer photo, POA, application form, etc.)\n\nThe method performs the following actions:\n\n1. Logs a test step with the label \"# Upload Documents #\"\n2. Selects the specified `tabName`\n3. Loops through an array of document labels and selects or deselects checkboxes under \"Document Library\" for each one\n4. Uploads a customer photo using the `documentToUpload` method\n5. Clicks the \"Save\" button with the label `saveLabel`\n6. Verifies that a success message is displayed with the text `successMessage`\n\nIf any exception occurs during these steps, the method catches it and logs a test step failure with the error message.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadNonIMPSPrimaryApplicant",
        "code": "public void documentsUploadNonIMPSPrimaryApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel,String cancelledChequeLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel,cancelledChequeLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadNonIMPSPrimaryApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `documentsUploadNonIMPSPrimaryApplicant`, is used to upload various documents for a non-IMPS primary applicant. The method takes 14 parameters: the name of the tab, labels for several document types (e.g., customer photo, application form), and a success message.\n\nThe method performs the following actions:\n\n1. Logs a test step information message.\n2. Selects the specified tab.\n3. Iterates through an array of document labels, selecting or deselecting checkboxes under \"Document Library\" for each label.\n4. Uploads a customer photo using the `documentToUpload` method.\n5. Clicks on the \"Save\" button to save the uploaded documents.\n6. Verifies that the success message is displayed.\n\nIf any exception occurs during these steps, the method catches it and logs a test step failed message with the exception class name.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadNonIMPSPrimaryApplicantWithPOA",
        "code": "public void documentsUploadNonIMPSPrimaryApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsMandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel,String cancelledChequeLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Upload Documents #\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel,poaLabel, applicationFormLabel, ecsMandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel,cancelledChequeLabel,\"Key Fact Statement\"};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadNonIMPSPrimaryApplicantWithPOA \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete Co applicant document lib details      \n\t */",
        "description": "This Java method, named `documentsUploadNonIMPSPrimaryApplicantWithPOA`, is used to upload various documents for a primary applicant with POA (Power of Attorney) in an application. The method takes nine string parameters:\n\n1. `tabName`: the name of the tab to select\n2. `customerPhotoLabel`: the label of the customer photo document\n3. `poaLabel`: the label of the Power of Attorney document\n4. `applicationFormLabel`: the label of the application form document\n5. `ecsMandateLabel`: the label of the ECS Mandate document\n6. `proformaInvoiceLabel`: the label of the Pro Forma Invoice document\n7. `loanCumHypothecationAgreementLabel`: the label of the Loan Cum Hypothecation Agreement document\n8. `panForm60Label`: the label of the PAN Form 60 document\n9. `ovdLabel`: the label of the OVD (Other Valuables Document) document\n10. `uploadCustomerPhotoLabel`: the label of the customer photo upload field\n11. `downPaymentReceiptLabel`: the label of the down payment receipt document\n12. `cancelledChequeLabel`: the label of the cancelled cheque document\n13. `saveLabel`: the label of the \"Save\" button\n14. `successMessage`: a success message to be verified\n\nThe method performs the following steps:\n\n1. Logs a test step information with the comment \"# Upload Documents #\"\n2. Selects the specified tab using the `selectTabs` method\n3. Iterates through an array of document labels and selects or deselects check boxes under the Document Library for each label\n4. Uploads the customer photo using the `documentToUpload` method\n5. Clicks on the \"Save\" button with the specified label using the `clickOnDocSaveButton` method\n6. Verifies a success message with the specified text using the `verifySuccessMessage` method\n\nIf any exception occurs during these steps, it logs an error message and marks the test step as failed.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsMandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadCoApplicant",
        "code": "public void documentsUploadCoApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString primaryCustomerPhotoLabel, String ovdLabel, String panForm60Label,\n\t\t\t String primaryPanForm60Label, String primaryOvdLabel,\n\t\t\tString uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, primaryCustomerPhotoLabel, ovdLabel, panForm60Label,\n\t\t\t\t\tprimaryPanForm60Label, primaryOvdLabel,downPaymentReceiptLabel };\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadCoApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `documentsUploadCoApplicant`, is used to upload various documents for a co-applicant application. The method takes 15 parameters: tab name, customer photo label, and labels for several other document types.\n\nHere's what the method does:\n\n1. It prints a test step information message.\n2. It selects a specific tab based on the `tabName` parameter.\n3. It loops through an array of document labels and checks each box under the \"Document Library\" section using the `selectOrDeselectCheckBoxUnderDocumentLib` method.\n4. It uploads a customer photo using the `documentToUpload` method.\n5. It clicks the \"Save\" button to save the uploaded documents.\n6. It verifies that the upload was successful by checking the success message.\n\nIf any exception occurs during the execution of this method, it catches the exception and reports a test step failure with the error message.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String primaryCustomerPhotoLabel",
            "String ovdLabel",
            "String panForm60Label",
            "String primaryPanForm60Label",
            "String primaryOvdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "documentsUploadNonIMPSCoApplicantWithPOA",
        "code": "public void documentsUploadNonIMPSCoApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString primaryCustomerPhotoLabel, String ovdLabel, String panForm60Label,\n\t\t\t String primaryPanForm60Label, String primaryOvdLabel,\n\t\t\tString uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String cancelledChequeLabel,String primaryPoaLabel,String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, poaLabel,applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, primaryCustomerPhotoLabel, ovdLabel, panForm60Label,\n\t\t\t\t\tprimaryPanForm60Label, primaryOvdLabel,downPaymentReceiptLabel,cancelledChequeLabel,primaryPoaLabel,\"Key Fact Statement\"};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadCoApplicant \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */",
        "description": "This is a Java method named `documentsUploadNonIMPSCoApplicantWithPOA` that uploads documents for a non-IMP S Co-applicant with POA. The method takes 19 string parameters, which are labels for various document upload fields.\n\nThe method performs the following actions:\n\n1. It logs a test step message indicating that it is about to upload documents.\n2. It selects a specific tab based on the `tabName` parameter.\n3. It iterates through an array of strings (document labels) and selects or deselects checkboxes for each document using the `selectOrDeselectCheckBoxUnderDocumentLib` method.\n4. It uploads a customer photo document using the `documentToUpload` method.\n5. It clicks the \"Save\" button to save the uploaded documents.\n6. It verifies that the upload was successful by checking the success message.\n\nIf any exception occurs during the execution of this method, it logs an error message indicating that the test step failed and includes the type of exception that occurred.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String primaryCustomerPhotoLabel",
            "String ovdLabel",
            "String panForm60Label",
            "String primaryPanForm60Label",
            "String primaryOvdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String primaryPoaLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "primaryApplicantEcsAndSqcDetails",
        "code": "public void primaryApplicantEcsAndSqcDetails(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\t\t\tverifyCurrentStageOfOpportunity(\"Post DO\");\n\t\t\ttestStepInfo(\"# Enter ECS and Submit For QC Details #\");\n\t\t\t/*if (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {*/\n\t\t\t\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\t\n\t\t\t\tclickMainButtons(componentName);\n\t\t\t\twaitTime(5);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t//\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitTime(10);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t\tselectTabs(\"Details\");\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine3Label);\n\t\t\t\twaitTime(5);\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\t\t\t} else {\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\t}\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n//\t\t\tperformaInvoiceDateValue=convertDateFormat(getCurrentDate(),\"MM/dd/yyyy\",\"dd/MM/yyyy\");\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t\t{\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\t\t\t}\n\t\t\tselectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitTime(5);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t\t{\n\t\t\t\tclickMainButtons(\"Submit for QC\");\n\t\t\t\tclickOnButtonInRecallPopup(saveLabel);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\t// clickMainButtons(\"Submit For QC\");\n\t\t\t\t// selectPopupCheckbox();\n//\t\t\t\t verifyErrorPopupWithoutFail();\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine3Label);\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\twaitTime(5);\n\t\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\t\t\t\t\t\t\tString refileBarcode=generateRandomBarCode();\n\t\t\t\t\t\t\tString Errormessage = verifyHandleErrorMessageForBarcode();\n\t\t\t\t\t\t\tif (Errormessage.contains(\"File Barcode\")) {\n\t\t\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine3Label);\n\t\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, refileBarcode);\n\t\t\t\t\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\t\t\t} else if (Errormessage.contains(\"ECS required\")) {\n\t\t\t\t\t\t\t\tclickMainButtons(componentName);\n\t\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\t\tclickOnButton(editLabel);\n\t\t\t\t\t\t\t\tenterValueInField(ecsBarcodeLabel, refileBarcode);\n\t\t\t\t\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", refileBarcode);\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine3Label);\n\t\t\t\t\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\t\t\t\twaitTime(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\ttestStepFailed(\"Due to above errors : \" + Errormessage + \" , We cannot move further.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} while ((isElementPresent(GOR.error_sqcMethod)));\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"There is No error While change stage\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */",
        "description": "This is a Java method named `primaryApplicantEcsAndSqcDetails` that appears to be part of an automation test script for a web application. The method takes 38 string parameters, which are likely labels and values for various fields in the application.\n\nThe method performs the following actions:\n\n1. Verifies the current stage of opportunity as \"Post DO\".\n2. Logs a test step information message.\n3. If the environment is UAT, it selects the tab, expands arrows, clicks on an edit button, enters ECS barcode value, and then saves the changes.\n4. In all environments (not just UAT), it refreshes the page, waits for the page to load, clicks on the main buttons, waits for a few seconds, edits the ECS barcode field, and saves the changes again.\n5. If the environment is PREPROD, it selects the \"Details\" tab, expands arrows, clicks on an edit option with a specific title, chooses a value from a search list, and enters values in various fields (permanent address applicant details).\n6. It then enters values in several edit dialogue boxes for opportunity landmark, area locality, residence type, performance invoice number, actual invoice date, stage, and file barcode.\n7. If the environment is UAT, it selects a specific value from a dropdown list for \"Dealer OTP Bypass Reason\".\n8. It sets the vehicle delivered status to \"Yes\" and saves the changes again.\n9. If the environment is UAT, it submits the form for QC, clicks on a save button in the recall popup, and waits for the page to load.\n10. In all environments (not just UAT), it expands arrows, clicks on an edit option with a specific title, selects a value from a dropdown list for the stage, and saves the changes again.\n\nThe method also includes error handling logic to handle cases where the SQC details cannot be saved due to errors.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "coApplicantEcsAndSqcDetails",
        "code": "public void coApplicantEcsAndSqcDetails(String tabName, String componentName, String editLabel, String ecsBarcodeLabel,\n\t\t\tString ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label, String ovdAddressLine1Value,\n\t\t\tString ovdAddressLine2Label, String ovdAddressLine2Value, String ovdAddressLine3Label,\n\t\t\tString ovdAddressLine3Value, String opportunityLandmarkLabel, String opportunityLandmarkValue,\n\t\t\tString opportunityAreaLocalityLabel, String opportunityAreaLocalityValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue,String areaLocalityLabel,String areaLocalityValue,String primaryResidenceTypeLabel, String primaryResidenceTypeValue,\n\t\t\tString primaryZipcodeLabel, String primaryZipcodeValue, String ovdPrimaryAddressLine1Label,\n\t\t\tString ovdPrimaryAddressLine1Value, String ovdPrimaryAddressLine2Label, String ovdPrimaryAddressLine2Value,\n\t\t\tString ovdPrimaryAddressLine3Label, String ovdPrimaryAddressLine3Value, String primaryLandmarkLabel,\n\t\t\tString primaryLandmarkValue, String primaryAreaLocalityLabel, String primaryAreaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue,String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue, String fileBarcodeLabel,\n\t\t\tString fileBarcodeValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----ECS and Submit For QC Details-----\");\n\t\t\t\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tselectTabs(\"Details\");\n\t\t\tclickMainButtons(componentName);\n\t\t\twaitTime(5);\n\n\t\t\tclickOnButton(editLabel);\n\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitTime(10);\n\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(2);\n\t\t\t\tselectTabs(\"Details\");\n\t\t\t\texpandArrows(\"Permanent Address Co-Applicant\");\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Co-Applicant\", ovdAddressLine1Label);\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\t\t\t} else {\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\t}\n\n\t\t\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\t\n\t\t\t// enterValueInEditDialogueBox(areaLocalityLabel, areaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(primaryResidenceTypeLabel, primaryResidenceTypeValue);\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t\t{\n\t\t\t\tenterValueInEditDialogueBox(primaryZipcodeLabel, primaryZipcodeValue);\n\t\t\t}\n\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\"))\n\t\t\t{\n\t\t\t\tchooseValueFromSearchAndListField(primaryZipcodeLabel, primaryZipcodeValue);\n\t\t\t}\n\t\t\t\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine1Label, ovdPrimaryAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine2Label, ovdPrimaryAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine3Label, ovdPrimaryAddressLine3Value);\n\t\t\tenterValueInTextArea(primaryLandmarkLabel, primaryLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(primaryAreaLocalityLabel, primaryAreaLocalityValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\t// enterValueInEditDialogueBox(actualInvoiceNoLabel,actualInvoiceNoValue);\n\t\t\t// enterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\t\t\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\t\t\t}\n\t\t     selectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\t\t\n\t\t\t\n\t\t\t if (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\"))\n\t\t\t\t{\n\t\t    \tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t    \tclickOnButtonInPopup(saveLabel);\n\t\t\t\t}       \n\t\t        else\n\t            {\n\t\t          \tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t\t    \tclickOnButton(saveLabel);\n\t                clickMainButtons(\"Submit for QC\");\n\t                clickOnButtonInRecallPopup(saveLabel);\n\t                waitForPageToLoad();\n\t            }\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in coApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in DO popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `coApplicantEcsAndSqcDetails`, appears to be a part of an automation test for a web application. The method simulates user interactions to input data and perform actions in the application's \"Details\" tab.\n\nHere's a brief summary of what the method does:\n\n1. It starts by performing some setup tasks, such as refreshing the page, waiting for the page to load, selecting the \"Details\" tab, clicking on buttons, and entering values into fields.\n2. It then enters various details in different fields, including:\n\t* ECS barcode\n\t* Permanent address (co-applicant)\n\t* Opportunity landmark and area locality\n\t* Residence type and primary residence type\n\t* Zip code and primary zip code\n\t* File barcode\n3. If the environment is \"UAT\", it selects specific values from dropdowns, such as \"SMS/OTP not triggered to the dealer\" for Dealer OTP Bypass Reason.\n4. If the environment is \"PREPROD\", it performs additional actions, including:\n\t* Selecting a value from a side arrow button\n\t* Choosing a value from a search and list field\n\t* Clicking on buttons in a popup window\n5. Finally, if an exception occurs during the execution of the method, it catches the exception and marks the test step as failed.\n\nThe method takes several parameters, including strings for labels, values, and component names, which are used to identify the fields and buttons in the application's UI.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String primaryResidenceTypeLabel",
            "String primaryResidenceTypeValue",
            "String primaryZipcodeLabel",
            "String primaryZipcodeValue",
            "String ovdPrimaryAddressLine1Label",
            "String ovdPrimaryAddressLine1Value",
            "String ovdPrimaryAddressLine2Label",
            "String ovdPrimaryAddressLine2Value",
            "String ovdPrimaryAddressLine3Label",
            "String ovdPrimaryAddressLine3Value",
            "String primaryLandmarkLabel",
            "String primaryLandmarkValue",
            "String primaryAreaLocalityLabel",
            "String primaryAreaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyErrorMessageInDoPopup",
        "code": "public boolean verifyErrorMessageInDoPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\tif (flag) {\n\t\t\t\t\t\ttestStepFailed(\"Due to above error : \"+errorsList.get(i).getText().trim() +\" cannot proceed further\");\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInDoPopup\" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInDoPopup`, verifies the presence and content of error messages displayed in a popup. Here's a brief summary:\n\n1. The method attempts to find an element with the specified XPath (`\"#xpath=//div[contains(@class,'toast')]//h2\"`).\n2. If the element is displayed within 4 seconds, it iterates through the list of web elements (errors) and:\n\t* Takes a manual screenshot for each error.\n\t* Marks the test step as failed if an error is found, with a message including the error text.\n3. If no errors are found, it logs a success message (\"There is no error while Changing Stage\").\n4. If any exceptions occur during execution, it marks the test step as failed and logs the exception details.\n\nThe method returns a boolean flag indicating whether errors were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyErrorMessageInSqcPopup",
        "code": "public boolean verifyErrorMessageInSqcPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields']\";\n\t\t\tString errorValue=null;\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\terrorValue=errorsList.get(i).getText().trim();\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above errors : \"+errorValue +\" , We cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in DO popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInSqcPopup`, verifies the presence of an error message in a specific popup (DO popup) and takes screenshots of each individual error. If the errors are found, it marks the test step as failed with the reason being the error value. If no errors are found, it logs a success message. The method returns a boolean flag indicating whether the error was found or not.\n\nHere's a brief summary:\n\n1. Waits for the page to load and the specific error element to appear.\n2. Verifies if the error element is displayed.\n3. If the error element is displayed, takes screenshots of each individual error and logs the error value.\n4. Marks the test step as failed with the reason being the error value.\n5. If no errors are found, logs a success message.\n\nThe method uses various Selenium WebDriver methods such as `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, `findWebElements`, and `manualScreenshot` to interact with the popup and verify the error messages.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyErrorMessageInDoPopupWithoutFail",
        "code": "public boolean verifyErrorMessageInDoPopupWithoutFail() {\n\t\tboolean flag = false;\n\t\tString value =null;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2 | //div[contains(@class,'forceVisualMessageQueue')]//span[contains(@class,'toastMessage')]\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tvalue=getText(Text);\n//\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n//\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n//\t\t\t\t\tvalue = errorsList.get(i).getText();\n//\t\t\t\t\tif(value.equalsIgnoreCase(expectedMessage))\n//\t\t\t\t\t{\n//\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n//\t\t\t\t\t}\n//\t\t\t\t\telse\n//\t\t\t\t\t{\n//\t\t\t\t\t\ttestStepFailed(expectedMessage+\" expected validation not fire instead got \"+value);\n//\t\t\t\t\t}\n//\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\tmanualScreenshot(\"Validation is Present: \"+value);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInDoPopupWithoutFail\" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInDoPopupWithoutFail`, verifies if an expected error message is displayed in a popup without failing the test. \n\nHere's what it does:\n\n1. It checks if an element with the specified XPath (`Text`) is displayed within 4 seconds.\n2. If the element is displayed, it sets a flag to `true` and retrieves the text of the element.\n3. If the flag is `true`, it takes a manual screenshot with the error message as the filename.\n4. If the element is not displayed, or if an exception occurs during the process, it fails the test step.\n\nThe method returns the value of the flag, which indicates whether the expected error message was found in the popup.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyErrorMessageInSqcPopupWithoutFail",
        "code": "public boolean verifyErrorMessageInSqcPopupWithoutFail(String expectedMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields'] | //div//strong[text()='Review the following fields'] | //div//strong[text()='Review the errors on this page.']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[1]\";\n\t\t\t\tString value = findWebElement(errorList).getText().trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Got Expected Validation \" + \" : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" expected validation not fire instead got \" + value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify status of document\n\t * @param         :  fieldName is the document name\n\t * @return        :  text is return the document status\n\t */",
        "description": "This Java method, `verifyErrorMessageInSqcPopupWithoutFail`, verifies that an expected error message is displayed in a Squared popup. \n\nHere's what it does:\n\n1. It waits for the page to load and then waits for a specific element (error) to be displayed.\n2. If the error is displayed, it extracts the text from the first list item (assuming there are multiple errors).\n3. It compares this extracted text with the expected message passed as a parameter.\n4. If the messages match, it takes a manual screenshot and returns `true`.\n5. If they don't match or if the error is not displayed, it fails the test step and returns `false`.\n\nThe method catches any exceptions that occur during its execution and also reports failures in case of unexpected errors.",
        "input": [
            "String expectedMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyStatusInDoclib",
        "code": "public String verifyStatusInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='Status:']/following-sibling::dd[1]\";\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(text_field);\n\t\t\t\t\tmanualScreenshot(text + \" status is displayed in \" + fieldName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \" + text + \" instead of \" + expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyStatusInDoclib\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to select opp id in print Email Do pop up\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyStatusInDoclib`, verifies the status of a specific field (`fieldName`) in a document library. It checks if the field is displayed, scrolls to it if necessary, and then checks if its value matches the expected value (`expectedValue`). If the values match, it highlights the field and takes a screenshot as proof. If they don't match or the field is not displayed, it fails the test step. The method returns the actual text value of the field.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectPrintEmailDoOpp",
        "code": "public void selectPrintEmailDoOpp(String opportunity) {\n\t\ttry {\n\t\t\tString field = opportunity + \"#xpath=//a[text()='\" + opportunity\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::td//span[contains(@class,'checkbox')]\";\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tclickOn(field);\n\t\t\t\ttestStepPassed(opportunity + \" Successfully selected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + opportunity);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectPrintEmailDoOpp\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify document not present\n\t * @param         :  labelName is the document name\n\t */",
        "description": "This Java method, `selectPrintEmailDoOpp`, is used to select a specific opportunity from a list of opportunities. The method takes a string parameter `opportunity` which represents the name of the opportunity to be selected.\n\nThe method uses an XPath expression to locate the opportunity element on the page and then checks if it is displayed using the `isElementDisplayed` method. If the opportunity is displayed, it simulates a click on the element using the `clickOn` method. The method also logs a test step as passed or failed based on whether the selection was successful.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the error message.",
        "input": [
            "String opportunity"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyDocNotPresent",
        "code": "public void verifyDocNotPresent(String labelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//span[@class='checkbox-custom']//following-sibling::span[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (!isElementDisplayed(targetField, 3)) {\n\t\t\t\tmanualScreenshot(labelName + \" document is not present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocNotPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify document is present\n\t * @param         :  labelName is the document name\n\t */",
        "description": "This Java method, `verifyDocNotPresent`, verifies that a specific document (identified by its label name) is not present on a web page. The method:\n\n1. Waits for the page to load.\n2. Uses an XPath expression to locate the target field (a span element with the specified class and text content matching the provided `labelName`).\n3. Waits for the target field to be displayed for up to 3 seconds.\n4. Checks if the target field is displayed. If it's not, a manual screenshot is taken to capture the issue.\n5. If the target field is displayed, the test step fails.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed with an error message indicating the type of exception that occurred.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyDocIsPresent",
        "code": "public void verifyDocIsPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[@class='checkbox-custom']//following-sibling::span[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (isElementDisplayed(targetField, 3)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" document is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocIsPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to select check box\n\t * @param         :  labelName is the check box name\n\t */",
        "description": "This Java method, `verifyDocIsPresent`, verifies whether a specific document (represented by its label name) is present on the web page. It uses an XPath expression to locate the element and then performs various actions:\n\n1. Waits for the element to be displayed using the `waitForElement` method.\n2. Checks if the element is displayed using the `isElementDisplayed` method.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method and takes a manual screenshot as proof of the document's presence.\n4. If the element is not displayed, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectChangeECSCheckBox",
        "code": "public void selectChangeECSCheckBox(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectChangeECSCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify field is enabled\n\t * @param         :  labelName is the field name\n\t */",
        "description": "This Java method, `selectChangeECSCheckBox`, is used to select a checkbox with a specific label name on an external system (likely an Salesforce Lightning page). \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the checkbox element based on the provided label name.\n2. It waits for the checkbox element to be present and then scrolls to it if necessary.\n3. If the checkbox is not selected, it clicks on it to select it and takes a manual screenshot as confirmation.\n4. If the checkbox is already selected or not present, it reports a failure.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyFieldIsEnabled",
        "code": "public void verifyFieldIsEnabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//button[text()='\" + labelName + \"']| //label[text()='\"+ labelName +\"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tif (findWebElement(targetField).isEnabled()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is enabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsEnabled\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify waiver reason of document\n\t * @param         :  fieldName is the document name\n\t * @param         :  expectedValue is the reason\n\t * @return        :  text is return the waiver reason\n\t */",
        "description": "This Java method, `verifyFieldIsEnabled`, verifies if a field with a specified label name is enabled or not. \n\nThe method takes a `labelName` as input and uses it to locate the field using an XPath expression that searches for either a button or a label element with the given text. It then waits for the element to be displayed, checks if it's actually present, and if so, verifies if the field is enabled. If the field is not found or is disabled, the test fails.\n\nThe method also includes error handling using a `try-catch` block, which catches any exceptions that may occur during the execution of the method and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyWaiverReasonInDoclib",
        "code": "public String verifyWaiverReasonInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='Status:']/following-sibling::dd[1]\";\t\t\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod(text_field);\n\t\t\t\t\tmanualScreenshot(\"\" + text + \" is displayed in \" + fieldName + \" \");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \"+text+\" instead of \"+expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextfieldfromFOS\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  15/06/2022\n\t * Description    :  method to get link text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `verifyWaiverReasonInDoclib`, verifies the waiver reason in a Doclib system. It takes two parameters: `fieldName` and `expectedValue`. \n\nThe method first constructs an XPath expression to locate the element with the given `fieldName`. If the element is displayed within 5 seconds, it scrolls to that element, retrieves its text value, and compares it with the expected value. If the values match, it highlights the element and takes a manual screenshot. If they don't match or if the element is not displayed, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs. Finally, it returns the actual text value of the element.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "getLinkTextFieldValue",
        "code": "public String getLinkTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span//a\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element,5)) {\n\t\t\t\tscrollToElement(Element);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\thighLighterMethodManualScreenShot(Element, labelName+\" Link Text Field Value is : \"+value);\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLinkTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */",
        "description": "This Java method, `getLinkTextFieldValue`, is used to retrieve the text value of a link element on a web page. It takes a `labelName` as input and attempts to find an element with that label name using XPath. The method then waits for the element to be displayed, scrolls to it if necessary, and retrieves its text value. If the element is not displayed, the test step fails. The method also captures a manual screenshot of the element's value.\n\nHere are some key points about this method:\n\n* It uses Selenium WebDriver methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToElement`, `scrollToWebElement`, and `getText`) to interact with the web page.\n* It uses an XPath expression to locate the link element based on its label name.\n* It has a timeout of 5 seconds for each operation (e.g., waiting for the element, scrolling to it).\n* If any exception occurs during execution, the method will fail the test step and log an error message.\n* The method returns the text value of the link element.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "primaryApplicantSqcDetails",
        "code": "public void primaryApplicantSqcDetails(String editLabel, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Submit For QC Details-----\");\n            waitForPageToLoad();\n\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\t// enterValueInEditDialogueBox(areaLocalityLabel,areaLocalityValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\tenterValueInEditDialogueBox(actualInvoiceNoLabel, actualInvoiceNoValue);\n\t\t\tenterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/07/2022\n\t * Description    :  method to get value from edit popup\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `primaryApplicantSqcDetails`, appears to be a part of an automated testing framework for a web application. The method simulates user interactions on the application's interface by performing various actions such as:\n\n1. Entering values in edit dialogue boxes\n2. Selecting options from dropdown menus\n3. Clicking buttons in pop-ups\n\nThe method takes 23 string parameters, each representing a label or value for a specific field on the application's form. The method then uses these labels and values to perform the above-mentioned actions.\n\nIf any exceptions occur during the execution of this method, it catches them and logs an error message indicating that the \"primaryApplicantEcsAndSqcDetails\" test step has failed.",
        "input": [
            "String editLabel",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "getTextFromEditPopup",
        "code": "public String getTextFromEditPopup(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//div[contains(@class,'slds-is-editing')]//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//span//..//following-sibling::div//span//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = findWebElement(targetField).getText();\n\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromEditPopup\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete banking details      \n\t */",
        "description": "This Java method, `getTextFromEditPopup`, is used to retrieve the text value from an edit popup field in a web application. The method takes a string parameter `labelName` which represents the label of the field to be retrieved.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the edit popup field with the given `labelName`.\n3. It waits for the target element to be displayed using the `waitForElement()` method.\n4. If the element is displayed, it retrieves the text value from the field using the `findWebElement()` method and stores it in a variable called `fieldValue`.\n5. It takes a manual screenshot of the field value along with the label name.\n6. If the element is not displayed, it fails the test step with an error message.\n7. In case of any exception during the execution of the method, it fails the test step with an error message.\n8. The method returns the retrieved text value as a string.\n\nThe method seems to be part of a larger framework for automating web application testing using Selenium WebDriver.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "bankingDetailsWithoutIMPS",
        "code": "public void bankingDetailsWithoutIMPS(String tabName, String componentName, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountNumberLabel, String bankAccountNumberValue,String reEnterBankAccountNumberLabel, String accountTypeLabel,\n\t\t\tString accountTypeValue,\n\t\t\tString saveLabel,String successMessage1) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tverifyCurrentStageOfOpportunity(\"DO Preparation\");\n\t\t\t\n\t\t\tselectTabs(tabName);\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter Delivery Address Details #\");\t\n\t\t\tString arrow1 = \"#xpath=//span[text()='Delivery Address']/parent::button\";\n\t\t\tif (isElementDisplayed(arrow1, 10)) {\n\t\t\t\tscrollToWebElement(arrow1);\n\t\t\t\tString value = findWebElement(arrow1).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow1);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t\tselectValueFromDropdownInEmandate(\"Same as Correspondence Address\", \"Yes\");\n\t\t\t\tselectValueFromDropdownInEmandate(\"Relationship Type\", \"Father\");\n\t\t\t\tclickOnButton(\"Proceed\");\n\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\ttestStepInfo(\"# Enter Non-IMPS Banking Details #\");\t\t\t\n\t\t\tString arrow = \"#xpath=//span[text()='Banking-UPI Mandate']/parent::button\";\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t\tselectValueFromDropdownInEmandate(\"UPI Bypass Reason\", \"Customer Refused UPI Mandate\");\n\t\t\t\tclickOnButton(\"Bypass UPI Mandate\");\n\t\t\t}\n\t\t\t\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(componentName);\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInField(bankAccountNumberLabel, bankAccountNumberValue);\n\t\t\tenterValueInField(reEnterBankAccountNumberLabel, bankAccountNumberValue);\n\t\t\tselectValueFromDropdownInIMPSPopup(accountTypeLabel, accountTypeValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bankingDetailsWithoutIMPS \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to test the banking details functionality without IMPS (Immediate Payment Service) in a web application. The method performs the following steps:\n\n1. Refreshes the page and waits for it to load.\n2. Verifies that the current stage of opportunity is \"DO Preparation\".\n3. Selects a tab with the specified name.\n4. Enters delivery address details, including scrolling to and expanding an arrow if necessary.\n5. Enters non-IMPS banking details, including bypassing UPI mandate if necessary.\n6. Refreshes the page again and waits for it to load.\n7. Expands arrows, enters values in lookup fields and text fields, selects a value from a dropdown menu, and clicks on a save button.\n8. Verifies that a success message is displayed.\n\nThe method catches any exceptions that occur during its execution and logs an error if one occurs.",
        "input": [
            "String tabName",
            "String componentName",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountNumberLabel",
            "String bankAccountNumberValue",
            "String reEnterBankAccountNumberLabel",
            "String accountTypeLabel",
            "String accountTypeValue",
            "String saveLabel",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyCheckBoxSelected",
        "code": "public void verifyCheckBoxSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//input| //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div//input | //div[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\t\t\t\t\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\t\t\n\t\t\t\tif (findWebElement(checkBox).isSelected()) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxSelected`, verifies whether a checkbox with a specific label is selected or not. It takes a `String` parameter `labelName` which represents the label of the checkbox to be verified.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName`. The XPath expression searches for an input element (checkbox) that is a child of a div element with the same text as the `labelName`.\n2. It uses the `waitForElement` method to wait for the checkbox element to be present.\n3. If the checkbox is present, it checks if the checkbox is selected using the `findWebElement` method and the `isSelected()` method.\n4. If the checkbox is selected, it takes a manual screenshot with a message indicating that the checkbox is already checked.\n5. If the checkbox is not selected, it fails the test step with an error message indicating that the checkbox is not checked.\n6. If the checkbox is not present, it also fails the test step with an error message indicating that the checkbox is not present.\n7. In case of any exceptions during the execution of this method, it writes the exception to a log file and fails the test step.\n\nIn summary, this method verifies whether a specific checkbox is selected or not, and reports any errors or failures if something goes wrong.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyIMPSInitiatedMessage",
        "code": "public void verifyIMPSInitiatedMessage(String impsMsg) {\n\t\ttry {\n\t\t\tString impsInitiated = \"impsInitiated#xpath=//div[text()='\" + impsMsg + \"']\";\n\t\t\twaitForElement(impsInitiated, 5);\n\t\t\tif (isElementDisplayed(impsInitiated, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared : \" + impsMsg);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture \" + impsMsg + \" message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in verifyIMPSInitiatedMessage \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyIMPSInitiatedMessage`, verifies whether a specific IMPS (Immediate Message Processing System) initiated message is displayed on the application. \n\nThe method takes a string parameter `impsMsg` which represents the expected IMPS initiated message. It then constructs an XPath expression to locate this message in the application's UI.\n\nIt uses two utility methods: `waitForElement` and `isElementDisplayed`. The first method waits for the specified element (in this case, the IMPS initiated message) to be displayed within a certain time limit (5 seconds). If the element is not found or takes longer than 5 seconds to appear, the method will throw an exception.\n\nThe second utility method, `isElementDisplayed`, checks if the specified element is currently visible on the UI. If the element is displayed, it takes a manual screenshot with the message as the filename and logs a success test step information. \n\nIf the element is not displayed within the specified time limit or if there's an exception during the execution of this method, it catches the exception, logs a failure test step information with the exception details, and does nothing else.",
        "input": [
            "String impsMsg"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "toClickOppChargesTab",
        "code": "public void toClickOppChargesTab(String labelName) {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//span[text()='\"+labelName+\"']/parent::a\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickOppChargesTab\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickOppChargesTab`, is used to click on a link with a specific label name. It uses Selenium WebDriver and WebDriverWait classes to perform the following actions:\n\n1. Waits for an element to be present on the page that matches the given XPath expression.\n2. Scrolls to the element if it's not visible.\n3. Waits for the page to load after scrolling.\n4. Moves the mouse cursor to the element and clicks it using Actions class.\n5. Waits again for the page to load after clicking.\n\nIf the link is not displayed on the page, the method fails the test step with an error message. If any exception occurs during the execution of this method, it also fails the test step with the exception details.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "toClickOppCharges",
        "code": "public void toClickOppCharges(String labelName) {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//a[text()='\"+labelName+\"']/..//..//..//a[contains(text(),'OC')]\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickOppCharges\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickOppCharges`, attempts to click on a link with the specified label name. Here's a brief summary:\n\n1. It takes a `String` parameter `labelName` that represents the text of the link to be clicked.\n2. It uses an XPath expression to locate the link element in the DOM, and waits for it to be present using the `waitForElement` method.\n3. If the link is present, it scrolls to the element using `scrollToWebElement`, waits for the page to load using `waitForPageToLoad`, and then clicks on the link using an `Actions` object.\n4. If the link is not present, it fails the test step with a message indicating that the link was not displayed.\n5. The method also catches any exceptions that may occur during execution and reports them as test failures.\n\nIn summary, this method is used to click on a specific link in a web page based on its label text, while handling potential issues like element not being present or page not loading correctly.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "toClickUCM",
        "code": "public void toClickUCM() {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//span[text()='Universal Charge Mapping']/..//a\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"UCM link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickUCM\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickUCM()`, attempts to click on a specific Universal Charge Mapping (UCM) link on a web page. Here's a brief summary of what the method does:\n\n1. It defines an XPath expression to locate the UCM link.\n2. It waits for the element to be present and visible using the `waitForElement()` method.\n3. If the element is present, it scrolls to the element using the `scrollToWebElement()` method.\n4. It then waits for the page to load completely using the `waitForPageToLoad()` method.\n5. The method uses Selenium's `Actions` class to move the mouse cursor to the UCM link and click on it using the `moveToElement().click().perform()` method.\n6. After clicking the link, it waits again for the page to load completely using the `waitForPageToLoad()` method.\n7. If the UCM link is not displayed or any exception occurs during the execution of this method, it fails the test step and logs an error message.\n\nIn summary, this method is designed to simulate a user clicking on a specific UCM link on a web page.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyOppChargesNotPresent",
        "code": "public void verifyOppChargesNotPresent(String chargeNameValue, String chargeAmountValue) {\n\t\ttry {\n\t\t\tString chargeName = \"#xpath=//span[text()='Charge Name']/..//..//..//..//..//..//a[text()='\"\n\t\t\t\t\t+ chargeNameValue + \"']\";\n\t\t\tString chargeAmount = \"#xpath=//span[text()='Charge Amount']/..//..//..//..//..//..//span[text()='\"\n\t\t\t\t\t+ chargeAmountValue + \"']\";\n\t\t\twaitForElement(chargeName, 3);\n\t\t\tif (!isElementDisplayed(chargeName) && isElementDisplayed(chargeAmount)) {\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\tchargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is not displayed as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(chargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyOppChargesNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOppChargesNotPresent`, is used to verify that a specific charge name and amount are not displayed on the page. \n\nThe method takes two string parameters: `chargeNameValue` and `chargeAmountValue`. It constructs XPath expressions based on these values to locate elements with the corresponding charge name and amount.\n\nIt then uses a `waitForElement` method to wait for the charge name element to appear, and checks if this element is displayed. If it's not displayed but the charge amount element is, it takes a manual screenshot as evidence of the failure. \n\nIf the charge name element is displayed or both elements are not displayed, the test step fails.\n\nThe method also catches any exceptions that occur during its execution and reports them as a failed test step.",
        "input": [
            "String chargeNameValue",
            "String chargeAmountValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyOppChargesIsPresent",
        "code": "public void verifyOppChargesIsPresent(String chargeNameValue, String chargeAmountValue) {\n\t\ttry {\n\t\t\tString chargeName = \"#xpath=//span[text()='Charge Name']/..//..//..//..//..//..//a[text()='\"\n\t\t\t\t\t+ chargeNameValue + \"']\";\n\t\t\tString chargeAmount = \"#xpath=//span[text()='Charge Amount']/..//..//..//..//..//..//span[text()='\"\n\t\t\t\t\t+ chargeAmountValue + \"']\";\n\t\t\twaitForElement(chargeName, 3);\n\t\t\tif (isElementDisplayed(chargeName) && isElementDisplayed(chargeAmount)) {\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\tchargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is displayed as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(chargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyOppChargesIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOppChargesIsPresent`, verifies that the specified charge name and amount are present on a web page. It uses XPath expressions to locate elements with the given charge name and amount values. The method waits for these elements to be displayed using the `waitForElement` method, then checks if both elements are visible using the `isElementDisplayed` method. If both elements are displayed, it takes a manual screenshot as proof of the expected behavior. If either element is not displayed, it marks the test step as failed. The method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String chargeNameValue",
            "String chargeAmountValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" field is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresent`, verifies if a specific field with the given label name is present on the web page. It uses an XPath expression to locate the element and then checks if it's displayed within a certain time frame (5 seconds). If the field is found, it highlights it using the `highLighterMethod1` method and takes a manual screenshot for verification purposes. If the field is not found or fails to load within the specified time, the test step fails with an error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyTimerIsPresent",
        "code": "public void verifyTimerIsPresent() {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div//p[contains(text(),'seconds')]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(\"Timmer is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Timmer is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTimerIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTimerIsPresent()`, verifies that a specific timer element is present on the web page. Here's a brief description:\n\n1. It uses an XPath expression to locate the timer element (`#xpath=//div//p[contains(text(),'seconds')]`).\n2. The method waits for this element to be present using `waitForElement(targetField, 10)`.\n3. If the element is displayed within 5 seconds, it takes a manual screenshot with the comment \"Timmer is present as expected\".\n4. If the element is not displayed or takes longer than 5 seconds to appear, the test step fails with an error message \"Timmer is not present\".\n5. The method also catches any exceptions that may occur during execution and reports them as test failures.\n\nIn summary, this method ensures that a timer element is present on the web page and takes a screenshot if it is, or fails the test if it's not.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyCheckBoxNotSelected",
        "code": "public void verifyCheckBoxNotSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux'] | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is not checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"verifyCheckBoxNotSelected failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxNotSelected`, is used to verify that a checkbox with the given label name is not selected. Here's a brief summary of what it does:\n\n1. It constructs an XPath expression to locate the checkbox element based on the provided label name.\n2. It waits for the checkbox element to be present using the `waitForElement` method.\n3. If the checkbox is present, it scrolls to the element and checks if the checkbox is selected using the `isCheckBoxSelected` method.\n4. If the checkbox is not selected, it takes a manual screenshot with a message indicating that the checkbox is not checked.\n5. If the checkbox is selected or the checkbox is not present, it marks the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during its execution and logs the exception information if an error occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyEmiCardCountIsPresent",
        "code": "public void verifyEmiCardCountIsPresent() {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[text()='EMI Card']/following-sibling::div[contains(text(),'Count')]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(\"EMI Card count is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"EMI Card count is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyEmiCardCountIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyEmiCardCountIsPresent`, verifies that the \"EMI Card Count\" field is present on a web page. It uses an XPath expression to locate the element and then checks if it's displayed within a certain time limit (10 seconds). If the element is found and displayed, it takes a manual screenshot as confirmation. If not, it marks the test step as failed. The method also catches any exceptions that may occur during execution and reports them as failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "deleteValueInEditDialogueBox",
        "code": "public void deleteValueInEditDialogueBox(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//..//..//a[@class='deleteAction']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName+\" field is available\");\n\t\t\t\tclickOn(field);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in deleteValueInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `deleteValueInEditDialogueBox`, deletes a value from an edit dialogue box. It takes a `String` parameter `labelName` which is used to identify the field to be deleted.\n\nThe method uses various WebDriver actions such as:\n\n1. Waiting for an element to be displayed (using `waitForElement` and `isElementDisplayed`)\n2. Scrolling to the element (using `scrollToWebElement`)\n3. Highlighting the element and taking a manual screenshot (using `highLighterMethodManualScreenShot`)\n4. Clicking on the element (using `clickOn`)\n5. Waiting for the page to load (using `waitForPageToLoad`)\n\nIf the field is not present, it fails the test step with an error message. If any exception occurs during the execution of the method, it also fails the test step with an error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "changeLookupValueInEditPopup",
        "code": "public void changeLookupValueInEditPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tdeleteValueInEditDialogueBox(labelName);\n\t\t\twaitForPageToLoad();\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//..//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName+\" Lookup Value in EditPopup is : \"+value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li//div[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Model Name Selected : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModelName \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `changeLookupValueInEditPopup`, changes the lookup value in an edit popup. It takes two parameters: `labelName` and `value`. \n\nThe method first deletes any existing value for the given label name (if present). Then it waits for the page to load, locates the field with the given label name, and verifies that it is displayed on the screen. If the field is found, it scrolls to the field, types in the new value, highlights the new lookup value, and takes a manual screenshot. \n\nNext, it checks if the new value is present in the dropdown list. If it is, it selects the new value by clicking on it. If not, it fails the test step. Finally, if any exceptions occur during the execution of the method, it also fails the test step with an error message indicating that the selection failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyQcStatusInDoclib",
        "code": "public String verifyQcStatusInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='QC Status:']/following-sibling::dd[1]\";\t\t\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(text_field);\n\t\t\t\t\tmanualScreenshot(\"\" + text + \" is displayed in \" + fieldName + \" QC Status.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \"+text+\" instead of \"+expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyQcStatusInDoclib\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyQcStatusInDoclib`, verifies the QC status of a specific field (`fieldName`) in a document library. It uses Selenium WebDriver to:\n\n1. Check if the field is displayed on the page.\n2. If it's displayed, scroll to the element and get its text value (`text`).\n3. Compare the text value with the expected value (`expectedValue`).\n4. If the values match, highlight the element using a custom method `highLighterMethod1` and take a manual screenshot.\n5. If the values don't match or the field is not displayed, mark the test step as failed.\n\nThe method returns the actual text value of the QC status (`text`).",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyFieldIsNotPresent",
        "code": "public void verifyFieldIsNotPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//button[text()='\" + labelName + \"'] | //label[text()='\" + labelName + \"']//following-sibling::div//textarea\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(labelName + \" field is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsNotPresent`, verifies that a specific field (e.g., button, label, or textarea) is not present on the current web page. It uses an XPath expression to locate the element with the given label name and then checks if it's displayed within a certain time limit. If the field is found, it takes a manual screenshot as evidence. If the field is not found, it marks the test step as failed. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "searchAndselectValueFromInsurance",
        "code": "public void searchAndselectValueFromInsurance(String labelName, String value) {\t\n\t\ttry {\n\t\t\tString dropdown = labelName + \"#xpath=//Input[contains(@placeholder,'\" + labelName + \"')]\";\n\t\t\tString dropdownList = value + \" value#xpath=//span[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\ttypeIn(dropdown, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfindWebElement(dropdown).clear();\n\t\t\t\tfindWebElement(dropdown).sendKeys(value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + labelName + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchAndselectValueFromInsurance \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `searchAndselectValueFromInsurance`, searches for a dropdown menu with the given label name and selects a value from the list. The method takes two parameters: `labelName` and `value`. It attempts to find the dropdown menu by its label name, select the specified value, and then verify that the selection was successful. If any part of the process fails, it reports an error and marks the test step as failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterValueInTextArea",
        "code": "public void enterValueInTextArea(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//following-sibling::div//textarea | //span[text()='\" + labelName + \"']/..//..//textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName+\" Field entered value as : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextArea \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextArea`, enters a given value into a text area element on a web page. The method takes two string parameters: `labelName` and `value`. It uses an XPath expression to locate the text area element based on the provided label name. \n\nHere's a step-by-step breakdown of what the method does:\n\n1. Creates an XPath expression to find the text area element by combining the label name with some common XPath syntax.\n2. Waits for the text area element to be present using `waitForElement`.\n3. Checks if the text area element is displayed using `isElementDisplayed`.\n4. Scrolls to the text area element using `scrollToWebElement` if it's not already visible.\n5. Types the given value into the text area element using `typeIn`.\n6. Waits for the page to fully load using `waitForPageToLoad`.\n7. Takes a manual screenshot of the high-lighted text area element and logs a message indicating that the value has been entered, including the label name and the entered value.\n8. If the text area element is not found or any other exception occurs during execution, it marks the test step as failed using `testStepFailed`.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterNomineeDob",
        "code": "public void enterNomineeDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"\n\t\t\t\t\t+ labelName + \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName+\" field Entered Nominee DOB as : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterNomineeDob \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterNomineeDob`, enters a value into a nominee date of birth (DOB) field on a web page. The method takes two parameters: `labelName` and `value`. \n\n1. It constructs an XPath locator for the nominee DOB field based on the provided label name.\n2. It waits for the field to be displayed, then scrolls to it if necessary.\n3. It enters the provided value into the field using a typeIn method (not shown in this snippet).\n4. After entering the value, it waits for the page to load completely.\n5. If the field is not present or any exception occurs during the process, it fails the test step.\n\nThe method uses various helper methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethodManualScreenShot` (not shown in this snippet) to perform these actions.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "InsuranceDetails",
        "code": "public void InsuranceDetails(String tabName, String componentName, String searchInsurancePremiumMastersLabel,\n\t\t\tString insuranceValue, String nomineeNameLabel, String nomineeNameValue, String nomineeDOBLabel,\n\t\t\tString nomineeDOBValue, String nomineeRelationLabel, String nomineeRelationValue, String nomineePhoneLabel,\n\t\t\tString nomineePhoneValue, String nomineeAddressLabel, String nomineeAddressValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Insurance Details-----\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(componentName);\n\t\t\twaitTime(5);\n\t\t\tsearchAndselectValueFromInsurance(searchInsurancePremiumMastersLabel, insuranceValue);\n\t\t\tenterValueInField(nomineeNameLabel, nomineeNameValue);\n\t\t\tenterNomineeDob(nomineeDOBLabel, nomineeDOBValue);\n\t\t\tselectValueFromDropdownInEmandate(nomineeRelationLabel, nomineeRelationValue);\n\t\t\tenterValueInField(nomineePhoneLabel, nomineePhoneValue);\n\t\t  //enterValueInTextArea(nomineeAddressLabel, nomineeAddressValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in InsuranceDetails \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to automate the process of filling out and submitting an insurance details form. The method takes 17 parameters: tab name, component name, search label, insurance value, nominee information (name, date of birth, relation, phone number, and address), and a save button label.\n\nThe method performs the following actions:\n\n1. Logs a test step message indicating that it is processing the insurance details.\n2. Selects the specified tab.\n3. Expands the arrows for the specified component.\n4. Waits for the page to load.\n5. Searches for and selects a value from an insurance premium master list based on the search label and insurance value.\n6. Enters values in fields for nominee name, date of birth, relation, phone number, and address (although the address field is commented out).\n7. Clicks the save button.\n\nIf any errors occur during these steps, the method catches the exception and logs a test step failure message indicating that the insurance details process failed.",
        "input": [
            "String tabName",
            "String componentName",
            "String searchInsurancePremiumMastersLabel",
            "String insuranceValue",
            "String nomineeNameLabel",
            "String nomineeNameValue",
            "String nomineeDOBLabel",
            "String nomineeDOBValue",
            "String nomineeRelationLabel",
            "String nomineeRelationValue",
            "String nomineePhoneLabel",
            "String nomineePhoneValue",
            "String nomineeAddressLabel",
            "String nomineeAddressValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "enterDateInBanking",
        "code": "public void enterDateInBanking(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"+labelName+\"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field,10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName+\" Date field Enter as : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDateInBanking \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterDateInBanking`, enters a given date value into a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\n- It first constructs an XPath expression to locate the desired input field based on the provided label name.\n- It then waits for the element to be displayed, scrolls to it if necessary, enters the given value into the field, and waits for the page to load completely.\n- If the element is not present or any other exception occurs during this process, it reports a test step failure.\n\nThe method also includes some logging and error handling mechanisms.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyExShowroomPriceValidation",
        "code": "public boolean verifyExShowroomPriceValidation(String expectedMessage1,String expectedMessage2) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] | //div//span[text()='Review the following errors']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList1 = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[1]\";\n\t\t\t\tString value1 = findWebElement(errorList1).getText().trim();\n\t\t\t\tif (value1.equalsIgnoreCase(expectedMessage1)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value1);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage1 + \" expected validation not fire instead got \" + value1);\n\t\t\t\t}\n\t\t\t\tString errorList2 = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[2]\";\n\t\t\t\tString value2 = findWebElement(errorList2).getText().trim();\n\t\t\t\tif (value2.equalsIgnoreCase(expectedMessage2)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage2 + \" expected validation not fire instead got \" + value2);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExShowroomPriceValidation \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyExShowroomPriceValidation`, verifies that two specific error messages are displayed on the page after a certain action is performed. The method takes two string parameters, `expectedMessage1` and `expectedMessage2`, which are the expected error messages to be displayed.\n\nThe method first waits for the page to load and then checks if an element with the specified XPath is displayed within a certain timeout (4 seconds). If the element is displayed, it extracts the text from two subsequent list items (`errorList1` and `errorList2`) and compares them to the expected messages. If the extracted texts match the expected messages, the method takes a manual screenshot and returns `true`. If the extracted texts do not match the expected messages or if the element is not displayed within the timeout, the method fails the test step.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step if an exception is thrown.",
        "input": [
            "String expectedMessage1",
            "String expectedMessage2"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "getOppErrorMsgAndCompare",
        "code": "public String getOppErrorMsgAndCompare(String expectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//p[@class='cCustomSalesPath']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" error message present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" error message not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opp error not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOppErrorMsgAndCompare.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getOppErrorMsgAndCompare`, is used to retrieve the text of an error message on a web page and compare it with the expected value. It uses various methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethod1` to interact with the web element.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `expectedValue`.\n2. It waits for an element on the page to be displayed using `waitForElement`.\n3. If the element is displayed, it scrolls to that element and highlights it using `scrollToWebElement` and `highLighterMethod1`, respectively.\n4. The method retrieves the text of the element using `getText`.\n5. It compares the retrieved text with the expected value passed as a parameter.\n6. If the text matches the expected value, it takes a manual screenshot with the message indicating that the error message is present as expected.\n7. If the text does not match the expected value or if the element is not displayed, it fails the test step with an appropriate error message.\n8. The method returns the retrieved text.\n\nNote that this method also handles exceptions by catching them and failing the test step with a descriptive error message.",
        "input": [
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "clickOnDeclarationChkBox",
        "code": "public void clickOnDeclarationChkBox() {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[@name='declarationChkBox']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOn(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Declaration check box is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the Declaration check box\");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDeclarationChkBox()`, attempts to click on a declaration checkbox element in a web page. It uses Selenium WebDriver's methods to:\n\n1. Wait for the element to be present and visible (using `waitForElement()`).\n2. Check if the element is displayed (using `isElementDisplayed()`).\n3. If the element is displayed, scroll to it (using `scrollToWebElement()`) and click on it (using `clickOn()`).\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "clickOnMkpOppLink",
        "code": "public String clickOnMkpOppLink() {\n\t\tString oppId=\"\";\n\t\ttry {\n\t\t\tString link = \"#xpath=(//div[text()='Opportunity']/..//a)[1]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\toppId=getText(link);\n\t\t\t\tmanualScreenshot(\"MKP Opportunity ID \"+oppId);\n\t\t\t\tclickOnSpecialElement(link);\t\t\t\t\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"MKP Opportunity link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnMkpOppLink \" + e.getClass().getName());\n\t\t}\n\t\treturn oppId;\n\t}",
        "description": "This Java method, `clickOnMkpOppLink()`, simulates a click on the first opportunity link found on the page and returns the ID of the opportunity. \n\nHere's what it does:\n\n1. It tries to find an XPath expression that matches the first opportunity link on the page.\n2. If the link is present, it waits for the element to be loaded (using `waitForElement()`), gets the text of the link (i.e., the ID of the opportunity), takes a screenshot with the ID (using `manualScreenshot()`), clicks on the link (using `clickOnSpecialElement()`), and then waits for the page to load (using `waitForPageToLoad()`).\n3. If the link is not present, it fails the test step.\n4. If any exception occurs during these steps, it also fails the test step.\n\nThe method returns the ID of the opportunity that was clicked.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "clickOnFMSLink",
        "code": "public String clickOnFMSLink() {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString customerName = \"customerName #xpath=//span[text()='Opportunity Details']/..//..//..//span[text()='FMS']/..//..//a\";\n\t\t\twaitForElement(customerName, 10);\n\t\t\tif (isElementDisplayed(customerName, 10)) {\n\t\t\t\tscrollToWebElement(customerName);\n\t\t\t\tvalue=getText(customerName);\n\t\t\t\thighLighterMethodManualScreenShot(customerName, value+\" is Available\");\n\t\t\t\tclickOn(customerName);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"FMS Link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFMSLink. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n//\tpublic void clickEditOptionWithTitle(String ScrollElement,String fieldLabel) {\n//\t\ttry {\n//\t\t\twaitForPageToLoad();\n//\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n//\t\t\t\t\t+ \"']/parent::div//..//button\";\n//\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n//\t\t\twaitForElement(scrollElement, 20);\n//\t\t\tscrollbycordinates(scrollElement);\n//\t\t\tif (isElementPresent(editOption)) {\n//\t\t\t\tscrollToWebElement(editOption);\n//\t\t\t\tclickOnSpecialElement(editOption);\n//\t\t\t\twaitTime(3);\n//\t\t\t} else {\n//\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n//\t\t\t}\n//\t\t} catch (Exception e) {\n//\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n//\t\t}\n//\t}",
        "description": "Here are brief descriptions of the two Java methods:\n\n**1. `clickOnFMSLink()`**\n\nThis method simulates a click on an FMS (Financial Management System) link on a web page. It uses various webdriver methods to:\n* Wait for the element to be displayed\n* Scroll to the element if it's not visible\n* Get the text of the element\n* Highlight the element with a screenshot\n* Click on the element\n* Wait for the page to load after the click\n\nIf the FMS link is not present, the method fails the test step. If an exception occurs during execution, the method also fails the test step.\n\n**2. `clickEditOptionWithTitle(String ScrollElement, String fieldLabel)`**\n\nThis method simulates a click on an \"Edit\" button with a specific title (e.g., \"Customer Name\") on a web page. It uses various webdriver methods to:\n* Wait for the page to load\n* Find the edit button based on the provided field label and scroll element\n* Scroll to the edit button if it's not visible\n* Click on the edit button\n* Wait for 3 seconds before continuing\n\nIf the edit button is not present, the method fails the test step. If an exception occurs during execution, the method logs a test step info message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String ScrollElement, String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\"+fieldLabel+\"']/parent::div//..//following-sibling::dd//button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\tscrollToElement(editOption);\n\t         \tscrollToWebElement(editOption);\n\t\t\t    clickOnSpecialElement(editOption);\n\t\t\t    waitTime(2);\n\t\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Clicked Edit Icon Of \" + fieldLabel);\n\t\t\t\t}\n \n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle`, simulates a click on an edit button with the given title. The method takes two parameters: `ScrollElement` and `fieldLabel`. \n\nIt first waits for the page to load, then constructs an XPath expression to locate the edit button based on the provided field label. It then scrolls to the element with the matching scroll element text, and if the edit button is present, it clicks on it, waits for a short time, and then checks again if the button is still present. If it's not, it takes a manual screenshot.\n\nIf the edit button is not found, it fails the test step. In case of any exception during execution, it logs an info message with the exception details.",
        "input": [
            "String ScrollElement",
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input | //label[contains(text(),'\"+labelName+\"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tscrollToElementTillPresent(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')]  | //label[text()='\"+labelName+\"']//parent::lightning-grouped-combobox//parent::div//child::div//span[contains(text(),'\"+value+\"')]\";\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField`, appears to be a part of an automation test script for Salesforce Lightning or similar web applications. The method takes two string parameters: `labelName` and `value`. \n\nThe method attempts to perform the following actions:\n\n1. Searches for an element with the given `labelName` using XPath.\n2. Scrolls to the found element, highlights it, and types in the provided `value`.\n3. Waits for a search icon associated with the element to appear.\n4. Clicks on the search icon.\n5. Waits for a new page load to complete.\n6. Searches for an element with the same `value` as the original label name using XPath (likely a link or button).\n7. If found, clicks on it.\n\nThe method also includes several error handling mechanisms:\n\n1. It checks if the provided `value` is empty and fails the test step if so.\n2. It waits for elements to be displayed and then performs actions on them.\n3. It uses try-catch blocks to catch any exceptions that might occur during the execution of the method.\n\nThe method seems to be designed to automate a specific workflow in Salesforce, possibly related to searching and selecting values from a list or dropdown field.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "clickOnDocSaveButton",
        "code": "public void clickOnDocSaveButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//article[@data-aura-class='cUploadFileCard']//button[text()='\" + value + \"']\";\n\t    \twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnDocSaveButton`, simulates a click on a button with a specific text value in an article section of a web page. The method takes a `String` parameter `value` which is used to construct the XPath locator for the button.\n\nHere's what the method does:\n\n1. It constructs an XPath locator by concatenating the provided `value` with some static text.\n2. It waits up to 10 seconds for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using `scrollToElement` and `scrollToWebElement`.\n4. It highlights the element using `highLighterMethod`.\n5. It clicks on the special element (likely a button) using `clickOnSpecialElement`.\n6. It waits for 5 seconds before continuing.\n7. If the element is not displayed within 10 seconds, it fails the test step with an error message.\n8. If any exception occurs during the execution of this method, it fails the test step with an error message.\n\nThis method appears to be part of a web automation testing framework and is likely used to automate interactions with a web application.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyFieldIsDisabled",
        "code": "public void verifyFieldIsDisabled(String labelName) {\n        try {            \n            String targetField = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n            waitForElement(targetField, 10);\n            if (isElementDisplayed(targetField, 5)) {\n                String getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n                if (getareaDisabledAttributeValue.equals(\"true\")) {\n                \tborderHighLighterMethod(targetField);\n                    manualScreenshot(labelName + \" field is disabled as expected\");\n                } else {\n                    testStepFailed(labelName + \" field is not disabled\");\n                }\n            } else {\n                testStepFailed(labelName + \" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `verifyFieldIsDisabled`, verifies that a specific field on a web page is disabled. \n\nHere's how it works:\n\n1. It takes a `labelName` as an input parameter.\n2. It constructs an XPath expression to locate the field with the given label name.\n3. It waits for the element to be present on the page using the `waitForElement` method.\n4. If the element is displayed, it checks if the \"disabled\" attribute of the field is set to \"true\".\n5. If the field is disabled as expected, it highlights the field with a border and takes a manual screenshot.\n6. If the field is not disabled or not present on the page, it fails the test step.\n7. It catches any exceptions that may occur during the execution of the method and fails the test step if an exception occurs.\n\nThis method can be used to verify the behavior of web forms, where certain fields should be disabled under specific conditions.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "selectPopupCheckbox",
        "code": "public void selectPopupCheckbox() {\n        try {            \n            String targetField = \"#xpath=//label[@class='slds-checkbox__label']//span[@class='slds-checkbox_faux']\";\n            String targetField1 = \"#xpath=//label[@c-submitforqc_submitforqc]//parent::div//input[@type='checkbox' and contains(@name,'confirm')]\";\n            String button = \"#xpath= //button[text()='Submit for QC']\";\n            waitForElement(targetField, 10);\n            if (isElementDisplayed(targetField, 5)) {\n               for (WebElement value : findWebElements(targetField)) {\n            \t   if (!value.isSelected()) {\n            \t\t   ((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", value);\n            \t\t    value.click();\n\t\t\t\t}else {\n\t\t\t\t\ttestStepInfo(\"Popup Check box already selected\");\n\t\t\t\t}\n\t\t\t}\n               if (isElementDisplayed(targetField1, 5)) {\n            \t  \n            \t   \n                   for (WebElement value1 : findWebElements(targetField1)) {\n                \t   if (!value1.isSelected()) {\n                \t\t   ((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\", value1);\n                \t\t   value1.click();\n    \t\t\t\t}\n    \t\t\t}\n              scrollToElement(button);\n         \t  clickOn(button);\n            } }else {\n                testStepFailed(\" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `selectPopupCheckbox`, is used to select a checkbox or checkboxes that are displayed as part of a popup. It uses Selenium WebDriver and JavaScriptExecutor to interact with the webpage.\n\nHere's what it does:\n\n1. Waits for two specific fields (`targetField` and `targetField1`) to be displayed on the page.\n2. If either field is displayed, it checks each checkbox in that field to see if it's already selected. If not, it scrolls into view and clicks the checkbox.\n3. It then moves to a button with the text \"Submit for QC\" (`button`), scrolls to it, and clicks it.\n\nIf any of these steps fail (e.g., the fields aren't present or the checkboxes can't be clicked), the method catches the exception and reports a failure test step.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyErrorPopupWithoutFail",
        "code": "public boolean verifyErrorPopupWithoutFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"#xpath=//div[text()='Error']//parent::div//following-sibling::div//span\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tflag = true;\n\t\t\t\tString text = getText(error);\n\t\t\t\ttestStepFailed(\"Error Popup Appreared with Message : \" +text);\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepInfo(\"Due to above error,cannot proceed further\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepPassed(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInDoPopupWithoutFail\" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorPopupWithoutFail`, is used to verify whether an error popup appears with a specific message. It takes two parameters: the XPath of the error message and a timeout value (in this case, 2 seconds). \n\nThe method first sets a boolean flag to `false`. Then it tries to check if the element specified by the given XPath is displayed within the given timeout. If the element is displayed, the flag is set to `true`, the text of the error message is obtained, and a test step failure is reported with the error message as the reason. \n\nIf the element is not displayed (i.e., there is no error), a test step pass is reported indicating that there was no error while changing the stage. \n\nIn case any exception occurs during the execution of this method, it is caught and a test step failure is reported with the exception type as the reason. The method returns the value of the flag, which indicates whether an error popup appeared or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyExpectedValidationInSqcPopup",
        "code": "public boolean verifyExpectedValidationInSqcPopup(String labelName, Boolean expectedCondition) {\n\t\tboolean flag = expectedCondition;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the following fields']\";\n\t\t\tString fieldError = \"Error Header#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::div//li[contains(@class,'help')]\";\n\n\t\t\tString errorValue = null;\n\t\t\twaitForPageToLoad();\n\t\t\tif (!flag) {\n\t\t\t\twaitForElement(error, 4);\n\t\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\t\tmanualScreenshot(\"Got Validation Message under as  \" + labelName + \" Field is \" + (i + 1)\n\t\t\t\t\t\t\t\t+ \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t\terrorValue = errorsList.get(i).getText().trim();\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation not Fired.\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\t\tmanualScreenshot(\"Got Validation : \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t\terrorValue = errorsList.get(i).getText().trim();\n\t\t\t\t\t}\n\t\t\t\t\ttestStepFailed(\"Got Validation : \" + errorValue + \" , Due to this Error Cannot Move Further\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"Validation Not Fired as Expected\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyExpectedValidationInSqcPopup`, is used to verify the expected validation message in an SQC popup. The method takes two parameters: `labelName` (the name of the field being validated) and `expectedCondition` (a boolean indicating whether the validation message should be displayed or not).\n\nThe method first sets a flag variable to the value of `expectedCondition`. It then attempts to wait for the page to load, and if the expected condition is false, it waits for an error element to appear and checks if it's displayed. If the error is displayed, it retrieves the text of each error message in the list and takes manual screenshots for each one.\n\nIf the expected condition is true, it does the same process as above but also sets a test step failed message when an error is found. If no errors are found, it sets a test step passed message indicating that the validation was not fired as expected.\n\nThe method returns the value of the flag variable at the end.",
        "input": [
            "String labelName",
            "Boolean expectedCondition"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifySearchAndListFieldEmpty",
        "code": "public void verifySearchAndListFieldEmpty(String labelName) {\n\t\ttry {\n\t\t\tString link = labelName + \"#xpath=//span[text()='\"+labelName+\"']//parent::label//following-sibling::div//ul[@class='orderedList']//span[@class='pillText']\";\n\t\t\tString clearBtn = labelName + \"#xpath=//span[text()='\"+labelName+\"']//parent::label//following-sibling::div//a[@class='deleteAction']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(clearBtn);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is Empty\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + labelName +\" Clear button\");\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchAndListFieldEmpty`, appears to be part of an automation test script. Its purpose is to verify that a search and list field is empty by:\n\n1. Constructing two XPath-based links: one for the search result (link) and another for the clear button (clearBtn).\n2. Waiting for the link to appear (using `waitForElement` method) and checking if it's displayed within 10 seconds.\n3. If the link is displayed, the method:\n\t* Scrolls to the element using `scrollToElement` and `scrollToWebElement` methods.\n\t* Highlights the element using `highLighterMethod`.\n\t* Clicks on the clear button using `clickOnSpecialElement` method.\n4. Waits for 5 seconds after clicking the clear button.\n5. If the link is not displayed (i.e., the field is empty), it logs a test step info message indicating that the field is empty.\n\nIf any exception occurs during execution, it catches and reports the failure with a test step failed message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "verifyEditOptionWithTitle",
        "code": "public void verifyEditOptionWithTitle(String ScrollElement,String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div//..//button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(fieldLabel + \" edit button already clicked\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyEditOptionWithTitle`, is used to verify the presence and functionality of an edit option with a specific title on a web page. The method takes two parameters: `ScrollElement` (the label of the scroll element) and `fieldLabel` (the label of the field that needs to be edited).\n\nHere's what the method does:\n\n1. Waits for the page to load.\n2. Constructs an XPath expression to locate the edit option button based on the provided `fieldLabel`.\n3. Locates the scroll element by its text, waits for it to appear, and scrolls to it using the `scrollbycordinates` method.\n4. Checks if the edit option button is present; if it is:\n\t* Scrolls to the edit option button using the `scrollToWebElement` method.\n\t* Clicks on the edit option button using the `clickOnSpecialElement` method.\n\t* Waits for 3 seconds before proceeding.\n5. If the edit option button is not present, logs a test step indicating that it has already been clicked.\n\nIf any exceptions occur during the execution of this method, they are caught and logged with a test step message indicating the failure.",
        "input": [
            "String ScrollElement",
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "searchInExtendedWarranties",
        "code": "public void searchInExtendedWarranties(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()='\"+ labelName +\"']//following::div/input[contains(@placeholder,'Search Available Extended Warranties')]\";\n\t\t\twaitForElement(field, 30);;\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field,value );\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOnSpecialElement(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Extended Warranty Selected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `searchInExtendedWarranties`, performs a search for an extended warranty based on the provided `labelName` and `value`. \n\nHere's what it does:\n\n1. It constructs a unique XPath expression by concatenating the `labelName` with a specific pattern.\n2. It waits for this element to be present on the page, then scrolls to it if necessary.\n3. If the element is displayed, it types in the provided `value` into the search input field.\n4. After typing in the value, it waits for the page to load completely.\n5. It then searches for a specific lookup value (which is the same as the provided `value`) using another XPath expression.\n6. If this lookup value is displayed on the page, it clicks on it and waits for the page to load again.\n7. If any of these steps fail, it reports a test step failure with an appropriate message.\n\nThe method uses various helper methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `typeIn`, `clickOnSpecialElement`, `waitForPageToLoad`, and `testStepFailed` to perform the search operation.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "insuranceAndExtendedWarrantyDetails",
        "code": "public void insuranceAndExtendedWarrantyDetails(String doProcessAndCrossSellLabel, String insuranceAndExtendedWarrantyLabel, String declarationOfGoodHealthLabel,\n\t\t\tString declarationOfGoodHealthValue, String searchInsurancePremiumMastersLabel,\n\t\t\tString searchInsurancePremiumMastersValue, String searchGroupCare360Label, String searchGroupCare360Value,\n\t\t\tString searchHdfcLifeGroupSurakshaLabel, String searchHdfcLifeGroupSurakshaValue, String nomineeNameLabel,\n\t\t\tString nomineeNameValue, String nomineeDobLabel, String nomineeDobValue, String nomineeGenderLabel,\n\t\t\tString nomineeGenderValue, String nomineeRelationLabel, String nomineeRelationValue,\n\t\t\tString nomineePhoneLabel, String nomineePhoneValue, String availableExtendedWarrantyLabel,\n\t\t\tString availableExtendedWarrantyValue, String manufacturerWarrantyLabel, String manufacturerWarrantyValue,\n\t\t\tString dealerWarrantyLabel, String dealerWarrantyValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Insurance Details-----\");\n\t\t\tselectTabs(doProcessAndCrossSellLabel);\n\t\t\texpandArrows(insuranceAndExtendedWarrantyLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tselectValueFromDropdownInEditBox(declarationOfGoodHealthLabel, declarationOfGoodHealthValue);\n\t\t\tsearchAndselectValueFromInsurance(searchInsurancePremiumMastersLabel,\n\t\t\t\t\tsearchInsurancePremiumMastersValue);\n\t\t\tsearchAndselectValueFromInsurance(searchGroupCare360Label, searchGroupCare360Value);\n\t\t\tsearchAndselectValueFromInsurance(searchHdfcLifeGroupSurakshaLabel,\n\t\t\t\t\tsearchHdfcLifeGroupSurakshaValue);\n\t\t\tenterValueInField(nomineeNameLabel, nomineeNameValue);\n\t\t\tenterValueInField(nomineeDobLabel, nomineeDobValue);\n\t\t\tselectValueFromDropdownInEditBox(nomineeGenderLabel, nomineeGenderValue);\n\t\t\tselectValueFromDropdownInEditBox(nomineeRelationLabel, nomineeRelationValue);\n\t\t\tenterValueInField(nomineePhoneLabel, nomineePhoneValue);\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\ttestStepInfo(\"-----Extended Warranty Details-----\");\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(insuranceAndExtendedWarrantyLabel);\n\t\t\tsearchInExtendedWarranties(availableExtendedWarrantyLabel, availableExtendedWarrantyValue);\n\t\t\tselectValueFromDropdownInEmandate(manufacturerWarrantyLabel, manufacturerWarrantyValue);\n\t\t\tselectValueFromDropdownInEmandate(dealerWarrantyLabel, dealerWarrantyValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in insuranceAndExtendedWarrantyDetails \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to automate the process of filling out and submitting forms related to insurance and extended warranty details. It takes 22 string parameters that represent various labels, values, and button names.\n\nThe method performs the following steps:\n\n1. Displays a test step message indicating that it's processing insurance details.\n2. Selects a tab based on the `doProcessAndCrossSellLabel` parameter.\n3. Expands arrows for insurance and extended warranty details.\n4. Waits for the page to load.\n5. Fills out fields with values from the `declarationOfGoodHealthLabel`, `nomineeNameLabel`, `nomineeDobLabel`, `nomineeGenderLabel`, `nomineeRelationLabel`, and `nomineePhoneLabel` parameters.\n6. Searches and selects values from insurance options for three different types of insurance (searchInsurancePremiumMasters, searchGroupCare360, and searchHdfcLifeGroupSuraksha).\n7. Clicks the \"Save\" button to submit the insurance details.\n\nThen, it performs similar steps for extended warranty details:\n\n1. Displays a test step message indicating that it's processing extended warranty details.\n2. Waits for the page to load again.\n3. Expands arrows for insurance and extended warranty details (again).\n4. Searches for available extended warranties based on the `availableExtendedWarrantyLabel` and `availableExtendedWarrantyValue` parameters.\n5. Selects values from dropdown menus for manufacturer and dealer warranties.\n6. Clicks the \"Save\" button again to submit the extended warranty details.\n\nIf any exceptions occur during these steps, it catches them and logs a test step failure message with the exception class name.",
        "input": [
            "String doProcessAndCrossSellLabel",
            "String insuranceAndExtendedWarrantyLabel",
            "String declarationOfGoodHealthLabel",
            "String declarationOfGoodHealthValue",
            "String searchInsurancePremiumMastersLabel",
            "String searchInsurancePremiumMastersValue",
            "String searchGroupCare360Label",
            "String searchGroupCare360Value",
            "String searchHdfcLifeGroupSurakshaLabel",
            "String searchHdfcLifeGroupSurakshaValue",
            "String nomineeNameLabel",
            "String nomineeNameValue",
            "String nomineeDobLabel",
            "String nomineeDobValue",
            "String nomineeGenderLabel",
            "String nomineeGenderValue",
            "String nomineeRelationLabel",
            "String nomineeRelationValue",
            "String nomineePhoneLabel",
            "String nomineePhoneValue",
            "String availableExtendedWarrantyLabel",
            "String availableExtendedWarrantyValue",
            "String manufacturerWarrantyLabel",
            "String manufacturerWarrantyValue",
            "String dealerWarrantyLabel",
            "String dealerWarrantyValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS_Revamp",
        "function_name": "primaryApplicantEcsAndSqcDetailsWithValidation",
        "code": "public void primaryApplicantEcsAndSqcDetailsWithValidation(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\n\t\t\tverifyCurrentStageOfOpportunity(\"Post DO\");\n\t\t\ttestStepInfo(\"# Enter ECS and Submit For QC Details #\");\n/*\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {*/\n\n\t\t\t\tclickMainButtons(componentName);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tclickOnButton(editLabel);\n\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\n\t\t//\t}\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(10);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(3);\n\n\t\t\t\tselectTabs(\"Details\");\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(3);\n\n\t\t\t\texpandArrows(\"FMS\");\n\n\t\t\t\texpandArrows(\"Additional Info Entry\");\n\n\t\t\t//\tEditWithoption(ovdAddressLine1Label);\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\n\t\t\t} else {\n\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\n\t\t\t}\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\n\t\t\n\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\n\t\t\t}\n\n\t\t\tselectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(5);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t\t\tclickMainButtons(\"Submit for QC\");\n\n\t\t\t\tclickOnButtonInRecallPopup(saveLabel);\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\n\t\t\t\twaitTime(5);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n}",
        "description": "This Java method, `primaryApplicantEcsAndSqcDetailsWithValidation`, is used to automate a series of actions on a web application. The method takes several string parameters that represent various labels and values for the application.\n\nHere's a brief summary of what the method does:\n\n1. It calls another method, `verifyCurrentStageOfOpportunity`, to verify the current stage of an opportunity.\n2. It then performs a series of actions on the application, including:\n\t* Selecting tabs and expanding arrows\n\t* Clicking buttons and entering values in fields\n\t* Waiting for certain conditions to be met (e.g., page loads)\n3. The method also includes some conditional logic based on the environment value (UAT or PREPROD). This determines which specific actions are taken.\n4. If an exception occurs during the execution of the method, it catches the exception and logs a failure message.\n\nThe method is intended to automate the process of entering ECS and SQC details for a primary applicant in a web application.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "selectDropdownValue",
        "code": "public void selectDropdownValue(String label,String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=//label[contains(text(),'\" + label\n\t\t\t\t+ \"')]//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//span//span[text()='\" + dealerName + \"']\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tscrollToElement(dealerOption);\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethodManualScreenShot(dealer, label +\" Selected values is : \"+dealerName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(label +\" dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label +\" value is Empty.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage\");\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage \" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectDropdownValue`, selects a value from a dropdown menu by label and dealer name. Here's a brief summary of what it does:\n\n1. It takes two string parameters: `label` (the text to search for in the dropdown) and `dealerName` (the specific value to select).\n2. If `dealerName` is not empty, it:\n\t* Locates the dropdown menu element using XPath.\n\t* Scrolls to the dropdown menu if it's not already visible.\n\t* Clicks on the dropdown menu to expand it.\n\t* Scrolls to and selects the desired dealer option by name.\n\t* Waits for the page to load after selection.\n3. If `dealerName` is empty, it fails the test step with an error message indicating that the value is empty.\n4. The method also includes error handling to catch any exceptions that might occur during execution.\n\nThe method seems to be part of a larger automation framework, as it uses various utility methods like `waitForElementUntilVisible`, `scrollToWebElement`, `clickOn`, and `highLighterMethodManualScreenShot`.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "selectLanguageInSeachPage",
        "code": "public void selectLanguageInSeachPage(String label,String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=(//label[text()='\"+label+\"']//following-sibling::div//button)[1]\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//div//div[text()='\"+dealerName+\"']\";\n\t\t\t\tString selectButton = \"Dealeroption#xpath=//div//button[text()='Select']\";\n\t\t\t\twaitTime(3);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tscrollToWebElement(dealerOption);\n\t\t\t\t\t\tscrollToElement(dealerOption);\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tif (isElementPresent(selectButton)) {\n\t\t\t\t\t\t\tscrollToWebElement(selectButton);\n\t\t\t\t\t\t\tscrollToElement(selectButton);\n\t\t\t\t\t\t\tclickOn(selectButton);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\ttestStepFailed(\"Select button not available in Language\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(label +\" dropdown is not present\");\n \n\t\t\t\t}\n\t\t\t\thighLighterMethodManualScreenShot(dealer, label +\" Selected values is : \"+dealerName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label +\" value is Empty.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage\");\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage \" + e.getClass().getName());\n \n\t\t}\n\t}",
        "description": "This Java method, `selectLanguageInSeachPage`, is used to select a language option from a dropdown list on a search page. The method takes two parameters: `label` and `dealerName`. \n\nThe method first checks if the `dealerName` parameter is not empty. If it's not empty, it attempts to find the corresponding dealer dropdown element using XPath and clicks on it. Then, it verifies that the selected dealer option is displayed and clicks on it as well. After selecting the dealer option, it waits for the page to load and then checks if the \"Select\" button is present. If the button is present, it clicks on it; otherwise, it fails the test step with an error message.\n\nIf any of these steps fail (e.g., the dealer dropdown or option is not present), the method will also fail the test step with a descriptive error message. \n\nFinally, if all steps are successful, the method takes a manual screenshot using the `highLighterMethodManualScreenShot` method, highlighting the selected language value and its corresponding name.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyLanguagesInSearchPage",
        "code": "public void verifyLanguagesInSearchPage(String labelName, String values) {\n\t\tString[] languages = values.split(\",\");\n\t\tList<String> value = new ArrayList<String>();\n\t\ttry {\n\t\t\tString languageButton = \"Dealer#xpath=(//label[text()='\"+labelName+\"']//following-sibling::div//button)[1]\";\n\t\t\tString languageOptions = \"Dealeroption#xpath=//div[@class='language-grid']//div\";\n\t\t\tString cancelButton = \"Dealeroption#xpath=//div//button[text()='Cancel']\";\n\t\t\tif (isElementDisplayed(languageButton, 10)) {\n\t\t\t\tscrollToWebElement(languageButton);\n\t\t\t\tclickOn(languageButton);\n\t\t\t\tif (isElementDisplayed(languageOptions, 10)) {\n\t\t\t\t\tList<WebElement> findWebElements = findWebElements(languageOptions);\n\t\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\t\tvalue.add(text);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < languages.length; i++) {\n\t\t\t\t\t\tif (languages[i].equalsIgnoreCase(value.get(i))) {\n\t\t\t\t\t\t\ttestStepPassed(languages[i] + \" is present in the list\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value.get(i) + \" new value added in list\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmanualScreenshot(\"List of exepected values are present in \" + labelName);\n\t\t\t\t\t\n\t\t\t\t\tif (isElementPresent(cancelButton)) {\n\t\t\t\t\t\tscrollToWebElement(cancelButton);\n\t\t\t\t\t\tscrollToElement(cancelButton);\n\t\t\t\t\t\tclickOn(cancelButton);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}else {\n\t\t\t\t\t\ttestStepFailed(\"Cancel button not available in Language\");\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Languages are not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyLanguagesInSearchPage \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter value in search page     \n\t * @param \t      :  tabName is the name of page\n\t * @param \t      :  dealerLabel is the field name\n\t * @param \t      :  dealerName is the dealer name to select\n\t * @param \t      :  applicantTypeLabel is the field name\n\t * @param \t      :  applicantTypeValue is the type name to select\n\t * @param \t      :  mobileNumberLabel is the field name\n\t * @param \t      :  mobileNumberValue is the mobile number to enter\n\t * @param \t      :  primaryMobileNumberLabel is the field name\n\t * @param \t      :  primaryMobileNumberValue is the mobile number to enter\n\t * @param \t      :  buttonName is search button\n\t * \n\t */",
        "description": "This Java method, `verifyLanguagesInSearchPage`, verifies that the languages specified in the input string `values` are present in a search page. The method:\n\n1. Splits the input string into an array of language names using commas as separators.\n2. Uses XPath to locate and click on a button with the label name matching the input `labelName`.\n3. Verifies that the resulting page contains a list of language options.\n4. Iterates through the expected languages and checks if each one is present in the list. If not, it reports a failure.\n5. Takes a manual screenshot to capture the result.\n6. If the Cancel button is present, clicks on it and waits for the page to load before proceeding.\n7. Reports any failures that occur during the execution of the method.\n\nThis method appears to be part of an automated testing framework, likely using Selenium WebDriver, to verify the functionality of a search page in a web application.",
        "input": [
            "String labelName",
            "String values"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "searchCustomer",
        "code": "public void searchCustomer(String tabName, String dealerLabel, String dealerName, String applicantTypeLabel,\n\t\t\tString applicantTypeValue, String mobileNumberLabel, String mobileNumberValue,\n\t\t\tString primaryMobileNumberLabel, String primaryMobileNumberValue, String buttonName) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Details In Search Page #\");\n\t\t\tselectTabs(tabName);\n\t\t\tselectDropdownValue(dealerLabel, dealerName);\n\t\t\tselectDropdownValue(applicantTypeLabel, applicantTypeValue);\n\t\t\tenterValueInField(mobileNumberLabel, mobileNumberValue);\n\t\t\t\n\t\t\n\t\t\tif (applicantTypeValue.equalsIgnoreCase(\"With Co-Applicant\")) {\n\t\t\t\tenterValueInField(primaryMobileNumberLabel, primaryMobileNumberValue);\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectLanguageInSeachPage(\"Primary Preferred Alternate Language\", \"HINDI\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tselectLanguageInSeachPage(\"Preferred Alternate Language\", \"ASSAMESE\");\n\t\t\t\n\t\t\tclickOnButton(tabName);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\t\t\n\t\t\n\t\t\tclickOnButton(buttonName);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchCustomer \" + e.getClass().getName());\n\t\t}\n\t}\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  method to verify two error message      \n\t * @param \t      :  validation1 is the expected message need to compare\n\t * @param \t      :  validation2 is the expected message need to compare\n\t * @param \t      :  validation3 is the expected message need to compare\n\t */",
        "description": "This Java method, `searchCustomer`, simulates a search customer process in an application. It takes several string parameters that represent various fields and labels on the search page.\n\nThe method performs the following actions:\n\n1. Logs a test step info for entering details in the search page.\n2. Selects a tab based on the provided `tabName`.\n3. Selects values from dropdown lists for dealer, applicant type, and preferred alternate language (Assamese).\n4. Enters values into text fields for mobile number and primary mobile number (if applicable).\n5. If the applicant type is \"With Co-Applicant\", enters a value into the primary mobile number field.\n6. Selects Hindi as the primary preferred alternate language if the environment is UAT.\n7. Clicks on the search button to load the results page.\n8. Waits for the page to load and then waits for 5 seconds.\n9. Clicks on another button (with the name provided in the `buttonName` parameter) to perform some further action.\n10. Waits again for the page to load and then waits for 5 seconds.\n\nThe method also catches any exceptions that occur during execution and logs a test step failure with the exception details if an error occurs.",
        "input": [
            "String tabName",
            "String dealerLabel",
            "String dealerName",
            "String applicantTypeLabel",
            "String applicantTypeValue",
            "String mobileNumberLabel",
            "String mobileNumberValue",
            "String primaryMobileNumberLabel",
            "String primaryMobileNumberValue",
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyThreeErrorPopupMessage",
        "code": "public void verifyThreeErrorPopupMessage(String validation1, String validation2, String validation3) {\n\t\tString errorValidation = null;\n\t\ttry {\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\tList<WebElement> messages = findWebElements(error_Msg);\n\t\t\t\tfor (int iterate = 0; iterate <= 2; iterate++) {\n\t\t\t\t\terrorValidation = messages.get(iterate).getText().trim();\n\t\t\t\t\tif (errorValidation.equalsIgnoreCase(validation1) || errorValidation.equalsIgnoreCase(validation2)\n\t\t\t\t\t\t\t|| errorValidation.equalsIgnoreCase(validation3)) {\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - \" + errorValidation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyThreeErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get pre filled value\n\t * @param \t      :  labelName is field name\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `verifyThreeErrorPopupMessage`, verifies if three specific error messages are displayed in a popup message. The method takes three string parameters `validation1`, `validation2`, and `validation3` as input.\n\nHere's what the method does:\n\n1. It checks if an element with the identifier `error_Msg` is displayed within 5 seconds.\n2. If the element is displayed, it retrieves a list of web elements that match the `error_Msg` identifier.\n3. The method then iterates through the first three elements in the list and extracts their text content (trimmed to remove any whitespace).\n4. For each extracted error message, it checks if the message matches one of the input validation strings (`validation1`, `validation2`, or `validation3`) using case-insensitive comparison.\n5. If a match is found, it takes a manual screenshot with a descriptive title indicating that the expected error validation was captured successfully.\n6. If no match is found, it marks the test step as failed and reports an error message indicating that the expected validation did not fire.\n7. If the element `error_Msg` is not displayed, it also marks the test step as failed and reports an error message.\n\nThe method catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String validation1",
            "String validation2",
            "String validation3"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "getPreFilledValue",
        "code": "public String getPreFilledValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//label[text()='\" + labelName + \"']//following-sibling::div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(value + \" value is prefilled in \" + labelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not prefilled in \" + labelName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getPreFilledValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to check dealer drop down as only one dealer is present       \n\t * @param \t      :  label is the name of the field\n\t * @param \t      :  dealerName is the value need to select\n\t */",
        "description": "This Java method, `getPreFilledValue(String labelName)`, retrieves a pre-filled value from a web page element with a given label name. Here's a brief overview:\n\n1. It takes a `labelName` as input and constructs an XPath expression to locate the corresponding web element.\n2. The method uses various utility methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `getText`) to interact with the element.\n3. If the element is displayed, it retrieves its text value and checks if it's not empty.\n4. If the value is not empty, it performs some additional actions: highlights the element using a `highLighterMethod` and takes a manual screenshot with a descriptive message.\n5. If the value is empty or the element is not displayed, the method reports a test step failure with an appropriate error message.\n6. In case of any exceptions, the method catches them and reports another test step failure.\n\nThe method returns the retrieved pre-filled value as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "checkDealerDropDown",
        "code": "public void checkDealerDropDown(String label, String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\t\tString dealerOptions = \"Dealeroption#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//lightning-base-combobox-item//span[@class='slds-truncate']\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//span//span[text()='\" + dealerName + \"']\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOptions, 10)) {\n\t\t\t\t\t\tint size = findWebElements(dealerOptions).size();\n\t\t\t\t\t\tif (size == 1) {\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\thighLighterMethod(dealerOption);\n\t\t\t\t\t\t\tmanualScreenshot(\"Single and expected dealer is present in dealer drop down\");\n\t\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Multiple values present in dealer drop down\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Dealer Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkDealerDropDown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to check applicant type values      \n\t * @param \t      :  label is the name of the field\n\t * @param \t      :  dealerName is the value need to select\n\t */",
        "description": "This Java method, `checkDealerDropDown`, checks if a specific dealer dropdown option is present and selects it. The method takes two parameters: `label` (the name of the field) and `dealerName` (the value to be selected).\n\nHere's what the method does:\n\n1. It first checks if the `dealerName` parameter is not empty.\n2. If it's not empty, it creates three strings: `dealer`, `dealerOptions`, and `dealerOption`. These strings are used to create XPath expressions for locating specific elements on the page.\n3. The method then waits for the `dealer` element to be visible, checks if it's displayed, and scrolls to it if necessary.\n4. If the dealer dropdown is present, it clicks on it and checks if the options are also displayed.\n5. If there's only one option (i.e., the selected dealer), it waits for the page to load, highlights the `dealerOption` element, takes a screenshot, and selects the option.\n6. If there are multiple options or the dropdown is not present, it fails the test step.\n\nIf the `dealerName` parameter is empty, the method fails the test step with an error message.\n\nThe method also includes some logging and error handling using try-catch blocks to catch any exceptions that might occur during its execution.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "checkApplicantTypeValues",
        "code": "public void checkApplicantTypeValues(String label, String applicantType1, String applicantType2) {\n\t\ttry {\n\t\t\tString applicantType = \"ApplicantType#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\tString applicantTypeValue = \"ApplicantTypeValue#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label\n\t\t\t\t\t+ \"')]/parent::div//following-sibling::div//span/span\";\n\t\t\twaitForElementUntilVisible(applicantType);\n\t\t\tif (isElementDisplayed(applicantType, 10)) {\n\t\t\t\tscrollToWebElement(applicantType);\n\t\t\t\tclickOn(applicantType);\n\t\t\t\tif (isElementDisplayed(applicantTypeValue, 10)) {\n\t\t\t\t\tList<WebElement> values = findWebElements(applicantTypeValue);\n\t\t\t\t\tfor (int iterate = 0; iterate < values.size(); iterate++) {\n\t\t\t\t\t\tString value = values.get(iterate).getText().trim();\n\t\t\t\t\t\tif (value.equalsIgnoreCase(applicantType1) || value.equalsIgnoreCase(applicantType2)) {\n\t\t\t\t\t\t\thighLighterMethod(applicantType);\n\t\t\t\t\t\t\tmanualScreenshot(value + \" is present in applicant type as expected\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Expected applicant type validation is not fire\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is are not present in Applicant Type dropdown.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select Applicant Type drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkApplicantTypeValues \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to validate mobile number length     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the 10 digit\n\t */",
        "description": "This Java method, `checkApplicantTypeValues`, is used to validate the values present in an Applicant Type dropdown. It takes three parameters: a label, and two applicant types (`applicantType1` and `applicantType2`). The method performs the following actions:\n\n1. Creates XPath expressions for the Applicant Type dropdown and its corresponding value.\n2. Waits for the Applicant Type dropdown to be visible and then scrolls to it if necessary.\n3. Clicks on the dropdown to expand its options.\n4. Verifies that the values in the dropdown match either of the provided applicant types (`applicantType1` or `applicantType2`). If a matching value is found, it highlights the dropdown and takes a manual screenshot.\n5. If no matching value is found, it fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String label",
            "String applicantType1",
            "String applicantType2"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "validateMobileNumerLength",
        "code": "public void validateMobileNumerLength(String labelName, String length,String number) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString value = findWebElement(field).getAttribute(\"maxlength\");\n\t\t\t\tif(value.equals(length))\n\t\t\t\t{\t\t\t\t\t\t\t\n\t\t\t\ttypeIn(field, number);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(\"Maximum length of mobile number field is \"+value+\" and entered \"+number);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName + \" field length is not \"+length+\" instead we got \"+value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validateMobileNumerLength \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get customer type after search\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `validateMobileNumerLength`, validates the length of a mobile number field on a web page. It takes three parameters: `labelName` (the label associated with the field), `length` (the expected maximum length of the field), and `number` (the actual value entered in the field).\n\nHere's what the method does:\n\n1. It searches for the specified label name and its corresponding input field using an XPath expression.\n2. If the field is found, it waits for the element to be displayed, scrolls to the field if necessary, and retrieves the maximum length of the field.\n3. It compares the retrieved length with the expected length passed as a parameter.\n4. If the lengths match, it enters the provided `number` in the field, waits for the page to load, highlights the entered value (using a high-lighting method), and takes a manual screenshot.\n5. If the lengths do not match, it marks the test step as failed with an error message indicating that the field length is different from the expected value.\n\nIf the field is not found or there's an exception during the process, the method also marks the test step as failed with an appropriate error message.",
        "input": [
            "String labelName",
            "String length",
            "String number"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "getSearchResultCustomerType",
        "code": "public void getSearchResultCustomerType(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Customer Type')]\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).split(\":\")[1].trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue + \" Expected value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Expected value is not present in Search Result Page instead got \"\n\t\t\t\t\t\t\t+ value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getSearchResultCustomerType\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get text after search\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `getSearchResultCustomerType`, is used to verify the customer type in a search result page. It takes a string parameter `expectedValue` which represents the expected customer type.\n\nHere's what the method does:\n\n1. It waits for an element with the XPath `//div[contains(text(),'Customer Type')]` to be displayed.\n2. If the element is displayed, it scrolls to that element and gets its text content.\n3. It then compares the text content with the provided `expectedValue`.\n4. If the values match, it highlights the element (using a high-lighting method) and takes a manual screenshot as proof of the expected value being present in the search result page.\n5. If the values do not match or if the element is not displayed, it fails the test step with an appropriate error message.\n\nThe method also includes error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "getSearchResultText",
        "code": "public void getSearchResultText(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='slds-align_absolute-center']\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue + \" Expected value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Expected value is not present in Search Result Page instead got \"\n\t\t\t\t\t\t\t+ value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getSearchResultText\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to verify offer details not present in search result page\n\t */",
        "description": "This Java method, `getSearchResultText`, is used to verify the presence of a specific expected value in the search result page. It takes one input parameter, `expectedValue`, which is the value that should be displayed in the search results.\n\nThe method first waits for an element with the specified XPath (`#xpath=//div[@class='slds-align_absolute-center']`) to be displayed, and then checks if the element is actually displayed on the page. If it is, the method scrolls to the element and retrieves its text content. It then compares this text content to the expected value provided as input.\n\nIf the expected value matches the actual text content, the method highlights the element (using a highlighter method) and takes a manual screenshot with a message indicating that the expected value was found in the search results. If the values do not match, the method reports a test step failure with an error message indicating that the expected value was not found.\n\nIf the element is not displayed on the page or if there is an exception during the execution of this method, it also reports a test step failure with an error message.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifySearchOfferNotPresent",
        "code": "public void verifySearchOfferNotPresent() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Two Wheeler Offer')]\";\n\t\t\tString Element1 = \"#xpath=//div[contains(text(),'Two Wheeler Limit')]\";\n\t\t\tif (!isElementDisplayed(Element, 5)) {\n\t\t\t\tif(isElementDisplayed(Element1, 5))\n\t\t\t\t{\n\t\t\t\thighLighterMethod1(Element1);\n\t\t\t\tmanualScreenshot(\"Two Wheeler Offer is not present instead Two Wheeler Limit is present as expected\");\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"Two Wheeler Limit is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Two Wheeler Offer details is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchOfferNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchOfferNotPresent`, is used to verify that a specific search offer element is not present on the webpage. It takes two XPath expressions as input: one for the \"Two Wheeler Offer\" and another for the \"Two Wheeler Limit\". \n\nThe method first checks if the \"Two Wheeler Offer\" element is displayed within 5 seconds using the `isElementDisplayed` method. If it's not displayed, it then checks if the \"Two Wheeler Limit\" element is displayed. If it is, the method highlights the \"Two Wheeler Limit\" element using a custom `highLighterMethod1` and takes a manual screenshot with the comment \"Two Wheeler Offer is not present instead Two Wheeler Limit is present as expected\". \n\nIf neither of these elements are displayed, the method fails the test step with an error message. If the \"Two Wheeler Offer\" element is displayed, the method also fails the test step with an error message. \n\nIn case any exception occurs during the execution of this method, it catches the exception and fails the test step with a message including the type of exception that occurred.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifySearchOfferIsPresent",
        "code": "public void verifySearchOfferIsPresent() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Two Wheeler Offer')]\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString offer =getText(Element);\n\t\t\t\tmanualScreenshot(\"Two Wheeler Offer details is present as expected \"+offer);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Two Wheeler Offer details is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchOfferIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchOfferIsPresent`, verifies that the \"Two Wheeler Offer\" element is present on the page. It uses an XPath expression to locate the element and then checks if it's displayed using a timeout of 5 seconds. If the element is found, it extracts the text content and takes a manual screenshot with the offer details. If the element is not found or the verification fails for any reason, the method logs a test step failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyFieldBorderColourIsPresent",
        "code": "public void verifyFieldBorderColourIsPresent(String labelName,String colorName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getCssValue(\"border-color\");\n\t\t\t\tif(value.equalsIgnoreCase(colorName))\n\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(labelName+\" field border is highlited as \"+value+\" - red as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName+\" field border is not highlited as \"+colorName);;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldBorderColourIsPresent`, verifies that the border color of a specific field is present and matches the expected color.\n\nThe method takes two parameters: `labelName` (the text displayed on the label) and `colorName` (the expected border color). It uses an XPath expression to locate the element, then checks if it's displayed. If the element is found and displayed, it retrieves the CSS value of the \"border-color\" property for that element and compares it with the expected color. If they match, it takes a manual screenshot indicating that the test passed. If they don't match or the element is not present, it fails the test step.\n\nThe method also catches any exceptions that may occur during execution and fails the test step if an exception is thrown.",
        "input": [
            "String labelName",
            "String colorName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyFieldBorderColourIsNotPresent",
        "code": "public void verifyFieldBorderColourIsNotPresent(String labelName,String colorName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getCssValue(\"border-color\");\n\t\t\t\tif(!value.equalsIgnoreCase(colorName))\n\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(labelName+\" field border is not highlited as \"+value+\" - red as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName+\" field border is highlited as \"+colorName+\" - red\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldBorderColourIsNotPresent`, verifies that the border color of a specific field is not red. The method takes two parameters: `labelName` and `colorName`. It uses Selenium WebDriver to locate the element with the specified label name, then checks if the border color of the input field associated with it matches the expected color (which should be different from \"red\"). If the border color does not match, a manual screenshot is taken to capture the issue. If the border color matches or the field is not present, the test step fails.",
        "input": [
            "String labelName",
            "String colorName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyETBHoldReason",
        "code": "public void verifyETBHoldReason(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='offer-info']//p//b\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getText();\n\t\t\t\tif(value.contains(expectedValue))\n\t\t\t\t{\n\t\t\t\t\thighLighterMethodManualScreenShot(Element, \"ETB Customer \"+value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(expectedValue+\" is Not Available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer Info field is not present in ETB customer Search Page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n**Method:** `verifyETBHoldReason`\n\n**Purpose:** To verify that the hold reason for an ETB (Electronic Transaction Bank) customer is displayed correctly.\n\n**Parameters:** `expectedValue` - The expected value to be found in the hold reason field.\n\n**Steps:**\n\n1. Check if the element with the specified XPath (`#xpath=//div[@class='offer-info']//p//b`) is displayed within 5 seconds.\n2. If the element is displayed, retrieve its text content and check if it contains the expected value.\n3. If the expected value is found, take a manual screenshot using the `highLighterMethodManualScreenShot` method with the element's XPath as the prefix and the customer's value as the suffix.\n4. If the expected value is not found or the element is not displayed, mark the test step as failed.\n\n**Error handling:** The method catches any exceptions that occur during execution and marks the test step as failed if an error occurs.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifyETBOfferIcon",
        "code": "public void verifyETBOfferIcon() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='offer-info']//lightning-icon//lightning-primitive-icon\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\thighLighterMethodManualScreenShot(Element, \"Icon is Present in ETB Customer Search page\");\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitTime(3);\n\t\t\t\tmanualScreenshot(\"Table of Hold Reason is appreared as Expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer Info Icon field is not present in ETB customer Search Page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyETBOfferIcon`, verifies the presence of an offer icon on the ETB Customer Search page. \n\nHere's a step-by-step breakdown:\n\n1. It tries to find an element with the specified XPath (`#xpath=//div[@class='offer-info']//lightning-icon//lightning-primitive-icon`). \n2. If the element is displayed within 5 seconds, it performs the following actions:\n   - Takes a manual screenshot with the icon highlighted.\n   - Clicks on the special element (which is likely another UI element).\n   - Waits for 3 seconds.\n   - Takes another manual screenshot to verify that the expected table of hold reasons appears.\n3. If the element is not displayed within 5 seconds, it marks the test step as failed with the message \"Offer Info Icon field is not present in ETB customer Search Page\".\n4. If any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a message including the name of the exception class.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS_Revamp",
        "function_name": "verifySearchResult",
        "code": "public void verifySearchResult(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'\" + labelName + \"')] | //p[contains(text(),'\" + labelName + \"')]\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value1 = getText(Element);\n\t\t\t\tString value = getText(Element).split(\":\")[1].trim();\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\thighLighterMethod1(Element);\n\t\t\t\t\tmanualScreenshot(value1 + \" value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not populated in Search Result Page of \"\n\t\t\t\t\t\t\t+ value1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchResult\" + e.getClass().getName());\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `verifySearchResult`, verifies the search result on a webpage. It takes a string parameter `labelName` which is used to search for an element with that label name.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate an element containing the given `labelName`. The expression searches both within `div` elements and `p` elements.\n2. It waits for the constructed element using the `waitForElement` method, allowing up to 5 seconds for the element to appear.\n3. If the element is displayed after waiting, it scrolls to that element using the `scrollToWebElement` method.\n4. It extracts the text from the element and splits it at the first colon (`:`) to get the value.\n5. If the value is not empty, it highlights the element using the `highLighterMethod1` method and takes a manual screenshot with a message indicating that the value is present in the search result page.\n6. If the value is empty, it marks the test step as failed with a message indicating that the value is not populated.\n7. If the element is not displayed after waiting, it also marks the test step as failed with a message indicating that the text is not displayed.\n\nThe method catches any exceptions that occur during its execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"+dropdownName+\"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//lightning-tab[contains(@class,'show')]//span//span[text()='\" + value + \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(dropdownName+\" has listed values\");\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  03/04/2022\n\t * Description    :  method to select value from drop down       \n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromDropdown`, selects a specific value from a dropdown list. It takes two parameters: `dropdownName` (the name of the dropdown field) and `value` (the value to be selected).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for the page to load.\n2. Locates the dropdown element using an XPath expression based on the `dropdownName`.\n3. Waits for the dropdown element to be displayed.\n4. If the dropdown is present and displayed, it attempts to select the specified `value` from the dropdown list:\n\t* Clicks on the dropdown element.\n\t* Waits for 3 seconds.\n\t* Waits for the page to load again.\n\t* Takes a manual screenshot (for testing purposes).\n5. If the value is successfully selected, the method takes another manual screenshot and sets a `flag` variable to `true`.\n6. If the value is not present in the dropdown list or the selection fails, the method sets the `flag` variable to `false` and logs an error message.\n7. If the dropdown element is not present or displayed, the method logs an error message.\n\nThe method catches any exceptions that occur during its execution and logs a failure message with the exception class name.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromPanValidationDropdown",
        "code": "public void selectValueFromPanValidationDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button | //label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//parent::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"'] | //label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromPanValidationDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to select value from drop down       \n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromPanValidationDropdown`, selects a specific value from a dropdown menu in a Salesforce Lightning page. \n\nThe method takes two parameters: `dropdownName` (the name of the dropdown field) and `value` (the value that needs to be selected). It uses various Selenium WebDriver methods such as `waitForPageToLoad()`, `waitForElement()`, `isElementDisplayed()`, and `clickOnSpecialElement()` to interact with the dropdown menu. \n\nThe method first waits for the page to load, then waits for the dropdown element to appear on the page. If the dropdown is displayed, it clicks on the dropdown to open its options, then waits for the specific value to be displayed in the dropdown list. Once the value is displayed, it clicks on that value to select it.\n\nIf the value is not present in the dropdown or the dropdown is not displayed, the method fails the test step and takes a manual screenshot as evidence.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromOvdPoaTypeDropdown",
        "code": "public void selectValueFromOvdPoaTypeDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//ancestor::lightning-combobox//div//button\";\n\t\t\tString dropdownList = value\n\t\t\t\t\t+ \" value#xpath=//lightning-tab[contains(@class,'show')]//span[text()='Customer Details']/..//..//..//..//button[contains(@aria-label,'\"\n\t\t\t\t\t+ dropdownName + \"')]/../../../../..//following-sibling::div//span[text()='\" + value + \"']\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromOvdTypeDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to enter value in text field     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the text to enter\n\t */",
        "description": "This Java method, `selectValueFromOvdPoaTypeDropdown`, is used to select a specific value from a dropdown list in a Salesforce Lightning application. The method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the desired value to be selected).\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the dropdown element based on its name.\n3. It then locates the dropdown list element by appending the value parameter to the XPath expression.\n4. The method waits for the dropdown and dropdown list elements to be displayed, and if they are, it scrolls to the dropdown and clicks on it.\n5. If the dropdown list is displayed, it clicks on the desired value and verifies that the selection was successful by taking a manual screenshot.\n6. If the desired value is not present in the dropdown list or if the dropdown list is not displayed, the method fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterTextInCustomerProcess",
        "code": "public void enterTextInCustomerProcess(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-input//input | //lightning-tab[contains(@class,'show')]//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//ancestor::lightning-input//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerProcess \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to enter value in text field     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the text need to enter\n\t */",
        "description": "This Java method, `enterTextInCustomerProcess`, enters a given value into a text field on a Salesforce Lightning page. The method takes two parameters: `labelName` (the name of the text field) and `value` (the text to be entered).\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding text field.\n2. It waits for the element to be displayed using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method and enters the given `value` into the text field using the `typeIn` method.\n4. It waits for the page to load using the `waitForPageToLoad` method.\n5. It takes a manual screenshot of the screen using the `highLighterMethodManualScreenShot` method, highlighting the entered field.\n6. If the element is not displayed within the specified timeout, it marks the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and mark the test step as failed if an exception occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterTextInCustomerDetails",
        "code": "public void enterTextInCustomerDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[text()='\" + labelName + \"']//parent::label//following-sibling::input | //label[text()='\" + labelName + \"']//following-sibling::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to enter DOB    \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the date\n\t */",
        "description": "This Java method, `enterTextInCustomerDetails`, is used to enter text into a customer details field with the specified `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided `labelName` to locate the corresponding input field. It then waits for the element to be displayed and scrollable if it's not already visible. If the value is not empty, it enters the text into the field using a `typeIn` method, takes a manual screenshot of the highlighted field (using the `highLighterMethodManualScreenShot` method), and waits for the page to load. \n\nIf the element is not displayed or if there's an exception during execution, the method reports a test step failure with the relevant error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//lightning-tab[contains(@class,'show')]//label[contains(text(),'\"\n\t\t\t\t\t+ labelName + \"')]//../following-sibling::div/input)[1]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDob \" + e.getClass().getName());\n\t\t}\n\t}\n\t\t\n\t\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to enter the value in input Field and select the corresponding result    \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the zipcode value\n\t */",
        "description": "This Java method, `enterDob`, enters a given value into an input field with a specified label name. The method uses WebdriverWait and Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label name to locate the corresponding input field.\n2. It waits for the element to be present and visible using `waitForElement` and `isElementDisplayed`.\n3. If the element is displayed, it scrolls to the element using `scrollToWebElement`, enters the value into the field using `typeIn`, and waits for the page to load completely using `waitForPageToLoad`.\n4. It takes a manual screenshot of the entered value using `highLighterMethodManualScreenShot` and the label name.\n5. If any exception occurs during these steps, it catches the exception and marks the test step as failed.\n\nThe method is designed to handle exceptions gracefully and provide detailed error messages for debugging purposes.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterZipCode",
        "code": "public void enterZipCode(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field,10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li[@data-value='\" + value + \"']//span//div\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterZipCode \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select tabs in FOS         \n\t * @param \t      :  optionToClick is the value to navigate\n\t */",
        "description": "This Java method, `enterZipCode`, enters a zip code and performs some additional actions. Here's a brief description:\n\n* It takes two parameters: `labelName` (the label associated with the zip code field) and `value` (the actual zip code value to enter).\n* The method attempts to find the zip code field using an XPath expression, waits for it to be displayed, and then enters the provided value.\n* After entering the value, it waits for the page to load and checks if a lookup value is present in an unordered list. If found, it clicks on that value.\n* If any of these steps fail (e.g., the field is not present or the lookup value is not found), the method reports a test step failure with an error message.\n\nThe method also includes some additional functionality, such as scrolling to the web element and taking a manual screenshot after successful completion.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectCustomerTabs",
        "code": "public void selectCustomerTabs(String optionToClick) {\n\t\ttry {\n\t\t\tString navigationOption = \"'\" + optionToClick + \"' navigation option #xpath=//a[text()='\" + optionToClick\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(navigationOption, 10);\n\t\t\tif (isElementDisplayed(navigationOption, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(navigationOption);\n\t\t\t\tclickOnSpecialElement(navigationOption);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(\"'\" + optionToClick + \"' navigation option is clicked successfully\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"'\" + optionToClick + \"' navigation option is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectCustomerTabs. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to click edit icon        \n\t * @param \t      :  fieldLabel is the field name\n\t * @param         :  ScrollElement is the section to scroll\n\t */\n\t\n\t/*public void clickEditOptionWithTitle(String ScrollElement,String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div//..//button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\tscrollToElement(editOption);\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "Here are brief descriptions for the two Java methods:\n\n**1. `selectCustomerTabs(String optionToClick)`**\n\nThis method selects a customer tab with the given option to click. It uses XPath to locate the element, waits for it to be displayed, scrolls to it if necessary, clicks on it, and verifies that the page has loaded successfully. If the element is not present or the click fails, it reports a test step failure.\n\n**2. `clickEditOptionWithTitle(String ScrollElement, String fieldLabel)`**\n\nThis method clicks an edit option with the given field label and scroll element. It waits for the page to load, locates the edit button using XPath, scrolls to it if necessary, and clicks on it. If the edit button is not present, it reports a test step failure.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String ScrollElement,String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n//\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n//\t\t\t\t\t+ \"']/parent::div//..//button\";\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\"+fieldLabel+\"']/parent::div//..//..//button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\tscrollToElement(editOption);\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to click on opportunity Link      \n\t * @return \t      :  opportunityValue is the opportunity id\n\t */",
        "description": "This Java method, `clickEditOptionWithTitle`, is used to click on an edit option with a specific title in a web page. \n\nThe method takes two parameters: `ScrollElement` and `fieldLabel`. It first waits for the page to load using the `waitForPageToLoad()` method.\n\nIt then constructs two XPath expressions: one for the scroll element and another for the edit option button. The edit option button's XPath expression contains the field label as a part of its text content. \n\nThe method then uses these XPath expressions to:\n\n1. Wait for the scroll element to be present using `waitForElement()` with a timeout of 20 seconds.\n2. Scroll to the scroll element using `scrollbycordinates()`.\n3. Check if the edit option button is present using `isElementPresent()`. \n4. If the edit option button is present, it scrolls to the element using `scrollToElement()`, scrolls to the web element using `scrollToWebElement()`, clicks on the special element (edit option button) using `clickOnSpecialElement()`, and waits for 3 seconds using `waitTime(3)`.\n5. If the edit option button is not present, it fails the test step with a message indicating that the \"edit button\" is not present.\n\nThe method also catches any exceptions that may occur during its execution and logs an info message about the failure.",
        "input": [
            "String ScrollElement",
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnOppurtunityNameLink",
        "code": "public String clickOnOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')]\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\ttestStepInfo(\"$ Created Opportunity Id - $\"+opportunityValue);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, opportunityValue);\n\t\t\t\tclickOn(opportunity);\n//\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\twaitTime(10);\n\t\t\t\tif (isElementPresent(opportunity)) {\n\t\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\t}\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select scheme     \n\t * @param \t      :  schemeValue is the scheme to select\n\t */",
        "description": "This Java method, `clickOnOppurtunityNameLink`, appears to be a part of an automated testing framework. Its primary function is to interact with a web element on a page that represents an opportunity name link.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for the page to load.\n2. Locates an opportunity name link using an XPath expression and waits for it to be displayed within a certain time limit (10 seconds).\n3. If the element is displayed, scrolls to the opportunity name link, extracts its text value, and logs this information as a test step.\n4. Highlights the opportunity name link on the screen with a screenshot.\n5. Clicks on the opportunity name link.\n6. Waits for 10 seconds to ensure the click action has completed.\n7. Checks if the element is still present; if it is, clicks on a special element associated with the opportunity name link (this step seems to be optional).\n8. Refreshes the page three times to update the content and then waits for each refresh to complete.\n\nThe method returns the text value of the opportunity name link as a string. If any exceptions occur during execution, it logs an error message indicating that the test step failed.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectSchemeWithValue",
        "code": "public void selectSchemeWithValue(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\t\t\t\tdo {\n\t\t\t\t\tString scheme = schemeValue\n\t\t\t\t\t\t\t+ \" Scheme select button#xpath=//div//h2//span//div//Strong[contains(text(),'\" + schemeValue\n\t\t\t\t\t\t\t+ \"')]//..//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" scheme value is present.\");\n\t\t\t\t\t    findWebElement(scheme).click();\n\t\t\t\t\t    waitForPageToLoad();\n\t\t\t\t\t\tmanualScreenshot(\"Successfully \" + schemeValue + \" scheme value is selected.\");\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isElementDisplayed(disabledNxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} while (!conditionFlag);\n\t\t\t\tif (failFlag) {\n\t\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to enter the value in input Field and select the corresponding result    \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the model name\n\t */",
        "description": "This Java method, `selectSchemeWithValue`, is used to select a scheme with a given value. The method takes in a `String` parameter `schemeValue` and attempts to find an element on the page that matches this value.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It first checks if the input `schemeValue` is not empty.\n2. If it's not empty, it constructs a XPath expression by concatenating strings to locate an element with text containing the `schemeValue`.\n3. The method then waits for the page to load and the element to be displayed.\n4. If the element is displayed, it scrolls to the element, highlights it (using a high-lighter method), takes a manual screenshot, clicks on the element, and waits for the page to load again.\n5. If the element is not displayed, but there's a \"Next Schemes\" button that's disabled or enabled, it handles this scenario accordingly.\n6. The method continues to loop until the condition flag is set to `true`.\n7. If the condition flag is still `false` after looping, it sets the fail flag to `true` and takes a manual screenshot with an error message.\n8. Finally, if the fail flag is `true`, it calls a method to mark the test step as failed.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed with an error message.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectModelName",
        "code": "public void selectModelName(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div//input[@placeholder='\"+labelName+\"']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li//span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Model Name Selected : \"+value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModelName \" + e.getClass().getName());\n\t\t}\n\t}\n\t\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to enter the value in input Field and select the corresponding result    \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is input need to select\n\t */\n\t\n/*\tpublic void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\tString popupSearchField = labelName + \" #xpath=//div[@role='dialog']//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\t\tString popupsearch_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t} \n\t\t\t\t\t\telse if(isElementDisplayed(popupSearchField, elementLoadWaitTime))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).clear();\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).sendKeys(value);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(popupsearch_icn);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}\n\t*/",
        "description": "This Java method, `selectModelName`, is used to select a model name from a dropdown list or search result. Here's a brief description of what the method does:\n\n1. It takes two parameters: `labelName` and `value`. `labelName` is the name of the field, and `value` is the input value that needs to be selected.\n2. The method first tries to find an input field with the given `labelName` using XPath. If the field is found, it scrolls to the field and types in the given `value`.\n3. After typing in the value, the method waits for the page to load.\n4. It then checks if a list of options containing the typed `value` is displayed. If it is, it clicks on that option.\n5. If the option is selected successfully, it takes a manual screenshot with a message indicating that the model name has been selected.\n6. If the option is not found or the selection fails for any reason, it reports a test step failure.\n\nThe method also includes error handling to catch and report exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n//\t\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n//\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\tString popupSearchField = labelName + \" #xpath=//div[@role='dialog']//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//label[text()='\"+labelName+\"']//parent::lightning-grouped-combobox//parent::div//child::div//span[contains(text(),'\"+value+\"')]\";\n\t\t\t\t\tString popupsearch_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\tif (isElementDisplayed(search_icn, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if(isElementDisplayed(popupSearchField, elementLoadWaitTime))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).clear();\n\t\t\t\t\t\t\tfindWebElement(popupSearchField).sendKeys(value);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(popupsearch_icn);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to search address  \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is address need to select\n\t */",
        "description": "This Java method, `chooseValueFromSearchAndListField`, appears to be part of a web testing framework. It's designed to search for and select an address from a list or search results.\n\nThe method takes two parameters: `labelName` (the name of the field) and `value` (the address to be selected).\n\nHere's a high-level overview of what the method does:\n\n1. If the provided value is not empty, it:\n\t* Creates a string for the search field XPath based on the label name.\n\t* Waits for the search field to load and scrolls into view.\n\t* Types the provided value into the search field.\n\t* Clears and re-enters the value in the search field (in case of autocomplete).\n\t* Searches for the address using the search icon.\n\t* If the search result is found, it clicks on the address link.\n2. If the value is empty, it fails the test step with an error message.\n\nThe method also includes some error handling and logging mechanisms to report any issues that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "customerSearchAddress",
        "code": "public void customerSearchAddress(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input | //div[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tscrollbycordinates(field);\n\t\t\tString substring = value.substring(0, 5);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, substring);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOnSpecialElement(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  01/04/2022\n\t * Description    :  method to select value from CKYC part\n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is input need to select\n\t */",
        "description": "The `customerSearchAddress` method is a Java function that searches for an address in a customer search system. It takes two parameters: `labelName`, which is the label associated with the search input field, and `value`, which is the text to be searched.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `labelName` parameter to locate the corresponding search input field.\n2. It waits for the field to be displayed and then scrolls into view using the `scrollbycordinates` method.\n3. If the field is displayed, it types in the first 5 characters of the `value` parameter using the `typeIn` method.\n4. It waits for the page to load and then checks if an element with the `lookupValue` XPath expression (which contains the full `value` text) is displayed within a certain time limit (30 seconds).\n5. If the element is displayed, it clicks on the special element using the `clickOnSpecialElement` method.\n6. It waits for the page to load again and then takes a manual screenshot of the search results using the `highLighterMethodManualScreenShot` method.\n7. If the element is not displayed, it fails the test step with an error message indicating that the value is not present.\n8. If the field is not displayed, it fails the test step with an error message indicating that the labelName field is not present.\n\nThe method catches any exceptions that may occur during its execution and reports a failure if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromCkycDropdown",
        "code": "public void selectValueFromCkycDropdown(String dropdownName, String value) {\n\t\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=(//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"'])[1]\";\n\t\t\t\tString dropdownListValue = value\n\t\t\t\t\t\t+ \" value#xpath=(//div[contains(@class,'select-options')]//ul/li/a[text()='\" + value + \"'])[2]\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\thighLighterMethod1(dropdownList);\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (isElementDisplayed(dropdownListValue, 10)) {\n\t\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\t\tclickOnSpecialElement(dropdownListValue);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\thighLighterMethod1(dropdownListValue);\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  01/04/2022\n\t * Description    :  method to select value from drop down\n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is input with special character need to select\n\t */",
        "description": "This Java method, `selectValueFromCkycDropdown`, is designed to select a specific value from a dropdown menu. It takes two parameters: `dropdownName` (the name of the dropdown field) and `value` (the desired value to be selected).\n\nThe method first waits for the page to load and then attempts to locate the dropdown element. If the dropdown is found, it scrolls to the element, clicks on it, and then searches for the specified value in the dropdown list.\n\nIf the value is found, it selects the value by clicking on it and takes a manual screenshot as proof of successful selection. However, if the value is not found or the dropdown is not present, the method reports a failure and ends the test step.\n\nThe method also includes some error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromDropdownWithSpecialCharacter",
        "code": "public void selectValueFromDropdownWithSpecialCharacter(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tchar ph = '\"';\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//parent::lightning-combobox//div//button | //lightning-tab[contains(@class,'show')]//label[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//lightning-tab[contains(@class,'show')]//span//span[contains(text(),\" + ph + \"\"\n\t\t\t\t\t\t+ value + \"\" + ph + \")]\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownWithSpecialCharacter \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to click button in kyc tab\n\t * @param         :  value is the name of button to click\n\t */",
        "description": "This Java method, `selectValueFromDropdownWithSpecialCharacter`, is used to select a specific value from a dropdown list that contains special characters. The method takes two parameters: `dropdownName` and `value`. \n\nThe method first waits for the page to load and then checks if the dropdown element is present on the page. If it is, it clicks on the dropdown and then iterates through the options in the dropdown until it finds the specified value. Once the value is selected, a manual screenshot is taken to verify the selection.\n\nIf the value is not found in the dropdown or the dropdown is not present on the page, the method fails the test step. The method also includes error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnButtonInKycTab",
        "code": "public void clickOnButtonInKycTab(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//lightning-tab[contains(@class,'show')]//button[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tWebElement ele = findWebElement(link);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\ttestStepInfo(\"Click On : \" + value);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInKycTab`, simulates a click on a button within a Lightning Tab in Salesforce. The method takes a `String` parameter `value`, which is used to construct an XPath expression to locate the button. \n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `value` with some fixed strings.\n2. It waits for the element matching this XPath expression to be displayed using the `waitForElement` and `isElementDisplayed` methods.\n3. If the element is found, it scrolls to the element, highlights it (using the `highLighterMethod`), and then simulates a click on the element using the `Actions` class.\n4. It logs a test step information message indicating that the button was clicked.\n5. It also calls another method `clickOnSpecialElement` which is not shown in this snippet, but presumably performs some additional actions related to clicking the button.\n6. If the element is not found after waiting for 10 seconds, it logs a test step failed message with an error message.\n\nThe method catches any exceptions that occur during its execution and logs a test step failed message with the exception's class name and details.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnButtonInKycTabWithoutTime",
        "code": "public void clickOnButtonInKycTabWithoutTime(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//lightning-tab[contains(@class,'show')]//button[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tWebElement ele = findWebElement(link);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\tmanualScreenshot(\"Click On : \" + value);\n\t\t\t\tif (value.equalsIgnoreCase(\"Validate PAN/CKYC\")) {\n\t\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value +e.getClass().getName());\n\t\t}\n\t}\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to expand side arrows   \n\t * @param \t      :  fieldLabel is the section name need to expand\n\t */",
        "description": "This Java method, `clickOnButtonInKycTabWithoutTime`, simulates a click on a button in a Lightning tab with the given value. It first constructs an XPath link based on the provided value and then performs the following actions:\n\n1. Waits for the element to be displayed within 10 seconds.\n2. Scrolls to the element if it's not visible.\n3. Highlights the element using a highlighter method (not shown in this code snippet).\n4. Moves the mouse cursor to the element and clicks on it using `Actions` class.\n5. Takes a manual screenshot with the given value as the filename prefix.\n6. If the value is \"Validate PAN/CKYC\", calls another method (`clickOnSpecialElement`) to perform some special action.\n\nIf the element is not displayed within 10 seconds, the test step fails. If any exception occurs during the execution of this method, it also fails the test step with an error message including the class name of the exception.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "expandArrows",
        "code": "public void expandArrows(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `expandArrows`, is used to expand a specific arrow or dropdown menu on a web page. It takes a `fieldLabel` parameter, which is the label of the field whose arrow needs to be expanded.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `fieldLabel`. The XPath expression points to the button that corresponds to the given field label.\n2. It waits for the element identified by the XPath expression to be displayed (up to 10 seconds).\n3. If the element is displayed, it scrolls the page so that the element comes into view.\n4. It then checks if the arrow is not already expanded by checking its `aria-expanded` attribute. If it's not expanded, it clicks on the button to expand it and waits for the page to load.\n5. If the element is not displayed (i.e., the field label does not correspond to a valid field), it reports a test failure.\n\nThe method also catches any exceptions that may occur during its execution and logs an informative message about the failure, including the type of exception that occurred.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "expandArrow",
        "code": "public void expandArrow(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to add model\n\t */",
        "description": "This Java method, `expandArrow`, appears to be a part of an automation test script. Its primary function is to expand an arrow (likely a dropdown or menu) on a web page when the label of that field matches the input parameter `fieldLabel`.\n\nHere's a step-by-step breakdown:\n\n1. It constructs a XPath expression based on the `fieldLabel` and checks if the element is displayed within a 10-second timeout.\n2. If the element is present, it scrolls to the element, then to the web element itself (presumably to bring it into view).\n3. It retrieves the attribute \"aria-expanded\" from the web element and checks its value.\n4. If the value is \"false\", indicating that the arrow is not expanded, it clicks on the special element (the arrow) to expand it.\n5. After expanding the arrow, it waits for the page to load fully.\n6. If the element is not present within the timeout, it fails the test step with an error message.\n\nThe method also includes error handling using a `try-catch` block, which logs any exceptions that occur during execution.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectModel",
        "code": "public void selectModel(String tabName, String modelNameLabel, String modelNameValue, String buttonName,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Select Model Name #\");\n\t\t\tif(GOR.environmentValue.equals(\"UAT\"))\n\t\t\t{\n\t\t\tselectTabs(tabName);\n\t\t\t}\n\t\t\tselectModelName(modelNameLabel, modelNameValue);\n\t\t\tclickOnButton(buttonName);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModel \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete ckyc pan validation section\n\t */\n\t\n\t/*public void ckycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\n\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\t\texpandArrows(\"CKYC/PAN Validation\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texpandArrows(\"PAN Validation\");\n\t\t\t}\n\n\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\tif (!applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Is PAN Available ?\", \"Yes\");// b4\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// no\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (GOR.environmentValue.equals(\"UAT\")) {\n\t\t\t\tif (!applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Is PAN Available ?\", \"Yes\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\n\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\t\tclickOnButtonInKycTab(buttonName);\n\t\t\t\t\tclickOnRadioButton(\"MOBILE\");\n\t\t\t\t\tclickOnButtonInKycTab(\"Initiate EKYC\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclickOnButtonInKycTab(\"Validate PAN\");\n\t\t\t}\n\n\t\t\twaitForPageToLoad();\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitForPageToLoad();\n\n\t\t\tif (!applicantTab.equals(\"Applicant\")) {\n\t\t\t\ttestStepInfo(\"-----Account Aggregator-----\");\n\t\t\t\texpandArrows(\"KYC Validation\");\n\t\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\t\tclickOnRadioButton(\"MOBILE\");\n\t\t\t\t\tclickOnButtonInKycTab(\"Initiate EKYC\");\n\t\t\t\t}\n\n\t\t\t\tif (GOR.environmentValue.equals(\"UAT\")) {\n\t\t\t\t\tenterValueInField(\"Bank Name\", \"State Bank India\");\n\t\t\t\t}\n\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed to AA\");\n\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"PAN not available\");\n\t\t\t\tclickOnButton(\"Save\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "Here is a brief description of the two Java methods:\n\n**Method 1: `selectModel(String tabName, String modelNameLabel, String modelNameValue, String buttonName, String successMessage)`**\n\nThis method selects a model name in an application. It takes five parameters:\n\n* `tabName`: The name of the tab to select\n* `modelNameLabel`: The label of the model name field\n* `modelNameValue`: The value of the model name field\n* `buttonName`: The name of the button to click after selecting the model name\n* `successMessage`: A success message to verify\n\nThe method first tries to execute the test step with a log message. It then selects the specified tab, enters the model name, clicks on the button, and verifies the success message. If any exception occurs during execution, it catches the exception and logs an error message.\n\n**Method 2: `ckycPanValidation(String applicantTab, String expandTabName, ...)`**\n\nThis method is used to complete CKYC (Customer Know Your Customer) pan validation section in an application. It takes several parameters:\n\n* `applicantTab`: The name of the tab for applicants\n* `expandTabName`: The name of the tab to expand\n* Various other parameters for entering text, selecting values from dropdowns, clicking buttons, and verifying success messages\n\nThe method first logs a test step message and then performs various actions such as:\n\n* Selecting customer tabs\n* Expanding arrows for CKYC/PAN validation\n* Entering PAN number and date of birth\n* Clicking on buttons to initiate EKYC (Electronic Know Your Customer) or validate PAN\n* Verifying success messages\n\nIf any exception occurs during execution, it catches the exception and logs an error message.",
        "input": [
            "String tabName",
            "String modelNameLabel",
            "String modelNameValue",
            "String buttonName",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "ckycPanValidation",
        "code": "public void ckycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel, String ckycTypeValue,\n\t\t\tString panNumberLabel, String panNumberValue, String dobLabel, String dobValue, String buttonName,\n\t\t\tString byPassReasonLabel, String byPassReasonValue, String byPassButton, String successMessage1,\n\t\t\tString successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Customer Process #\");\n\t\t\ttestStepInfo(\"# Enter CKYC/PAN Validation #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(\"PAN Validation\");\n\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Is Primary PAN Available ?\", \"Yes\");\n\t\t\t} else {\n\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Is PAN Available ?\", \"Yes\");\n\t\t\t}\n\t\t\tenterTextInCustomerProcess(panNumberLabel, generatePanNumber());\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tclickOnButtonInKycTab(\"Validate PAN\");\n\t\t\twaitForPageToLoad();\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitForPageToLoad();\n\t\t\ttestStepInfo(\"# Account Aggregator #\");\n\t\t\texpandArrows(\"KYC Validation\");\n\t\t\tString radibutton = \"Radio Button#xpath=//lightning-tab[contains(@class,'show')]//span[text()='MOBILE']/..//span[@class='slds-radio_faux'] | //div[text()='MOBILE ']//input\";\n\t\t\tif (isElementPresent(radibutton)) {\n\t\t\t\tclickOnRadioButton(\"MOBILE\");\n\t\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tclickOnButtonInPopup(\"Initiate EKYC\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Initiate EKYC\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tString field = \"#xpath=//label[text()='Bank Name']//parent::lightning-input//input | //label[text()='Bank Name']//parent::div//input\";\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tif (applicantTab.equals(\"Primary Applicant\")) {\n\t\t\t\tenterValueInField(\"Bank Name\", \"hdfc\");\n\t\t\t\t}\n\t\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tclickOnButtonInPopup(\"Proceed to AA\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnButtonWithoutWaitTime(\"Proceed to AA\");\n\t\t\t\t}\n\t\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Didn't receive AA SMS\");\n\t\t\t\t} else {\n\t\t\t\t\tselectValueFromDropdownWithSpecialCharacter(\"Skip Reason\", \"Customer didn't receive OTP\");\n\t\t\t\t}\n\t\t\t\tif (applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tclickOnButtonInPopup(\"Save\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\t}\n\t\t\t}\n \n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi\n\t * @created Date  :  01/04/2022\n\t * Description    :  method to enter mother/father value in text field     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the text need to enter\n\t */\n\t\t\n\t/*public void enterValueInFatherMotherTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]//../following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInFatherMotherTextField \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "This Java method, `ckycPanValidation`, appears to be a test automation script for a financial application's customer process. The method validates a customer's PAN (Permanent Account Number) and performs subsequent actions based on the validation result.\n\nHere's a high-level overview of what the method does:\n\n1. It selects a customer tab (Applicant or Primary Applicant) and expands the \"PAN Validation\" section.\n2. If the selected tab is \"Applicant\", it sets the primary PAN availability to \"Yes\". Otherwise, it sets the PAN availability to \"Yes\".\n3. It enters the PAN number in the corresponding field and clicks the \"Validate PAN\" button.\n4. It verifies a success message and waits for the page to load.\n5. If the radio button with the label \"MOBILE\" is present, it selects that option and initiates EKYC (Electronic Know Your Customer) if necessary.\n6. It scrolls to and enters the bank name in the corresponding field (if applicable).\n7. It clicks the \"Proceed to AA\" button or saves the changes, depending on the selected tab.\n\nThe method also includes error handling using a `try-catch` block, which logs any exceptions that occur during execution.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String ckycTypeLabel",
            "String ckycTypeValue",
            "String panNumberLabel",
            "String panNumberValue",
            "String dobLabel",
            "String dobValue",
            "String buttonName",
            "String byPassReasonLabel",
            "String byPassReasonValue",
            "String byPassButton",
            "String successMessage1",
            "String successMessage2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterValueInFatherMotherTextField",
        "code": "public void enterValueInFatherMotherTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n//\t\t\tString field = labelName + \"#xpath=//span[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n//\t\t\t\t\t+ \")]//../following-sibling::input\";\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),\" + ch +\"\" + labelName + \"\" + ch+\")]//following-sibling::div//input\";\n\t\t\t\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInFatherMotherTextField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFatherMotherTextField`, enters a specified value into a text field that is associated with a label containing the given label name. The method uses Selenium WebDriver to interact with the web page.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It takes two string parameters: `labelName` and `value`.\n2. It constructs an XPath expression to locate the text field based on the provided `labelName`. The XPath expression uses double quotes (`\"`) to enclose the label name.\n3. It waits for the text field to be present using the `waitForElement` method, with a timeout of 10 seconds.\n4. If the text field is displayed, it scrolls to the element using the `scrollToWebElement` method.\n5. It enters the specified `value` into the text field using the `typeIn` method.\n6. After entering the value, it waits for the page to load completely using the `waitForPageToLoad` method.\n7. It takes a manual screenshot of the current screen using the `highLighterMethodManualScreenShot` method, highlighting the element and labeling it with the provided `labelName`.\n8. If the text field is not present within 10 seconds, it fails the test step with an error message.\n\nThe method also includes exception handling to catch any errors that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnAddressEnrichmentButton",
        "code": "public void clickOnAddressEnrichmentButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='Address Enrichment']/..//..//..//..//button[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnAddressEnrichmentButton \" + value +e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete address enrichment section\n\t */",
        "description": "This Java method, `clickOnAddressEnrichmentButton`, is used to click on the \"Address Enrichment\" button in a Lightning Tab. The method takes a `String` value as input and uses it to construct an XPath expression to locate the button. It then performs the following actions:\n\n1. Waits for the element to be displayed (up to 10 seconds).\n2. Scrolls to the element.\n3. Scrolls to the web element (presumably to bring it into view).\n4. Highlights the element using a `highLighterMethod`.\n5. Clicks on the special element (presumably a button or link) using `clickOnSpecialElement`.\n6. Waits for 5 seconds before continuing.\n\nIf the element is not displayed within the specified time, the method fails the test step with an error message. If any exception occurs during the execution of the method, it also fails the test step with an error message containing the exception's class name.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "addressEnrichment",
        "code": "public void addressEnrichment(String applicantTab, String expandTabName, String enterPincodeLabel,\n\t\t\tString enterPincodeValue, String searchAddressLabel, String searchAddressValue, String residenceTypeLabel,\n\t\t\tString residenceTypeValue, String addressLine1Label, String addressLine1Value, String saveButton,\n\t\t\tString successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Address Enrichment #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\tselectCustomerTabs(applicantTab);\n\t\t\t\texpandArrows(expandTabName);\n\t\t\t}\n\t\t\n\t\t\t\tif (!applicantTab.equals(\"Applicant\")) {\n\t\t\t\t\tselectOrDeselectCheckBox(\"Address Change\", \"check\");\n\t\t\t\t} else {\n\t\t\t\t\tselectOrDeselectCheckBox(\"Primary Address Change\", \"check\");\n\t\t\t\t}\n\t\t\t\n\t\t\tenterTextInCustomerProcess(enterPincodeLabel, enterPincodeValue);\n\t\t\tcustomerSearchAddress(searchAddressLabel, searchAddressValue);\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tclickOnAddressEnrichmentButton(saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `addressEnrichment` that performs various actions to enrich an applicant's address information. The method takes 12 string parameters, which are used as input values for different steps in the process.\n\nThe method consists of several sub-actions:\n\n1. It logs a test step info with the message \"# Enter Address Enrichment #\".\n2. It selects a customer tab based on the `applicantTab` parameter.\n3. It expands an arrow (likely a dropdown or accordion) with the name specified by `expandTabName`.\n4. If the environment is \"PREPROD\", it repeats steps 2 and 3 to ensure the correct tab is selected.\n5. It selects or deselects a checkbox based on the `applicantTab` parameter.\n6. It enters text into a field using the `enterTextInCustomerProcess` method, passing in the label and value for the pincode field.\n7. It searches for an address using the `customerSearchAddress` method, passing in the label and value for the search field.\n8. It selects a value from a dropdown list using the `selectValueFromDropdown` method, passing in the label and value for the residence type field.\n9. It enters text into another field using the `enterTextInCustomerProcess` method, passing in the label and value for the address line 1 field.\n10. It clicks on an \"Address Enrichment\" button using the `clickOnAddressEnrichmentButton` method, passing in the save button parameter.\n11. Finally, it verifies a success message using the `verifySuccessMessage` method, passing in the success message parameter.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and logging an error message with the test step info if one occurs.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String enterPincodeLabel",
            "String enterPincodeValue",
            "String searchAddressLabel",
            "String searchAddressValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String addressLine1Label",
            "String addressLine1Value",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "addressEnrichmentWithoutCheckbox",
        "code": "public void addressEnrichmentWithoutCheckbox(String applicantTab, String expandTabName, String addressLine1Label,\n\t\t\tString addressLine1Value, String addressLine2Label, String addressLine2Value, String addressLine3Label,\n\t\t\tString addressLine3Value, String areaLocalityLabel, String areaLocalityValue, String landmarkLabel,\n\t\t\tString landmarkValue, String residenceTypeLabel, String residenceTypeValue, String zipcodeLabel,\n\t\t\tString zipcodeValue, String saveButton, String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Address Enrichment-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\twaitForPageToLoad();\n\t\t\tenterTextInCustomerProcess(addressLine1Label, addressLine1Value);\n\t\t\tenterTextInCustomerProcess(addressLine2Label, addressLine2Value);\n\t\t\tenterTextInCustomerProcess(addressLine3Label, addressLine3Value);\n\t\t\tenterTextInCustomerProcess(areaLocalityLabel, areaLocalityValue);\n\t\t\tenterTextInCustomerProcess(landmarkLabel, landmarkValue);\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tchooseSearchAndListField(zipcodeLabel, zipcodeValue);\n\t\t\tclickOnAddressEnrichmentButton(saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichmentWithoutCheckbox \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `addressEnrichmentWithoutCheckbox`, is used to perform an address enrichment process without a checkbox. The method takes 17 string parameters that represent various labels and values for different fields such as address lines, locality, landmark, residence type, and zip code.\n\nThe method performs the following steps:\n\n1. Logs a test step message indicating the start of the address enrichment process.\n2. Selects the specified customer tab.\n3. Expands the arrows on the specified tab.\n4. Waits for the page to load.\n5. Enters text into various fields, including address lines 1-3, locality, landmark, and residence type.\n6. Selects a value from a dropdown list for the residence type field.\n7. Chooses a search result from a list of options for the zip code field.\n8. Clicks on the save button to complete the address enrichment process.\n9. Verifies that the success message is displayed.\n\nIf any exception occurs during the execution of these steps, the method catches it and logs a test step failure message with the exception class name.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String addressLine1Label",
            "String addressLine1Value",
            "String addressLine2Label",
            "String addressLine2Value",
            "String addressLine3Label",
            "String addressLine3Value",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String landmarkLabel",
            "String landmarkValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String zipcodeLabel",
            "String zipcodeValue",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterPanNumberInCustomerDetails",
        "code": "public void enterPanNumberInCustomerDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//lightning-tab[contains(@class,'show')]//label[text()='\" + labelName +\"']/..//ancestor::lightning-input//input)[last()]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterPanNumberInCustomerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete customer details section\n\t */",
        "description": "This Java method, `enterPanNumberInCustomerDetails`, is used to enter a value into a specific field labeled with the provided `labelName` in the Customer Details section of an application. \n\nThe method attempts to find the field using XPath and then performs the following actions:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not already visible.\n3. Types the provided `value` into the field.\n4. Waits for the page to load after the value has been entered.\n\nIf the field is not present, or any of these steps fail, the method will report a test step failure and provide an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "customerDetails",
        "code": "public void customerDetails(String applicantTab,String expandTabName, String firstNameLabel, String firstNameValue, String panNoLabel,\n\t\t\tString panNoValue, String dobLabel, String dobValue, String lastNameLabel, String lastNameValue,\n\t\t\tString genderLabel, String genderValue, String ovdTypeLabel, String ovdTypeValue, String ovdNumberLabel,\n\t\t\tString ovdNumberValue, String poaTypeLabel, String poaTypeValue, String poaNoLabel,\n\t\t\tString poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Customer Details #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tif(applicantTab.equalsIgnoreCase(\"Applicant\"))\n\t\t\t{\n\t\t\t\tenterTextInCustomerProcess(\"Primary Middle Name\", \"test\");\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterTextInCustomerProcess(\"Middle Name\", \"test\");\n\t\t\t}\n\t\t\t\n\t\t/*\tif(GOR.environmentValue.equals(\"UAT\"))\n\t\t\t{*/\n\t\t//\tenterPanNumberInCustomerDetails(\"PAN Number\", panNoValue);\n\t\t//\t}\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\tselectValueFromDropdown(genderLabel, genderValue);\n\t\t\tselectValueFromOvdPoaTypeDropdown(ovdTypeLabel, ovdTypeValue);\n\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\tenterTextInCustomerProcess(ovdNumberLabel, generate6DigitBINNumber());\n\t\t\tenterTextInCustomerProcess(poaNoLabel, generate6DigitBINNumber());\n\t\t\tif(applicantTab.equalsIgnoreCase(\"Applicant\"))\n\t\t\t{\n\t\t\t\tselectValueFromDropdown(\"Relationship with Co-Applicant\",\"Son\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete financial info section\n\t */",
        "description": "This Java method, `customerDetails`, is used to enter customer details in a web application. The method takes several string parameters that represent various fields on the application's user interface (e.g., first name, last name, date of birth, PAN number, etc.).\n\nThe method performs the following actions:\n\n1. Logs a test step message indicating that it is entering customer details.\n2. Selects a specific tab based on the `applicantTab` parameter.\n3. Expands any arrow buttons to reveal additional fields (based on the `expandTabName` parameter).\n4. Enters text into various fields, such as first name, last name, date of birth, and others (using the `enterTextInCustomerProcess` method).\n5. Selects values from dropdown menus using the `selectValueFromDropdown` method.\n6. Generates a 6-digit BIN number using the `generate6DigitBINNumber` method and enters it into specific fields.\n\nThe method also includes some conditional logic to handle different scenarios based on the value of the `applicantTab` parameter. If an exception occurs during execution, the method logs a test step failure message with the details of the exception.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String firstNameLabel",
            "String firstNameValue",
            "String panNoLabel",
            "String panNoValue",
            "String dobLabel",
            "String dobValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String genderLabel",
            "String genderValue",
            "String ovdTypeLabel",
            "String ovdTypeValue",
            "String ovdNumberLabel",
            "String ovdNumberValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNoLabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "financialInfo",
        "code": "public void financialInfo(String applicantTab, String expandTabName, String processTypeLabel,\n\t\t\tString processTypeValue, String creditProgramLabel, String creditProgramValue, String employmentTypeLabel,\n\t\t\tString employmentTypeValue, String rsaLabel, String rsaValue, String dataEntryStatusLabel,\n\t\t\tString dataEntryStatusValue, String submitForApprovalButton, String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Financial Info #\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(processTypeLabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tselectValueFromDropdown(employmentTypeLabel, employmentTypeValue);\n\t\t\tselectValueFromDropdown(rsaLabel, rsaValue);\n\t\t\tselectValueFromDropdown(dataEntryStatusLabel, dataEntryStatusValue);\n\t\t\tclickOnButtonWithoutWaitTime(submitForApprovalButton);\n\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\tString errorValidation = findWebElement(error_Msg).getText().trim();\n\t\t\t\tif (errorValidation.contains(\"Same Customer\")) {\n\t\t\t\t//\tif (GOR.environmentValue.equals(\"UAT\")) {\n\t\t\t\t//\tenterPanNumberInCustomerDetails(\"PAN Number\", generatePanNumber());\n\t\t\t\t//\t}\n\t\t\t\t\tString fourDigitNumber = generate6DigitBINNumber();\n\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", fourDigitNumber);\n\t\t\t\t\tenterTextInCustomerProcess(\"POA No\", fourDigitNumber);\n\t\t\t\t\tclickOnButton(submitForApprovalButton);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tverifySuccessMessage(successMessage);\n\t\t\twaitTime(5);\n\t\t\tif (dataEntryStatusValue.equalsIgnoreCase(\"Completed\")) {\n\t\t\t\tString customerName = getCustomerName(\"Customer\");\n\t\t\t\tif (customerName.equalsIgnoreCase(\"NTBCustomer\")) {\n\n\t\t\t//\t\tif (GOR.environmentValue.equals(\"UAT\")) {\n\t\t\t\t//\tenterPanNumberInCustomerDetails(\"PAN Number\", generatePanNumber());\n\t\t\t//\t\t}\n\t\t\t\t\tString fourDigitNumber = generate6DigitBINNumber();\n\t\t\t\t\tenterTextInCustomerProcess(\"OVD Number\", fourDigitNumber);\n\t\t\t\t\tenterTextInCustomerProcess(\"POA No\", fourDigitNumber);\n\t\t\t\t\tclickOnButton(submitForApprovalButton);\n\t\t\t\t\tString customerName1 = getCustomerName(\"Customer\");\n\t\t\t\t\ttestStepInfo(\"$ Customer Created - $\" + customerName1);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"$ Customer Created - $\" + customerName);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in financialInfo \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete required details section\n\t */\n\t\n\t/*public void requiredDetails(String tabName,String motherNameLabel, String motherNameValue, String fatherNameLabel,\n\t\t\tString fatherNameValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String nameOfCompanyLabel,String nameOfCompanyValue,String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String mothlyIncomeLabel, String mothlyIncomeValue, String alternateNoLabel,\n\t\t\tString alternateNoValue, String designationLabel, String designationValue, String nameOncardLabel,\n\t\t\tString nameOncardValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString qualificationLabel, String qualificationValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue,String emailLabel,String emailValue,String bflBranchLabel,\n\t\t\tString bflBranchValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\t\n\t\t\texpandArrow(\"Office Address Enrichment\");\t\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\t\t\t\n\t\t\tif (isElementPresent(field))\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(\"Enter Pincode\",\"411014\");\n\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\", \"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label,officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label,officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel,officeAreaLocalityValue);\n\t\t\tchooseSearchAndListField(officePinCodeLabel,officePinCodeValue);\t\t\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\t\n\t\t\tclickEditOptionWithTitle(tabName,officePhoneNoTypeLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel,motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel,fatherNameValue);\n\t\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel,officePhoneNoTypeValue);\n\t\t\tif(GOR.environmentValue.equals(\"PREPROD\"))\n\t\t\t{\n\t\t\tchooseValueFromSearchAndListField(nameOfCompanyLabel,nameOfCompanyValue);\n\t\t    }\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel,mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel,alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel,designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel,nameOncardValue);\t\t\t\n\t\t\t\n\t\t//\tselectValueFromCkycDropdown(qualificationLabel,qualificationValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel,prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel,maritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel,prefferedMailingAddressValue);\t\n\t\t\tenterTextInCustomerDetails(emailLabel,emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel,bflBranchValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t*/",
        "description": "This Java method is designed to complete the financial information section of a customer details form. It takes several input parameters, including labels and values for various fields such as process type, credit program, employment type, RSA, data entry status, and submit button.\n\nThe method performs the following actions:\n\n1. Enters the required financial information by selecting values from dropdowns and entering text into fields.\n2. Checks if an error message is displayed after submitting the form.\n3. If an error message is displayed, it generates a PAN number (for UAT environment only) and enters it into the customer details form.\n4. Verifies that the success message is displayed after successful submission of the form.\n5. Waits for 5 seconds before continuing.\n\nThe method also includes some conditional logic to handle specific scenarios, such as when the data entry status is \"Completed\" or when the customer name matches a certain criteria.\n\nIf an exception occurs during the execution of this method, it will be caught and logged as a test step failure.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String processTypeLabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String employmentTypeLabel",
            "String employmentTypeValue",
            "String rsaLabel",
            "String rsaValue",
            "String dataEntryStatusLabel",
            "String dataEntryStatusValue",
            "String submitForApprovalButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectValueFromDropdownInRequiredDetails",
        "code": "public void selectValueFromDropdownInRequiredDetails(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\"+dropdownName+\"']//ancestor::lightning-combobox//div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(dropdownName+\" has listed values\");\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//div[@aria-label='\"+dropdownName+\"']//lightning-base-combobox-item[contains(@role,'option')]//span//span[@title='\"+value+\"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n \n\t\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInRequiredDetails`, is used to select a specific value from a dropdown list in a Salesforce Lightning component. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method waits for the page to load.\n2. It constructs an XPath expression to locate the dropdown element based on its name.\n3. It waits for the dropdown element to be displayed.\n4. If the dropdown is displayed, it clicks on the dropdown button to open the list of options.\n5. It then searches for the desired value in the dropdown list and clicks on it when found.\n6. If the value is successfully selected, a screenshot is taken to verify the selection.\n7. If the value is not present in the dropdown or an error occurs during the process, the method fails the test step.\n\nThe method uses various Selenium WebDriver methods, such as `waitForElement`, `clickOnSpecialElement`, and `manualScreenshot`, to interact with the Salesforce Lightning component.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "requiredDetails",
        "code": "public void requiredDetails(String tabName,String motherNameLabel, String motherNameValue, String fatherNameLabel,\n\t\t\tString fatherNameValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String nameOfCompanyLabel,String nameOfCompanyValue,String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String mothlyIncomeLabel, String mothlyIncomeValue, String alternateNoLabel,\n\t\t\tString alternateNoValue, String designationLabel, String designationValue, String nameOncardLabel,\n\t\t\tString nameOncardValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString qualificationLabel, String qualificationValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue,String emailLabel,String emailValue,String bflBranchLabel,\n\t\t\tString bflBranchValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\t\n\t\t\twaitTime(3);\n\t\t\texpandArrow(\"Office Address Enrichment\");\t\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\t\t\t\n\t\t\tif (isElementPresent(field))\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(\"Enter Pincode\",\"411014\");\n\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\", \"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label,officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label,officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel,officeAreaLocalityValue);\n\t\t\tchooseSearchAndListField(officePinCodeLabel,officePinCodeValue);\t\t\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\t\n\t\t\tclickEditOptionWithTitle(tabName,officePhoneNoTypeLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel,motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel,fatherNameValue);\n\t\n\t\t\tselectValueFromDropdownInRequiredDetails(officePhoneNoTypeLabel,officePhoneNoTypeValue);\n\t\t\tif(GOR.environmentValue.equals(\"PREPROD\"))\n\t\t\t{\n\t\t\tchooseValueFromSearchAndListField(nameOfCompanyLabel,nameOfCompanyValue);\n\t\t    }\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(mothlyIncomeLabel,mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel,alternateNoValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(designationLabel,designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel,nameOncardValue);\t\t\t\n\t\t\t\n\t\t//\tselectValueFromCkycDropdown(qualificationLabel,qualificationValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(prefferedLanguageLabel,prefferedLanguageValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(maritalStatusLabel,maritalStatusValue);\n\t\t\tselectValueFromDropdownInRequiredDetails(prefferedMailingAddressLabel,prefferedMailingAddressValue);\t\n\t\t\tif(GOR.environmentValue.equals(\"PREPROD\"))\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(emailLabel,emailValue);\n\t\t\t}\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel,bflBranchValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n//\t\t\tverifyErrorMessageInSqcPopup();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetails \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to enter and validate customer details, specifically for a post-approval process. The method takes in 44 string parameters that represent various labels and values for the customer details.\n\nThe method performs the following actions:\n\n1. It waits for 3 seconds before expanding an \"Office Address Enrichment\" arrow.\n2. It searches for an address using the pincode and enters the office address line 1, line 2, line 3, area locality, and pincode values.\n3. If the search is successful, it fills in the remaining office address fields. Otherwise, it uses a different method to enter the office address details.\n4. It clicks on the \"Save\" button.\n5. It edits the customer details by entering mother's name, father's name, phone number type, and other relevant information.\n6. It selects values from dropdown menus for monthly income, designation, preferred language, marital status, and preffered mailing address.\n7. If the environment is PREPROD, it enters an email address and chooses a value from a search-and-list field for BFL branch.\n8. Finally, it clicks on another \"Save\" button in a popup window.\n\nThe method also includes error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String nameOfCompanyLabel",
            "String nameOfCompanyValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectSchemeTypeInModelSelection",
        "code": "public void selectSchemeTypeInModelSelection(String label, String value) {\n\t\ttry {\n\t\t\tString fieldName = label + \"#xpath=//span[text()='\" + label\n\t\t\t\t\t+ \"']//parent::label//following-sibling::div//div//select\";\n\t\t\twaitForElement(fieldName, 10);\n\t\t\tif (isElementPresent(fieldName)) {\n\t\t\t\tSelect select = new Select(findWebElement(fieldName));\n\t\t\t\tselect.selectByVisibleText(value);\n\t\t\t\ttestStepPassed(label + \" field selected value \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" Element is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to selectSchemeTypeInModelSelection \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete model selection section\n\t */",
        "description": "This Java method, `selectSchemeTypeInModelSelection`, is used to select a scheme type from a dropdown list within the \"Model Selection\" section of an application. \n\nThe method takes two parameters: `label` and `value`. The `label` parameter is used to construct the XPath locator for the dropdown field, while the `value` parameter specifies the value to be selected in the dropdown.\n\nHere's what the method does:\n\n1. It constructs an XPath locator based on the provided `label`, which is used to locate the dropdown field.\n2. It waits for the element to be present and visible using the `waitForElement` method.\n3. If the element is present, it selects the specified `value` from the dropdown list using a `Select` object.\n4. If the selection is successful, it logs a test step as passed with the selected value.\n5. If the element is not present or the selection fails for any reason, it logs a test step as failed.\n\nThe method also catches any exceptions that may occur during its execution and logs them as test failures.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "modelSelection",
        "code": "public void modelSelection(String tabName,String exShowroomPriceLabel, String exShowroomPriceValue, String taxAmountLabel,\n\t\t\tString taxAmountValue, String insuranceAmountLabel, String insuranceAmountValue, String loanAmountLabel,\n\t\t\tString loanAmountValue, String addToCartButton,String schemeValue,String successMessage1) {\n\t\ttry {\t\t\t\n\t\t\t\n\t\t\t\t/*String customerName = getCustomerName(\"Customer\");\n\t\t\t\tString parent = driver.getWindowHandle();\n\t\t\t\topenNewTab();\n\t\t\t\tSet<String> AllHandles = driver.getWindowHandles();\n\t\t\t\tList<String> HandlesToList = new ArrayList<String>();\n\t\t\t\tHandlesToList.addAll(AllHandles);\n\t\t\t\tint windows = HandlesToList.size();\n\t\t\t\tdriver.switchTo().window(HandlesToList.get(windows - 1));\n\n\t\t\tif (GOR.environmentValue.equals(\"PREPROD\")) {\n\t\t\t\tflag = loginLogoutPage.loginToSalesForce(GOR.n2p_adminURL, GOR.n2p_adminUserName,\n\t\t\t\t\t\tGOR.n2p_adminPassword);\n\t\t\t\tif (flag) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tflag = loginLogoutPage.loginToSalesForce(GOR.uat_adminURL, GOR.uat_adminUserName,\n\t\t\t\t\t\tGOR.uat_adminPassword);\n\t\t\t\tif (flag) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t\thomePageAdmin.switchToApplicationClassicOrLightning(GOR.mode);\n\t\t\t\thomePageAdmin.globalSalesSearch(customerName);\n\t\t\t\thomePageAdmin.clickOnGlobalSearchResult(customerName);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\t\n\t\t\t\tcustomerPageAdmin.clickEditIcon(\"Underwriting Status\");\n\t\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Underwriting Status\", \"Response Received\");\n\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tdriver.close();\n\t\t\t\tdriver.switchTo().window((parent));*/\n\t\t\t\t\t\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter Loan Details and Scheme Selection #\");\n\t\t\tselectTabs(tabName);\n\t\t\tenterValueInField(exShowroomPriceLabel, exShowroomPriceValue);\n\t\t\tenterValueInField(taxAmountLabel, taxAmountValue);\n\t\t\tenterValueInField(insuranceAmountLabel, insuranceAmountValue);\n\t\t\tenterValueInField(\"Accessories Amount\", \"2000\");\n\t\t\tenterValueInField(loanAmountLabel, loanAmountValue);\n\t\t\tselectSchemeTypeInModelSelection(\"Scheme Type\",\"Special\");\t\t\n\t//\t\tchooseSearchAndListField(\"Scheme Name\",schemeValue);\n\t\t\tclickOnButton(addToCartButton);\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\t//selectSchemeWithValue(schemeValue);\n\t\t\tselectSchemeCheckboxWithoutValue();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in modelSelection \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `modelSelection`, appears to be a test automation script for a web application. The method takes 12 string parameters:\n\n1. `tabName`: the name of the tab to select\n2-13: various labels and values for entering loan details and scheme selection\n\nThe method performs the following actions:\n\n1. Logs in to Salesforce (depending on the environment, either PREPROD or UAT)\n2. Switches to a new window and navigates to a specific page\n3. Enters customer name and selects a global search result\n4. Closes the current window and switches back to the original window\n5. Refreshes the page several times\n6. Selects the specified tab\n7. Enters values in various fields, including:\n\t* Ex-showroom price\n\t* Tax amount\n\t* Insurance amount\n\t* Accessories amount (hardcoded value)\n\t* Loan amount\n8. Selects a scheme type (Special) and clicks the \"Add to Cart\" button\n9. Verifies that a success message is displayed\n\nIf any exceptions occur during the execution of this method, it will catch them and report a test step failure.",
        "input": [
            "String tabName",
            "String exShowroomPriceLabel",
            "String exShowroomPriceValue",
            "String taxAmountLabel",
            "String taxAmountValue",
            "String insuranceAmountLabel",
            "String insuranceAmountValue",
            "String loanAmountLabel",
            "String loanAmountValue",
            "String addToCartButton",
            "String schemeValue",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectSchemeCheckboxWithoutValue",
        "code": "public void selectSchemeCheckboxWithoutValue() {\n\t\ttry {\n\t\t\t\tString scheme = \"#xpath=//div[@class='showScheme']//slot//lightning-layout-item//input[@class='checkBox']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 20);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\tif (!isCheckBoxSelected(scheme)) {\n\t\t\t\t\t\tscrollToElement(scheme);\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\tString schemeValue=getAttributeValue(scheme, \"value\");\n\t\t\t\t\t\tclickOnSpecialElement(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" Scheme Value Check box is successfully checked\");\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\n\t\t\t\tclickOnButton(\"Proceed\");\n\t\t\t//\twaitForPageToLoad();\n\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"No Scheme were found in loan Details Section\");\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to validate PAN details\n\t */",
        "description": "This Java method, `selectSchemeCheckboxWithoutValue()`, is used to select a checkbox without a value in the loan details section of an application. \n\nThe method first waits for the page to load and then searches for the specified scheme (XPath) on the page. If the element is displayed within 10 seconds, it scrolls to that element, highlights it using a highlighter method, and checks if the checkbox is not selected. If the checkbox is not selected, it clicks on the checkbox, takes a manual screenshot of the action, waits for the page to load again, and then clicks on the \"Proceed\" button.\n\nIf no scheme is found in the loan details section within 20 seconds, the method fails the test step with an error message. If any exception occurs during the execution of this method, it also fails the test step with an error message containing the exception class name.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "validatePanDetails",
        "code": "public void validatePanDetails(String validatePanDetailsLabel, String panNoValidationLabel,\n\t\t\tString panNoValidationValue, String nsdlDocumentTypeLabel, String nsdlDocumentTypeValue,\n\t\t\tString submitButton,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Validate PAN Details #\");\n\t\t\tselectTabs(validatePanDetailsLabel);\n\t\t\t\n\t\t//\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t//\t{\n\t\t    selectValueFromPanValidationDropdown(panNoValidationLabel, panNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(nsdlDocumentTypeLabel, nsdlDocumentTypeValue);\n\t\t//    }\n\t\t//\telse\n\t\t//\t{\n\t\t//\t\tselectValueFromPanValidationDropdown(nsdlDocumentTypeLabel, \"Form60\");\n\t\n\t\t//\t}\n\t\t\tclickOnButton(submitButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validatePanDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  04/04/2022\n\t * Description    :  method to complete required co applicant details\n\t */",
        "description": "This Java method, `validatePanDetails`, is used to validate PAN (Pension Account Number) details in a system. The method takes eight parameters:\n\n1. `validatePanDetailsLabel`: the label for the PAN validation dropdown\n2. `panNoValidationLabel`: the label for the PAN number validation dropdown\n3. `panNoValidationValue`: the value for the PAN number validation dropdown\n4. `nsdlDocumentTypeLabel`: the label for the NSDL (National Securities Depository Limited) document type dropdown\n5. `nsdlDocumentTypeValue`: the value for the NSDL document type dropdown\n6. `submitButton`: the submit button to click after validating details\n7. `successMessage`: the expected success message after validation\n\nThe method performs the following steps:\n\n1. It records a test step with the label \"# Validate PAN Details #\".\n2. It selects the tabs based on the `validatePanDetailsLabel` parameter.\n3. If the environment is UAT (User Acceptance Testing), it selects values from both PAN validation dropdowns (`panNoValidationLabel` and `nsdlDocumentTypeLabel`) using the provided values. Otherwise, it only selects a value for the NSDL document type dropdown with \"Form60\" as the default value.\n4. It clicks on the submit button (`submitButton`).\n5. It verifies that the success message matches the expected message (`successMessage`).\n\nThe method catches any exceptions and records them if they occur during execution.",
        "input": [
            "String validatePanDetailsLabel",
            "String panNoValidationLabel",
            "String panNoValidationValue",
            "String nsdlDocumentTypeLabel",
            "String nsdlDocumentTypeValue",
            "String submitButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "requiredCoApplicantDetails",
        "code": "public void requiredCoApplicantDetails(String tabName, String motherNameLabel, String motherNameValue,\n\t\t\tString fatherNameLabel, String fatherNameValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String mothlyIncomeLabel, String mothlyIncomeValue,\n\t\t\tString nameOfCompanyLabel, String nameOfCompanyValue, String designationLabel, String designationValue,\n\t\t\tString officeAreaLocalityLabel, String officeAreaLocalityValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String nameOncardLabel, String nameOncardValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue, String emailLabel,\n\t\t\tString emailValue, String bflBranchLabel, String bflBranchValue, String qualificationLabel,\n\t\t\tString qualificationValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString primaryNameOfCompanyLabel, String primaryNameOfCompanyValue, String primaryMotherNameLabel,\n\t\t\tString primaryMotherNameValue, String primaryFatherNameLabel, String primaryFatherNameValue,\n\t\t\tString primaryMothlyIncomeLabel, String primaryMothlyIncomeValue, String primaryQualificationLabel,\n\t\t\tString primaryQualificationValue, String primaryMaritalStatusLabel, String primaryMaritalStatusValue,\n\t\t\tString primaryDesignationLabel, String primaryDesignationValue, String relationshipLabel,\n\t\t\tString relationshipValue, String primaryPrefferedLanguageLabel, String primaryPreferredLanguageValue,\n\t\t\tString primaryEmailLabel, String primaryEmailValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Details-----\");\n\t\t\t\n\t\t\texpandArrow(\"Office Address Enrichment\");\t\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\t\t\t\n\t\t\tif (isElementPresent(field))\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(\"Enter Pincode\",\"411014\");\n\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\", \"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label,officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label,officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel,officeAreaLocalityValue);\n\t\t\tchooseSearchAndListField(officePinCodeLabel,officePinCodeValue);\t\t\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\t\n\t\t\t\t\t\n\t\t\tclickEditOptionWithTitle(tabName, prefferedLanguageLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tif(GOR.environmentValue.equals(\"PREPROD\"))\n\t\t\t{\n\t\t\tchooseValueFromSearchAndListField(nameOfCompanyLabel, nameOfCompanyValue);\n\t\t\t}\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t//\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t//\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t//\tchooseValueFromSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t//\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t//\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t//\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n\n\t\t\ttestStepInfo(\"Primary Applicant Required Details\");\n\n\t\t\tif(GOR.environmentValue.equals(\"PREPROD\"))\n\t\t\t{\n\t\t\tchooseValueFromSearchAndListField(primaryNameOfCompanyLabel, primaryNameOfCompanyValue);\n\t\t\t}\n\t\t\tenterValueInFatherMotherTextField(primaryMotherNameLabel, primaryMotherNameValue);\n\t\t\tenterValueInFatherMotherTextField(primaryFatherNameLabel, primaryFatherNameValue);\n\t\t\tselectValueFromCkycDropdown(primaryMothlyIncomeLabel, primaryMothlyIncomeValue);\n\t//\t\tselectValueFromCkycDropdown(primaryQualificationLabel, primaryQualificationValue);\n\t\t\tselectValueFromCkycDropdown(primaryMaritalStatusLabel, primaryMaritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(primaryDesignationLabel, primaryDesignationValue);\n\t\t\tselectValueFromCkycDropdown(relationshipLabel, relationshipValue);\n\t\t\tselectValueFromCkycDropdown(primaryPrefferedLanguageLabel, primaryPreferredLanguageValue);\n\t\t\tenterTextInCustomerDetails(primaryEmailLabel, primaryEmailValue);\n\t\t\tif(GOR.environmentValue.equals(\"UAT\"))\n\t\t\t{\n\t\t\tchooseValueFromSearchAndListField(\"Primary BFL Branch\", bflBranchValue);\n\t\t\t}\n\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredCoApplicantDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to validate co applicant PAN details\n\t */",
        "description": "This Java method is used to fill out the required details for a co-applicant in an application. The method takes several string parameters that represent labels and values of various fields, such as mother's name, father's name, preferred language, monthly income, office address, phone number, etc.\n\nThe method performs the following actions:\n\n1. It expands an arrow to enrich the office address.\n2. If a specific search field is present, it enters the pincode and searches for the address. Otherwise, it enters the office address line 1, 2, and 3 values manually.\n3. It clicks on the \"Save\" button.\n4. It fills out various fields with the given values, such as father's name, mother's name, preferred language, monthly income, etc.\n5. If the environment is PREPROD, it selects a value from a search field for the company name and branch.\n6. It tests the primary applicant required details.\n\nThe method also catches any exceptions that may occur during its execution and reports them as test step failures.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String nameOfCompanyLabel",
            "String nameOfCompanyValue",
            "String designationLabel",
            "String designationValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String primaryNameOfCompanyLabel",
            "String primaryNameOfCompanyValue",
            "String primaryMotherNameLabel",
            "String primaryMotherNameValue",
            "String primaryFatherNameLabel",
            "String primaryFatherNameValue",
            "String primaryMothlyIncomeLabel",
            "String primaryMothlyIncomeValue",
            "String primaryQualificationLabel",
            "String primaryQualificationValue",
            "String primaryMaritalStatusLabel",
            "String primaryMaritalStatusValue",
            "String primaryDesignationLabel",
            "String primaryDesignationValue",
            "String relationshipLabel",
            "String relationshipValue",
            "String primaryPrefferedLanguageLabel",
            "String primaryPreferredLanguageValue",
            "String primaryEmailLabel",
            "String primaryEmailValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "validateCoApplicantPanDetails",
        "code": "public void validateCoApplicantPanDetails(String validatePanDetailsLabel, String panNoValidationLabel,\n\t\t\tString panNoValidationValue, String nsdlDocumentTypeLabel, String nsdlDocumentTypeValue,\n\t\t\tString primaryPanNoValidationLabel, String primaryPanNoValidationValue, String primaryNsdlDocumentTypeLabel,\n\t\t\tString primatyNsdlDocumentTypeValue, String submitButton,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Validate PAN Details-----\");\n\t\t\tselectTabs(validatePanDetailsLabel);\n\t\t\tselectValueFromPanValidationDropdown(panNoValidationLabel, panNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(nsdlDocumentTypeLabel, nsdlDocumentTypeValue);\n\t\t\tselectValueFromPanValidationDropdown(primaryPanNoValidationLabel, primaryPanNoValidationValue);\n\t\t\tselectValueFromPanValidationDropdown(primaryNsdlDocumentTypeLabel, primatyNsdlDocumentTypeValue);\n\t\t\tclickOnButton(submitButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validateCoApplicantPanDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete co applicant additional information section\n\t */",
        "description": "This Java method, `validateCoApplicantPanDetails`, is used to validate the PAN (Permanent Account Number) details for a co-applicant in an application process. The method attempts to perform the following steps:\n\n1. Log test step information (\"-----Validate PAN Details-----\").\n2. Select the relevant tabs.\n3. Validate the PAN number and NSDL document type for both the primary applicant and the co-applicant using dropdown menus.\n4. Click on the \"Submit\" button.\n5. Verify that a success message is displayed.\n\nIf any of these steps fail, an exception is caught and the test step is marked as failed with the error message.",
        "input": [
            "String validatePanDetailsLabel",
            "String panNoValidationLabel",
            "String panNoValidationValue",
            "String nsdlDocumentTypeLabel",
            "String nsdlDocumentTypeValue",
            "String primaryPanNoValidationLabel",
            "String primaryPanNoValidationValue",
            "String primaryNsdlDocumentTypeLabel",
            "String primatyNsdlDocumentTypeValue",
            "String submitButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "coApplicantAdditonalInformation",
        "code": "public void coApplicantAdditonalInformation(String applicantTab,String expandTabName, String employmentTypeLabel, String employmentTypeValue,\n\t\t\tString rsaLabel, String rsaValue, String submitForApprovalButton) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Additional Information-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(employmentTypeLabel, employmentTypeValue);\n\t\t\tselectValueFromDropdown(rsaLabel, rsaValue);\n\t\t\tclickOnButtonInKycTab(submitForApprovalButton);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in coApplicantAdditonalInformation \" + e.getClass().getName());\n\t\t}\n\t}\t\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  Method used to verify and print error message below fields\n\t * @param         :  parameterList is the error list \n\t */",
        "description": "This Java method, `coApplicantAdditonalInformation`, appears to be a test automation method that adds additional information for a co-applicant in a KYC (Know Your Customer) process. The method takes five parameters:\n\n1. `applicantTab`: likely the name of the tab related to the applicant.\n2. `expandTabName`: possibly the name of the tab to expand or show more information.\n3. `employmentTypeLabel` and `employmentTypeValue`: likely the label and value for an employment type dropdown field.\n4. `rsaLabel` and `rsaValue`: likely the label and value for a related security assignment (RSA) dropdown field.\n5. `submitForApprovalButton`: probably the name of a button to submit the application for approval.\n\nThe method performs the following actions:\n\n1. Logs a test step information message with the text \"-----Additional Information-----\".\n2. Selects the specified `applicantTab`.\n3. Expands or shows more information in the tab with the name `expandTabName`.\n4. Selects the employment type from the dropdown field using the provided label and value.\n5. Selects the RSA from the dropdown field using the provided label and value.\n6. Clicks on the \"Submit for Approval\" button.\n\nIf any of these actions fail, the method catches the exception and logs a test step failure message with the error class name.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String employmentTypeLabel",
            "String employmentTypeValue",
            "String rsaLabel",
            "String rsaValue",
            "String submitForApprovalButton"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyAndPrintErrorMessageInField",
        "code": "public void verifyAndPrintErrorMessageInField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//div[contains(@class,'help')]\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage+\" in \"+labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \"+labelName+\" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInField`, is used to verify if an error message is displayed for a specific field with a given label name and expected error message. It takes two parameters: `labelName` (the text of the label associated with the field) and `expectedMessage` (the expected error message).\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the element associated with the given `labelName`.\n2. It checks if the element is displayed using a timeout of 3 seconds.\n3. If the element is displayed, it retrieves the text of the element (i.e., the error message).\n4. It compares the retrieved error message with the expected `expectedMessage`. If they match, it highlights the error field and takes a manual screenshot to capture evidence of the validation failure.\n5. If the error messages do not match or if the element is not displayed, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyErrorMessageNotPresentUnderField",
        "code": "public void verifyErrorMessageNotPresentUnderField(String labelName) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//div[contains(@class,'help')]\";\n\t\t\tif (!isElementDisplayed(errorField, 3)) {\n\t\t\t\t\tmanualScreenshot(\"Error message not present under the field \"+labelName+\" as expected\");\t\t\t\n\t\t\t} else {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\ttestStepFailed(errorMessage+\" Error message is displayed under \"+labelName+\" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorMessageNotPresentUnderField`, is used to verify that an error message is not present under a specific field labeled with the provided `labelName`. The method uses Selenium WebDriver's `isElementDisplayed` and `getText` methods to check if the error message element is displayed and retrieve its text content, respectively. If the error message is not displayed, it takes a manual screenshot as evidence of the expected result. If the error message is displayed, it fails the test step with an error message indicating that the error message was unexpectedly present under the field. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyAndPrintErrorMessageInCKYCField",
        "code": "public void verifyAndPrintErrorMessageInCKYCField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-input//following-sibling::p\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage+\" in \"+labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \"+labelName+\" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInCKYCField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  08/04/2022\n\t * Description    :  method to get required details mandatory field error message.\n\t * @return        :  fields return list of error message\n\t */",
        "description": "This Java method, `verifyAndPrintErrorMessageInCKYCField`, is used to verify if an expected error message is displayed in a specific CKYC (Customer Knowledge and Yield) field. The method takes two parameters: `labelName` and `expectedMessage`. \n\nIt attempts to find the specified `labelName` in the UI, checks if the corresponding error message is displayed within 3 seconds, and then compares it with the expected `errorMessage`. If the messages match, it takes a manual screenshot as evidence. If they don't match or no error message is found, it marks the test step as failed.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during its execution.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getRequiredDetailsListErrorMessage",
        "code": "public List<String> getRequiredDetailsListErrorMessage() {\n\t\tArrayList<String> value = null;\n\t\ttry {\n\t\t\tvalue = new ArrayList<String>();\n\t\t\tString field = \"Error Header#xpath=//span[text()='Review the following errors']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//ul[@class='errorsList']//li\";\n\t\t\twaitForElement(field, 5);\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tList<WebElement> list = findWebElements(fieldValidation);\n\t\t\t\tfor (int iterate = 0; iterate < list.size(); iterate++) {\t\t\t\t\t\n\t\t\t\t\tvalue.add(list.get(iterate).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no validation is displayed when saving the details\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessage \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Saraswathi L\n\t * @created Date  :  12/04/2022\n\t * Description    :  method to click on close Icon in Validation Message.\n\t * @param         :  labelName is the icon name\n\t */",
        "description": "This Java method, `getRequiredDetailsListErrorMessage()`, retrieves a list of error messages from a web page and returns it as a `List<String>`. The method uses Selenium WebDriver to interact with the web page. It waits for an element to be present on the page, then extracts the text from each error message in the list and adds it to the returned list. If the element is not found or there's an exception during the process, the method fails the test step.",
        "input": [],
        "output": "List"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnCloseIcon",
        "code": "public void clickOnCloseIcon(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"Close Icon #xpath=//button[@title='\" + labelName + \"']\";\n\t\t\twaitForElement(Element, 3);\n\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCloseIcon  \" + e.getClass().getName());\n\t\t}\n\t}\n\n\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  Method used to verify and print error message in required details\n\t * @param         :  validation is expected message to compare \n\t */",
        "description": "This Java method, `clickOnCloseIcon`, is used to click on a specific \"Close Icon\" element on a web page. The icon's title matches the provided `labelName` parameter.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `labelName` to locate the Close Icon button.\n2. It waits for the element to be displayed using the `waitForElement` method, with a timeout of 3 seconds.\n3. If the element is displayed, it clicks on the element using the `clickOnSpecialElement` method.\n4. If the element is not displayed within the given time, it logs an error message indicating that the Close Icon was not found.\n\nThe method also catches any exceptions that may occur during execution and logs a failure message if an exception is thrown.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getRequiredDetailsErrorMessage",
        "code": "public void getRequiredDetailsErrorMessage(String validation) {\n\t\tString errorMessage = null;\n\t\ttry {\n\t\t\tString field = \"Error Header#xpath=//div[contains(@class,'open active')]//span[text()='Review the following errors'] | //div[contains(@class,'open active')]//span[text()='Review the errors on this page.']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//div[contains(@class,'open active')]//ul[@class='errorsList']//li\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\terrorMessage = getText(fieldValidation);\n\t\t\t\tif (errorMessage.contains(validation)) {\n\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Expected validation is not fire - Got '\" + errorMessage + \"' instead of \" + validation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessage \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete required details section except company name\n\t */",
        "description": "This Java method, `getRequiredDetailsErrorMessage`, is used to retrieve and validate an error message displayed when completing the \"Required Details\" section (except for the Company Name field). \n\nThe method waits for a specific element to be displayed, then checks if it is actually visible. If the element is present, it retrieves the error message text and checks if the provided `validation` string is contained within that message. \n\nIf the validation string is found in the error message, it takes a manual screenshot with the error message as part of the filename. If not, or if the error message does not contain the expected validation, the test step fails.\n\nThe method also includes try-catch logic to handle any exceptions that may occur during execution.",
        "input": [
            "String validation"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "requiredDetailsWithoutCompanyName",
        "code": "public void requiredDetailsWithoutCompanyName(String tabName,String motherNameLabel, String motherNameValue, String fatherNameLabel,\n\t\t\tString fatherNameValue, String officeAreaLocalityLabel, String officeAreaLocalityValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue,String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String mothlyIncomeLabel, String mothlyIncomeValue, String alternateNoLabel,\n\t\t\tString alternateNoValue, String designationLabel, String designationValue, String nameOncardLabel,\n\t\t\tString nameOncardValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString qualificationLabel, String qualificationValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue,String emailLabel,String emailValue,String bflBranchLabel,\n\t\t\tString bflBranchValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Details-----\");\n\t\t\ttestStepInfo(\"-----Customer Details-----\");\n            testStepInfo(\"# Enter Post Approval Customer Details #\");\n\t\t\t\n\t\t\texpandArrow(\"Office Address Enrichment\");\t\n\t\t\tString field = \"#xpath=//label[text()='Search Address (Society / Building / Landmark Name)']//..//div/input\";\t\t\t\n\t\t\tif (isElementPresent(field))\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(\"Enter Pincode\",\"411014\");\n\t\t\tcustomerSearchAddress(\"Search Address (Society / Building / Landmark Name)\", \"Viman Prestige - Viman Nagar Road, Viman Nagar, Pune, Maharashtra, 411014\");\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label,officeAddressLine1Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label,officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label,officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel,officeAreaLocalityValue);\n\t\t\tchooseSearchAndListField(officePinCodeLabel,officePinCodeValue);\t\t\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\t\n\t\t\tclickEditOptionWithTitle(tabName,officePhoneNoTypeLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel,motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel,fatherNameValue);\n\t\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel,officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel,mothlyIncomeValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel,alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel,designationValue);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel,nameOncardValue);\t\t\t\n\t\t\t\n\t\t//\tselectValueFromCkycDropdown(qualificationLabel,qualificationValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel,prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel,maritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel,prefferedMailingAddressValue);\t\n\t\t\tenterTextInCustomerDetails(emailLabel,emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel,bflBranchValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredDetailsWithoutCompanyName \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  04/04/2022\n\t * Description    :  method to complete co applicant required details except company name\n\t */",
        "description": "This Java method is used to fill in the required customer details for a post-approval process, excluding the company name. The method takes several String parameters that represent various fields and values needed to populate the customer details form.\n\nThe method first performs some test steps, such as entering the customer's address and clicking on buttons. It then enters text into specific fields, selects values from dropdown menus, and chooses search results. Finally, it clicks on a save button to complete the customer details process.\n\nSome of the key actions performed by this method include:\n\n* Entering pincode\n* Searching for an address using the \"Search Address\" feature\n* Filling in office address line 1, 2, and 3 fields\n* Choosing search results from the \"Office Pin Code\" field\n* Entering values into father/mother name fields\n* Selecting values from dropdown menus for phone number type, monthly income, designation, preferred language, marital status, and preferred mailing address\n* Entering email address and BFL branch information\n* Clicking on save buttons to complete the process\n\nThe method catches any exceptions that may occur during its execution and reports them as test step failures.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "requiredCoApplicantDetailsWithoutCompanyName",
        "code": "public void requiredCoApplicantDetailsWithoutCompanyName(String tabName, String motherNameLabel, String motherNameValue,\n\t\t\tString fatherNameLabel, String fatherNameValue, String prefferedLanguageLabel,\n\t\t\tString prefferedLanguageValue, String mothlyIncomeLabel, String mothlyIncomeValue,String designationLabel, String designationValue,\n\t\t\tString officeAreaLocalityLabel, String officeAreaLocalityValue, String officeAddressLine1Label,\n\t\t\tString officeAddressLine1Value, String officePinCodeLabel, String officePinCodeValue,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAddressLine3Label,\n\t\t\tString officeAddressLine3Value, String nameOncardLabel, String nameOncardValue,\n\t\t\tString officePhoneNoTypeLabel, String officePhoneNoTypeValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString prefferedMailingAddressLabel, String prefferedMailingAddressValue, String emailLabel,\n\t\t\tString emailValue, String bflBranchLabel, String bflBranchValue, String qualificationLabel,\n\t\t\tString qualificationValue, String maritalStatusLabel, String maritalStatusValue,\n\t\t\tString primaryNameOfCompanyLabel, String primaryNameOfCompanyValue, String primaryMotherNameLabel,\n\t\t\tString primaryMotherNameValue, String primaryFatherNameLabel, String primaryFatherNameValue,\n\t\t\tString primaryMothlyIncomeLabel, String primaryMothlyIncomeValue, String primaryQualificationLabel,\n\t\t\tString primaryQualificationValue, String primaryMaritalStatusLabel, String primaryMaritalStatusValue,\n\t\t\tString primaryDesignationLabel, String primaryDesignationValue, String relationshipLabel,\n\t\t\tString relationshipValue, String primaryPrefferedLanguageLabel, String primaryPreferredLanguageValue,\n\t\t\tString primaryEmailLabel, String primaryEmailValue,String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Details-----\");\n\t\t\tclickEditOptionWithTitle(tabName, prefferedLanguageLabel);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tselectValueFromCkycDropdown(prefferedLanguageLabel, prefferedLanguageValue);\n\t\t\tselectValueFromCkycDropdown(mothlyIncomeLabel, mothlyIncomeValue);\n\t\t\tselectValueFromCkycDropdown(designationLabel, designationValue);\n\t\t\tenterTextInCustomerDetails(officeAreaLocalityLabel, officeAreaLocalityValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tchooseValueFromSearchAndListField(officePinCodeLabel, officePinCodeValue);\n\t\t\tenterTextInCustomerDetails(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterTextInCustomerDetails(officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterTextInCustomerDetails(nameOncardLabel, nameOncardValue);\n\t\t\tselectValueFromCkycDropdown(officePhoneNoTypeLabel, officePhoneNoTypeValue);\n\t\t\tenterTextInCustomerDetails(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tenterTextInCustomerDetails(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromCkycDropdown(prefferedMailingAddressLabel, prefferedMailingAddressValue);\n\t\t\tenterTextInCustomerDetails(emailLabel, emailValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tselectValueFromCkycDropdown(qualificationLabel, qualificationValue);\n\t\t\tselectValueFromCkycDropdown(maritalStatusLabel, maritalStatusValue);\n\n\t\t\ttestStepInfo(\"Primary Applicant Required Details\");\n\n\t\t\tchooseValueFromSearchAndListField(primaryNameOfCompanyLabel, primaryNameOfCompanyValue);\n\t\t\tenterValueInFatherMotherTextField(primaryMotherNameLabel, primaryMotherNameValue);\n\t\t\tenterValueInFatherMotherTextField(primaryFatherNameLabel, primaryFatherNameValue);\n\t\t\tselectValueFromCkycDropdown(primaryMothlyIncomeLabel, primaryMothlyIncomeValue);\n\t\t\tselectValueFromCkycDropdown(primaryQualificationLabel, primaryQualificationValue);\n\t\t\tselectValueFromCkycDropdown(primaryMaritalStatusLabel, primaryMaritalStatusValue);\n\t\t\tselectValueFromCkycDropdown(primaryDesignationLabel, primaryDesignationValue);\n\t\t\tselectValueFromCkycDropdown(relationshipLabel, relationshipValue);\n\t\t\tselectValueFromCkycDropdown(primaryPrefferedLanguageLabel, primaryPreferredLanguageValue);\n\t\t\tenterTextInCustomerDetails(primaryEmailLabel, primaryEmailValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in requiredCoApplicantDetailsWithoutCompanyName \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  25/04/2022\n\t * Description    :  Method to select or deselect check box\n\t * @param         :  labelname is the name of check box\n\t * @param         :  status is the input value check or uncheck\n\t */",
        "description": "This Java method, `requiredCoApplicantDetailsWithoutCompanyName`, appears to be part of a test automation framework. Its purpose is to fill out required details for a co-applicant in a system, without providing a company name.\n\nThe method takes 53 parameters, which are likely labels and values from the application's UI. It then performs various actions to enter these values into the application:\n\n1. Clicks an edit option with a specific title.\n2. Enters values into text fields for mother's name, father's name, monthly income, and other details.\n3. Selects values from dropdown menus for preferred language, designation, office phone number type, and others.\n4. Chooses values from search-and-list fields for office pin code, BFL branch, and primary name of company.\n5. Enters an email address.\n6. Saves the changes.\n\nThe method also includes error handling to catch any exceptions that may occur during the execution of these steps. If an exception is caught, it logs a test step failure with the corresponding error message.",
        "input": [
            "String tabName",
            "String motherNameLabel",
            "String motherNameValue",
            "String fatherNameLabel",
            "String fatherNameValue",
            "String prefferedLanguageLabel",
            "String prefferedLanguageValue",
            "String mothlyIncomeLabel",
            "String mothlyIncomeValue",
            "String designationLabel",
            "String designationValue",
            "String officeAreaLocalityLabel",
            "String officeAreaLocalityValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officePinCodeLabel",
            "String officePinCodeValue",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAddressLine3Label",
            "String officeAddressLine3Value",
            "String nameOncardLabel",
            "String nameOncardValue",
            "String officePhoneNoTypeLabel",
            "String officePhoneNoTypeValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String prefferedMailingAddressLabel",
            "String prefferedMailingAddressValue",
            "String emailLabel",
            "String emailValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String maritalStatusLabel",
            "String maritalStatusValue",
            "String primaryNameOfCompanyLabel",
            "String primaryNameOfCompanyValue",
            "String primaryMotherNameLabel",
            "String primaryMotherNameValue",
            "String primaryFatherNameLabel",
            "String primaryFatherNameValue",
            "String primaryMothlyIncomeLabel",
            "String primaryMothlyIncomeValue",
            "String primaryQualificationLabel",
            "String primaryQualificationValue",
            "String primaryMaritalStatusLabel",
            "String primaryMaritalStatusValue",
            "String primaryDesignationLabel",
            "String primaryDesignationValue",
            "String relationshipLabel",
            "String relationshipValue",
            "String primaryPrefferedLanguageLabel",
            "String primaryPreferredLanguageValue",
            "String primaryEmailLabel",
            "String primaryEmailValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux'] | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']/../following-sibling::input | //div[@data-aura-class='forceChatterPublisherPresentationPanel']//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[1]\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tscrollToElementTillPresent(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  Method used to verify and print error message below fields in required details\n\t * @param         :  parameterList is the error list \n\t */",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox based on the provided status (\"check\" or \"uncheck\") and label name. It uses Selenium WebDriver to interact with the UI element.\n\nHere's a brief overview of what the method does:\n\n1. It constructs an XPath expression to locate the checkbox element based on the provided label name.\n2. It waits for the checkbox element to be present, scrolls to it if necessary, and checks if it is already selected or deselected.\n3. If the status is \"check\", it selects the checkbox if it's not already checked. If the status is \"uncheck\", it deselects the checkbox if it's currently checked.\n4. It takes a manual screenshot after performing the selection or deselection action to verify that the operation was successful.\n5. If the checkbox element is not present, it fails the test step and logs an error message.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of this method, it writes the error message to a log file and fails the test step.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyAndPrintErrorMessageInRDField",
        "code": "public void verifyAndPrintErrorMessageInRDField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//parent::div//following-sibling::li\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.contains(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \" + labelName + \" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInRDField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get value from disabled field\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `verifyAndPrintErrorMessageInRDField`, verifies if an expected error message is displayed in a specific field (identified by the `labelName`) and takes a screenshot or logs a failure if it's not. Here's a breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the element containing the error message based on the provided `labelName`.\n2. It checks if the element is displayed using the `isElementDisplayed` method with a timeout of 3 seconds.\n3. If the element is displayed, it retrieves the text content of the element using the `getText` method and checks if the expected message is contained within it.\n4. If the expected message is found, it takes a manual screenshot with a descriptive title indicating that the expected validation was fired.\n5. If the expected message is not found or the element is not displayed, it logs a failure test step with an appropriate error message.\n\nThe method also catches any exceptions that may occur during its execution and logs a failure test step if one occurs.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getTextFromDisabledField",
        "code": "public String getTextFromDisabledField(String LabelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//label[text()='\" + LabelName + \"']//..//input | //span[text()='\" + LabelName + \"']//..//..//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = findWebElement(targetField).getAttribute(\"value\");\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDisabledField\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to verify line is present or not\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method retrieves the text value from a disabled input field on a web page. It takes a `LabelName` as an input parameter, which is used to locate the target field using XPath.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for the page to load.\n2. Constructs an XPath expression to locate the input field or span element with the specified label name.\n3. Waits for the target field to be displayed and waits up to 10 seconds for it to appear.\n4. Checks if the target field is displayed within 5 seconds. If not, the method fails.\n5. Retrieves the value attribute of the target field (which should be an input field) and stores it in the `fieldValue` variable.\n6. Highlights the target field using a custom highlighting method (`highLighterMethod1`).\n7. Checks if the `fieldValue` is not empty. If it's not, takes a manual screenshot with the label name and value as the filename. If the value is empty, fails the test step.\n8. Returns the retrieved text value.\n\nIf an exception occurs during any of these steps, the method catches it and fails the test step.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyLinesNotPresent",
        "code": "public void verifyLinesNotPresent(String expectedValue1, String expectedValue2) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='Approval Details']/..//div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).trim();\n\t\t\t\tif (!(value.contains(expectedValue1) && value.contains(expectedValue2))) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue1 + expectedValue2 + \" lines are not present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" lines are present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lines are not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyLinesNotPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  19/05/2022\n\t * Description    :  method to verify scheme attribute     \n\t * @param \t      :  schemeValue is the scheme to select\n\t */",
        "description": "This Java method, `verifyLinesNotPresent`, verifies that two specific lines (`expectedValue1` and `expectedValue2`) are not present in an element on a web page. \n\nIt uses various methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `getText` to interact with the web page. \n\nIf the expected values are not found, it takes a manual screenshot and highlights the element using the `highLighterMethod`. If they are found, it marks the test step as failed. If the element is not displayed, it also marks the test step as failed. \n\nIn case of any exception during execution, it catches the exception and marks the test step as failed with a message including the exception type.",
        "input": [
            "String expectedValue1",
            "String expectedValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyScheme",
        "code": "public String verifyScheme(String schemeValue, String parameter) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString param = schemeValue + \" Scheme select button#xpath=//div//h2//span//div//Strong[contains(text(),'\"\n\t\t\t\t\t+ schemeValue + \"')]//..//..//..//..//..//..//..//strong[contains(text(),'\" + parameter\n\t\t\t\t\t+ \"')]//..//following-sibling::div\";\n\t\t\twaitForElement(param, 20);\n\t\t\tif (isElementDisplayed(param, 10)) {\n\t\t\t\tscrollToWebElement(param);\t\t\t\t\n\t\t\t\tvalue = getText(param);\n\t\t\t\thighLighterMethod(param);\n\t\t\t\tmanualScreenshot(parameter + \" has values of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Scheme or Loan parameter is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyScheme. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  21/05/2022\n\t * Description    :  method to verify field is disabled\n\t * @param \t      :  labelName is the field name\n\t */",
        "description": "This Java method, `verifyScheme`, verifies the presence and value of a specific scheme or loan parameter on a web page. It takes two parameters: `schemeValue` and `parameter`. \n\nThe method first constructs an XPath expression based on the provided `schemeValue` and `parameter`. It then uses this expression to wait for the element to be present, check if it is displayed, scroll to the element if necessary, retrieve the text value of the element, highlight the element (if desired), and take a manual screenshot. \n\nIf the element is not present or not displayed within a certain time limit, the method fails the test step. If an exception occurs during the execution of the method, it also fails the test step.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String schemeValue",
            "String parameter"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyFieldIsDisabled",
        "code": "public void verifyFieldIsDisabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button | //label[text()='\" + labelName + \"']/..//input | //button[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\t\t\t\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is disabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsDisabled \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  21/05/2022\n\t * Description    :  method to enter Date    \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the date\n\t */",
        "description": "This Java method, `verifyFieldIsDisabled`, verifies that a specific field with the given `labelName` is disabled. It uses an XPath expression to locate the element (which can be a button or input field) and then checks if it's displayed and disabled using the `isElementDisplayed` and `getAttribute` methods respectively. If the field is not disabled, the test step fails. The method also takes a screenshot when the expected behavior is observed.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enterDate",
        "code": "public void enterDate(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  21/05/2022\n\t * Description    :  method to verify field is read only\n\t * @param \t      :  labelName is the field name\n\t */",
        "description": "This Java method, `enterDate`, is used to enter a date value into a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\n1. It constructs an XPath expression to locate the field based on the provided label name.\n2. It waits for the element to be displayed and then scrolls to that element if necessary.\n3. It enters the given value into the field using a typing action.\n4. After entering the value, it waits for the page to load completely.\n5. If the field is read-only, it highlights the issue by taking a manual screenshot.\n\nIf any exception occurs during this process, the method catches it and reports a test step failure with the relevant error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyFieldIsReadOnly",
        "code": "public String verifyFieldIsReadOnly(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName + \"']/..//following-sibling::div//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"class\");\n\t\t\t\tif (getareaDisabledAttributeValue.contains(\"is-read-only\")) {\n\t\t\t\t\thighLighterMethod(targetField);\t\t\t\t\t\n\t\t\t\t\tvalue = getText(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" field is read only and has value \"+value);\n\t\t\t\t\tif(value.isEmpty())\n\t\t\t\t\t{\n\t\t\t\t\t\ttestStepFailed(\"Value is not populated in \"+labelName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not read only\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsReadOnly\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete ckyc pan validation section\n\t */",
        "description": "This Java method, `verifyFieldIsReadOnly`, is used to verify if a specific field (identified by its label name) in a web page is read-only. The method performs the following actions:\n\n1. It searches for an element with the specified label name using XPath.\n2. If the element is found and displayed within a certain time limit, it checks the value of the `class` attribute to see if it contains the string \"is-read-only\", indicating that the field is read-only.\n3. If the field is read-only, it highlights the field, gets its value (if any), takes a manual screenshot, and verifies that the value is not empty. If the value is empty, it marks the test step as failed.\n4. If the field is not read-only or if it's not present at all, it also marks the test step as failed.\n\nThe method returns the value of the read-only field (if found) and can throw exceptions if something goes wrong during execution.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "downloadCkycPanValidation",
        "code": "public void downloadCkycPanValidation(String applicantTab, String expandTabName, String ckycTypeLabel,\n\t\t\tString ckycTypeValue, String panNumberLabel, String panNumberValue, String dobLabel, String dobValue,\n\t\t\tString buttonName, String downloadButton, String successMessage1, String successMessage2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Process-----\");\n\t\t\ttestStepInfo(\"-----CKYC/PAN Validation-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tselectValueFromDropdown(ckycTypeLabel, ckycTypeValue);\n\t\t\tenterTextInCustomerProcess(panNumberLabel, panNumberValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tclickOnButtonInKycTab(buttonName);\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitTime(5);\n\t\t\tclickOnButtonInKycTab(downloadButton);\n\t\t\tverifySuccessMessage(successMessage2);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ckycPanValidation \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get value from drop down\n\t * @param \t      :  labelName is field name\n\t * @return        :  fieldValue return retrieved value\t \n\t */",
        "description": "This Java method, `downloadCkycPanValidation`, performs a series of actions related to CKYC (Customer Know Your Customer) and PAN (PAN Number) validation in a customer process. The method takes several string parameters that represent various elements such as tabs, labels, values, and button names.\n\nThe method's main steps are:\n\n1. It logs test step information for the \"CKYC/PAN Validation\" process.\n2. It selects a specific tab (e.g., \"Customer\").\n3. It expands an arrow to reveal additional options.\n4. It selects a value from a dropdown menu based on the provided label and value.\n5. It enters text into a field labeled with the provided pan number label and value.\n6. It enters a date of birth (DOB) in a field labeled with the provided DOB label and value.\n7. It clicks a button labeled with the provided button name, which is likely related to the CKYC/PAN validation process.\n8. It verifies that a success message is displayed after completing the previous step.\n9. It waits for 5 seconds before proceeding.\n10. It repeats steps 7-8 using a different download button and success message.\n\nIf any exception occurs during these steps, the method catches it and logs a test step failure with the exception's class name.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String ckycTypeLabel",
            "String ckycTypeValue",
            "String panNumberLabel",
            "String panNumberValue",
            "String dobLabel",
            "String dobValue",
            "String buttonName",
            "String downloadButton",
            "String successMessage1",
            "String successMessage2"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getTextFromDropdown",
        "code": "public String getTextFromDropdown(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//lightning-tab[contains(@class,'show')]//span[text()='Customer Details']/..//..//..//..//button[contains(@aria-label,'\"\n\t\t\t\t\t+ labelName + \"')]/../../../../..//following-sibling::div//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = getText(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field value is not populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDropdown\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete customer details section\n\t */",
        "description": "This Java method, `getTextFromDropdown`, is used to retrieve the text value from a dropdown field in a web application. The method takes a string parameter `labelName` which represents the label of the dropdown field.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression to locate the target dropdown field based on its label.\n3. It waits for the target field to be displayed and then retrieves its text value using the `getText` method.\n4. If the retrieved text value is not empty, it takes a manual screenshot with the label name and the field value.\n5. If the text value is empty or the field is not present, it fails the test step with an appropriate error message.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "downloadCustomerDetails",
        "code": "public void downloadCustomerDetails(String applicantTab, String expandTabName, String firstNameLabel,\n\t\t\tString firstNameValue, String panNoLabel, String panNoValue, String lastNameLabel, String lastNameValue,\n\t\t\tString ovdTypeLabel, String ovdNumberLabel, String ovdNumberValue, String poaTypeLabel, String poaTypeValue,\n\t\t\tString poaNoLabel, String poaNoValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Customer Details-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(firstNameLabel, firstNameValue);\n\t\t\tenterTextInCustomerProcess(panNoLabel, panNoValue);\n\t\t\tenterTextInCustomerProcess(lastNameLabel, lastNameValue);\n\t\t\tgetTextFromDropdown(ovdTypeLabel);\n\t\t\tselectValueFromOvdPoaTypeDropdown(poaTypeLabel, poaTypeValue);\n\t\t\tenterTextInCustomerProcess(ovdNumberLabel, ovdNumberValue);\n\t\t\tenterTextInCustomerProcess(poaNoLabel, poaNoValue);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in downloadCustomerDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to complete address enrichment section\n\t */",
        "description": "This Java method, `downloadCustomerDetails`, is used to download customer details from a system. It takes several string parameters that represent different fields and labels on the application's user interface. The method attempts to:\n\n1. Record test information (\"-----Customer Details-----\").\n2. Select a specific tab for the applicant.\n3. Expand arrows for the selected tab.\n4. Enter text values in various customer process fields, including first name, PAN number, last name, OVD type, OVD number, POA type, and POA number.\n\nIf any of these steps fail, the method catches the exception and records a test step failure message.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String firstNameLabel",
            "String firstNameValue",
            "String panNoLabel",
            "String panNoValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String ovdTypeLabel",
            "String ovdNumberLabel",
            "String ovdNumberValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNoLabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "downloadAddressEnrichment",
        "code": "public void downloadAddressEnrichment(String applicantTab,String expandTabName,String areaLocalityLabel,String areaLocalityValue,String landmarkLabel,String landmarkValue,String residenceTypeLabel, String residenceTypeValue,\n\t\t\tString zipcodeLabel,String zipcodeValue,String saveButton,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Address Enrichment-----\");\n\t\t\tselectCustomerTabs(applicantTab);\n\t\t\texpandArrows(expandTabName);\n\t\t\tenterTextInCustomerProcess(areaLocalityLabel,areaLocalityValue );\n\t\t\tenterTextInCustomerProcess(landmarkLabel,landmarkValue );\n\t\t\tselectValueFromDropdown(residenceTypeLabel, residenceTypeValue);\n\t\t\tchooseSearchAndListField(zipcodeLabel,zipcodeValue);\n\t\t\tclickOnButton(saveButton);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in addressEnrichment \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  14/06/2022\n\t * Description    :  method to get Line value\n\t * @param \t      :  expectedValue is the expected line value \n\t */",
        "description": "This Java method, named `downloadAddressEnrichment`, performs a series of actions on a web application to enrich an address. The method takes in several parameters that represent various elements of the address, such as locality, landmark, residence type, and ZIP code.\n\nThe method attempts to execute the following steps:\n\n1. Records a test step message indicating the start of the address enrichment process.\n2. Selects a specific tab on the customer application page (represented by `applicantTab`).\n3. Expands an arrow on the application page (represented by `expandTabName`).\n4. Enters text values into two separate fields: one for locality (with label `areaLocalityLabel` and value `areaLocalityValue`) and another for landmark (with label `landmarkLabel` and value `landmarkValue`).\n5. Selects a value from a dropdown menu using the labels `residenceTypeLabel` and `residenceTypeValue`.\n6. Chooses a search field with the label `zipcodeLabel` and enters the corresponding value (`zipcodeValue`).\n7. Clicks on a save button (represented by `saveButton`).\n8. Verifies that a success message is displayed after the save operation (using the message represented by `successMessage`).\n\nIf any of these steps fail, the method catches the exception and records a test step failure message indicating the specific error.",
        "input": [
            "String applicantTab",
            "String expandTabName",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String landmarkLabel",
            "String landmarkValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String zipcodeLabel",
            "String zipcodeValue",
            "String saveButton",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getLineValue",
        "code": "public void getLineValue(String labelName,String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']/..//div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element);\n\t\t\t\tif (value.contains(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(value+\" Line value present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" value is not present in \"+value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lines are not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLineValue\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  14/06/2022\n\t * Description    :  method to get deal id\n\t * @param \t      :  labelName is the field name\n\t * @return        :  value is the retrieved deal id\n\t */",
        "description": "This Java method, `getLineValue`, searches for a specific line with the given `labelName` and checks if its value contains the expected `expectedValue`. If found, it highlights the element and takes a manual screenshot. If not found or the line is not displayed, it reports a test step failure.\n\nThe method uses various UI automation tools like XPath, waiting for an element to be displayed, scrolling to the element, getting the text of the element, and highlighting the element. It also catches any exceptions that may occur during the execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getDealId",
        "code": "public String getDealId(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName + \"']/..//following-sibling::div//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tvalue = getText(targetField);\n\t\t\t\thighLighterMethod(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" field has \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getDealId\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  14/06/2022\n\t * Description    :  method to choose zip code/scheme\n\t * @param \t      :  labelName is the field name\n\t * @return        :  value is the zipcode/scheme need to select\n\t */\n\n\t/*public void chooseSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div/..//..//..//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')] | //label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//ancestor::lightning-input//following-sibling::div//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')]\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}\n\t*/",
        "description": "Here are brief descriptions of the two Java methods:\n\n**Method 1: `getDealId(String labelName)`**\n\nThis method takes a `labelName` as input and returns the corresponding deal ID. It uses an XPath expression to locate the element with the given label name, waits for the element to be displayed, and then extracts the text content of the element (which is assumed to be the deal ID). If the element is not present, it reports a test step failure.\n\n**Method 2: `chooseSearchAndListField(String labelName, String value)`**\n\nThis method takes two inputs: `labelName` and `value`. It uses these inputs to locate an input field with the given label name, scroll to the field if necessary, and then enter the provided `value` into the field. If the field is not present or the entered value does not match any displayed options, it reports a test step failure.\n\nIn summary, the first method retrieves a deal ID based on a label name, while the second method interacts with an input field to select a value (e.g., zip code or scheme) based on the provided `labelName` and `value`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "chooseSearchAndListField",
        "code": "public void chooseSearchAndListField(String labelName, String value) {\n\n\t\ttry {\n\n\t\t\tif (!value.isEmpty()) {\n\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//label[contains(text(),'\" + labelName\n\n\t\t\t\t\t\t+ \"')]//../following-sibling::div/..//..//..//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')]| //label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//ancestor::lightning-input//following-sibling::div//span[contains(text(),'\" + value\n\t\t\t\t\t\t+ \"')]\";\n\n\t\t\t\twaitForElement(searchField, 10);\n\n\t\t\t\tscrollbycordinates(searchField);\n\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\n\t\t\t\t\thighLighterMethod(searchField);\n\n\t\t\t\t\ttypeIn(searchField, value);\n\n\t\t\t\t\twaitTime(2);\n\n\t\t\t\t\tfindWebElement(searchField).clear();\n\n\t\t\t\t\ttypeIn(searchField, value);\n\n\t\t\t\t\twaitTime(2);\n\n\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\n\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\n\t\t\t\t\t\tclickOn(lnk_zipCity);\n\n\t\t\t\t\t\twaitTime(2);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in chooseSearchAndListField \" + e.getClass().getName());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `chooseSearchAndListField`, is used to interact with a search and list field on a web page. \n\nThe method takes two parameters: `labelName` (the label text of the search field) and `value` (the value to be searched). It first checks if the value is not empty. If it's not, it attempts to perform the following actions:\n\n1. Waits for the search field to be displayed.\n2. Scrolls the search field into view.\n3. Types the provided value into the search field.\n4. Waits for a short period of time.\n5. Clears and re-types the value in the search field.\n6. Waits again for a short period of time.\n7. Finds the list field related to the search field (based on the label text).\n8. Waits for the list field to be displayed.\n9. Highlights the list field.\n10. Clicks on the list field.\n\nIf any of these steps fail, it marks the test step as failed and provides an error message. If the value is empty, it also marks the test step as failed with a specific error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "enableSmartAddressChange",
        "code": "public void enableSmartAddressChange(String label) {\n\t\ttry {\n\t\t\tString addresschange = \"\" + label + \" #xpath=//span[text()='\" + label + \"']\";\n\t\t\twaitForElement(addresschange, 5);\n\t\t\tif (isElementDisplayed(addresschange, 5)) {\n\t\t\t\tclickOnSpecialElement(addresschange);\n\t\t\t\tmanualScreenshot(label + \" is True\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enableSmartAddressChange \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enableSmartAddressChange`, enables smart address change for a given label. It takes a string parameter `label` and performs the following actions:\n\n1. Constructs a new XPath expression by concatenating the provided label with a fixed string.\n2. Waits up to 5 seconds for an element matching the constructed XPath expression to be displayed using the `waitForElement` method.\n3. Checks if the element is actually displayed using the `isElementDisplayed` method, also with a timeout of 5 seconds.\n4. If the element is displayed, it clicks on the special element (likely a checkbox or button) using the `clickOnSpecialElement` method and takes a manual screenshot with the label as the file name.\n5. If the element is not displayed, it marks the test step as failed with an error message containing the label.\n\nThe method also catches any exceptions that may occur during its execution and reports them as test failures if they are not caught elsewhere in the code.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyAddressFieldsDisabled",
        "code": "public void verifyAddressFieldsDisabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is disabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n/*\tpublic void verifySmartAddressChangeDisabled(String label) {\n\t\ttry {\n\t\t\tString addresschange = \"\" + label + \" #xpath=//span[text()='\" + label + \"']/..//span[contains(@id,'toggle')]\";\n\t\t\twaitForElement(addresschange, 5);\n\t\t\tif (isElementDisplayed(addresschange, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(addresschange).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(label + \" field is disabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(label + \" field is not disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySmartAddressChangeDisabled \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "Here are brief descriptions for the two Java methods:\n\n**1. `verifyAddressFieldsDisabled(String labelName)`**\n\nThis method verifies that a specific address field is disabled (i.e., not editable) on a webpage. It uses an XPath expression to locate the input field associated with the given `labelName`, waits for the element to be displayed, and then checks if the \"disabled\" attribute of the element is set to \"true\". If it is, the method takes a manual screenshot as confirmation; otherwise, it fails the test step.\n\n**2. (Not implemented) `verifySmartAddressChangeDisabled(String label)`**\n\nThis method is not implemented in the provided code, but based on its name and signature, it appears to be similar to the first method. It would likely verify that a specific \"smart address change\" field is disabled, using an XPath expression to locate the element associated with the given `label`, waiting for it to be displayed, and then checking if the \"disabled\" attribute of the element is set to \"true\". If it is, the method takes a manual screenshot as confirmation; otherwise, it fails the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifySmartAddressChangeDisabled",
        "code": "public void verifySmartAddressChangeDisabled(String label) {\n        try {\n            String addresschange = \"\" + label + \" #xpath=//span[text()='\" + label + \"']//..//input\";\n            waitForElement(addresschange, 5);\n            if (isElementDisplayed(addresschange, 5)) {\n                String getareaDisabledAttributeValue = findWebElement(addresschange).getAttribute(\"disabled\");\n                if (getareaDisabledAttributeValue.contains(\"true\")) {\n                    manualScreenshot(label + \" field is disabled as expected\");\n                } else {\n                    testStepFailed(label + \" field is not disabled\");\n                }\n            } else {\n                testStepFailed(label + \" is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in verifySmartAddressChangeDisabled \" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `verifySmartAddressChangeDisabled`, verifies that a specific field or input element with the given label is disabled. \n\nThe method first constructs an XPath expression to locate the element based on the provided label. It then waits for 5 seconds for the element to be displayed using the `waitForElement` method.\n\nIf the element is displayed, it checks if the \"disabled\" attribute of the element contains the value \"true\". If it does, it takes a manual screenshot with a message indicating that the field is disabled as expected. \n\nIf the element is not displayed or the \"disabled\" attribute does not contain \"true\", the method marks the test step as failed. In case of any exception during the execution of the method, it also marks the test step as failed and logs the error.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getTextFromCkycTable",
        "code": "public String getTextFromCkycTable(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//tbody//tr//td[contains(text(),'\" + labelName + \"')]//following-sibling::td\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = getText(targetField);\n\t\t\t\tif (!fieldValue.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field value is not populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromCkycTable\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}",
        "description": "This Java method, `getTextFromCkycTable`, retrieves the text value from a specific table cell in a web page based on a provided label name. \n\nIt first waits for the page to load and then uses an XPath expression to locate the target field (table cell) containing the specified label name. It then checks if the element is displayed within a certain time frame, and if so, retrieves the text value from that field. If the field value is not empty, it takes a manual screenshot for verification purposes. \n\nIf the field value is empty or the field is not present, it fails the test step with an appropriate error message. In case of any exceptions during the process, it also fails the test step with the exception details. The method returns the retrieved text value.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getTextvalue",
        "code": "public String getTextvalue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t/*\t\tString Field = labelName + \" value#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//button | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//span | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//following-sibling::div//span//span\";*/\n\t\t\tString Field = labelName + \" value#xpath=//span[text()='\"+labelName+\"']//..//..//following-sibling::dd//lightning-formatted-text\";\n\t\t\twaitForElement(Field, 5);\n\t\t\tif (isElementDisplayed(Field, 3)) {\n\t\t\t\tvalue = getText(Field);\n\t\t\t\tmanualScreenshot(labelName + \" has value of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" Field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextvalue. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextvalue`, takes a string parameter `labelName` and attempts to retrieve the text value associated with that label name from a web page.\n\nHere's what it does:\n\n1. It initializes an empty string variable `value`.\n2. It uses a try-catch block to attempt to execute the following steps:\n\t* It constructs an XPath expression using the provided `labelName` and some hardcoded strings.\n\t* It waits for the element matching this XPath expression to be displayed (up to 5 seconds).\n\t* If the element is displayed, it retrieves the text value of that element using the `getText()` method.\n\t* It takes a manual screenshot with the label name and the retrieved value as part of the filename.\n3. If any exception occurs during these steps, it catches the exception and marks the test step as failed.\n4. Finally, it returns the retrieved text value.\n\nNote that this method seems to be part of a larger automation testing framework, given the presence of `waitForElement`, `isElementDisplayed`, `getText`, and `manualScreenshot` methods, which are not standard Java methods.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getTextvalue1",
        "code": "public String getTextvalue1(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Field = labelName + \" value#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\" + labelName + \"']//..//input\";\n\t\t\twaitForElement(Field, 5);\n\t\t\tif (isElementDisplayed(Field, 3)) {\n\t\t\t\tvalue =findWebElement(Field).getAttribute(\"value\");\n\t\t\t\thighLighterMethod1(Field);\n\t\t\t\tmanualScreenshot(labelName + \" has value of \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" Field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextvalue1. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextvalue1`, retrieves the text value of a specific input field with the given label name on a Lightning Tab page. It uses XPath to locate the element, waits for it to be displayed, and then gets its attribute \"value\". If the element is not present, it fails the test step. The method also takes a manual screenshot with the found value and highlights the element using a separate method (`highLighterMethod1`). Finally, it returns the text value as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickNearByButton",
        "code": "public void clickNearByButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"']//parent::lightning-button\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `clickNearByButton`, attempts to find and click a button with a specific text value near by. The method takes a `String` parameter `value`, which is used to construct an XPath expression to locate the button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `value` with a fixed XPath syntax.\n2. It waits for the element matching this XPath expression to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to that element using `scrollToWebElement`, highlights it using `highLighterMethod`, and then clicks on it using `clickOnSpecialElement`.\n4. If the element is not displayed within a certain timeout (10 seconds), the method fails the test step with an error message.\n5. If any exception occurs during the execution of this method, it catches the exception and fails the test step with an error message that includes the type of exception.\n\nIn summary, this method is used to interact with a button having a specific text value near by in a web application.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "checkMandatoryField",
        "code": "public void checkMandatoryField(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//label[text()='\" + value + \"']//abbr\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tvalue = getText(link);\n\t\t\t\tif(value.equalsIgnoreCase(\"*\"))\n\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(value+\" mandatory fields are marked as *\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttestStepFailed(value+\" mandatory fields are not marked as *\");\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to checkMandatoryField \" + value+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `checkMandatoryField`, checks if a mandatory field with the given value exists on a web page and verifies its marking. \n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the input `value` with some predefined text.\n2. It waits for the element identified by this XPath expression to be present on the page (up to 10 seconds).\n3. If the element is displayed, it scrolls to that element and highlights it using a custom method (`highLighterMethod`).\n4. It then retrieves the text content of the element.\n5. If the retrieved value is an asterisk (`*`), it takes a manual screenshot with a message indicating that mandatory fields are marked as expected. \n6. If the value is not an asterisk, it fails the test step with a message indicating that mandatory fields are not marked as expected.\n7. If the element is not displayed or any exception occurs during the process, it fails the test step with an appropriate error message.\n\nThis method seems to be part of a larger automation framework for testing web applications.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyCustomerImagePresent",
        "code": "public void verifyCustomerImagePresent() {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//div//img[contains(@src,'data')]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(\"Customer Image Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer Image Not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCustomerImagePresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCustomerImagePresent`, verifies whether a customer image is present on the current web page. \n\nHere's what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad` method.\n2. It defines an XPath expression to target the customer image field (`#xpath=//div//img[contains(@src,'data')]`).\n3. It then waits for this element to be present on the page, up to a maximum of 10 seconds using the `waitForElement` method.\n4. If the customer image is displayed within 5 seconds, it takes a manual screenshot with the label \"Customer Image Present\" using the `manualScreenshot` method.\n5. If the customer image is not displayed or if there's an error during this process, it fails the test step with the message \"Customer Image Not Present\" using the `testStepFailed` method.\n6. In case of any exception during the execution of the method, it catches it and fails the test step with a message including the type of exception that occurred.\n\nIn summary, this method checks if a customer image is present on the page, takes a screenshot if it's found, and reports an error if it's not found or if there's any issue during the verification process.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyModelNameList",
        "code": "public void verifyModelNameList(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div//input[@placeholder='\" + labelName + \"']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value\n\t\t\t\t\t\t+ \"#xpath=//div//input[@placeholder='Model Name']//ancestor::c-model-lookup//ul//li//span//following-sibling::span\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tList<WebElement> modelNames = findWebElements(lookupValue);\n\t\t\t\t\tfor (int i = 0; i<modelNames.size(); i++) {\n\t\t\t\t\t\tString model = modelNames.get(i).getText().trim();\t\t\t\t\t\n\t\t\t\t\t\tif (model.contains(value)||model.contains(value.toUpperCase()) ) {\n\t\t\t\t\t\t\tmanualScreenshot(labelName + \" field has same model lookup value - \" + model);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(labelName + \" field has differnt model lookup values \" + model\n\t\t\t\t\t\t\t\t\t+ \" instead of \" + value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyModelNameList \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyModelNameList`, verifies if the model name lookup values match with the provided value. It takes two parameters: `labelName` and `value`. \n\nThe method first tries to find an element with the given label name using XPath. If the element is found, it scrolls to the element, types in the value, waits for the page to load, and then checks if the model name lookup values are displayed.\n\nIf the model names are displayed, it iterates through each model name, trims any whitespace from the text, and checks if the model name contains the provided value (case-insensitive). If a match is found, it takes a manual screenshot. If no match is found, it fails the test step with an error message.\n\nIf the element or model names are not displayed, it also fails the test step with an error message. The method catches any exceptions that occur during execution and fails the test step if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String RadioLabel) {\n\t\ttry {\n\t\t\tString radibutton =  \"Radio Button#xpath=//lightning-tab[contains(@class,'show')]//span[text()='\"+RadioLabel+\"']/..//span[@class='slds-radio_faux']\";\n\t\t\twaitForElement(radibutton, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(radibutton, 5)) {\n\t\t\t\tscrollToWebElement(radibutton);\n\t\t\t\tclickOnSpecialElement(radibutton);\n\t\t\t\tmanualScreenshot(\"Selected \"+RadioLabel+\" radio button\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(RadioLabel+\" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on Radio Button. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRadioButton`, is used to simulate a click on a radio button with the specified label within an HTML element. The method uses Selenium WebDriver and waits for the radio button to be displayed before attempting to click it. If the radio button is not present or the click operation fails, the test step will fail and an error message will be logged.",
        "input": [
            "String RadioLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnGenerateOtpButton",
        "code": "public void clickOnGenerateOtpButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=(//button[text()='\" + value + \"'])[2]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOn(link);\n\t\t    \tmanualScreenshot(\"Clicked on : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnGenerateOtpButton`, simulates a click on a button with a specific text value. It takes a `String` parameter `value` which is used to construct an XPath expression to locate the button.\n\nThe method performs the following actions:\n\n1. Constructs an XPath expression by appending the provided `value` to a fixed string.\n2. Waits for the element to be displayed using `waitForElement`.\n3. Verifies if the element is displayed using `isElementDisplayed`.\n4. Scrolls to the element using `scrollToWebElement`.\n5. Highlights the element using `highLighterMethod`.\n6. Simulates a click on the element using `clickOn`.\n7. Takes a manual screenshot with a message indicating that the button was clicked.\n8. If any of these steps fail, it logs a test step failure with an error message.\n\nThe method also catches and handles exceptions, logging a test step failure if an exception occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getOppurtunityId",
        "code": "public String getOppurtunityId() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')]\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, opportunityValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOppurtunityId \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `getOppurtunityId()`, retrieves the ID of an opportunity from a web page. It uses various Selenium WebDriver methods to:\n\n1. Wait for the page to load\n2. Locate the opportunity element using XPath\n3. Verify that the element is displayed and scroll to it if necessary\n4. Extract the text value (opportunity ID) from the element\n5. Take a screenshot of the manual highlighter method for debugging purposes\n\nThe method returns the extracted opportunity ID as a string. If any of these steps fail, the method will throw an exception and mark the test step as failed.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getCustomerId",
        "code": "public String getCustomerId() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"customer/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\tmanualScreenshot(\"Successfully got customer id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get customer id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCustomerId \" + e.getClass().getName());\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, `getCustomerId`, attempts to extract the customer ID from the current URL of a driver (presumably an instance of WebDriver). It splits the URL into parts using the string \"customer/\" as a delimiter, then further splits the last part of the URL using \"/\" as a delimiter. The resulting first element is considered the customer ID. If the process is successful, it takes a manual screenshot with a message indicating that the customer ID was obtained successfully. If an exception occurs during this process, it fails the test step and logs the error. Finally, the method returns the extracted customer ID as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getRequiredDetailsErrorMessageWithFail",
        "code": "public void getRequiredDetailsErrorMessageWithFail() {\n\t\tString errorMessage = null;\n\t\ttry {\n\t\t\tString field = \"Error Header#xpath=//div[contains(@class,'open active')]//span[text()='Review the following errors'] | //div[contains(@class,'open active')]//span[text()='Review the errors on this page.']\";\n\t\t\tString fieldValidation = \"Error list#xpath=//div[contains(@class,'open active')]//ul[@class='errorsList']//li\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\terrorMessage = getText(fieldValidation);\n\t\t\t\ttestStepFailed(\"Unable to save due to error : \" + errorMessage);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Successfully saved\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRequiredDetailsErrorMessageWithFail \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `getRequiredDetailsErrorMessageWithFail`, is designed to handle an error scenario when trying to save something. It attempts to locate specific elements on the page using XPath expressions and waits for them to be displayed. If the expected elements are found, it extracts the error message from the page and marks the test step as failed due to the error. If the elements are not found (i.e., the operation is successful), it takes a manual screenshot to confirm the success. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyMobileValidationError",
        "code": "public void verifyMobileValidationError(String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//lightning-tab[@role='tabpanel']//div\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired instead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(expectedMessage + \" Error message not displayed under\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyMobileValidationError. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMobileValidationError`, is used to validate a specific error message on a mobile application. It takes an expected error message as input and checks if the actual error message displayed on the app matches the expected one.\n\nHere's what it does:\n\n1. It attempts to find an element with the specified XPath (`errorField`) and waits for up to 3 seconds for it to be displayed.\n2. If the element is displayed, it retrieves the text content of that element (the error message).\n3. It then compares the actual error message with the expected one using `equalsIgnoreCase`.\n4. If the messages match, it calls a method (`highLighterMethod1`) to highlight the error field and takes a manual screenshot with the error message.\n5. If the messages don't match, it marks the test step as failed with an appropriate error message.\n6. If the element is not displayed within the specified time, or if any exception occurs during the process, it also marks the test step as failed.\n\nIn summary, this method is used to verify that a specific error message is displayed on a mobile application and that it matches the expected message.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyMobileValidationErrorNotPresent",
        "code": "public void verifyMobileValidationErrorNotPresent(String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//lightning-tab[@role='tabpanel']//div\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (!errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(expectedMessage+\" Validation not fired as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is fired\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer Page not loaded\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyMobileValidationErrorNotPresent. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMobileValidationErrorNotPresent`, is used to verify that a specific error message is not displayed on the Customer Page when an expected validation error does not occur. \n\nThe method attempts to locate an element with the specified XPath (`errorField`) and checks if it's displayed. If the element is displayed, it retrieves the text of the element (`errorMessage`). It then compares this text with the `expectedMessage` parameter passed to the method. \n\nIf the messages match, the test step fails because the expected validation error was not fired. If the messages do not match (i.e., the error message is different from the expected one), it takes a manual screenshot with the expected message as the filename and considers the test step successful.\n\nIf the element is not displayed, the test step fails because the Customer Page did not load correctly. The method also catches any exceptions that may occur during its execution and fails the test step if an exception occurs.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "clickOnOppIdWithoutRefresh",
        "code": "public String clickOnOppIdWithoutRefresh() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString opportunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr[last()]//a[starts-with(text(),'T')]\";\n\t\t\twaitForElement(opportunity, 10);\n\t\t\tif (isElementDisplayed(opportunity, 10)) {\n\t\t\t\tscrollToWebElement(opportunity);\n\t\t\t\topportunityValue = getText(opportunity);\n\t\t\t\thighLighterMethodManualScreenShot(opportunity, opportunityValue);\n\t\t\t\tclickOnSpecialElement(opportunity);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppIdWithoutRefresh \" + e.getClass().getName());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnOppIdWithoutRefresh`, simulates a click on an opportunity link without refreshing the page. Here's a brief overview of what it does:\n\n1. Waits for the page to load.\n2. Locates an opportunity link using XPath and waits up to 10 seconds for it to be displayed.\n3. If the link is present, scrolls to it, extracts its text value, takes a manual screenshot (using `highLighterMethodManualScreenShot`), clicks on the link, and then waits for 2 seconds.\n4. If the link is not present, the method fails the test step with an error message \"Opputunity Name link is not present\".\n5. If any exception occurs during the execution of the method, it fails the test step with an error message including the type of exception.\n\nThe method returns the text value of the opportunity link.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyDropDownValue",
        "code": "public void verifyDropDownValue(String labelName, String values) {\n\t\tString[] dropDownValues = values.split(\",\");\n\t\tList<String> value = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = labelName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//following-sibling::div//a | //lightning-tab[contains(@class,'show')]//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//button\";\n\t\t\tString dropDownList = \"Xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::lightning-combobox/div/lightning-base-combobox/div/div[@role='listbox']/lightning-base-combobox-item/span[@class='slds-media__body']/span | //div[contains(@class,'select-options')]//ul/li/a | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::lightning-combobox/div/lightning-base-combobox/div/div[@role='listbox']/lightning-base-combobox-item/span[@class='slds-media__body']/span | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div/child::lightning-base-combobox/descendant::button/parent::div/following-sibling::div/child::lightning-base-combobox-item\";\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tif (isElementDisplayed(dropDownList, 10)) {\n\t\t\t\t\tList<WebElement> findWebElements = findWebElements(dropDownList);\n\t\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\t\tif (!text.equalsIgnoreCase(\"--None--\")) {\n\t\t\t\t\t\t\tvalue.add(text);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < dropDownValues.length; i++) {\n\t\t\t\t\t\tif (dropDownValues[i].equalsIgnoreCase(value.get(i))) {\n\t\t\t\t\t\t\ttestStepPassed(dropDownValues[i] + \" is present in the list\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value.get(i) + \" new Value added in list\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmanualScreenshot(\"List of exepected Values are present in \" + labelName+\" field\");\n\t\t\t\t\tclickOn(dropdown);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Drop down values are not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDropDownValue \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDropDownValue`, verifies the values present in a dropdown list. \n\nIt takes two parameters: `labelName` and `values`. The `labelName` is used to identify the dropdown field, and `values` is an array of expected values that should be present in the dropdown.\n\nThe method first constructs two XPath expressions (`dropdown` and `dropDownList`) based on the `labelName` to locate the dropdown field and its corresponding list of options. \n\nIt then checks if the dropdown field is displayed, scrolls to it, clicks on it, and verifies if the list of options is also displayed. If both are displayed, it iterates over the expected values and checks if each value is present in the list. If a value is not found, it marks the test step as failed.\n\nFinally, it takes a manual screenshot to capture the verification result.\n\nIf any part of this process fails (e.g., the dropdown field or its options are not displayed), the method marks the corresponding test steps as failed and returns.",
        "input": [
            "String labelName",
            "String values"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getCustomerTypeAndCompare",
        "code": "public String getCustomerTypeAndCompare(String labelName, String expectedValue) {\n\t\tString actualValue = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[text()='\" + labelName + \"']/../div/div/span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tactualValue = getText(targetField);\n\t\t\t\tif (actualValue.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\t\tmanualScreenshot(labelName + \" has \" + actualValue + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(actualValue + \" Value is not matching with expected value \" + expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCustomerTypeAndCompare\" + e.getClass().getName());\n\t\t}\n\t\treturn actualValue;\n\t}",
        "description": "This Java method, `getCustomerTypeAndCompare`, compares the actual value of a UI element with an expected value and verifies if they match. \n\nIt takes two parameters: `labelName` (the name of the label to be searched) and `expectedValue`. \n\nThe method first tries to find the UI element with the given `labelName` using XPath. If found, it waits for 10 seconds for the element to be displayed, then checks if the actual value of the element matches the expected value. \n\nIf the values match, it highlights the element (using `highLighterMethod1`) and takes a manual screenshot to confirm the result. If they don't match, it marks the test step as failed with an error message indicating the mismatch. \n\nIf the UI element is not found or displayed within 5 seconds, it also marks the test step as failed with an error message indicating that the field is not present. \n\nThe method returns the actual value of the UI element. If any exception occurs during the execution, it catches the exception and marks the test step as failed with an error message containing the class name of the exception.",
        "input": [
            "String labelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifyFieldIsNotPresentInCustomerTab",
        "code": "public void verifyFieldIsNotPresentInCustomerTab(String lable) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//div[text()='\" + lable + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (!(isElementPresent(button))) {\n\t\t\t\tmanualScreenshot(lable + \" tabs is not present in the webpage as Expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(lable + \" Element is present in the webpage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyFieldIsNotPresentInCustomerTab \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsNotPresentInCustomerTab`, verifies that a specific field or button with the given label is not present in the customer tab of a webpage. It uses an XPath expression to locate the element and then checks if it's present using the `isElementPresent` method. If the element is found, it takes a manual screenshot and marks the test step as failed. If an exception occurs during the execution, it also marks the test step as failed and logs the error message.",
        "input": [
            "String lable"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "validateSchemeDescription",
        "code": "public void validateSchemeDescription(String labelName, String value) {\n\t\ttry {\n\n\t\t\tString textValue = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//div//input\";\n\t\t\t waitForElement(textValue);\n\t\t\tif (isElementDisplayed(textValue, 10)) {\n\t\t\t\tscrollToWebElement(textValue);\n\t\t\t\ttypeIn(textValue, value);\n\t\t\t\twaitTime(2);\n\t\t\t\tString description = \"SchemeIDdescription#xpath=//li//span//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tString text = findWebElement(description).getText();\n\t\t\t\tString desc[] = text.split(\"\\\\|\");\n\t\t\t\tString schemename = desc[0] + \" \" + desc[1];\n\n\t\t\t\tif (desc[0].contains(value)) {\n\t\t\t\t\tmanualScreenshot(\"Scheme name: \" + schemename + \" is present in description\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Scheme ID is not present in description\");\n\t\t\t\t}\n\t\t\t\tif (desc[2].contains(\"%\")) {\n\t\t\t\t\tmanualScreenshot(\"Scheme LTV value: \" + desc[2] + \" is present in description\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Scheme LTV % is not present in description\");\n\t\t\t\t}\n\n\t\t\t\tif (desc[3].contains(\"%\")) {\n\t\t\t\t\tmanualScreenshot(\"ROI value: \" + desc[3] + \" is present in description\");\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"ROI % is not present in description\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present on page\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to enter value on \" + labelName + \" text box\" + e.getClass().getName());\n\n\t\t}\n\t}",
        "description": "This Java method, `validateSchemeDescription`, validates the scheme description based on the provided `labelName` and `value`. It performs the following actions:\n\n1. Searches for an element with the specified `labelName` using XPath.\n2. If the element is displayed, it scrolls to the element, types in the provided `value`, and waits for a brief period.\n3. It extracts the scheme name, LTV value, and ROI value from the description text.\n4. It checks if the scheme name contains the provided `value` and takes a manual screenshot if it does. If not, it fails the test step.\n5. It repeats steps 3-4 for LTV and ROI values, taking manual screenshots or failing test steps as needed.\n6. If the element is not displayed on the page, it fails the test step.\n\nThe method uses various utility methods like `waitForElement`, `scrollToWebElement`, `typeIn`, `waitTime`, and `findWebElement` to perform these actions. It also catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "getCustomerName",
        "code": "public String getCustomerName(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//records-entity-label[text()='\" + labelName + \"']/..//parent::div//following-sibling::slot//lightning-formatted-text\";\t\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tvalue = getText(targetField);\n\t\t\t\thighLighterMethod(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" field has \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCustomerName \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getCustomerName`, retrieves the customer name from a Salesforce Lightning application using XPath and Selenium WebDriver. It takes a `labelName` parameter, which is used to locate the corresponding field in the application.\n\nThe method first defines an empty string variable `value`. Then, it attempts to find the element with the specified `labelName` using XPath. If the element is found, it waits for the element to be displayed and then retrieves its text content. The method also highlights the element on the screen and takes a manual screenshot.\n\nIf the element is not found or an exception occurs during the process, the method marks the test step as failed and returns an empty string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "rangeValue",
        "code": "public String rangeValue() {\n\t\tString range = \"range#xpath=//span[@class='slds-slider-label__range']\";\n\t\tString ranges = null;\n\t\ttry {\n\t\t\tif (isElementDisplayed(range)) {\n\t\t\t\tclickOn(range);\n\t\t\t\thighLighterMethod1(range);\n\t\t\t\tranges = getText(range);\n\t\t\t\ttestStepPassed(\"Range value is \" + ranges);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Range is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed toget the range \" + e.getMessage());\n\t\t}\n\t\treturn ranges;\n\t}",
        "description": "This Java method, `rangeValue()`, attempts to retrieve and verify the value of a specific range element on a web page. Here's what it does:\n\n1. It defines a string variable `range` that contains an XPath expression pointing to the desired range element (a `<span>` with class `slds-slider-label__range`).\n2. If the element is displayed, the method:\n\t* Clicks on the element using the `clickOn()` method.\n\t* Highlights the element using the `highLighterMethod1()` method.\n\t* Retrieves the text value of the range element using the `getText()` method.\n\t* Verifies that the range value was successfully retrieved by calling a test step passed method with the obtained value.\n3. If the element is not displayed, the method calls a test step failed method with an error message indicating that the range is not present.\n4. The method also catches any exceptions that may occur during execution and reports a failure to retrieve the range with the exception message.\n5. Finally, the method returns the retrieved range value as a string.\n\nIn summary, this method is designed to extract and verify the value of a specific range element on a web page, handling both successful and unsuccessful attempts to do so.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "verifySchemeValue",
        "code": "public ArrayList<String> verifySchemeValue(String parameter) {\n\t\tArrayList<String> value1 = new ArrayList<String>();\n\t\tString value = \"\";\n\t\tString schemes;\n\t\tString schemaValue = \"#xpath=//button[text()='Select']/../../div/h2/span/div/strong\";\n\t\ttry {\n\t\t\tList<WebElement> schValue = findWebElements(schemaValue);\n\t\t\tfor (WebElement s : schValue) {\n\t\t\t\tschemes = s.getText();\n\t\t\t\tString param = schemes + \" Scheme select button#xpath=//div//h2//span//div//Strong[contains(text(),'\"\n\t\t\t\t\t\t+ schemes + \"')]//..//..//..//..//..//..//..//strong[contains(text(),'\" + parameter\n\t\t\t\t\t\t+ \"')]//..//following-sibling::div\";\n\t\t\t\twaitForElement(param, 20);\n\t\t\t\tif (isElementDisplayed(param, 10)) {\n\t\t\t\t\tscrollToWebElement(param);\n\t\t\t\t\tvalue = getText(param);\n\t\t\t\t\tvalue1.add(value);\n\t\t\t\t\tvalue = value1 + \"\\t\";\n\t\t\t\t\thighLighterMethod(param);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Scheme or Loan parameter is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyScheme. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn value1;\n\t}",
        "description": "This Java method, named `verifySchemeValue`, takes a string parameter and verifies the scheme values by performing the following actions:\n\n1. It defines an empty ArrayList to store the verified scheme values.\n2. It attempts to find web elements based on a provided schema value using a `findWebElements` method (not shown in this snippet).\n3. For each found web element, it extracts the text content and uses it as a parameter to construct another XPath expression.\n4. It waits for the element to be displayed using the `waitForElement` method (not shown in this snippet), then checks if the element is actually displayed using the `isElementDisplayed` method (not shown in this snippet).\n5. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method (not shown in this snippet) and extracts the text content.\n6. The extracted text content is added to an ArrayList along with a tab character (`\\t`) for formatting purposes.\n7. It calls another method named `highLighterMethod` (not shown in this snippet) to highlight the element.\n8. If any of these steps fail, it reports a test step failure using the `testStepFailed` method (not shown in this snippet).\n9. Finally, the method returns the ArrayList containing the verified scheme values.",
        "input": [
            "String parameter"
        ],
        "output": "ArrayList"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "selectDropDownSchemeFilterBy",
        "code": "public void selectDropDownSchemeFilterBy(String fieldValue) {\n\t\tString dropDown = \"SchemeDropDown#xpath=//span[text()='Scheme Filter By']/../../div/div/select\";\n\t\tString dropDownValue = fieldValue + \"#xpath=//option[text()='\" + fieldValue + \"']\";\n\t\ttry {\n\t\t\tscrollToWebElement(dropDown);\n\t\t\tif (isElementDisplayed(dropDown)) {\n\t\t\t\tclickOn(dropDown);\n\t\t\t\tif (isElementDisplayed(dropDownValue)) {\n\t\t\t\t\thighLighterMethod1(dropDownValue);\n\t\t\t\t\tclickOn(dropDownValue);\n\t\t\t\t\tmanualScreenshot(\"Select the dropdown value \" + fieldValue);\n\t\t\t\t\ttestStepPassed(\"Selected the dropDown Value \" + fieldValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldValue + \" dropdown value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Scheme Filter By drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Scheme Filter By \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectDropDownSchemeFilterBy`, is used to select a dropdown value from the \"Scheme Filter By\" dropdown menu. It takes a string parameter `fieldValue` which represents the value to be selected.\n\nThe method first scrolls to the \"Scheme Filter By\" dropdown menu using the `scrollToWebElement` method. If the dropdown menu is displayed, it clicks on the dropdown menu and then selects the specified `fieldValue` from the dropdown list. It also takes a manual screenshot of the selection and marks the test step as passed.\n\nIf the \"Scheme Filter By\" dropdown menu or the selected value is not present, the method fails the test step with an appropriate error message.",
        "input": [
            "String fieldValue"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "value",
        "code": "public void value(ArrayList<String> beforeROIValue, String attributeValue, String Range) {\n\t\tString[] loanParam = null;\n\t\tList<String> attributes2 = new ArrayList<String>();\n\t\ttry {\n\t\t\tfor (int i = 0; i < beforeROIValue.size(); i++) {\n\t\t\t\ttestStepPassed(beforeROIValue.get(i));\n\t\t\t\tString value = beforeROIValue.get(i);\n\t\t\t\tString pattern = \"[^a-zA-Z0.00-9.00/\\\\n]\";\n\t\t\t\tString finalvalue = value.replaceAll(pattern, \"\");\n\t\t\t\tloanParam = finalvalue.split(\"/\");\n\t\t\t\tfor (String s : loanParam) {\n\t\t\t\t\tif (s.startsWith(attributeValue)) {\n\t\t\t\t\t\tattributes2.add(s.replaceAll(attributeValue, \"\"));\n\t\t\t\t\t\tfloat rangeValue = Float.valueOf(s.replaceAll(attributeValue, \"\"));\n\t\t\t\t\t\tString[] rangeV = Range.split(\"-\");\n\t\t\t\t\t\tint minimumValue = Integer.parseInt(rangeV[0]);\n\t\t\t\t\t\tint maximumValue = Integer.parseInt(rangeV[1]);\n\t\t\t\t\t\tif (rangeValue >= minimumValue && rangeValue <= maximumValue) {\n\t\t\t\t\t\t\ttestStepPassed(attributeValue + \" is in between the range \" + rangeValue);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(attributeValue + \" not in the range\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(attributeValue + \" Not present\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, named `value`, takes three parameters: an `ArrayList` of strings (`beforeROIValue`), a string (`attributeValue`), and another string (`Range`). \n\nThe method iterates over the elements in `beforeROIValue`. For each element, it removes non-alphanumeric characters using regular expressions, splits the resulting string into substrings separated by `/`, and checks if any of these substrings start with `attributeValue`. If they do, it extracts the part after `attributeValue` and adds it to a list (`attributes2`). \n\nIt then checks if this extracted value is within the range specified in `Range`. The range is assumed to be in the format \"minimum-maximum\", where both minimum and maximum values are integers. If the value is within the range, the method logs that it has passed; otherwise, it logs a failure.\n\nIf any exceptions occur during this process, they are caught and printed to the console.",
        "input": [
            "ArrayList beforeROIValue",
            "String attributeValue",
            "String Range"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_FOS",
        "function_name": "value1",
        "code": "public List<String> value1(List<String> beforeSchemeLTVValue, String attributeValue, String Range) {\n\t\tList<String> attributes3 = new ArrayList<String>();\n\t\ttry {\n\t\t\tfor (int i = 0; i < beforeSchemeLTVValue.size(); i++) {\n\t\t\t\ttestStepPassed(beforeSchemeLTVValue.get(i));\n\t\t\t\tString value = beforeSchemeLTVValue.get(i);\n\t\t\t\tString[] attributes1 = value.split(\"\\\\n\");\n\t\t\t\tattributes3.add(attributes1[attributes1.length - 1].replace(\"attributeValue\", \"\"));\n\t\t\t\tString[] SchemeLTVr = Range.split(\"-\");\n\t\t\t\tint minimumSchemeLTV = Integer.parseInt(SchemeLTVr[0]);\n\t\t\t\tint maximumSchemeLTV = Integer.parseInt(SchemeLTVr[1]);\n\t\t\t\tfloat rangeValue = Float.valueOf(attributes3.get(i).replaceAll(attributeValue, \"\"));\n\t\t\t\tif (rangeValue >= minimumSchemeLTV && rangeValue <= maximumSchemeLTV) {\n\t\t\t\t\ttestStepPassed(attributeValue + \" is in between the range \" + rangeValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(attributeValue + \" not in the range\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn attributes3;\n\t}\n}",
        "description": "This Java method, named `value1`, takes three parameters: a list of strings (`beforeSchemeLTVValue`), a string (`attributeValue`), and another string (`Range`). It iterates over the input list, performs some operations on each string, and checks if the resulting value is within a specified range. The method returns a new list of strings (`attributes3`) that are generated during its execution.\n\nHere's a high-level overview of what the method does:\n\n1. It takes the input list and iterates over it.\n2. For each string in the list, it splits the string into an array of substrings using the newline character (`\\\\n`).\n3. It extracts the last substring from the array (presumably the value that corresponds to the attribute) and removes any occurrences of `attributeValue` from it.\n4. It then checks if this extracted value is within a specified range (defined by the `Range` string). The range is assumed to be in the format `\"minimum-value-maximum-value\"`.\n5. If the value is within the range, the method logs a successful test step; otherwise, it logs a failed test step.\n6. Finally, it returns the list of extracted values (`attributes3`).",
        "input": [
            "List beforeSchemeLTVValue",
            "String attributeValue",
            "String Range"
        ],
        "output": "List"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "enterValueInGlobalSearchAndClick",
        "code": "public void enterValueInGlobalSearchAndClick(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t//\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\tString search = \"Search #xpath=//div[@class='search-box']//input\";\n\t\t\t\n\t\t\t\n\t\t//\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\tString searchValue = value + \"#xpath=//div[@role='search']//parent::li[1]\";\n\t\t\t\n\t\t//\tString clickValue = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\tString clickValue = value + \"#xpath=//a[text()='\" + value + \"']\";\n\t\t\twaitForElement(search,20);\n\t\t\tif (isElementDisplayed(search, 20)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchValue, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tif (isElementDisplayed(clickValue, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethodManualScreenShot(clickValue, value);\n\t\t\t\t\t\tclickOn(clickValue);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not auto populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchAndClick. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\t\n\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  01/04/2022\n\t * Description    :  Method to enter value in table search and click\n\t * @param         :  value is the value need search\n\t */",
        "description": "This Java method, `enterValueInGlobalSearchAndClick`, enters a given value into a global search field and then clicks on the resulting option. Here's a step-by-step breakdown of what the method does:\n\n1. Waits for the page to load using the `waitForPageToLoad()` method.\n2. Defines several strings that are used as XPath expressions:\n\t* `search`: The XPath expression for the global search field.\n\t* `searchValue`: The XPath expression for the option in the dropdown list that matches the given value.\n\t* `clickValue`: The XPath expression for the specific option to be clicked.\n3. Waits for the element specified by the `search` XPath expression to be displayed using the `waitForElement()` method with a timeout of 20 seconds.\n4. Checks if the element is displayed using the `isElementDisplayed()` method with a timeout of 20 seconds. If it's not, the test fails.\n5. Types the given value into the global search field using the `typeIn()` method.\n6. Waits for the page to load again using the `waitForPageToLoad()` method.\n7. Checks if the element specified by the `searchValue` XPath expression is displayed using the `isElementDisplayed()` method with a timeout of 20 seconds. If it's not, the test fails.\n8. Clicks on the option specified by the `searchValue` XPath expression using the `clickOn()` method.\n9. Waits for the page to load again using the `waitForPageToLoad()` method.\n10. Checks if the element specified by the `clickValue` XPath expression is displayed using the `isElementDisplayed()` method with a timeout of 20 seconds. If it's not, the test fails.\n11. If the element is displayed, clicks on it using the `clickOn()` method and takes a manual screenshot using the `highLighterMethodManualScreenShot()` method.\n12. Catches any exceptions that occur during the execution of the method and marks the test as failed.\n\nThe method also includes some logging statements to indicate when each step fails.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "enterValueInTableSearchAndClick",
        "code": "public void enterValueInTableSearchAndClick(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\tString searchValue = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchValue, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(searchValue, value);\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTableSearch. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  01/04/2022\n\t * Description    :  Method to enter get and click customer name\n\t * @return        :  value is return retrieved customer name\n\t */",
        "description": "This Java method, `enterValueInTableSearchAndClick`, is used to search for a specific value in a table and then click on the corresponding result. Here's a brief breakdown of what the method does:\n\n1. It takes a `String` parameter `value` which represents the search term.\n2. It uses a combination of XPath expressions to locate the search input field, enter the search term, and click the search button.\n3. If the search results are displayed, it highlights the result using a `highLighterMethodManualScreenShot` method (not shown in this code snippet) and then clicks on the result.\n4. The method uses various WebDriver methods like `waitForElement`, `isElementDisplayed`, `findWebElement`, and `sendKeys` to interact with the web page.\n5. It also includes some error handling using a `try-catch` block, where it logs an error message if any exception occurs during the execution of the method.\n\nThe method is used to search for a customer by name in a table and then click on the corresponding result.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "clickCustomerName",
        "code": "public String clickCustomerName() {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString customerName = \"customerName #xpath=//p[@title='Customer']//parent::div//span\";\n\t\t\twaitForElement(customerName, 10);\n\t\t\tif (isElementDisplayed(customerName, 10)) {\n\t\t\t\tscrollToWebElement(customerName);\n\t\t\t\tvalue=getText(customerName);\n\t\t\t\thighLighterMethodManualScreenShot(customerName, value);\n\t\t\t\tclickOn(customerName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer name is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickCustomerName. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickCustomerName`, is used to interact with a specific element on a web page. \n\nThe method attempts to locate an element with the XPath expression `\"customerName #xpath=//p[@title='Customer']//parent::div//span\"` and perform the following actions:\n\n1. Waits for the element to be displayed (up to 10 seconds).\n2. Scrolls the element into view.\n3. Retrieves the text value of the element.\n4. Highlights the element on the screen (and takes a manual screenshot).\n5. Clicks on the element.\n6. Waits for 3 seconds.\n\nIf the element is not present, the method fails the test step with an error message. If any exception occurs during the execution of these steps, it also fails the test step and logs the exception. \n\nThe method returns the text value of the element as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "getTotalIncentiveAmount",
        "code": "public String getTotalIncentiveAmount() {\n\t\tString value=null;\n\t\ttry {\n\t\t\tString Element = \"#xpath=//h1[text()='My Incentive']//parent::div//h1[text()='Total Incentive Amount:']//following-sibling::h1\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tvalue = getText(Element);\n\t\t\t\twaitTime(3);\n\t\t\t\thighLighterMethodManualScreenShot(Element, \"Total Incentive Amount:\");\n\t\t\t\ttestStepPassed(\"Successfully get value from Total Incentive Amount: \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer Info Icon field is not present in ETB customer Search Page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTotalIncentiveAmount`, is used to retrieve the total incentive amount from a web page. It uses Selenium WebDriver and XPath expressions to locate an element on the page that contains the desired text (\"Total Incentive Amount:\"). The method attempts to display the element for 5 seconds using the `isElementDisplayed` method, then retrieves its text value using the `getText` method. If the element is displayed, it also takes a manual screenshot of the highlighted element and logs a test step as passed. If the element is not displayed, it logs a test step as failed. The method returns the retrieved text value as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "incentiveTableSelection",
        "code": "public int incentiveTableSelection(String incentiveName) {\n\t\tint i=1;\n\t\ttry {\n\t\t\tif (incentiveName.equalsIgnoreCase(\"Amount\")) {\n\t\t\t\ti = 2;\n\t\t\t}else if (incentiveName.equalsIgnoreCase(\"No. of Cases\")) {\n\t\t\t\ti = 3;\n\t\t\t} else if (incentiveName.equalsIgnoreCase(\"Incentive Amount\")) {\n\t\t\t\ti = 4;\n\t\t\t} \n\t\t\telse {\n\t\t\t\ttestStepFailed(incentiveName + \" field is not Available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getEachIncentiveAmount\" + e.getClass().getName());\n\t\t}\n\t\treturn i;\n\t}",
        "description": "This Java method, `incentiveTableSelection`, takes a string parameter `incentiveName` and returns an integer value based on the comparison of the input string with certain predefined values. \n\nIf the input string matches one of the following conditions:\n\n- \"Amount\"\n- \"No. of Cases\"\n- \"Incentive Amount\"\n\nThe method sets the returned integer to 2, 3 or 4 respectively.\n\nIf the input string does not match any of these conditions, it calls a method `testStepFailed` with an error message indicating that the incentiveName field is not available.\n\nAdditionally, if an exception occurs during the execution of this method, it catches the exception and again calls the `testStepFailed` method with an error message including the type of exception.",
        "input": [
            "String incentiveName"
        ],
        "output": "int"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "getEachIncentiveAmount",
        "code": "public String getEachIncentiveAmount(String incentiveTitle, String incentiveName) {\n\t\tString value=null;\t\t\t\t\n\t\ttry {\n\t\t\tint tableNo=incentiveTableSelection(incentiveTitle);\n\t\t\tString Element = \"#xpath=//div[text()='\"+incentiveTitle+\"']//..//..//..//following-sibling::tbody//div[text()='\"+incentiveName+\"']//..//..//th[\"+tableNo+\"]//div[@title]\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tvalue = getText(Element);\n\t\t\t\twaitTime(3);\n\t\t\t\thighLighterMethodManualScreenShot(Element, incentiveName+ \" value is : \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(incentiveName + \" Amount field is not Available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getEachIncentiveAmount\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getEachIncentiveAmount`, retrieves the amount value for a specific incentive title and name. It uses Selenium WebDriver to interact with a web page.\n\nHere's a step-by-step breakdown:\n\n1. The method takes two string parameters: `incentiveTitle` and `incentiveName`.\n2. It calls another method, `incentiveTableSelection`, to determine the table number associated with the given incentive title.\n3. It constructs an XPath expression to locate the specific table cell containing the incentive name.\n4. If the element is displayed within a certain time limit (5 seconds), it retrieves the text value of that element using Selenium's `getText` method.\n5. It waits for 3 seconds before taking a manual screenshot and highlighting the found element using another custom method, `highLighterMethodManualScreenShot`.\n6. If the element is not displayed within the time limit, the method marks the test step as failed with an error message indicating that the incentive amount field is not available.\n7. In case of any exceptions during the execution of this method, it catches and logs them as a test failure.\n\nThe method returns the retrieved value as a string.",
        "input": [
            "String incentiveTitle",
            "String incentiveName"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_FOS",
        "function_name": "selectValueFromMoreDropdown",
        "code": "public String selectValueFromMoreDropdown(String value) {\n\t\tString link = \"#xpath=//button[text()='More']\";\n\t\tString valueSelect =value+ \"#xpath=//button[text()='More']//following-sibling::ul//a//span[text()='\"+value+\"']\";\n\t\tString valueSelectFromGrid=\"#xpath=//nav[@role='navigation']//community_navigation-global-navigation-item//a//span[text()='My Incentive']\";\n\t\ttry {\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForElement(valueSelect);\n\t\t\t\tif (isElementPresent(valueSelect)) {\n\t\t\t\t\tActions act = new Actions(driver);\n\t\t\t\t\tact.moveToElement(findWebElement(valueSelect)).click().perform();\n\t\t\t\t\ttestStepPassed(\"Successfully clicked from More Dropdown : \"+value);\n\t\t\t\t}else {\n\t\t\t\t\ttestStepFailed(value+ \" is not present\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}else if (isElementDisplayed(valueSelectFromGrid, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOn(link);\n\t\t\t} \n\t\t\telse {\n\t\t\t\ttestStepFailed(\"More dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickCustomerName. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n}",
        "description": "This Java method, `selectValueFromMoreDropdown`, is used to select a specific value from a dropdown menu with the label \"More\" on a web page. The method takes a string parameter `value` which represents the value to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It first waits for an element with the XPath `//button[text()='More']` (i.e., the \"More\" dropdown menu) to appear within 10 seconds.\n2. If the element is displayed, it scrolls down to that element and clicks on it.\n3. Then, it waits for another element with the XPath `value+ \"#xpath=//button[text()='More']//following-sibling::ul//a//span[text()='\"+value+\"']\"` (i.e., a specific value within the dropdown menu) to appear.\n4. If the element is present, it uses Selenium's Actions API to move the mouse cursor over the element and then click on it.\n5. The method also logs a test step as \"passed\" if the selection is successful, or \"failed\" with an error message if the value is not found in the dropdown menu.\n6. If the \"More\" dropdown menu is not present, it logs a test step failure with an error message.\n\nThe method returns the selected value as a string.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyCurrentStageOfOpportunity",
        "code": "public void verifyCurrentStageOfOpportunity(String stageName) {\n\t\ttry {\n\t\t\tString currentStage_Opp = \"Opprtunity In Stage#xpath=//li/a/span[contains(@class,'current')]/following-sibling::span\";\n\t\t\twaitForElement(currentStage_Opp, 20);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 10)) {\n\t\t\t\tString stageValue = getText(currentStage_Opp);\n\t\t\t\tif (stageValue.equalsIgnoreCase(stageName)) {\n\t\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage as expected.\");\n\t\t\t\t\ttestStepInfo(\"$ Current Stage of Opp id - $\" +stageValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the opportunity stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select value from drop down in edit box    \n\t * @param \t      :  dropdownName is the name of field\n\t * @param \t      :  value is input need to select\n\t */",
        "description": "This Java method, `verifyCurrentStageOfOpportunity`, verifies that the current stage of an opportunity matches a specified stage name. It uses Selenium WebDriver and WebDriverWait classes to interact with the application.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `stageName`, which is the expected stage name.\n2. It defines a XPath expression `currentStage_Opp` that identifies the current stage of an opportunity.\n3. The method uses `waitForElement` to wait for the element identified by `currentStage_Opp` to be displayed (up to 20 seconds).\n4. If the element is displayed, it checks if the text content matches the expected `stageName`. If they match:\n\t* It scrolls to the element using `scrollToWebElement`.\n\t* It takes a manual screenshot with a message indicating that the opportunity is in the expected stage.\n\t* It logs a test step information with the current stage value.\n5. If the element is not displayed or the text content does not match, it fails the test step with an appropriate error message.\n6. The method catches any exceptions that may occur during execution and reports them as test failures.\n\nThe author of this code is Pradeep T, and it was created on March 30, 2022.",
        "input": [
            "String stageName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectValueFromDropdownInEditBox",
        "code": "public void selectValueFromDropdownInEditBox(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\"+dropdownName+\"']//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\"+dropdownName+\"']//..//following-sibling::div//span[text()='\"+value+\"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInEditBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select or deselect check box in document lib  \n\t * @param \t      :  labelname is the name of field\n\t * @param \t      :  status is whether select or deselect\n\t */",
        "description": "This Java method, `selectValueFromDropdownInEditBox`, is used to select a value from a dropdown list in an edit box. The method takes two parameters: `dropdownName` and `value`. \n\nThe method first waits for the page to load and then checks if the dropdown with the specified name is present on the page. If it is, the method then tries to select the specified value from the dropdown. It does this by clicking on the dropdown and then clicking on the specific value in the list.\n\nIf the value is successfully selected, the method takes a manual screenshot as confirmation. If the value is not present in the dropdown or if the selection fails for some reason, the method reports a test failure with an appropriate error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectOrDeselectCheckBoxUnderDocumentLib",
        "code": "public void selectOrDeselectCheckBoxUnderDocumentLib(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = \"#xpath=//span[text()='\" + labelName + \"']/preceding-sibling::span/input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\ttestStepPassed(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(labelName + \" Check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\ttestStepPassed(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBoxUnderDocumentLib failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select click side arrow\n\t * @param \t      :  optionValue is option to click\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBoxUnderDocumentLib`, is used to check or uncheck a checkbox with the given label name. It takes two parameters: `labelName` and `status`. \n\nThe method first tries to find an element using XPath that matches the label name. If the element is found, it checks if the checkbox is selected based on the provided status (either \"check\" or \"uncheck\"). \n\nIf the checkbox needs to be checked and it's not already checked, it scrolls to the element, clicks on it, and logs a success message. If the checkbox is already checked, it logs an information message stating that the checkbox is already checked.\n\nSimilarly, if the checkbox needs to be unchecked and it's currently checked, it clicks on the checkbox and logs a success message. If the checkbox is already unchecked, it logs an information message stating that the checkbox is already unchecked.\n\nIf the element is not found or any exception occurs during the process, it logs an error message and reports a test failure.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectOptionfromSideArrowButton",
        "code": "public void selectOptionfromSideArrowButton(String optionValue) {\n\t\ttry {\n\t\t\tString menu = \"#xpath=//li[contains(@class,'oneActionsDropDown')] | //span[text()='Show more actions']//parent::button\";\n\t\t\twaitForElement(menu, 20);\n\t\t\tif (isElementPresent(menu)) {\n\t\t\t\tscrollToElement(menu);\n\t\t\t\tscrollToWebElement(menu);\n\t\t\t\tclickOn(menu);\n\t\t\t\twaitTime(3);\n\t\t\t\tString option = optionValue + \"#xpath=//li//a//span[text()='\"+optionValue+\"']\";\n\t\t\t\tif (isElementDisplayed(option, 20)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Side arrow is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOptionfromSideArrowButton failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter date in edit box\n\t * @param \t      :  labelName is name of field\n\t * @param \t      :  value is date value\n\t */",
        "description": "This Java method, `selectOptionfromSideArrowButton`, selects an option from a dropdown menu that appears when clicking on a \"Show more actions\" button. The method takes a string parameter `optionValue` which represents the name of the option to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for 20 seconds for an element with the specified XPath (`menu`) to appear.\n2. If the element is present, it scrolls to that element and then clicks on it.\n3. After clicking on the menu, it waits for 3 seconds.\n4. Then, it checks if an option with the given `optionValue` is displayed within the menu. If it is, it clicks on that option using a special click method (`clickOnSpecialElement`).\n5. If the option is not present or the selection fails, the method reports a test step failure.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and logs them to a log file if necessary.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterDateInEditDialogueBox",
        "code": "public void enterDateInEditDialogueBox(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"+labelName+\"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field,10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDateInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter text in edit box\n\t * @param \t      :  labelName is name of field\n\t * @param \t      :  value is input value\n\t */",
        "description": "This Java method, `enterDateInEditDialogueBox`, enters a given `value` into an edit dialogue box with the specified `labelName`. \n\nThe method first constructs an XPath expression to locate the edit box based on its label. It then waits for the element to be displayed and scrollable before entering the value using a `typeIn` method. After entering the value, it waits for the page to load and takes a manual screenshot of the highlighted field.\n\nIf the element is not present or any exception occurs during the process, the method reports a test step failure with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterValueInEditDialogueBox",
        "code": "public void enterValueInEditDialogueBox(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/..//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to upload document\n\t * @param \t      :  fileName is file location\n\t */",
        "description": "This Java method, `enterValueInEditDialogueBox`, enters a given value into an edit dialogue box with a specific label name. The method uses various WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToElement`, `typeIn`, and `waitForPageToLoad` to interact with the UI element. If the field is not present, it logs a test step failure. Additionally, if any exception occurs during the execution of this method, it also logs a test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentToUpload",
        "code": "public void documentToUpload(String fileName) {\n\t\ttry {\n\t\t\twaitForElement(btn_upload, 10);\n\t\t\tif (isElementDisplayed(btn_upload, elementLoadWaitTime)) {\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\tfindWebElement(btn_upload).sendKeys(filePath + \"\\\\UploadDocuments\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded \" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\" Failed in documentToUpload Exception :\" +e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to get text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\n\t */",
        "description": "This Java method, `documentToUpload`, takes a file name as input and uploads the file with that name. Here's a brief summary of what it does:\n\n1. Waits for an element (upload button) to be displayed.\n2. Checks if the upload button is present on the page.\n3. If the button is present, constructs the full path of the file by combining the file's absolute path and a directory path (\"UploadDocuments\").\n4. Sends the constructed file path to the upload button using `sendKeys`.\n5. Logs a success message indicating that the file was uploaded successfully.\n6. If the upload button is not present or an exception occurs, logs failure messages with details about the issue.\n\nThe method uses several helper methods (e.g., `waitForElement`, `isElementDisplayed`, `findWebElement`) to interact with the UI and perform various checks.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getNormalTextFieldValue",
        "code": "public String getNormalTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span/span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tif(!value.isEmpty()){\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttestStepFailed(\"Value is not updated in \"+labelName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getNormalTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to get record type text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\n\t */",
        "description": "This Java method, `getNormalTextFieldValue`, retrieves the text value of a normal text field (a span element) based on its label name. \n\nIt uses an XPath expression to locate the desired element, waits for it to be displayed, and then scrolls to it if necessary. The method returns the retrieved text value.\n\nIf the element is not displayed or the value is empty, the method fails the test step with a corresponding message. If an exception occurs during the execution of the method, the test step also fails with the exception details.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getRecordTypeTextFieldValue",
        "code": "public String getRecordTypeTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t/*\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span//..//div/span\";*/\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName+ \"']/ancestor::div/following-sibling::div/span//..//div/span | //span[text()='\"+labelName+\"']/ancestor::dt/following-sibling::dd//span//..//div//a | //span[text()='\"+labelName+\"']/ancestor::dt/following-sibling::dd//records-record-type//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethodManualScreenShot(Element, labelName);\n\t\t\t\tvalue = getAttributeValue(Element, \"value\");\n\t\t\t\tif (value==null) {\n\t\t\t\t\tvalue = getText(Element);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRecordTypeTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\t\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter value in banking lookup field\n\t * @param         :  labelName is name of field\n\t * @param         :  value is input need to select\n\t */\n\t\n\t/*public void enterValueInLookUPFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString lookupValue = value + \"#xpath=//span[text()='\" + value + \"']/parent::span\";\n\t\t\t\t\tif (isElementDisplayed(lookupValue, 20)) {\n\t\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not enabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInLookUPFieldInIMPSPopup \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "This Java method, `getRecordTypeTextFieldValue`, retrieves the value of a text field associated with a given label name. Here's a brief overview:\n\n1. It takes a `String` parameter `labelName`, which represents the name of the text field.\n2. The method attempts to locate an HTML element using XPath, based on the provided `labelName`.\n3. If the element is found and displayed within a certain time limit (5 seconds), it scrolls to that element and highlights it for manual screenshot purposes.\n4. It then retrieves the value attribute of the element or, if the value attribute is null, it gets the text content of the element.\n5. The method returns the retrieved value as a `String`.\n6. If any exceptions occur during execution (e.g., timeout, element not found), the method catches them and reports a test step failure.\n\nNote that this method appears to be part of a larger automation framework for testing web applications, possibly in the context of banking or financial services.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterValueInLookUPFieldInIMPSPopup",
        "code": "public void enterValueInLookUPFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\n\t\t\twaitForElement(field, 30);\n\n\t\t\tWebElement ele = findWebElement(field);\n\n\t\t\tif (ele.isEnabled()) {\n\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\n\t\t\t\t\tscrollToWebElement(field);\n\n\t\t\t\t\ttypeIn(field, value);\n\n\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\tString lookupValue = value + \"#xpath=//span[text()='\" + value + \"']/parent::span\";\n\n\t\t\t\t\tif (isElementDisplayed(lookupValue, 20)) {\n\n\t\t\t\t\t\tclickOn(lookupValue);\n\n\t\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName +\" LookUP Field in IMPSPopup values is : \"+value);\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttestStepFailed(labelName + \" field is not displayed\");\n\n\t\t\t\t}\n\n\t\t\t} else if (!ele.isEnabled()) {\n\n\t\t\t\tif (labelName.equalsIgnoreCase(\"Bank Name\")) {\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\texpandArrows(\"Banking-IMPS Validation\");\n\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(labelName,value);\n\n\t\t\t} }\n\n\t\t\t\n\n\t\t\t\n\n\t\t\telse {\n\n\t\t\t\ttestStepFailed(labelName + \" is not enabled\");\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in enterValueInLookUPFieldInIMPSPopup \" + e.getClass().getName());\n\n\t\t}\n\n\t}\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to select drop down in banking\n\t * @param         :  dropdownName is name of field\n\t * @param         :  value is input need to select\n\t */",
        "description": "This Java method, `enterValueInLookUPFieldInIMPSPopup`, is used to enter a value into a lookup field in an IMPSPopup (likely an Internet Banking application). \n\nThe method takes two parameters: `labelName` and `value`. It uses these values to construct a unique XPath for the lookup field, waits for the element to be displayed and enabled, scrolls to the field if necessary, types in the value, and then verifies that the entered value is present in the dropdown list. If the value is found, it takes a screenshot of the page and highlights the selected value. If not, it fails the test step.\n\nThe method also includes some additional logic for handling specific cases, such as refreshing the page if the field is not enabled or expanding a menu if necessary. If any exceptions occur during the execution of the method, it catches them and reports a failure in the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\tchar ch = ' ';\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\tString dropdownList1 = value + \" value#xpath=//span[text()='\" + value + \"\" + ch+ \"\" + ch+ \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t\telse if (isElementDisplayed(dropdownList1,5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList1);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInIMPSPopup \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to select value from drop down       \n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is the value need to select\n\t */",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, is used to select a specific value from an IMP (Insurance Management Portal) style dropdown list. The method takes two parameters: `dropdownName` and `value`. \n\nThe method first tries to locate the dropdown list by its name and waits for it to be displayed. If the dropdown is found, it scrolls to the element, clicks on it, and then selects the specified value from the dropdown list. If the value is not present in the dropdown, the method fails the test step.\n\nIf an exception occurs during the execution of this method (e.g., the dropdown list is not found or the value is not selected), the method also fails the test step with a detailed error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectValueFromDropdownInEmandate",
        "code": "public void selectValueFromDropdownInEmandate(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//parent::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"'] | //label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div[contains(@class,'dropdown')]//lightning-base-combobox-item//span//span[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInEmandate \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :\n\t * Description    :  Method to select or deselect check box\n\t * @param         :  labelname is the name of check box\n\t * @param         :  status is the input value check or uncheck\n\t */",
        "description": "This Java method, `selectValueFromDropdownInEmandate`, is used to select a specific value from a dropdown list in an Salesforce (E- Mandate) application. \n\nThe method takes two parameters: `dropdownName` and `value`. It first waits for the page to load and then checks if the dropdown with the given name is present. If it is, it clicks on the dropdown and then iterates up to 2 times to select the specified value from the dropdown list. If the value is selected successfully, it takes a manual screenshot as confirmation. \n\nIf the value is not found in the dropdown or the dropdown itself is not present, the method fails the test step with an appropriate error message. The method also catches any exceptions that may occur during its execution and reports them as failed test steps.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectOrDeselectCheckBoxInCard",
        "code": "public void selectOrDeselectCheckBoxInCard(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//div[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" check box is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBoxInCard failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  31/03/2022\n\t * Description    :  method to expand side arrows   \n\t * @param \t      :  fieldLabel is the section name need to expand\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBoxInCard`, selects or deselects a checkbox with the given label name in a card. It takes two parameters: `labelName` (the name of the checkbox) and `status` (either \"check\" or \"uncheck\" to indicate whether to select or deselect the checkbox).\n\nThe method uses various utility methods, such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `clickOnSpecialElement`, to interact with the checkbox. It also takes manual screenshots after performing the selection or deselection action.\n\nIf the checkbox is not present, the method fails the test step. If an exception occurs during execution, it logs the error and fails the test step.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "expandArrows",
        "code": "public void expandArrows(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']//parent::button[@aria-expanded='false']\";\n\t\t\tString arrow1 = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']//parent::button[@aria-expanded='true']\";\n\t\t\twaitForElement(arrow, 3);\n\t\t\tif (isElementDisplayed(arrow, 3)) {\n\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\twaitTime(2);\n\t\t\t\ttestStepInfo(\"Successfully expanded \"+fieldLabel);\n\t\t\t} else if (isElementDisplayed(arrow1, 3)) {\n\t\t\t\ttestStepInfo(fieldLabel+\" already expanded\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `expandArrows`, is used to expand an arrow button on a webpage based on the provided field label. It uses XPath expressions to locate the button and then performs the following actions:\n\n1. Waits for the element to be displayed.\n2. If the element is displayed, it clicks on the button and waits for 2 seconds.\n3. Verifies that the expansion was successful by checking if the element is still displayed after clicking the button.\n4. If the element is already expanded (i.e., `aria-expanded='true'`), it logs a message indicating that the field label is already expanded.\n5. If the element is not present on the page, it logs a failure message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and logs an informative message if an exception occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "bankingUPIMandate",
        "code": "public void bankingUPIMandate(String tabName, String componentName, String upiBypassReasonLabel,\n\t\t\tString upiBypassReasonValue, String bypassUpiMandateLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Banking UPI Mandate Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t\tselectValueFromDropdownInEmandate(upiBypassReasonLabel, upiBypassReasonValue);\n\t\t\tclickOnButton(bypassUpiMandateLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bankingUPIMandate \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete banking details      \n\t */",
        "description": "This Java method, `bankingUPIMandate`, is used to complete the UPI mandate details in a banking application. It takes five parameters:\n\n1. `tabName`: The name of the tab where the UPI mandate details need to be entered.\n2. `componentName`: The name of the component related to the UPI mandate (e.g., \"E-Mandate\").\n3. `upiBypassReasonLabel` and `upiBypassReasonValue`: These parameters are used to select a value from a dropdown list with a specific label and value.\n4. `bypassUpiMandateLabel`: The label of the button that needs to be clicked to complete the UPI mandate details.\n\nThe method attempts to execute the following steps:\n\n1. Enter test step information indicating that the banking UPI mandate details are being entered.\n2. Select the specified tab.\n3. Expand any arrows related to the component name.\n4. Select a value from a dropdown list with the specified label and value.\n5. Click on the button with the specified label.\n\nIf any exception occurs during these steps, the method catches it and logs an error message indicating that the banking UPI mandate step failed.",
        "input": [
            "String tabName",
            "String componentName",
            "String upiBypassReasonLabel",
            "String upiBypassReasonValue",
            "String bypassUpiMandateLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "bankingDetails",
        "code": "public void bankingDetails(String tabName, String componentName, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountNumberLabel, String bankAccountNumberValue,String reEnterBankAccountNumberLabel, String accountTypeLabel,\n\t\t\tString accountTypeValue, String initiateIMPSLabel, String accountStatusLabel, String accountStatusValue,\n\t\t\tString saveLabel,String successMessage1) {\n\t\ttry {\n\t\t\tverifyCurrentStageOfOpportunity(\"DO Preparation\");\t\t\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter Banking-UPI Mandate Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\t\n\t\t\tString arrow = \"#xpath=//span[text()='Banking-UPI Mandate']/parent::button\";\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t\tselectValueFromDropdownInEmandate(\"UPI Bypass Reason\", \"Customer Refused UPI Mandate\");\n\t\t\t\tclickOnButton(\"Bypass UPI Mandate\");\n\t\t\t\t\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter IMPS Banking Details #\");\n\t\t\t\n\t\t\texpandArrows(componentName);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(componentName);\n\t\t\tString field = bankNameLabel + \"#xpath=//label[text()='\" + bankNameLabel + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\t}else {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\t}\n\t\t\tenterValueInField(bankAccountNumberLabel, bankAccountNumberValue);\n\t\t\tenterValueInField(reEnterBankAccountNumberLabel, bankAccountNumberValue);\n\t\t\tselectValueFromDropdownInIMPSPopup(accountTypeLabel, accountTypeValue);\n\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t\twaitTime(5);\n\t\t\twaitForPageToLoad();\n\t\t\tselectValueFromDropdownInIMPSPopup(accountStatusLabel, accountStatusValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bankingDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete emandate details      \n\t */",
        "description": "This Java method is used to automate the process of entering banking-UPI mandate details and completing IMPS (Immediate Payment Service) banking details in a web application. The method takes several string parameters that represent various UI elements, such as tab names, labels, values, and buttons.\n\nThe method performs the following actions:\n\n1. Verifies that the current stage of an opportunity is \"DO Preparation\".\n2. Enters UPI mandate details by selecting the \"Banking-UPI Mandate\" tab, scrolling to the element, clicking on it if necessary, and bypassing the UPI mandate.\n3. Expands arrows for a component, refreshes the page, waits for the page to load, and then expands the arrows again.\n4. Enters banking details by filling in fields such as bank name, account number, and account type, and selecting values from dropdown menus.\n5. Initiates IMPS and verifies that a success message is displayed.\n6. Saves the changes.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String tabName",
            "String componentName",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountNumberLabel",
            "String bankAccountNumberValue",
            "String reEnterBankAccountNumberLabel",
            "String accountTypeLabel",
            "String accountTypeValue",
            "String initiateIMPSLabel",
            "String accountStatusLabel",
            "String accountStatusValue",
            "String saveLabel",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "emandateDetails",
        "code": "public void emandateDetails(String tabName, String componentName, String initiateEmandateButton,\n\t\t\tString requeryResponseLabel, String bypassEmandateReasonLabel, String bypassEmandateReasonValue,\n\t\t\tString saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Emandate Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t    clickOnButton(\"Normal\");\n\t\t\tclickOnButton(initiateEmandateButton);\n\t\t\twaitTime(10);\n\t\t\tclickOnButton(requeryResponseLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tselectValueFromDropdownInEmandate(bypassEmandateReasonLabel, bypassEmandateReasonValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in emandateDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete cards details      \n\t */",
        "description": "This Java method is used to automate the process of entering and saving emandate details in a web application. It takes eight string parameters:\n\n* `tabName`: The name of the tab to select.\n* `componentName`: The name of the component to expand.\n* `initiateEmandateButton`: The label of the button to click to initiate the emandate process.\n* `requeryResponseLabel`: The label of the button to click to requery a response.\n* `bypassEmandateReasonLabel` and `bypassEmandateReasonValue`: The label and value of the dropdown to select for bypassing an emandate reason.\n* `saveLabel`: The label of the button to click to save the emandate details.\n\nThe method performs the following steps:\n\n1. Logs a test step with the message \"# Enter Emandate Details #\".\n2. Selects the specified tab.\n3. Expands the component with the given name.\n4. Clicks on the \"Normal\" button.\n5. Clicks on the initiate emandate button.\n6. Waits for 10 seconds.\n7. Clicks on the requery response button.\n8. Waits for the page to load completely.\n9. Selects a value from the bypass emandate reason dropdown with the given label and value.\n10. Clicks on the save button.\n\nIf any exception occurs during these steps, it logs a test step failure with the message \"Failed in emandateDetails\" followed by the name of the exception class.",
        "input": [
            "String tabName",
            "String componentName",
            "String initiateEmandateButton",
            "String requeryResponseLabel",
            "String bypassEmandateReasonLabel",
            "String bypassEmandateReasonValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "cardsDetails",
        "code": "public void cardsDetails(String tabName, String componentName, String cardNameLabel, String cardStatus,\n\t\t\tString submitCardsLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Cards Details #\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t\tselectOrDeselectCheckBoxInCard(cardNameLabel, cardStatus);\n\t\t\tclickOnButton(submitCardsLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in cardsDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete primary applicant document lib details      \n\t */",
        "description": "This Java method, named `cardsDetails`, is used to perform a series of actions related to entering and submitting card details. The method takes six parameters:\n\n1. `tabName`: the name of the tab to be selected\n2. `componentName`: the name of the component to expand or collapse\n3. `cardNameLabel`: the label text for the specific card being worked on\n4. `cardStatus`: the status of the card (e.g., \"selected\" or \"deselected\")\n5. `submitCardsLabel`: the label text for the submit button\n6. `successMessage`: the expected success message after submitting the card details\n\nThe method performs the following steps:\n\n1. Logs a test step info with the comment \"# Enter Cards Details #\"\n2. Selects the specified tab using the `selectTabs` method\n3. Expands or collapses the component with the given name using the `expandArrows` method\n4. Selects or deselects the checkbox in the card with the given label and status using the `selectOrDeselectCheckBoxInCard` method\n5. Clicks on the submit button with the given label using the `clickOnButton` method\n6. Verifies that the expected success message is displayed after submitting the card details using the `verifySuccessMessage` method\n\nIf any exception occurs during these steps, the method catches it and logs a test step failure with the message \"Failed in cardsDetails\" followed by the type of exception.",
        "input": [
            "String tabName",
            "String componentName",
            "String cardNameLabel",
            "String cardStatus",
            "String submitCardsLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadPrimaryApplicant",
        "code": "public void documentsUploadPrimaryApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadPrimaryApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `documentsUploadPrimaryApplicant` that appears to be used for uploading documents related to a primary applicant in an application process. The method takes 12 string parameters:\n\n1. `tabName`: the name of the tab to select\n2. `customerPhotoLabel`, `applicationFormLabel`, etc.: labels for various document types (e.g., customer photo, application form)\n3. `uploadCustomerPhotoLabel`: label for a specific customer photo upload field\n4. `downPaymentReceiptLabel`: label for a down payment receipt upload field\n5. `saveLabel`: label for the \"Save\" button to save uploaded documents\n6. `successMessage`: the expected success message after uploading documents\n\nThe method performs the following actions:\n\n1. Prints a header message (\"-----Document Details-----\")\n2. Selects a tab based on the provided `tabName`\n3. Iterates over an array of document labels and selects or deselects checkboxes under \"Document Library\" for each label\n4. Uploads a customer photo using the `documentToUpload` method (not shown in this code snippet)\n5. Clicks the \"Save\" button with the specified `saveLabel`\n6. Verifies that the expected success message is displayed with the `verifySuccessMessage` method (not shown in this code snippet)\n\nIf an exception occurs during any of these steps, the method catches it and reports a failure message using the `testStepFailed` method (not shown in this code snippet).",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadPrimaryApplicantWithPOA",
        "code": "public void documentsUploadPrimaryApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Upload Documents #\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel,poaLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadPrimaryApplicantWithPOA \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `documentsUploadPrimaryApplicantWithPOA`, is used to upload various documents related to a primary applicant with a Power of Attorney (POA) in an application process. The method takes 14 parameters:\n\n1. `tabName`: the name of the tab to be selected\n2-12: labels for different types of documents (e.g., customer photo, POA, etc.)\n13. `uploadCustomerPhotoLabel`: the label for the customer photo document\n14. `saveLabel`: the label for the \"Save\" button\n15. `successMessage`: a message to be verified after the upload process is complete\n\nThe method performs the following steps:\n\n1. Logs a test step with the comment \"# Upload Documents #\"\n2. Selects the specified tab\n3. Iterates through an array of document labels and selects or deselects check boxes for each one using the `selectOrDeselectCheckBoxUnderDocumentLib` method\n4. Uploads the customer photo document using the `documentToUpload` method\n5. Clicks on the \"Save\" button with the specified label\n6. Verifies a success message with the provided message text\n\nIf an exception occurs during the process, the method catches it and logs a test step failure with the exception's class name.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadNonIMPSPrimaryApplicant",
        "code": "public void documentsUploadNonIMPSPrimaryApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel,String cancelledChequeLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel,cancelledChequeLabel};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadNonIMPSPrimaryApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `documentsUploadNonIMPSPrimaryApplicant`, is used to upload various documents for a primary applicant in a non-IMPS application. \n\nThe method takes 12 parameters: \n1. `tabName`: the name of the tab to be selected\n2. `customerPhotoLabel` and other similar labels: these are used as strings to identify specific document types (e.g., customer photo, application form, etc.)\n3. `uploadCustomerPhotoLabel`: the label for uploading a customer photo\n4. `saveLabel`: the label for saving the uploaded documents\n5. `successMessage`: the expected success message after uploading and saving the documents\n\nThe method performs the following actions:\n- Selects the specified tab\n- Iterates through an array of document labels, selecting or deselecting check boxes under \"Document Library\" as needed\n- Uploads a customer photo using the provided label\n- Saves the uploaded documents using the provided save label\n- Verifies that the expected success message is displayed\n\nIf any exception occurs during these actions, the method catches and logs it as a test step failure.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadNonIMPSPrimaryApplicantWithPOA",
        "code": "public void documentsUploadNonIMPSPrimaryApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsMandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString panForm60Label, String ovdLabel, String uploadCustomerPhotoLabel,String downPaymentReceiptLabel,String cancelledChequeLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Upload Documents #\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel,poaLabel, applicationFormLabel, ecsMandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, panForm60Label, ovdLabel,downPaymentReceiptLabel,cancelledChequeLabel,\"Key Fact Statement\"};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\t\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadNonIMPSPrimaryApplicantWithPOA \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete Co applicant document lib details      \n\t */",
        "description": "This Java method, named `documentsUploadNonIMPSPrimaryApplicantWithPOA`, is used to upload documents for a non-IMPS primary applicant with POA. The method takes nine string parameters:\n\n1. `tabName`: the name of the tab to select\n2. `customerPhotoLabel`: the label for the customer photo document\n3. `poaLabel`: the label for the Power of Attorney (POA) document\n4. `applicationFormLabel`: the label for the application form document\n5. `ecsMandateLabel`: the label for the ECS Mandate document\n6. `proformaInvoiceLabel`: the label for the Proforma Invoice document\n7. `loanCumHypothecationAgreementLabel`: the label for the Loan Cum Hypothecation Agreement document\n8. `panForm60Label`: the label for the PAN Form 60 document\n9. `ovdLabel`: the label for the OVD document\n\nThe method performs the following steps:\n\n1. It selects the specified tab using the `selectTabs` method.\n2. It iterates through an array of document labels and checks or unchecks each checkbox under the \"Document Library\" section, using the `selectOrDeselectCheckBoxUnderDocumentLib` method.\n3. It uploads a customer photo document using the `documentToUpload` method.\n4. It clicks the \"Save\" button to save the uploaded documents.\n5. It verifies that the upload was successful by checking for a success message using the `verifySuccessMessage` method.\n\nIf any exception occurs during the execution of this method, it is caught and logged as a test step failure using the `testStepFailed` method.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsMandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String panForm60Label",
            "String ovdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadCoApplicant",
        "code": "public void documentsUploadCoApplicant(String tabName, String customerPhotoLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString primaryCustomerPhotoLabel, String ovdLabel, String panForm60Label,\n\t\t\t String primaryPanForm60Label, String primaryOvdLabel,\n\t\t\tString uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, primaryCustomerPhotoLabel, ovdLabel, panForm60Label,\n\t\t\t\t\tprimaryPanForm60Label, primaryOvdLabel,downPaymentReceiptLabel };\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadCoApplicant \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `documentsUploadCoApplicant`, uploads various documents for a co-applicant application. It takes 16 parameters: tab name, labels for different document types (e.g., customer photo, application form), and success message.\n\nThe method performs the following steps:\n\n1. Logs a test step information.\n2. Selects a specific tab based on the provided `tabName`.\n3. Iterates through an array of document labels and selects or deselects checkboxes under \"Document Library\" for each label (except for `uploadCustomerPhotoLabel` which is handled separately).\n4. Uploads the customer photo using `documentToUpload(uploadCustomerPhotoLabel)`.\n5. Clicks on the \"Save\" button.\n6. Verifies the success message.\n\nIf any exception occurs during these steps, it catches and logs the error as a test step failure.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String primaryCustomerPhotoLabel",
            "String ovdLabel",
            "String panForm60Label",
            "String primaryPanForm60Label",
            "String primaryOvdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "documentsUploadNonIMPSCoApplicantWithPOA",
        "code": "public void documentsUploadNonIMPSCoApplicantWithPOA(String tabName, String customerPhotoLabel,String poaLabel, String applicationFormLabel,\n\t\t\tString ecsmandateLabel, String proformaInvoiceLabel, String loanCumHypothecationAgreementLabel,\n\t\t\tString primaryCustomerPhotoLabel, String ovdLabel, String panForm60Label,\n\t\t\t String primaryPanForm60Label, String primaryOvdLabel,\n\t\t\tString uploadCustomerPhotoLabel,String downPaymentReceiptLabel, String cancelledChequeLabel,String primaryPoaLabel,String saveLabel,String successMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Document Details-----\");\n\t\t\tselectTabs(tabName);\n\n\t\t\tString[] arr = { customerPhotoLabel, poaLabel,applicationFormLabel, ecsmandateLabel, proformaInvoiceLabel,\n\t\t\t\t\tloanCumHypothecationAgreementLabel, primaryCustomerPhotoLabel, ovdLabel, panForm60Label,\n\t\t\t\t\tprimaryPanForm60Label, primaryOvdLabel,downPaymentReceiptLabel,cancelledChequeLabel,primaryPoaLabel,\"Primary Application Form\"};\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\n\t\t\tdocumentToUpload(uploadCustomerPhotoLabel);\n\t\t\tclickOnDocSaveButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in documentsUploadCoApplicant \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */\t\n\t\n/*\tpublic void primaryApplicantEcsAndSqcDetails(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\t\t\tverifyCurrentStageOfOpportunity(\"Post DO\");\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter ECS and Submit For QC Details #\");\n\t\t\t\n\t\t\twaitTime(5);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {\n\t\t\t\tclickMainButtons(componentName);\n\t\t\t\twaitTime(5);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitTime(5);\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(2);\n\t\t\t\tselectTabs(\"Details\");\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine2Label);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(2);\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\t\t\t} else {\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\t}\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\t// enterValueInEditDialogueBox(areaLocalityLabel,areaLocalityValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\t\n\t\t\t// enterValueInEditDialogueBox(actualInvoiceNoLabel,actualInvoiceNoValue);\n\t\t\t// enterDateInEditDialogueBox(actualInvoiceDateLabel,actualInvoiceDateValue);\n\t\t\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t\t{\n\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\t\t\t}\n\t        selectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\t        \n\t        \n\t        if (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\"))\n\t\t\t{\n\t    \tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t    \tclickOnButtonInPopup(saveLabel);\n\t\t\t}       \n\t        else\n            {\n\t          \tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t    \tclickOnButtonInPopup(saveLabel);\n                clickMainButtons(\"Submit for QC\");\n                clickOnButtonInRecallPopup(saveLabel);\n                waitForPageToLoad();\n            }\n\t        \n\t\t\t\n\t\t\t\n\t\t\tif (isElementPresent(GOR.reviewError)) {\n\t\t\t\tif (getText(GOR.reviewError).contains(\"File Barcode Validation Failed\")) {\n\t\t\t\t\ttestStepInfo(getText(GOR.reviewError));\n\t\t\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, ecsBarcodeValue);\n\t\t\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Permanent Address Applicant Field Succesfully entered\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}*/",
        "description": "This Java method is used to upload documents for a non-IMPSCo applicant with POA. The method takes several string parameters that represent various labels and values related to the document uploading process.\n\nHere's what the method does:\n\n1. It starts by printing out the label names of the documents to be uploaded.\n2. It then selects or deselects checkboxes under the Document Library for each of these documents using a loop.\n3. The method then calls another method (`documentToUpload`) to upload the customer photo document.\n4. After that, it clicks on the \"Save\" button and verifies a success message.\n\nIf an exception occurs during this process, the method catches it and logs an error with the test step failed.\n\nThe method also includes some comments and author information at the top.",
        "input": [
            "String tabName",
            "String customerPhotoLabel",
            "String poaLabel",
            "String applicationFormLabel",
            "String ecsmandateLabel",
            "String proformaInvoiceLabel",
            "String loanCumHypothecationAgreementLabel",
            "String primaryCustomerPhotoLabel",
            "String ovdLabel",
            "String panForm60Label",
            "String primaryPanForm60Label",
            "String primaryOvdLabel",
            "String uploadCustomerPhotoLabel",
            "String downPaymentReceiptLabel",
            "String cancelledChequeLabel",
            "String primaryPoaLabel",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "primaryApplicantEcsAndSqcDetails",
        "code": "public void primaryApplicantEcsAndSqcDetails(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\n\t\t\tverifyCurrentStageOfOpportunity(\"Post DO\");\n\t\t\ttestStepInfo(\"# Enter ECS and Submit For QC Details #\");\n/*\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {*/\n\t\t\tselectTabs(\"Details\");\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\t\tclickMainButtons(componentName);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tclickOnButton(editLabel);\n\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\n\t\t//\t}\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(10);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(3);\n\n\t\t\t\tselectTabs(\"Details\");\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\t\t\t\t\n\t\t\t\texpandArrows(\"FMS\");\n\n\t\t\t\texpandArrows(\"Additional Info Entry\");\n\t\t\t\t\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\t\t\t\n\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\n\t\t\t} else {\n\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\n\t\t\t}\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\n\t\t\tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\n\t\t\t}\n\n\t\t\tselectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(5);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\n\t\t\t\tclickMainButtons(\"Submit for QC\");\n\n\t\t\t\tclickOnButtonInRecallPopup(saveLabel);\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\n\t\t\t\t// clickMainButtons(\"Submit For QC\");\n\n\t\t\t\t// selectPopupCheckbox();\n\n\t\t\t\t// verifyErrorPopupWithoutFail();\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\n\t\t\t\t\tdo {\n\n\t\t\t\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\n\t\t\t\t\t\t\tString Errormessage = verifyHandleErrorMessageForBarcode();\n\n\t\t\t\t\t\t\tif (Errormessage.contains(\"File Barcode Validation Failed\")) {\n\n\t\t\t\t\t\t\t\trefreshPage();\n\n\t\t\t\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\t\t\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, generateRandomBarCode());\n\n\t\t\t\t\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\t\t\t\t} else if (Errormessage.contains(\"ECS required\")) {\n\n\t\t\t\t\t\t\t\tclickMainButtons(componentName);\n\n\t\t\t\t\t\t\t\twaitTime(5);\n\n\t\t\t\t\t\t\t\tclickOnButton(editLabel);\n\n\t\t\t\t\t\t\t\tString reECS = generateRandomBarCode();\n\n\t\t\t\t\t\t\t\tenterValueInField(ecsBarcodeLabel, reECS);\n\n\t\t\t\t\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", reECS);\n\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\t\t\t\t\twaitTime(3);\n\n\t\t\t\t\t\t\t\trefreshPage();\n\n\t\t\t\t\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\t\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\t\t\t\twaitTime(10);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\ttestStepFailed(\"Due to above errors : \" + Errormessage + \" , We cannot move further.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} while ((isElementPresent(GOR.error_sqcMethod)));\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"There is No error While change stage\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */",
        "description": "This Java method is used to complete the SQC (Secondary Quality Control) details for a primary applicant. The method takes in several string parameters that represent various labels and values related to the SQC process.\n\nThe method performs the following steps:\n\n1. Verifies the current stage of the opportunity is \"Post DO\".\n2. Enters ECS (Electronic Cash System) and submits it for QC.\n3. If the environment is UAT, selects the \"Details\" tab, expands the arrows for the permanent address applicant, and enters values in various fields.\n4. Saves the changes and waits for 10 seconds.\n5. If the environment is PREPROD, performs additional steps such as refreshing the page, selecting the \"Details\" tab, expanding arrows for Permanent Address Applicant, FMS, and Additional Info Entry, and entering values in various fields.\n6. Enters values in edit dialogue boxes for various fields like opportunity landmark, area locality, residence type, performa invoice number, performa invoice date, file barcode, and stage.\n7. Selects values from dropdown menus for residence type, stage, and dealer OTP bypass reason (if environment is UAT).\n8. Saves the changes and waits for 5 seconds.\n9. If an error occurs during the SQC process, it retries the process with a new file barcode until the error is resolved.\n\nThe method also includes some error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "coApplicantEcsAndSqcDetails",
        "code": "public void coApplicantEcsAndSqcDetails(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString primaryResidenceTypeLabel, String primaryResidenceTypeValue, String primaryZipcodeLabel,\n\t\t\tString primaryZipcodeValue, String ovdPrimaryAddressLine1Label, String ovdPrimaryAddressLine1Value,\n\t\t\tString ovdPrimaryAddressLine2Label, String ovdPrimaryAddressLine2Value, String ovdPrimaryAddressLine3Label,\n\t\t\tString ovdPrimaryAddressLine3Value, String primaryLandmarkLabel, String primaryLandmarkValue,\n\t\t\tString primaryAreaLocalityLabel, String primaryAreaLocalityValue, String performaInvoiceNumberLabel,\n\t\t\tString performaInvoiceNumberValue, String performaInvoiceDateLabel, String performaInvoiceDateValue,\n\t\t\tString actualInvoiceNoLabel, String actualInvoiceNoValue, String actualInvoiceDateLabel,\n\t\t\tString actualInvoiceDateValue, String stageLabel, String stageValue, String fileBarcodeLabel,\n\t\t\tString fileBarcodeValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----ECS and Submit For QC Details-----\");\n            waitTime(5);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {\n\t\t\t\tclickMainButtons(componentName);\n\t\t\t\twaitTime(5);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t}\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitTime(5);\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(2);\n\t\t\t\tselectTabs(\"Details\");\n\t\t\t\texpandArrows(\"Permanent Address Co-Applicant\");\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Co-Applicant\", ovdAddressLine1Label);\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\t\t\t} else {\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\t}\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\t// enterValueInEditDialogueBox(areaLocalityLabel, areaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(primaryResidenceTypeLabel, primaryResidenceTypeValue);\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\t\t\t{\n\t\t\t\tenterValueInEditDialogueBox(primaryZipcodeLabel, primaryZipcodeValue);\n\t\t\t}\n\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\"))\n\t\t\t{\n\t\t\t\tchooseValueFromSearchAndListField(primaryZipcodeLabel, primaryZipcodeValue);\n\t\t\t}\n\t\t\t\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine1Label, ovdPrimaryAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine2Label, ovdPrimaryAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdPrimaryAddressLine3Label, ovdPrimaryAddressLine3Value);\n\t\t\tenterValueInTextArea(primaryLandmarkLabel, primaryLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(primaryAreaLocalityLabel, primaryAreaLocalityValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\t// enterValueInEditDialogueBox(actualInvoiceNoLabel,actualInvoiceNoValue);\n\t\t\t// enterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\t\t\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\t\t\t}\n\t\t     selectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\t\t\n\t\t\t\n\t\t\t if (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\"))\n\t\t\t\t{\n\t\t    \tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t    \tclickOnButtonInPopup(saveLabel);\n\t\t\t\t}       \n\t\t        else\n\t            {\n\t\t          \tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t\t    \tclickOnButtonInPopup(saveLabel);\n\t                clickMainButtons(\"Submit for QC\");\n\t                clickOnButtonInRecallPopup(saveLabel);\n\t                waitForPageToLoad();\n\t            }\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/*if (isElementPresent(GOR.reviewError)) {\n\t\t\t\tif (getText(GOR.reviewError).contains(\"File Barcode Validation Failed\")) {\n\t\t\t\t\ttestStepInfo(getText(GOR.reviewError));\n\t\t\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, ecsBarcodeValue);\n\t\t\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Permanent Address Applicant Field Succesfully entered\");\n\t\t\t}*/\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in coApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in DO popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `coApplicantEcsAndSqcDetails`, appears to be a part of an automation testing framework for a web application. The method's purpose is to perform various actions on the application's user interface (UI) and verify that certain fields are populated correctly.\n\nHere's a brief summary of what the method does:\n\n1. It waits for 5 seconds before performing any actions.\n2. If the environment is UAT, it selects the specified tab, expands the arrows for the component, clicks on the edit button, enters values in specific fields (ECS barcode, OVD address lines, opportunity landmark, etc.), and saves the changes.\n3. If the environment is PREPROD, it performs similar actions but with some variations (e.g., selecting the \"Details\" tab and choosing a value from the search list for Pin Code).\n4. It enters values in specific fields (residence type, area locality, primary residence type, etc.) and selects values from dropdown menus.\n5. If the environment is UAT, it sets the stage to \"Post DO\" and saves the changes. Otherwise, it sets the stage to the specified value and clicks on the \"Submit for QC\" button.\n6. Finally, if there are any errors in the file barcode validation, it enters the correct value and saves the changes.\n\nThe method also includes some error handling using a `try-catch` block. If an exception occurs during the execution of the method, it will log the failure as a test step failed.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String primaryResidenceTypeLabel",
            "String primaryResidenceTypeValue",
            "String primaryZipcodeLabel",
            "String primaryZipcodeValue",
            "String ovdPrimaryAddressLine1Label",
            "String ovdPrimaryAddressLine1Value",
            "String ovdPrimaryAddressLine2Label",
            "String ovdPrimaryAddressLine2Value",
            "String ovdPrimaryAddressLine3Label",
            "String ovdPrimaryAddressLine3Value",
            "String primaryLandmarkLabel",
            "String primaryLandmarkValue",
            "String primaryAreaLocalityLabel",
            "String primaryAreaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyErrorMessageInDoPopup",
        "code": "public boolean verifyErrorMessageInDoPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above error,cannot proceed further\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInDoPopup\" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInDoPopup()`, verifies the presence of an error message in a popup and takes manual screenshots of each error message. If the error messages are found, it marks the test step as failed due to these errors. The method returns a boolean flag indicating whether the error messages were found or not.\n\nHere's a step-by-step breakdown:\n\n1. It checks if the specified XPath expression (`#xpath=//div[contains(@class,'toast')]//h2`) is displayed within 4 seconds.\n2. If the element is displayed, it takes manual screenshots of each error message in the popup and marks the test step as failed due to these errors.\n3. If no error messages are found, it logs a success message indicating that there were no errors while changing the stage.\n4. In case of any exceptions, it logs a failure message with the exception details.\n\nThe method returns a boolean flag (`flag`) indicating whether the error messages were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyErrorMessageInSqcPopup",
        "code": "public boolean verifyErrorMessageInSqcPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in DO popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInSqcPopup()`, verifies the presence of an error message in a specific popup (DO popup) and takes screenshots of each error if present. The method:\n\n1. Waits for the page to load.\n2. Waits for the specified error text to be displayed on the page.\n3. Checks if the error is displayed. If it is, sets a flag to `true`.\n4. Retrieves the list of errors and takes screenshots of each error message.\n5. If the flag is still `true`, marks the test step as failed due to the errors.\n6. If no errors are found, logs an information message indicating that there are no errors.\n\nThe method returns the value of the flag, which indicates whether any errors were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyErrorMessageInDoPopupWithoutFail",
        "code": "public boolean verifyErrorMessageInDoPopupWithoutFail(String expectedMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString value = errorsList.get(i).getText();\n\t\t\t\t\tif(value.equalsIgnoreCase(expectedMessage))\n\t\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\ttestStepFailed(expectedMessage+\" expected validation not fire instead got \"+value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepInfo(\"Due to above error,cannot proceed further\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInDoPopupWithoutFail\" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify error message in popup\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyErrorMessageInDoPopupWithoutFail`, verifies the expected error message in a popup window. It checks if an element with the specified XPath (`\"#xpath=//div[contains(@class,'toast')]//h2\"`) is displayed within 4 seconds using the `isElementDisplayed` method. If the element is displayed, it retrieves the text of each error message and compares it to the expected message. If a match is found, it takes a manual screenshot with the error message and continues execution. If no match is found or if the element is not displayed within 4 seconds, the test fails. The method returns a boolean flag indicating whether the verification was successful or not.",
        "input": [
            "String expectedMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyErrorMessageInSqcPopupWithoutFail",
        "code": "public boolean verifyErrorMessageInSqcPopupWithoutFail(String expectedMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields'] | //div//strong[text()='Review the following fields'] | //div//strong[text()='Review the errors on this page.']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[1]\";\n\t\t\t\tString value = findWebElement(errorList).getText().trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" expected validation not fire instead got \" + value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorMessageInSqcPopupWithoutFail`, is used to verify that an expected error message appears in a specific popup (SQC) without causing the test to fail. \n\nThe method waits for the page to load and then waits for a specified element (error list) to be displayed on the page. If the element is displayed, it extracts the text from the first list item and compares it with the expected message provided as an input parameter. If the messages match, it takes a manual screenshot. If they don't match or if the error list is not displayed, it marks the test step as failed.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during its execution. In case of an exception, it marks the test step as failed and returns the result.",
        "input": [
            "String expectedMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyErrorMessageInSqcPopupWithoutFail1",
        "code": "public boolean verifyErrorMessageInSqcPopupWithoutFail1(String expectedMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields'] | //div//strong[text()='Review the following fields'] | //div//strong[text()='Review the errors on this page.']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[1]\";\n\t\t\t\tString value = findWebElement(errorList).getText().trim();\n\t\t\t\tif (value.contains(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" expected validation not fire instead got \" + value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify status of document\n\t * @param         :  fieldName is the document name\n\t * @return        :  text is return the document status\n\t */",
        "description": "This Java method, `verifyErrorMessageInSqcPopupWithoutFail1`, verifies if a specific error message is displayed in an SQC popup. \n\nThe method takes one parameter, `expectedMessage`, which is the expected error message to be verified. It uses various Selenium WebDriver methods such as `waitForPageToLoad()`, `waitForElement()`, and `isElementDisplayed()` to ensure that the page has loaded and the error message element is displayed.\n\nIf the error message is displayed, it checks if the text of the error message contains the expected message. If it does, it takes a manual screenshot with the error message as part of the file name. If it doesn't, it fails the test step with an error message indicating that the expected validation did not fire and instead got a different value.\n\nIf the error message is not displayed, it also fails the test step with an error message indicating that there is no error while entering the fields.\n\nThe method returns a boolean flag indicating whether the verification was successful or not.",
        "input": [
            "String expectedMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyStatusInDoclib",
        "code": "public String verifyStatusInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='Status:']/following-sibling::dd[1]\";\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(text_field);\n\t\t\t\t\tmanualScreenshot(text + \" status is displayed in \" + fieldName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \" + text + \" instead of \" + expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyStatusInDoclib\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to select opp id in print Email Do pop up\n\t * @return        :  flag is return true or false\n\t */",
        "description": "This Java method, `verifyStatusInDoclib`, verifies the status of a specific field (`fieldName`) in a document library. It uses XPath to locate the element and then checks if the displayed text matches the expected value. If the text matches, it takes a manual screenshot and highlights the element; otherwise, it fails the test step. The method also handles exceptions that may occur during execution.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectPrintEmailDoOpp",
        "code": "public void selectPrintEmailDoOpp(String opportunity) {\n\t\ttry {\n\t\t\tString field = opportunity + \"#xpath=//a[text()='\" + opportunity\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::td//span[contains(@class,'checkbox')]\";\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tclickOn(field);\n\t\t\t\ttestStepPassed(opportunity + \" Successfully selected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + opportunity);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectPrintEmailDoOpp\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify document not present\n\t * @param         :  labelName is the document name\n\t */",
        "description": "This Java method, `selectPrintEmailDoOpp`, appears to be a part of a test automation script. The method takes a string parameter `opportunity` and performs the following actions:\n\n1. It constructs an XPath expression based on the input `opportunity` string.\n2. It checks if an element matching the constructed XPath is displayed within 10 seconds using the `isElementDisplayed` method.\n3. If the element is displayed, it clicks on the element using the `clickOn` method and logs a success message with the opportunity name.\n4. If the element is not displayed, it logs a failure message with the opportunity name.\n\nThe method also includes error handling using a try-catch block to catch any exceptions that may occur during execution. If an exception occurs, it logs a failure message with the exception class name and type.",
        "input": [
            "String opportunity"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyDocNotPresent",
        "code": "public void verifyDocNotPresent(String labelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//span[@class='checkbox-custom']//following-sibling::span[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (!isElementDisplayed(targetField, 3)) {\n\t\t\t\tmanualScreenshot(labelName + \" document is not present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocNotPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify document is present\n\t * @param         :  labelName is the document name\n\t */",
        "description": "This Java method, `verifyDocNotPresent`, verifies whether a specific document (identified by its label name) is not present on a web page. The method attempts to load the page, then searches for an element with the specified XPath and waits for it to be displayed within a certain time limit (3 seconds). If the element is not found or does not display within the allotted time, it takes a manual screenshot as evidence of the failure. If the element is present, it marks the test step as failed. The method catches any exceptions that may occur during execution and reports them as a test failure.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyDocIsPresent",
        "code": "public void verifyDocIsPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[@class='checkbox-custom']//following-sibling::span[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (isElementDisplayed(targetField, 3)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" document is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocIsPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to select check box\n\t * @param         :  labelName is the check box name\n\t */",
        "description": "This Java method, `verifyDocIsPresent`, verifies if a specific document (identified by its label name) is present on the webpage. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the target field based on the provided `labelName`.\n2. It waits for the element to be present and then checks if it's displayed.\n3. If the element is displayed, it scrolls to that element and takes a manual screenshot as confirmation.\n4. If the element is not displayed (i.e., the document is not present), it marks the test step as failed.\n\nThe method also includes error handling using a `try-catch` block. If any exception occurs during the execution of this method, it will be caught and the test step will be marked as failed with an appropriate error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "selectChangeECSCheckBox",
        "code": "public void selectChangeECSCheckBox(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectChangeECSCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify field is enabled\n\t * @param         :  labelName is the field name\n\t */",
        "description": "This Java method, `selectChangeECSCheckBox`, is used to select a checkbox with a given label name in an Salesforce (ECSC) application. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label name to locate the checkbox.\n2. It waits for the element to be present using the `waitForElement` method and then checks if the element is actually present.\n3. If the checkbox is present, it scrolls to the element using `scrollToWebElement`.\n4. It checks if the checkbox is selected or not. If it's not selected, it selects it by clicking on the element using `clickOnSpecialElement`. \n5. After selecting the checkbox, it takes a manual screenshot with the label name as the filename.\n6. If the checkbox is already selected, it fails the test step.\n7. If the checkbox is not present, it also fails the test step.\n\nIf any exception occurs during the execution of this method, it catches the exception, writes an error message to the log file, and then fails the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyFieldIsEnabled",
        "code": "public void verifyFieldIsEnabled(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//button[text()='\" + labelName + \"'] | //label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tif (findWebElement(targetField).isEnabled()) {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is enabled as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsEnabled\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify waiver reason of document\n\t * @param         :  fieldName is the document name\n\t * @param         :  expectedValue is the reason\n\t * @return        :  text is return the waiver reason\n\t */",
        "description": "This Java method, `verifyFieldIsEnabled`, verifies whether a specific field (identified by its label name) on a web page is enabled or not. It uses WebDriver's `findWebElement` and `isElementDisplayed` methods to locate and check if the element is present and displayed. If the element is found and displayed, it checks if the element is enabled using the `isEnabled` method. If the field is not present or not displayed, or if it's disabled, the test fails with an appropriate error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyWaiverReasonInDoclib",
        "code": "public String verifyWaiverReasonInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='Status:']/following-sibling::dd[1]\";\t\t\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod(text_field);\n\t\t\t\t\tmanualScreenshot(\"\" + text + \" is displayed in \" + fieldName + \" \");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \"+text+\" instead of \"+expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextfieldfromFOS\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  15/06/2022\n\t * Description    :  method to get link text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `verifyWaiverReasonInDoclib`, verifies the waiver reason in a DocLib application. It takes two parameters: `fieldName` and `expectedValue`. \n\nThe method first constructs an XPath expression to locate the field with the given name. It then checks if the element is displayed on the screen within a 5-second timeout. If it's displayed, it scrolls to the element, retrieves its text value, and compares it to the expected value. \n\nIf the values match, it highlights the field and takes a manual screenshot for verification. If they don't match or if the field is not displayed, it fails the test step with an appropriate message. The method also catches any exceptions that may occur during execution and reports them as a failed test step.\n\nThe method returns the actual text value of the field.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getLinkTextFieldValue",
        "code": "public String getLinkTextFieldValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span//a\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element,5)) {\n\t\t\t\tscrollToElement(Element);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethodManualScreenShot(Element, labelName);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLinkTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete SQC details      \n\t */",
        "description": "This Java method, `getLinkTextFieldValue`, is used to retrieve the text value of a link field with a specified label name. It uses Selenium WebDriver and Robotium automation frameworks to interact with the web application.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided label name.\n2. It waits for the element to be displayed (using `waitForElement` and `isElementDisplayed`) and scrolls to it (using `scrollToElement` and `scrollToWebElement`).\n3. If the element is displayed, it highlights the element using a manual screenshot method (`highLighterMethodManualScreenShot`), captures the text value of the link field using `getText`, and takes a manual screenshot.\n4. If the element is not displayed, it marks the test step as failed.\n\nThe method returns the captured text value as a string.\n\nNote that this method also includes some error handling, catching any exceptions that may occur during execution and marking the test step as failed if an exception is thrown.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "primaryApplicantSqcDetails",
        "code": "public void primaryApplicantSqcDetails(String editLabel, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Submit For QC Details-----\");\n            waitForPageToLoad();\n\t\t\tselectOptionfromSideArrowButton(editLabel);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\t\t\t// enterValueInEditDialogueBox(areaLocalityLabel,areaLocalityValue);\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\t\t\tenterValueInEditDialogueBox(actualInvoiceNoLabel, actualInvoiceNoValue);\n\t\t\tenterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/07/2022\n\t * Description    :  method to get value from edit popup\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `primaryApplicantSqcDetails`, appears to be a test automation method that simulates user input in an application's UI. The method takes numerous string parameters that represent various labels and values used in the application.\n\nThe method performs the following actions:\n\n1. Logs a test step info message with the text \"-----Submit For QC Details-----\".\n2. Waits for the page to load.\n3. Selects an option from a side arrow button based on the `editLabel` parameter.\n4. Enters values in edit dialogue boxes for various fields, such as:\n\t* OVD Address Line 1, 2, and 3\n\t* Opportunity Landmark\n\t* Opportunity Area Locality\n\t* Residence Type\n\t* Performa Invoice Number and Date\n\t* Actual Invoice Number and Date\n\t* Stage\n\t* File Barcode\n5. Selects values from dropdown lists in edit boxes for:\n\t* Residence Type\n\t* Stage\n6. Clicks the \"Save\" button in a popup.\n\nIf any exception occurs during these actions, the method catches it and logs a test step failure message with the error class name.",
        "input": [
            "String editLabel",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getTextFromEditPopup",
        "code": "public String getTextFromEditPopup(String labelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//div[contains(@class,'slds-is-editing')]//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//span//..//following-sibling::div//span//span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = findWebElement(targetField).getText();\n\t\t\t\tmanualScreenshot(labelName + \" Field Value is \" + fieldValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromEditPopup\" + e.getClass().getName());\n\t\t}\n\t\treturn fieldValue;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki s\n\t * @created Date  :  01/03/2022\n\t * Description    :  method to complete banking details      \n\t */",
        "description": "This Java method is used to retrieve the text value from an edit popup field in a UI application. \n\nThe method takes a `labelName` as input, which is likely the label associated with the edit popup field. It uses Selenium WebDriver to interact with the application and perform the following actions:\n\n1. Waits for the page to load.\n2. Locates the target edit popup field using an XPath expression that contains the provided `labelName`.\n3. Waits for the element to be displayed.\n4. If the element is displayed, it retrieves the text value of the field and takes a manual screenshot with the label name and the retrieved text value.\n5. If the element is not displayed, it fails the test step.\n\nThe method returns the retrieved text value as a string. If any exceptions occur during the execution of the method, it fails the test step.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "bankingDetailsWithoutIMPS",
        "code": "public void bankingDetailsWithoutIMPS(String tabName, String componentName, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountNumberLabel, String bankAccountNumberValue,String reEnterBankAccountNumberLabel, String accountTypeLabel,\n\t\t\tString accountTypeValue,\n\t\t\tString saveLabel,String successMessage1) {\n\t\ttry {\n\t\t\tverifyCurrentStageOfOpportunity(\"DO Preparation\");\t\t\t\t\n\t\t\ttestStepInfo(\"# Enter Banking-UPI Mandate Details #\");\n\t\t\tselectTabs(tabName);\t\t\n\t\t\tString arrow = \"#xpath=//span[text()='Banking-UPI Mandate']/parent::button\";\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t\tselectValueFromDropdownInEmandate(\"UPI Bypass Reason\", \"Customer Refused UPI Mandate\");\n\t\t\t\tclickOnButton(\"Bypass UPI Mandate\");\n\t\t\t}\n\t\t\t\n\t\t\ttestStepInfo(\"# Enter Non-IMPS Banking Details #\");\n\t\t\texpandArrows(componentName);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(componentName);\n\t\t\tString field = bankNameLabel + \"#xpath=//label[text()='\" + bankNameLabel + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\t}else {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\t}\n\t\t\tenterValueInField(bankAccountNumberLabel, bankAccountNumberValue);\t\t\n\t\t\tenterValueInField(reEnterBankAccountNumberLabel, bankAccountNumberValue);\n\t\t\tselectValueFromDropdownInIMPSPopup(accountTypeLabel, accountTypeValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tverifySuccessMessage(successMessage1);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bankingDetailsWithoutIMPS \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `bankingDetailsWithoutIMPS`, is a test automation method that simulates the process of entering non-IMPS banking details. It takes several string parameters to specify various UI elements and values.\n\nThe method performs the following steps:\n\n1. Verifies the current stage of an opportunity.\n2. Selects a tab based on the provided `tabName`.\n3. Enters UPI mandate details (bypassing IMPS).\n4. Expands arrows, refreshes the page, waits for it to load, and then expands arrows again.\n5. Enters values in various fields:\n\t* Bank name: uses a lookup field in IMPSPopup if the field is enabled; otherwise, refreshes the page and tries again.\n\t* Bank account number: enters the value twice (once as-is and once re-entered).\n\t* Account type: selects a value from a dropdown.\n6. Saves the changes and verifies that a success message appears.\n\nIf any step fails or throws an exception, the method catches it and reports the failure.",
        "input": [
            "String tabName",
            "String componentName",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountNumberLabel",
            "String bankAccountNumberValue",
            "String reEnterBankAccountNumberLabel",
            "String accountTypeLabel",
            "String accountTypeValue",
            "String saveLabel",
            "String successMessage1"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyCheckBoxSelected",
        "code": "public void verifyCheckBoxSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//input| //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div//input | //div[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\t\t\t\t\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\t\t\n\t\t\t\tif (findWebElement(checkBox).isSelected()) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxSelected`, is used to verify the selected state of a checkbox with a given label name on a web page. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label name to locate the corresponding checkbox.\n2. It waits for the checkbox element to be present using the `waitForElement` method and then checks if the element is actually present using the `isElementPresent` method.\n3. If the checkbox is present, it scrolls to the element using the `scrollToWebElement` method and checks its selected state using the `isSelected` method of the `findWebElement` method.\n4. If the checkbox is already checked, it takes a manual screenshot with the label name as part of the filename.\n5. If the checkbox is not checked or is not present at all, it fails the test step.\n\nThe method also catches any exceptions that may occur during its execution and logs them to a log file before failing the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyIMPSInitiatedMessage",
        "code": "public void verifyIMPSInitiatedMessage(String impsMsg) {\n\t\ttry {\n\t\t\tString impsInitiated = \"impsInitiated#xpath=//div[text()='\" + impsMsg + \"']\";\n\t\t\twaitForElement(impsInitiated, 5);\n\t\t\tif (isElementDisplayed(impsInitiated, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared : \" + impsMsg);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture \" + impsMsg + \" message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in verifyIMPSInitiatedMessage \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyIMPSInitiatedMessage`, is used to verify if an initiated message from IMPS (Integrated Mobile Payment System) appears on the UI. \n\nThe method takes a string parameter `impsMsg` which represents the expected message from IMPS. It constructs a XPath expression using this message and waits for 5 seconds until the element with this XPath expression is displayed. If the element is displayed, it captures a manual screenshot to verify that the message has appeared successfully. If not, it logs an error stating that it was unable to capture the expected message.\n\nIn case of any exception during the execution of this method, it logs an error with the type of exception and its class name.",
        "input": [
            "String impsMsg"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "toClickOppChargesTab",
        "code": "public void toClickOppChargesTab(String labelName) {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//span[text()='\"+labelName+\"']/parent::a\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickOppChargesTab\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickOppChargesTab`, is used to click on a specific tab or link with the given label name. \n\nHere's what it does:\n\n1. It takes a string parameter `labelName` which represents the label of the tab/link to be clicked.\n\n2. It uses an XPath expression to locate the element (tab/link) with the given label name.\n\n3. If the element is present, it scrolls to that element, waits for the page to load, and then clicks on it using the `Actions` class from Selenium WebDriver.\n\n4. If the element is not present, it fails the test step with a message indicating that the link is not displayed.\n\n5. It also catches any exceptions that may occur during the execution of this method and fails the test step if an exception occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "toClickOppCharges",
        "code": "public void toClickOppCharges(String labelName) {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//a[text()='\"+labelName+\"']/..//..//..//a[contains(text(),'OC')]\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickOppCharges\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickOppCharges`, is used to click on a link with the specified label name. The method uses Selenium WebDriver to perform the following actions:\n\n1. It tries to find an element on the page based on an XPath expression that matches the provided label name.\n2. If the element is present and visible, it scrolls to the element, waits for the page to load, and then clicks on the element using mouse hover and click actions.\n3. If the element is not present or not visible, it fails the test step with a message indicating that the link was not displayed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "toClickUCM",
        "code": "public void toClickUCM() {\n\t\ttry {\n\t\t\tString Value = \"#xpath=//span[text()='Universal Charge Mapping']/..//a\";\n\t\t\twaitForElement(Value, 5);\n\t\t\tif (isElementPresent(Value)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitForPageToLoad();\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"UCM link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toClickUCM\" + e.getClass().getName());\n\t\t}\t\n\t}",
        "description": "This Java method, `toClickUCM`, attempts to click on a specific Universal Charge Mapping (UCM) link within the current web page. The method uses various WebDriver and Selenium Webdriver methods to:\n\n1. Wait for an element with the specified XPath (`#xpath=//span[text()='Universal Charge Mapping']/..//a`) to be present.\n2. Scroll to that element if it's not already visible.\n3. Move the mouse cursor over the element using `Actions` class, and then simulate a click on the element.\n4. Wait for the page to load after clicking the UCM link.\n\nIf the UCM link is not displayed or any exceptions occur during the execution of this method, the test case will fail with an appropriate error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyOppChargesNotPresent",
        "code": "public void verifyOppChargesNotPresent(String chargeNameValue, String chargeAmountValue) {\n\t\ttry {\n\t\t\tString chargeName = \"#xpath=//span[text()='Charge Name']/..//..//..//..//..//..//a[text()='\"\n\t\t\t\t\t+ chargeNameValue + \"']\";\n\t\t\tString chargeAmount = \"#xpath=//span[text()='Charge Amount']/..//..//..//..//..//..//span[text()='\"\n\t\t\t\t\t+ chargeAmountValue + \"']\";\n\t\t\twaitForElement(chargeName, 3);\n\t\t\tif (!isElementDisplayed(chargeName) && isElementDisplayed(chargeAmount)) {\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\tchargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is not displayed as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(chargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyOppChargesNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOppChargesNotPresent`, verifies that a specific charge and its corresponding amount are not displayed as expected. It takes two string parameters: `chargeNameValue` and `chargeAmountValue`. \n\nThe method uses XPath expressions to locate the charge name and amount elements on the page. It then waits for the charge name element to be displayed, and if it is not displayed but the charge amount is, it takes a manual screenshot with an error message. If both are or neither are displayed as expected, it also takes a manual screenshot with an error message. \n\nIf any exception occurs during the execution of this method, it calls another method `testStepFailed` to report the failure and includes the type of exception that occurred.",
        "input": [
            "String chargeNameValue",
            "String chargeAmountValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyOppChargesIsPresent",
        "code": "public void verifyOppChargesIsPresent(String chargeNameValue, String chargeAmountValue) {\n\t\ttry {\n\t\t\tString chargeName = \"#xpath=//span[text()='Charge Name']/..//..//..//..//..//..//a[text()='\"\n\t\t\t\t\t+ chargeNameValue + \"']\";\n\t\t\tString chargeAmount = \"#xpath=//span[text()='Charge Amount']/..//..//..//..//..//..//span[text()='\"\n\t\t\t\t\t+ chargeAmountValue + \"']\";\n\t\t\twaitForElement(chargeName, 3);\n\t\t\tif (isElementDisplayed(chargeName) && isElementDisplayed(chargeAmount)) {\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\tchargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is displayed as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(chargeNameValue + \"charge with \" + chargeAmountValue + \" charge amount is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyOppChargesIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOppChargesIsPresent`, verifies that a specific charge name and amount are displayed on the page. The method takes two string parameters: `chargeNameValue` and `chargeAmountValue`. It uses XPath expressions to locate the elements with the specified charge name and amount, then waits for these elements to be displayed using the `waitForElement` method. If both elements are displayed, it takes a manual screenshot as proof of the expected behavior. If either element is not displayed, it fails the test step. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String chargeNameValue",
            "String chargeAmountValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//label[text()='\" + labelName + \"']/..//input | //button[text()='\" + labelName + \"'] | //span[text()='\" + labelName + \"'] \";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresent`, verifies whether a field with the given label name is present on the current web page. It uses XPath to locate the element (which can be an input field, button, or span) and then waits for it to be displayed. If the element is found and displayed within the specified timeout, it highlights the element and takes a manual screenshot. If the element is not found or is not displayed, it marks the test as failed. The method also catches any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyTimerIsPresent",
        "code": "public void verifyTimerIsPresent(String time) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[contains(text(),'\" + time+ \"')]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\thighLighterMethodManualScreenShot(targetField, time);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Timer is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTimerIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTimerIsPresent`, verifies if a timer with the specified time is present on a webpage. It uses an XPath expression to locate the element and then checks if it's displayed within a certain timeframe (10 seconds). If the timer is found, it takes a manual screenshot using the `highLighterMethodManualScreenShot` method. If not, it marks the test step as failed. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String time"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyCheckBoxNotSelected",
        "code": "public void verifyCheckBoxNotSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux'] | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is not checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"verifyCheckBoxNotSelected failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxNotSelected`, is used to verify that a checkbox with the given label name is not selected. It uses Selenium WebDriver and WebdriverIO library to interact with the web page.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label name to locate the checkbox element.\n2. It waits for the checkbox element to be present using `waitForElement` method, with a timeout of 10 seconds.\n3. If the checkbox is present, it scrolls to the element and checks if the checkbox is not selected using `isCheckBoxSelected` method.\n4. If the checkbox is not selected, it takes a manual screenshot as proof of verification.\n5. If the checkbox is selected or not present, it marks the test step as failed with an appropriate error message.\n\nThe method also handles exceptions that may occur during execution and logs them to a log file if necessary.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyEmiCardCountIsPresent",
        "code": "public void verifyEmiCardCountIsPresent(String value) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[text()='EMI Card']/following-sibling::div[text()='\" + value + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tborderHighLighterMethod(targetField);\n\t\t\t\tmanualScreenshot(\"EMI Card count is present as expected \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value+\" EMI Card count is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyEmiCardCountIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyEmiCardCountIsPresent`, verifies if an EMI Card count with a specific value is present on the webpage. It uses XPath to locate the element and then checks if it's displayed within 5 seconds. If the element is found and displayed, it highlights the border of the element using the `borderHighLighterMethod` and takes a manual screenshot with the message \"EMI Card count is present as expected [value]\". If the element is not found or not displayed, it fails the test step with an error message. The method also catches any exceptions that may occur during execution and reports them as a failed test step.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "deleteValueInEditDialogueBox",
        "code": "public void deleteValueInEditDialogueBox(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//..//..//a[@class='deleteAction']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\tclickOn(field);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in deleteValueInEditDialogueBox \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `deleteValueInEditDialogueBox`, is used to delete a value from an edit dialogue box. It takes a string parameter `labelName` which represents the label of the field to be deleted.\n\nHere's what the method does:\n\n1. It constructs a XPath expression by combining the `labelName` with some predefined text.\n2. It waits for the element specified in the XPath expression to be displayed (up to 10 seconds).\n3. If the element is displayed, it scrolls to that element and highlights it (taking a manual screenshot of the highlighted element).\n4. Then, it clicks on the delete action button associated with the field.\n5. After clicking, it waits for the page to load completely.\n\nIf any of these steps fail, the method catches the exception and marks the test step as failed.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "changeLookupValueInEditPopup",
        "code": "public void changeLookupValueInEditPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tdeleteValueInEditDialogueBox(labelName);\n\t\t\twaitForPageToLoad();\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//..//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li//div[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Model Name Selected : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(lookupValue + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectModelName \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `changeLookupValueInEditPopup`, changes the lookup value in an edit popup. It takes two parameters: `labelName` and `value`. \n\nHere's a step-by-step breakdown of what the method does:\n\n1. It deletes any existing value for the given `labelName`.\n2. It waits for the page to load.\n3. It locates the input field associated with the given `labelName` using an XPath expression.\n4. If the field is displayed, it scrolls to the field, highlights it (for manual screenshot purposes), and types in the new value.\n5. After typing in the new value, it waits for the page to load again.\n6. It then checks if a lookup value with the same name as the inputted value is present on the page. If it is, it selects that value by clicking on it.\n7. If the lookup value is not present, it fails the test step.\n8. If the input field is not displayed, it also fails the test step.\n\nThe method catches any exceptions that may occur during its execution and reports a failure if an exception is thrown.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyQcStatusInDoclib",
        "code": "public String verifyQcStatusInDoclib(String fieldName, String expectedValue) {\n\t\tString text = \" \";\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//h3//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']/..//..//..//dt[text()='QC Status:']/following-sibling::dd[1]\";\t\t\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\ttext = getText(text_field);\n\t\t\t\tif (text.equals(expectedValue)) {\n\t\t\t\t\thighLighterMethod1(text_field);\n\t\t\t\t\tmanualScreenshot(\"\" + text + \" is displayed in \" + fieldName + \" QC Status.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" has status as \"+text+\" instead of \"+expectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyQcStatusInDoclib\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyQcStatusInDoclib`, verifies the QC status of a specific field (`fieldName`) in a document library. It uses an XPath expression to locate the element, then checks if it's displayed and its value matches the expected one. If everything is as expected, it takes a manual screenshot and highlights the element; otherwise, it fails the test step with a descriptive message. The method returns the actual text value of the QC status.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyFieldIsNotPresent",
        "code": "public void verifyFieldIsNotPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//button[text()='\" + labelName + \"'] | //label[text()='\" + labelName + \"']//following-sibling::div//textarea\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (!isElementDisplayed(targetField, 5)) {\n\t\t\t\tmanualScreenshot(labelName + \" field is not present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsNotPresent`, checks if a specific field with the given label name is not present on the web page. It uses XPath to locate the field and then waits for it to be displayed within a certain time limit (10 seconds). If the field is not displayed after waiting, it takes a manual screenshot to verify that the field is indeed missing. If the field is displayed, it marks the test step as failed. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "searchAndselectValueFromInsurance",
        "code": "public void searchAndselectValueFromInsurance(String labelName, String value) {\t\n\t\ttry {\n\t\t\tString dropdown = labelName + \"#xpath=//Input[contains(@placeholder,'\" + labelName + \"')]\";\n\t\t\tString dropdownList = value + \" value#xpath=//span[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(dropdown, 10);;\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\ttypeIn(dropdown, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tfindWebElement(dropdown).clear();;\n\t\t\t\tfindWebElement(dropdown).sendKeys(value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + labelName + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchAndselectValueFromInsurance \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `searchAndselectValueFromInsurance`, searches for a specific value within an insurance-related dropdown menu and selects it. \n\nThe method takes two parameters: `labelName` (the name of the label associated with the dropdown) and `value` (the value to be searched and selected). \n\nIt uses various WebDriver methods such as `waitForElement`, `isElementDisplayed`, `typeIn`, `findWebElement`, `clear`, `sendKeys`, `clickOnSpecialElement`, and `manualScreenshot` to perform the search and selection. \n\nIf the value is found and selected successfully, it takes a manual screenshot for verification. If not, it reports a test step failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterValueInTextArea",
        "code": "public void enterValueInTextArea(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//following-sibling::div//textarea | //span[text()='\" + labelName + \"']/..//..//textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextArea \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextArea`, enters a given value into a text area field on a web page. It takes two parameters: the label name of the text area and the value to be entered.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the text area field based on the provided label name.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n4. It enters the given value into the text area field using the `typeIn` method.\n5. It waits for the page to load completely using the `waitForPageToLoad` method.\n6. It takes a manual screenshot of the current screen using the `highLighterMethodManualScreenShot` method, highlighting the entered text area field.\n7. If the element is not displayed after a certain time (10 seconds), it fails the test step with an error message.\n\nIf any exception occurs during the execution of these steps, the method catches it and fails the test step with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterNomineeDob",
        "code": "public void enterNomineeDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"\n\t\t\t\t\t+ labelName + \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterNomineeDob \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterNomineeDob`, is used to input a value into a nominee date of birth field on a web page. \n\nThe method takes two parameters: `labelName` (the label text of the field) and `value` (the value to be entered). \n\nIt first constructs an XPath expression to locate the field based on the provided label name. It then waits for the element to be displayed, scrolls to it if necessary, enters the specified value into the field, and waits for the page to load again. \n\nIf any of these steps fail (e.g., the field is not present), the method will report a test step failure with an appropriate error message. If an unexpected exception occurs during execution, the method will also report a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "InsuranceDetails",
        "code": "public void InsuranceDetails(String tabName, String componentName, String searchInsurancePremiumMastersLabel,\n\t\t\tString insuranceValue, String nomineeNameLabel, String nomineeNameValue, String nomineeDOBLabel,\n\t\t\tString nomineeDOBValue, String nomineeRelationLabel, String nomineeRelationValue, String nomineePhoneLabel,\n\t\t\tString nomineePhoneValue, String nomineeAddressLabel, String nomineeAddressValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Insurance Details-----\");\n\t\t\tselectTabs(tabName);\n\t\t\texpandArrows(componentName);\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(componentName);\n\t\t\twaitTime(10);\n\t\t\tsearchAndselectValueFromInsurance(searchInsurancePremiumMastersLabel, insuranceValue);\n\t\t\tenterValueInField(nomineeNameLabel, nomineeNameValue);\n\t\t\tenterNomineeDob(nomineeDOBLabel, nomineeDOBValue);\n\t\t\tselectValueFromDropdownInEmandate(nomineeRelationLabel, nomineeRelationValue);\n\t\t\tenterValueInField(nomineePhoneLabel, nomineePhoneValue);\n\t\t  //enterValueInTextArea(nomineeAddressLabel, nomineeAddressValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in InsuranceDetails \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to automate the process of filling out insurance details. It takes 17 input parameters:\n\n* `tabName`: The name of the tab to select\n* `componentName`: The component name (likely a dropdown or checkbox) to expand\n* `searchInsurancePremiumMastersLabel` and `insuranceValue`: Label and value for searching and selecting an insurance premium master\n* Various labels and values for nominee information, including:\n\t+ `nomineeNameLabel` and `nomineeNameValue`\n\t+ `nomineeDOBLabel` and `nomineeDOBValue`\n\t+ `nomineeRelationLabel` and `nomineeRelationValue`\n\t+ `nomineePhoneLabel` and `nomineePhoneValue`\n\t+ `nomineeAddressLabel` and `nomineeAddressValue`\n* `saveLabel`: The label of the \"Save\" button to click\n\nThe method performs the following actions:\n\n1. Logs a test step message indicating that it is entering insurance details.\n2. Selects the specified tab.\n3. Expands the component with the given name.\n4. Waits for the page to load.\n5. Expands the component again ( likely to ensure all data is loaded).\n6. Waits for 10 seconds.\n7. Searches and selects a value from the insurance premium masters list using the provided label and value.\n8. Enters values in various fields, including:\n\t+ Nominee name\n\t+ Nominee date of birth\n\t+ Nominee relation\n\t+ Nominee phone number\n9. Clicks the \"Save\" button.\n\nIf any exceptions occur during this process, the method catches them and logs a test step failure message with the exception class name.",
        "input": [
            "String tabName",
            "String componentName",
            "String searchInsurancePremiumMastersLabel",
            "String insuranceValue",
            "String nomineeNameLabel",
            "String nomineeNameValue",
            "String nomineeDOBLabel",
            "String nomineeDOBValue",
            "String nomineeRelationLabel",
            "String nomineeRelationValue",
            "String nomineePhoneLabel",
            "String nomineePhoneValue",
            "String nomineeAddressLabel",
            "String nomineeAddressValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "enterDateInBanking",
        "code": "public void enterDateInBanking(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\"+labelName+\"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field,10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDateInBanking \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterDateInBanking`, is used to input a value into a field on a web page. The method takes two parameters: `labelName` and `value`. \n\n- It first constructs an XPath expression by concatenating the provided label name with some predefined strings.\n- Then it waits for the element to be displayed, scrolls to it if necessary, types in the provided value, and waits for the page to load.\n- If the field is not present, the method fails the test step. \n- If any exception occurs during this process, the method also fails the test step with a message indicating that there was an error in the `enterDateInBanking` method.\n\nThis method seems to be part of a larger automation framework for testing web applications, possibly using Selenium WebDriver.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyExShowroomPriceValidation",
        "code": "public boolean verifyExShowroomPriceValidation(String expectedMessage1,String expectedMessage2) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] | //div//span[text()='Review the following errors']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList1 = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[1]\";\n\t\t\t\tString value1 = findWebElement(errorList1).getText().trim();\n\t\t\t\tif (value1.equalsIgnoreCase(expectedMessage1)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value1);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage1 + \" expected validation not fire instead got \" + value1);\n\t\t\t\t}\n\t\t\t\tString errorList2 = \"Error list#xpath=(//ul[contains(@class,'error')]/li)[2]\";\n\t\t\t\tString value2 = findWebElement(errorList2).getText().trim();\n\t\t\t\tif (value2.equalsIgnoreCase(expectedMessage2)) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + \" : \" + value2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage2 + \" expected validation not fire instead got \" + value2);\n\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExShowroomPriceValidation \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyExShowroomPriceValidation`, is used to validate the error messages displayed on a webpage after attempting to enter invalid data into certain fields. The method takes two expected error message strings as input parameters.\n\nHere's what it does:\n\n1. It waits for the page to load and then checks if an error message with a specific XPath is displayed.\n2. If the error message is found, it extracts the text content of the first two list items (assuming they are error messages) using their respective XPaths.\n3. It then compares these extracted error messages with the expected error messages provided as input parameters.\n4. If the actual error messages match the expected ones, it takes a manual screenshot and marks the test step as passed. Otherwise, it fails the test step and logs an error message.\n5. If no error message is found, it also fails the test step and logs an error message.\n\nThe method returns a boolean flag indicating whether the validation was successful or not.",
        "input": [
            "String expectedMessage1",
            "String expectedMessage2"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getOppErrorMsgAndCompare",
        "code": "public String getOppErrorMsgAndCompare(String expectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//p[@class='cCustomSalesPath']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" error message present as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" error message not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opp error not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOppErrorMsgAndCompare.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getOppErrorMsgAndCompare`, is used to verify the presence of an error message on a webpage and compare it with the expected value. Here's a brief summary:\n\n1. The method takes a `String` parameter `expectedValue` which represents the expected error message.\n2. It attempts to locate an element on the page using XPath and waits for it to be displayed (up to 10 seconds).\n3. If the element is found, it scrolls to the element, highlights it, and retrieves its text content.\n4. The method then compares the actual text with the expected value. If they match, it takes a manual screenshot and marks the test step as passed. Otherwise, it fails the test step.\n5. If the element is not found or an exception occurs during the process, the method fails the test step.\n\nThe method returns the actual text content of the error message as a `String`.",
        "input": [
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clickOnDeclarationChkBox",
        "code": "public void clickOnDeclarationChkBox() {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[@name='declarationChkBox']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOn(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Declaration check box is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the Declaration check box\");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDeclarationChkBox`, attempts to click on a declaration checkbox element in a web application. It uses Selenium WebDriver's built-in methods to:\n\n1. Wait for the element with the specified XPath (`#xpath=//input[@name='declarationChkBox']`) to be present and visible.\n2. Check if the element is displayed within a certain time limit (10 seconds).\n3. If the element is displayed, scroll to it and then click on it.\n4. If any of these steps fail, the method will report a test step failure with an appropriate error message.\n\nNote that this method uses try-catch blocks to handle any exceptions that may occur during execution, such as if the element is not found or if there's an issue clicking on it.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getMkpOppId",
        "code": "public String getMkpOppId() {\n\t\tString oppId=\"\";\n\t\ttry {\n\t\t\tString link = \"#xpath=(//div[text()='Opportunity']/..//a)[1]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\toppId=getText(link);\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tmanualScreenshot(\"MKP Opportunity ID \"+oppId);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"MKP Opportunity link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getMkpOppId \" + e.getClass().getName());\n\t\t}\n\t\treturn oppId;\n\t}",
        "description": "This Java method, `getMkpOppId`, retrieves the opportunity ID from a web page and returns it as a string. It uses Selenium WebDriver to interact with the page, waiting for an element to be present before attempting to retrieve the text. If the element is not found or any other exception occurs, the method will fail the test step. The method also takes a manual screenshot of the opportunity ID if it's successfully retrieved.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyMkpOppId",
        "code": "public void verifyMkpOppId(String oppId) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//div[text()='Opportunity']/..//a[text()='\" + oppId+ \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\thighLighterMethod1(link);\n\t\t\t\tmanualScreenshot(\"MKP Opportunity Id Created \"+oppId);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"MKP Opportunity Id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyMkpOppId \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMkpOppId`, verifies the presence of an opportunity ID on a webpage and takes a screenshot if it's present. \n\nThe method takes a string parameter `oppId` which represents the opportunity ID to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression that checks for an HTML element with text equal to the provided `oppId`. The XPath expression is used to locate the element on the webpage.\n2. It waits for the element to appear on the webpage using the `waitForElement` method, and sets a timeout of 10 seconds.\n3. If the element is present, it calls another method `highLighterMethod1` (likely to highlight the element) and takes a manual screenshot using the `manualScreenshot` method with a descriptive name including the `oppId`.\n4. If the element is not present, it marks the test step as failed.\n5. If any exception occurs during the execution of the method, it catches the exception and marks the test step as failed.\n\nIn summary, this method verifies the presence of an opportunity ID on a webpage and takes a screenshot if it's found, or fails the test if it's not found.",
        "input": [
            "String oppId"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clickOnFMSLink",
        "code": "public String clickOnFMSLink() {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString customerName = \"customerName #xpath=//span[text()='Opportunity Details']/..//..//..//span[text()='FMS']/..//..//a\";\n\t\t\twaitForElement(customerName, 10);\n\t\t\tif (isElementDisplayed(customerName, 10)) {\n\t\t\t\tscrollToWebElement(customerName);\n\t\t\t\tvalue=getText(customerName);\n\t\t\t\thighLighterMethodManualScreenShot(customerName, value);\n\t\t\t\tclickOn(customerName);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"FMS Link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFMSLink. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnFMSLink`, attempts to click on a link labeled \"FMS\" and returns the text of that link. The method uses various WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `getText`, `highLighterMethodManualScreenShot`, and `clickOn` to interact with the web page.\n\nHere's what the method does:\n\n1. It defines a string variable `customerName` which is an XPath expression that identifies the \"FMS\" link.\n2. It waits for the element identified by the `customerName` XPath expression to be present on the page (up to 10 seconds).\n3. If the element is displayed, it scrolls the element into view and gets its text value using `getText`.\n4. It takes a manual screenshot of the \"FMS\" link using `highLighterMethodManualScreenShot`.\n5. It clicks on the \"FMS\" link using `clickOn`.\n6. After clicking, it waits for the page to load completely.\n7. If the element is not displayed (i.e., the link is not present), it fails the test step with a message indicating that the FMS link is not present.\n8. If an exception occurs during the execution of the method, it fails the test step with a message including the type of exception that occurred.\n\nThe method returns the text value of the \"FMS\" link as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String ScrollElement, String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div//..//button | //span[text()='\" + fieldLabel+\"']/parent::div//..//span//following::button\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 20);\n\t\t\tscrollToElement(scrollElement);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\tscrollToElement(editOption);\n\t\t\t\tscrollToWebElement(editOption);\n \n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t    waitTime(5);\n\t\t\t    scrollToElement(scrollElement);\n\t\t\t    waitTime(elementLoadWaitTime);\n\t\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\t\twaitTime(2);\n \n\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Clicked Edit Icon Of \" + fieldLabel);\n\t\t\t\t}\n \n\t\t\t} else {\n \n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditOptionWithTitle. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle`, simulates a click on an edit button with a specific title. The method takes two parameters: `ScrollElement` and `fieldLabel`. It first waits for the page to load, then attempts to find the edit button with the given title using XPath. If the element is found, it scrolls to the element, clicks on it, and waits for the edit option to be available again. If the element is not present, it takes a manual screenshot and marks the test step as failed. If an exception occurs during the process, it logs the failure with additional information.",
        "input": [
            "String ScrollElement",
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input | //label[contains(text(),'\"+labelName+\"')]//../following-sibling::div//input | //div//span[contains(text(),'\"+labelName+\"')]//parent::button\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n \n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//parent::label//parent::div//child::div//span[contains(text(),'\" + value + \"')] | //label[text()='\"+labelName+\"']//parent::lightning-grouped-combobox//parent::div//child::div//span[contains(text(),'\"+value+\"')]\";\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" search icon is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField of \"+labelName+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField`, is used to select a value from a search field and list. The method takes two parameters: `labelName` (the name of the label associated with the search field) and `value` (the actual value to be selected).\n\nHere's what the method does:\n\n1. It checks if the provided `value` is not empty.\n2. If it's not empty, it constructs an XPath expression for the search field using the `labelName`.\n3. It waits for the search field to load, scrolls to it, and highlights it (if present).\n4. It types in the value into the search field, clears any existing text, and sets the new value.\n5. It searches for the selected value by clicking on the corresponding icon.\n6. If the value is found, it clicks on the link associated with that value.\n7. If there are any errors or exceptions during the process, it fails the test step.\n\nThe method uses various helper methods (e.g., `waitForElement`, `scrollbycordinates`, `highLighterMethod`, `typeIn`, `waitTime`) to perform these actions and handles potential exceptions using a try-catch block.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clickOnDocSaveButton",
        "code": "public void clickOnDocSaveButton(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//article[@data-aura-class='cUploadFileCard']//button[text()='\" + value + \"']\";\n\t    \twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDocSaveButton`, simulates a user clicking on a button with a specific text value in a web page. The method takes a string parameter `value` which is used to construct an XPath expression to locate the button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the input `value` with some static parts.\n2. It waits for the element identified by the XPath expression (up to 10 seconds).\n3. If the element is displayed, it:\n\t* Scrolls to the element\n\t* Scrolls to the element's web element\n\t* Highlights the element using a separate method (`highLighterMethod`)\n\t* Simulates clicking on the element using `clickOnSpecialElement`\n\t* Waits for 5 seconds before proceeding\n4. If the element is not displayed, it marks the test step as failed with an error message.\n5. In case of any exception (e.g., if the button is not found), it also marks the test step as failed with a generic error message.\n\nThe method uses various utility methods (`waitForElement`, `isElementDisplayed`, `scrollToElement`, `scrollToWebElement`, `highLighterMethod`, and `clickOnSpecialElement`) to perform these steps.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyFieldIsDisabled",
        "code": "public void verifyFieldIsDisabled(String labelName) {\n        try {            \n            String targetField = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input | //button[text()='\" + labelName + \"'] \";\n            waitForElement(targetField, 10);\n            if (isElementDisplayed(targetField, 5)) {\n                String getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n                if (getareaDisabledAttributeValue.equals(\"true\")) {\n                \tborderHighLighterMethod(targetField);\n                    manualScreenshot(labelName + \" field is disabled as expected\");\n                } else {\n                    testStepFailed(labelName + \" field is not disabled\");\n                }\n            } else {\n                testStepFailed(labelName + \" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in verifyFieldIsDisabled\" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `verifyFieldIsDisabled`, verifies that a specific field or button with the given label name is disabled. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the element based on its label and parent div/button.\n2. It waits for the element to be displayed using the `waitForElement` method, allowing up to 10 seconds for the element to appear.\n3. If the element is displayed, it checks if the element's \"disabled\" attribute has a value of \"true\". \n4. If the element is disabled as expected, it highlights the field using a border and takes a manual screenshot with a comment indicating that the field is disabled as expected.\n5. If the element is not disabled or is not present at all, it marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it also marks the test step as failed and logs the error message along with the class name of the exception.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getEmptyTextValue",
        "code": "public void getEmptyTextValue(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']\";\t\t\t\n\t\t\tString Element1 = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span/span\";\t\t\t\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tString text = getText(Element1);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"Value is not populated in \" + labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field has value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getEmptyTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method `getEmptyTextValue`:\n\nThis method checks if a specific text value is empty or not, based on a given label name. It uses XPath expressions to locate an element with the specified label name and then verifies if the text within that element is empty or contains some value. If the text is empty, it takes a manual screenshot and marks the test step as failed. If the text is not empty, it also marks the test step as failed. The method uses various utility methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethod` to perform these checks.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "getEmptyLinkTextFieldValue",
        "code": "public void getEmptyLinkTextFieldValue(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']\";\t\t\t\n\t\t\tString Element1 = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div/span\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tString text = getText(Element1);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"Value is not populated in \" + labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field has value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getEmptyLinkTextFieldValue.Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `getEmptyLinkTextFieldValue`, takes a string parameter `labelName` and checks if the text field with the given label name has an empty value or not. \n\nHere's what it does:\n\n1. It first tries to locate the element using XPath and waits for it to be displayed.\n2. If the element is found, it scrolls to the element, highlights it (using a highlighter method), and gets the text of the next sibling element.\n3. If the text is empty, it takes a manual screenshot with a message indicating that the value is not populated in the given label name.\n4. If the text is not empty, it marks the test step as failed with a message indicating that the field has a value.\n5. If the element is not found, it also marks the test step as failed with a message indicating that the field is not present.\n6. In case of any exception, it catches the exception and marks the test step as failed with an error message including the exception class name.\n\nIn summary, this method checks if a text field with a given label name has an empty value or not, and reports the result accordingly.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyFieldIsReadOnly",
        "code": "public void verifyFieldIsReadOnly(String labelName) {\n        try {            \n            String targetField = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n            waitForElement(targetField, 10);\n            if (isElementDisplayed(targetField, 5)) {\n                String getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"readonly\");\n                if (getareaDisabledAttributeValue.equals(\"true\")) {\n                \tborderHighLighterMethod(targetField);\n                    manualScreenshot(labelName + \" field is read only as expected\");\n                } else {\n                    testStepFailed(labelName + \" field is not read only\");\n                }\n            } else {\n                testStepFailed(labelName + \" field is not present\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in verifyFieldIsReadOnly\" + e.getClass().getName());\n        }\n    }",
        "description": "This Java method, `verifyFieldIsReadOnly`, verifies that a specific field on a web page is read-only. Here's what it does:\n\n1. It takes a `String` parameter `labelName`, which represents the label name of the field to be verified.\n2. It uses an XPath expression to locate the input field corresponding to the given label name.\n3. It waits for the element to be displayed using the `waitForElement` method.\n4. If the element is displayed, it checks if the \"readonly\" attribute of the input field is set to `\"true\"` by calling `findWebElement` and then getting the attribute value.\n5. If the attribute value is indeed `\"true\"`, it calls a separate method `borderHighLighterMethod` (likely for visual verification) and takes a manual screenshot with a message indicating that the field is read-only as expected.\n6. If the attribute value is not `\"true\"`, it marks the test step as failed with an error message indicating that the field is not read-only.\n7. If the element is not displayed, it also marks the test step as failed with an error message indicating that the field is not present.\n\nThe method catches any exceptions that may occur during execution and marks the test step as failed with a generic error message if an exception is thrown.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifySearchAndListFieldEmpty",
        "code": "public void verifySearchAndListFieldEmpty(String labelName) {\n\t\ttry {\n\t\t\tString link = labelName + \"#xpath=//span[text()='\"+labelName+\"']//parent::label//following-sibling::div//ul[@class='orderedList']//span[@class='pillText']\";\n\t\t\tString clearBtn = labelName + \"#xpath=//span[text()='\"+labelName+\"']//parent::label//following-sibling::div//a[@class='deleteAction']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(clearBtn);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is Empty\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + labelName +\" Clear button\");\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchAndListFieldEmpty`, verifies that a search and list field is empty by attempting to find an element with a specific XPath and then performing certain actions if the element is found. The method takes a `String` parameter `labelName` which is used to construct the XPath of the elements to be searched.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs two XPaths: one for the search field and another for the clear button.\n2. It waits for the search field element to be displayed (up to 10 seconds).\n3. If the search field is displayed, it scrolls to that element, highlights it using a `highLighterMethod`, and then clicks on the clear button.\n4. After clicking the clear button, it waits for 5 seconds.\n5. If the search field is not displayed after waiting (i.e., the field is empty), it logs a test step as \"passed\" with a message indicating that the field is empty.\n6. If any exceptions occur during the execution of these steps, it logs a test failure with a message indicating that the operation failed.\n\nThe method uses various utility methods like `waitForElement`, `isElementDisplayed`, `scrollToElement`, `scrollToWebElement`, and `highLighterMethod` which are not shown in this code snippet.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyExpectedValidationInSqcPopup",
        "code": "public boolean verifyExpectedValidationInSqcPopup(String labelName, Boolean expectedCondition) {\n\t\tboolean flag = expectedCondition;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the following fields']\";\n\t\t\tString fieldError = \"Error Header#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//ancestor::div//li[contains(@class,'help')]\";\n\t\t\tString errorValue = null;\n\t\t\twaitForPageToLoad();\n\t\t\tif (!flag) {\n\t\t\t\twaitForElement(error, 4);\n\t\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\t\tmanualScreenshot(\"Got Validation Message under as  \" + labelName + \" Field is \" + (i + 1)\n\t\t\t\t\t\t\t\t+ \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t\terrorValue = errorsList.get(i).getText().trim();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation not Fired.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\t\tmanualScreenshot(\"Got Validation : \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t\terrorValue = errorsList.get(i).getText().trim();\n\t\t\t\t\t}\n\t\t\t\t\ttestStepFailed(\"Got Validation : \" + errorValue + \" , Due to this Error Cannot Move Further\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"Validation Not Fired as Expected\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method verifies whether the expected validation message is displayed in an SQC popup. It takes two parameters: `labelName` and `expectedCondition`. The method waits for the page to load, then checks if the expected condition is met (i.e., the validation message is displayed or not). If the expected condition is true, it verifies that the error message is displayed and captures screenshots of each error message. If the expected condition is false, it checks if the error message is not displayed and reports a test step failure if it is. The method returns the original `expectedCondition` value.",
        "input": [
            "String labelName",
            "Boolean expectedCondition"
        ],
        "output": "boolean"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clearTextInCustomerDetails",
        "code": "public void clearTextInCustomerDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tfindWebElement(field).clear();\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInCustomerDetails \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clearTextInCustomerDetails`, takes two string parameters: `labelName` and `value`. It is used to clear the text input field associated with a specific label name on a web page. Here's a breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding input field.\n2. It waits for the element (input field) to be displayed using the `waitForElement` method.\n3. If the `value` parameter is not empty, it checks if the input field is displayed and scrollable. If so:\n\t* It types in the provided `value` into the input field using the `typeIn` method.\n\t* It waits for a short duration (2 seconds) using the `waitTime` method.\n\t* It clears the text from the input field using the `clear` method.\n\t* It takes a manual screenshot of the highlighted element (input field) and label name using the `highLighterMethodManualScreenShot` method.\n4. If the input field is not present, it fails the test step with an error message.\n5. In case any exception occurs during the execution of this method, it catches the exception and fails the test step with a corresponding error message.\n\nIn summary, this method is used to clear text from an input field associated with a specific label name on a web page.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyHandleErrorMessageForBarcode",
        "code": "public String verifyHandleErrorMessageForBarcode() {\n\t\tboolean flag = false;\n\t\tString errorValue=null;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//span[text()='Review the errors on this page.'] |  //div//span[text()='Review the following errors'] | //div//span[text()='Review the following fields']\";\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\terrorValue=errorsList.get(i).getText().trim();\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepInfo(\"Due to above errors : \"+errorValue +\" , We cannot move further.\");\n\t\t\t\t}\n\t\t\t} \n\t\t\telse {\n\t\t\t\ttestStepInfo(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInSqcPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn errorValue;\n\t}",
        "description": "This Java method, `verifyHandleErrorMessageForBarcode`, is used to verify the error message displayed after attempting to review errors on a page. The method checks if an error message is displayed and if so, retrieves the list of errors, takes manual screenshots of each error, and returns the error value. If no errors are found, it logs a success message. In case of any exceptions, it logs a failure message with the exception details.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "primaryApplicantEcsAndSqcDetailsWithValidation",
        "code": "public void primaryApplicantEcsAndSqcDetailsWithValidation(String tabName, String componentName, String editLabel,\n\t\t\tString ecsBarcodeLabel, String ecsBarcodeValue, String saveLabel, String ovdAddressLine1Label,\n\t\t\tString ovdAddressLine1Value, String ovdAddressLine2Label, String ovdAddressLine2Value,\n\t\t\tString ovdAddressLine3Label, String ovdAddressLine3Value, String opportunityLandmarkLabel,\n\t\t\tString opportunityLandmarkValue, String opportunityAreaLocalityLabel, String opportunityAreaLocalityValue,\n\t\t\tString residenceTypeLabel, String residenceTypeValue, String areaLocalityLabel, String areaLocalityValue,\n\t\t\tString performaInvoiceNumberLabel, String performaInvoiceNumberValue, String performaInvoiceDateLabel,\n\t\t\tString performaInvoiceDateValue, String actualInvoiceNoLabel, String actualInvoiceNoValue,\n\t\t\tString actualInvoiceDateLabel, String actualInvoiceDateValue, String stageLabel, String stageValue,\n\t\t\tString fileBarcodeLabel, String fileBarcodeValue) {\n\t\ttry {\n\n\t\t\tverifyCurrentStageOfOpportunity(\"Post DO\");\n\t\t\ttestStepInfo(\"# Enter ECS and Submit For QC Details #\");\n/*\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectTabs(tabName);\n\t\t\t\texpandArrows(componentName);\n\t\t\t\tclickOnButton(editLabel);\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\t\t\t} else {*/\n\n\t\t\t\tclickMainButtons(componentName);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tclickOnButton(editLabel);\n\n\t\t\t\tenterValueInField(ecsBarcodeLabel, ecsBarcodeValue);\n\n\t\t\t\tenterValueInField(\"Re-Enter ECS Barcode\", ecsBarcodeValue);\n\n\t\t//\t}\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(10);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(3);\n\n\t\t\t\tselectTabs(\"Details\");\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\twaitTime(3);\n\n\t\t\t\texpandArrows(\"FMS\");\n\n\t\t\t\texpandArrows(\"Additional Info Entry\");\n\n\t\t\t//\tEditWithoption(ovdAddressLine1Label);\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\twaitTime(5);\n\n\t\t\t\tchooseValueFromSearchAndListField(\"Pin Code\", \"411014 PUNE\");\n\n\t\t\t\tenterValueInEditDialogueBox(\"Zip Code\", \"411014\");\n\n\t\t\t} else {\n\n\t\t\t\tselectOptionfromSideArrowButton(editLabel);\n\n\t\t\t}\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine1Label, ovdAddressLine1Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine2Label, ovdAddressLine2Value);\n\n\t\t\tenterValueInEditDialogueBox(ovdAddressLine3Label, ovdAddressLine3Value);\n\n\t\t\tenterValueInEditDialogueBox(opportunityLandmarkLabel, opportunityLandmarkValue);\n\n\t\t\tenterValueInEditDialogueBox(opportunityAreaLocalityLabel, opportunityAreaLocalityValue);\n\n\t\t\tselectValueFromDropdownInEditBox(residenceTypeLabel, residenceTypeValue);\n\n\t\t\tenterValueInEditDialogueBox(performaInvoiceNumberLabel, performaInvoiceNumberValue);\n\n\t\t\tenterDateInEditDialogueBox(performaInvoiceDateLabel, performaInvoiceDateValue);\n\n\t\t\n\n\t\t\tenterValueInEditDialogueBox(fileBarcodeLabel, fileBarcodeValue);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\n\t\t\t\tselectValueFromDropdownInEditBox(\"Dealer OTP Bypass Reason\", \"SMS/OTP not triggered to the dealer.\");\n\n\t\t\t}\n\n\t\t\tselectValueFromDropdownInEditBox(\"Vehicle Delivered\", \"Yes\");\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(5);\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\"))\n\n\t\t\t{\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, \"Post DO\");\n\t\t\t\tclickMainButtons(\"Submit for QC\");\n\n\t\t\t\tclickOnButtonInRecallPopup(saveLabel);\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\n\t\t\t\texpandArrows(\"Permanent Address Applicant\");\n\n\t\t\t\tclickEditOptionWithTitle(\"Permanent Address Applicant\", ovdAddressLine1Label);\n\n\t\t\t\tselectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t\n\t\t\t\twaitTime(5);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in primaryApplicantEcsAndSqcDetails \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `primaryApplicantEcsAndSqcDetailsWithValidation`, appears to be a test automation script for a web application. The method takes several input parameters related to the UI elements of the application, such as tab names, labels, and values.\n\nThe method performs the following actions:\n\n1. Verifies that the current stage of the opportunity is \"Post DO\".\n2. Enters ECS and Submit For QC Details.\n3. If the environment is UAT, selects the tabs, expands the arrows, clicks on buttons, enters values in fields, and selects options from dropdowns.\n4. If the environment is PREPROD, refreshes the page, waits for it to load, selects tabs, expands arrows, and enters values in edit dialogue boxes.\n5. Enters values in various fields, such as permanent address lines 1-3, opportunity landmark, area locality, residence type, performance invoice number, actual invoice date, and file barcode.\n6. Selects options from dropdowns for dealer OTP bypass reason (UAT only) and vehicle delivered (yes).\n7. Clicks on the save button multiple times to complete the workflow.\n\nThe method also includes error handling using a `try-catch` block, which catches any exceptions that occur during the execution of the script and logs an error message with the test step failed.",
        "input": [
            "String tabName",
            "String componentName",
            "String editLabel",
            "String ecsBarcodeLabel",
            "String ecsBarcodeValue",
            "String saveLabel",
            "String ovdAddressLine1Label",
            "String ovdAddressLine1Value",
            "String ovdAddressLine2Label",
            "String ovdAddressLine2Value",
            "String ovdAddressLine3Label",
            "String ovdAddressLine3Value",
            "String opportunityLandmarkLabel",
            "String opportunityLandmarkValue",
            "String opportunityAreaLocalityLabel",
            "String opportunityAreaLocalityValue",
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String areaLocalityLabel",
            "String areaLocalityValue",
            "String performaInvoiceNumberLabel",
            "String performaInvoiceNumberValue",
            "String performaInvoiceDateLabel",
            "String performaInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String stageLabel",
            "String stageValue",
            "String fileBarcodeLabel",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyAndPrintErrorMessageUnderBankFields",
        "code": "public void verifyAndPrintErrorMessageUnderBankFields(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\"+labelName+\"']/..//..//..//..//..//div[@role='listbox']//following-sibling::div\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tString errorMessage = getText(errorField);\n\t\t\t\tif (errorMessage.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorField);\n\t\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + errorMessage+\" in \"+labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" validation is not fired insstead got \" + errorMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Error message not displayed under \"+labelName+\" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageUnderBankFields. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageUnderBankFields`, is used to verify if an error message is displayed under a specific field with the given label name and expected message. Here's what it does:\n\n1. It attempts to locate an element using an XPath expression that specifies the label name.\n2. If the element is displayed (i.e., visible), it retrieves the text content of the element (the error message).\n3. It then compares the retrieved error message with the expected message. If they match, it highlights the error field and takes a manual screenshot with a descriptive title.\n4. If the messages don't match or if the error field is not displayed, it reports a test step failure with an appropriate message.\n\nThe method also catches any exceptions that may occur during its execution and reports a test step failure with the exception details.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyCreditCardComponent",
        "code": "public void verifyCreditCardComponent(String fieldName) {\n\t\ttry {\n\t\t\tString text_field = \"\" + fieldName + \" #xpath=//b[text()='\" + fieldName + \"']\";\n\t\t\tif (isElementDisplayed(text_field, 5)) {\n\t\t\t\tscrollToWebElement(text_field);\n\t\t\t\tmanualScreenshot(fieldName + \" credit card component is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" credit card component is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCreditCardComponent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCreditCardComponent`, verifies the presence of a credit card component on a web page. It takes a string parameter `fieldName` which represents the field name to be searched for.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `fieldName` with a static text.\n2. It checks if the element is displayed using the `isElementDisplayed` method, and waits up to 5 seconds for it to appear.\n3. If the element is present, it scrolls to that element using the `scrollToWebElement` method.\n4. It takes a manual screenshot of the component as expected.\n5. If the element is not present, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during execution and fails the test step if an exception is thrown.",
        "input": [
            "String fieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "clickToggleButton",
        "code": "public void clickToggleButton(String optionToClick) {\n\t\ttry {\n\t\t\tString toggleBtn = \"'\" + optionToClick + \"' navigation option #xpath=//span[text()='\"+optionToClick+\"']//parent::label//span[contains(@id,'toggle')]//span[1]\";\n\t\t\twaitForElement(toggleBtn, 10);\n\t\t\tif (isElementDisplayed(toggleBtn, 5)) {\t\t\t\n\t\t\t\tif (findWebElement(toggleBtn).isEnabled()){\n\t\t\t\t\thighLighterMethod1(toggleBtn);\n\t\t\t\t\tclickOn(toggleBtn);\n\t\t\t\t\tmanualScreenshot(optionToClick + \" button is clicked\");\n\t\t\t\t}else {\n\t\t\t\t\ttestStepFailed(optionToClick + \" button is disabled\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(optionToClick + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickToggleButton. Exception: \" + e.getClass());\n\t\t}\n\t}",
        "description": "This Java method, `clickToggleButton`, attempts to click a toggle button with the specified option text using Selenium WebDriver and TestNG. \n\nIt takes a string parameter `optionToClick` which is the text of the toggle button to be clicked.\n\nThe method:\n\n1. Creates an XPath locator for the toggle button based on the provided option text.\n2. Waits up to 10 seconds for the element to appear.\n3. If the element is displayed, it checks if the button is enabled.\n4. If the button is enabled, it highlights the button using `highLighterMethod1`, clicks the button using `clickOn`, and takes a manual screenshot with the option text appended to the filename.\n5. If the button is disabled, it marks the test step as failed with a message indicating that the button was disabled.\n6. If the element is not displayed, it marks the test step as failed with a message indicating that the button was not present.\n7. If any exception occurs during the process, it catches the exception and marks the test step as failed with a message describing the exception.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "verifyExpandArrowNotPresent",
        "code": "public void verifyExpandArrowNotPresent(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']//parent::button\";;\n\t\t\twaitForElement(arrow, 3);\n\t\t\tif (!isElementDisplayed(arrow, 3)) {\n\t\t\tmanualScreenshot(fieldLabel+\" is not present as expected\");\n\t\t\t}  else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in verifyExpandArrowsNotPresent. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyExpandArrowNotPresent`, verifies that an expand arrow icon is not present on a webpage for a given field label. It uses Selenium WebDriver to perform the verification.\n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the provided `fieldLabel` with a specific XPath syntax.\n2. It waits up to 3 seconds for the element matching the constructed XPath expression to be displayed using the `waitForElement` method.\n3. If the element is not displayed within the specified time, it takes a manual screenshot and marks the test step as failed with a message indicating that the expand arrow was not present as expected.\n4. If the element is displayed, it marks the test step as failed with a message indicating that the expand arrow was present when it should not have been.\n\nThe method also catches any exceptions that may occur during execution and logs an information message with the exception details if an error occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "searchInExtendedWarranties",
        "code": "public void searchInExtendedWarranties(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()='\"+ labelName +\"']//following::div/input[contains(@placeholder,'Search Available Extended Warranties')]\";\n\t\t\twaitForElement(field, 30);;\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field,value );\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString lookupValue = value + \"#xpath=//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 30)) {\n\t\t\t\t\tclickOnSpecialElement(lookupValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Extended Warranty Selected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in customerSearchAddress \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `searchInExtendedWarranties`, searches for a specific value within an extended warranty search functionality. It takes two string parameters: `labelName` and `value`. The method attempts to:\n\n1. Construct an XPath expression based on the provided `labelName`.\n2. Wait for the element identified by the XPath expression to be displayed.\n3. If the element is displayed, scroll to it, type in the specified `value`, and wait for the page to load.\n4. Check if a lookup value (constructed by appending the provided `value` to an XPath expression) is displayed within 30 seconds. If it is, click on the special element associated with this value.\n5. If the lookup value is not displayed, mark the test step as failed.\n6. If any of the above steps fail, catch the exception and mark the test step as failed.\n\nThe method also includes some additional logging and error handling mechanisms to ensure that any issues encountered during execution are properly reported.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "opportunityPage_FOS",
        "function_name": "insuranceAndExtendedWarrantyDetails",
        "code": "public void insuranceAndExtendedWarrantyDetails(String doProcessAndCrossSellLabel, String insuranceAndExtendedWarrantyLabel, String declarationOfGoodHealthLabel,\n\t\t\tString declarationOfGoodHealthValue, String searchInsurancePremiumMastersLabel,\n\t\t\tString searchInsurancePremiumMastersValue, String searchGroupCare360Label, String searchGroupCare360Value,\n\t\t\tString searchHdfcLifeGroupSurakshaLabel, String searchHdfcLifeGroupSurakshaValue, String nomineeNameLabel,\n\t\t\tString nomineeNameValue, String nomineeDobLabel, String nomineeDobValue, String nomineeGenderLabel,\n\t\t\tString nomineeGenderValue, String nomineeRelationLabel, String nomineeRelationValue,\n\t\t\tString nomineePhoneLabel, String nomineePhoneValue, String availableExtendedWarrantyLabel,\n\t\t\tString availableExtendedWarrantyValue, String manufacturerWarrantyLabel, String manufacturerWarrantyValue,\n\t\t\tString dealerWarrantyLabel, String dealerWarrantyValue, String saveLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"-----Insurance Details-----\");\n\t\t\tselectTabs(doProcessAndCrossSellLabel);\n\t\t\texpandArrows(insuranceAndExtendedWarrantyLabel);\n\t\t\tselectValueFromDropdownInEditBox(declarationOfGoodHealthLabel, declarationOfGoodHealthValue);\n\t\t\tsearchAndselectValueFromInsurance(searchInsurancePremiumMastersLabel,\n\t\t\t\t\tsearchInsurancePremiumMastersValue);\n\t\t\tsearchAndselectValueFromInsurance(searchGroupCare360Label, searchGroupCare360Value);\n\t\t\t\n\t\t/*\tcustomerPageFosRevamp.customerSearchAddress(searchInsurancePremiumMastersLabel,\n\t\t\t\t\tsearchInsurancePremiumMastersValue);\n\t\t\tcustomerPageFosRevamp.customerSearchAddress(searchGroupCare360Label, searchGroupCare360Value);*/\n\t\t\t\n\t\t\t\n\t\t\tsearchAndselectValueFromInsurance(searchHdfcLifeGroupSurakshaLabel,\n\t\t\t\t\tsearchHdfcLifeGroupSurakshaValue);\n\t\t\tenterValueInField(nomineeNameLabel, nomineeNameValue);\n\t\t\tenterValueInField(nomineeDobLabel, nomineeDobValue);\n\t\t\tselectValueFromDropdownInEditBox(nomineeGenderLabel, nomineeGenderValue);\n\t\t\tselectValueFromDropdownInEditBox(nomineeRelationLabel, nomineeRelationValue);\n\t\t\tenterValueInField(nomineePhoneLabel, nomineePhoneValue);\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\ttestStepInfo(\"-----Extended Warranty Details-----\");\n\t\t\twaitForPageToLoad();\n\t\t\texpandArrows(insuranceAndExtendedWarrantyLabel);\n\t\t\tsearchInExtendedWarranties(availableExtendedWarrantyLabel, availableExtendedWarrantyValue);\n\t\t//\tcustomerPageFosRevamp.customerSearchAddress(availableExtendedWarrantyLabel, availableExtendedWarrantyValue);\n\t\t\tselectValueFromDropdownInEmandate(manufacturerWarrantyLabel, manufacturerWarrantyValue);\n\t\t\tselectValueFromDropdownInEmandate(dealerWarrantyLabel, dealerWarrantyValue);\n\t\t\tclickOnButton(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in insuranceAndExtendedWarrantyDetails \" + e.getClass().getName());\n\t\t}\n\t}\n}",
        "description": "This Java method is used to automate the process of filling out and submitting an insurance and extended warranty details form. The method takes 21 string parameters that represent different labels and values for various fields on the form.\n\nHere's a breakdown of what the method does:\n\n1. It starts by printing a test step information message indicating that it's entering the \"Insurance Details\" section.\n2. It selects a tab based on the `doProcessAndCrossSellLabel` parameter.\n3. It expands arrows related to insurance and extended warranty details.\n4. It fills out various fields on the form, such as:\n\t* Declaration of good health: uses the `selectValueFromDropdownInEditBox` method with the `declarationOfGoodHealthLabel` and `declarationOfGoodHealthValue` parameters.\n\t* Search for insurance: uses the `searchAndselectValueFromInsurance` method with the `searchInsurancePremiumMastersLabel`, `searchInsurancePremiumMastersValue`, and similar parameters.\n\t* Nominee information: enters values in fields labeled by `nomineeNameLabel`, `nomineeDobLabel`, etc.\n5. It clicks on a \"Save\" button to submit the form.\n\nAfter submitting the insurance details, the method moves on to the \"Extended Warranty Details\" section:\n\n1. It prints another test step information message.\n2. It waits for the page to load.\n3. It expands arrows related to insurance and extended warranty details again.\n4. It searches for and selects an available extended warranty option using the `searchInExtendedWarranties` method with the `availableExtendedWarrantyLabel` and `availableExtendedWarrantyValue` parameters.\n5. It fills out fields labeled by `manufacturerWarrantyLabel`, `dealerWarrantyLabel`, etc.\n6. Finally, it clicks on another \"Save\" button to submit the extended warranty details.\n\nThe method also includes error handling using a try-catch block, where any exceptions thrown during the execution of the method are caught and logged as test step failures.",
        "input": [
            "String doProcessAndCrossSellLabel",
            "String insuranceAndExtendedWarrantyLabel",
            "String declarationOfGoodHealthLabel",
            "String declarationOfGoodHealthValue",
            "String searchInsurancePremiumMastersLabel",
            "String searchInsurancePremiumMastersValue",
            "String searchGroupCare360Label",
            "String searchGroupCare360Value",
            "String searchHdfcLifeGroupSurakshaLabel",
            "String searchHdfcLifeGroupSurakshaValue",
            "String nomineeNameLabel",
            "String nomineeNameValue",
            "String nomineeDobLabel",
            "String nomineeDobValue",
            "String nomineeGenderLabel",
            "String nomineeGenderValue",
            "String nomineeRelationLabel",
            "String nomineeRelationValue",
            "String nomineePhoneLabel",
            "String nomineePhoneValue",
            "String availableExtendedWarrantyLabel",
            "String availableExtendedWarrantyValue",
            "String manufacturerWarrantyLabel",
            "String manufacturerWarrantyValue",
            "String dealerWarrantyLabel",
            "String dealerWarrantyValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "selectDropdownValue",
        "code": "public void selectDropdownValue(String label,String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//span//span[text()='\" + dealerName + \"']\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\thighLighterMethodManualScreenShot(dealer, label);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDropdownValueInSearchPage \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to enter value in search page     \n\t * @param \t      :  tabName is the name of page\n\t * @param \t      :  dealerLabel is the field name\n\t * @param \t      :  dealerName is the dealer name to select\n\t * @param \t      :  applicantTypeLabel is the field name\n\t * @param \t      :  applicantTypeValue is the type name to select\n\t * @param \t      :  mobileNumberLabel is the field name\n\t * @param \t      :  mobileNumberValue is the mobile number to enter\n\t * @param \t      :  primaryMobileNumberLabel is the field name\n\t * @param \t      :  primaryMobileNumberValue is the mobile number to enter\n\t * @param \t      :  buttonName is search button\n\t * \n\t */",
        "description": "This Java method, `selectDropdownValue`, selects a value from a dropdown menu on a search page. The method takes two parameters: `label` and `dealerName`. \n\nThe method attempts to select the dealer with the specified name from the dropdown menu. If the dealer is found, it clicks on the dealer's option and then waits for the page to load. It also takes a manual screenshot of the selected dealer.\n\nIf the dealer is not found or the dropdown menu is not present, the method fails the test step. Additionally, if no value is provided for the dealer name, the method also fails the test step.\n\nThe method uses various helper methods such as `waitForElementUntilVisible`, `isElementDisplayed`, `scrollToWebElement`, and `clickOn` to interact with the webpage elements.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "searchCustomer",
        "code": "public void searchCustomer(String tabName, String dealerLabel, String dealerName, String applicantTypeLabel,\n\t\t\tString applicantTypeValue, String mobileNumberLabel, String mobileNumberValue,\n\t\t\tString primaryMobileNumberLabel, String primaryMobileNumberValue, String buttonName) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Enter Details In Search Page #\");\n\t\t\tselectTabs(tabName);\n\t\t\tselectDropdownValue(dealerLabel, dealerName);\n\t\t\tselectDropdownValue(applicantTypeLabel, applicantTypeValue);\n\t\t\tenterValueInField(mobileNumberLabel, mobileNumberValue);\n\t\t\tif (applicantTypeValue.equalsIgnoreCase(\"With Co-Applicant\")) {\n\t\t\t\tenterValueInField(primaryMobileNumberLabel, primaryMobileNumberValue);\n\t\t\t}\n\t\t\tclickOnButton(tabName);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t//\t\tclickOnButtonWithoutWaitTime(buttonName);\n\t\t\tclickOnButton(buttonName);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchCustomer \" +e.getClass().getName());\n\t\t}\n\t}\t\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  07/04/2022\n\t * Description    :  method to verify two error message      \n\t * @param \t      :  validation1 is the expected message need to compare\n\t * @param \t      :  validation2 is the expected message need to compare\n\t * @param \t      :  validation3 is the expected message need to compare\n\t */",
        "description": "This Java method, named `searchCustomer`, performs a search operation on a customer database. It takes nine parameters: tab name, dealer label, dealer name, applicant type label, applicant type value, mobile number label, mobile number value, primary mobile number label, and primary mobile number value.\n\nThe method attempts to perform the following steps:\n\n1. Logs a test step information with the message \"# Enter Details In Search Page #\".\n2. Selects a tab based on the provided `tabName`.\n3. Selects a dealer from a dropdown list using the `dealerLabel` and `dealerName`.\n4. Selects an applicant type from a dropdown list using the `applicantTypeLabel` and `applicantTypeValue`.\n5. Enters values in fields labeled with `mobileNumberLabel` and `mobileNumberValue`.\n6. If the applicant type is \"With Co-Applicant\", it also enters values in fields labeled with `primaryMobileNumberLabel` and `primaryMobileNumberValue`.\n7. Clicks on a button based on the provided `tabName`.\n8. Waits for the page to load.\n9. Waits for 5 seconds.\n\nIf any of these steps fail, the method catches the exception and logs a test step failure message with the error class name.",
        "input": [
            "String tabName",
            "String dealerLabel",
            "String dealerName",
            "String applicantTypeLabel",
            "String applicantTypeValue",
            "String mobileNumberLabel",
            "String mobileNumberValue",
            "String primaryMobileNumberLabel",
            "String primaryMobileNumberValue",
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifyThreeErrorPopupMessage",
        "code": "public void verifyThreeErrorPopupMessage(String validation1, String validation2, String validation3) {\n\t\tString errorValidation = null;\n\t\ttry {\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\tList<WebElement> messages = findWebElements(error_Msg);\n\t\t\t\tfor (int iterate = 0; iterate <= 2; iterate++) {\n\t\t\t\t\terrorValidation = messages.get(iterate).getText().trim();\n\t\t\t\t\tif (errorValidation.equalsIgnoreCase(validation1) || errorValidation.equalsIgnoreCase(validation2)\n\t\t\t\t\t\t\t|| errorValidation.equalsIgnoreCase(validation3)) {\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - \" + errorValidation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyThreeErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get pre filled value\n\t * @param \t      :  labelName is field name\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `verifyThreeErrorPopupMessage`, verifies if the error messages displayed on a webpage match three expected validation strings. \n\nIt takes three `String` parameters: `validation1`, `validation2`, and `validation3`. The method checks if an element with the label `error_Msg` is displayed within 5 seconds. If it is, it retrieves the text of the first three child elements of this element (assuming they are error messages). \n\nFor each error message, it checks if the text matches any of the three expected validation strings using `equalsIgnoreCase`. If a match is found, it takes a manual screenshot with a message indicating that the error validation was successfully captured. If no match is found or if the error message is not displayed, it fails the test step.\n\nIf an exception occurs during this process, it also fails the test step and logs the exception details.",
        "input": [
            "String validation1",
            "String validation2",
            "String validation3"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "getPreFilledValue",
        "code": "public String getPreFilledValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//label[text()='\" + labelName + \"']//following-sibling::div//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(value + \" value is prefilled in \" + labelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not prefilled in \" + labelName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getPreFilledValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to check dealer drop down as only one dealer is present       \n\t * @param \t      :  label is the name of the field\n\t * @param \t      :  dealerName is the value need to select\n\t */",
        "description": "This Java method, `getPreFilledValue`, appears to be part of an automated testing framework. Its primary function is to retrieve a pre-filled value from a specific web element (a label with a corresponding span element) and verify that it matches the expected value.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `labelName` parameter, which represents the name of the field being tested.\n2. It constructs an XPath expression using the provided `labelName` to locate the relevant web elements (a label with a corresponding span element).\n3. The method then uses various utility methods (`waitForElement`, `isElementDisplayed`, and `scrollToWebElement`) to ensure that the element is visible, scrollable, and accessible.\n4. If the element is displayed, it retrieves the text content of the span element using `getText(Element)`.\n5. It checks if the retrieved value is not empty. If it's not, it highlights the element (using `highLighterMethod`) and takes a manual screenshot with the pre-filled value as part of the filename.\n6. If the value is indeed pre-filled as expected, the method returns the value. Otherwise, it marks the test step as failed.\n7. In case the element is not displayed or an exception occurs, the method also marks the test step as failed and provides a descriptive error message.\n\nIn summary, this method aims to verify that a specific field has been pre-filled with a certain value, and if so, it returns that value.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "checkDealerDropDown",
        "code": "public void checkDealerDropDown(String label, String dealerName) {\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\t\tString dealerOptions = \"Dealeroption#xpath=//label[text()='\" + label\n\t\t\t\t\t\t+ \"']//ancestor::div//div//lightning-base-combobox-item//span[@class='slds-truncate']\";\n\t\t\t\tString dealerOption = \"Dealeroption#xpath=//span//span[text()='\" + dealerName + \"']\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 10)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOptions, 10)) {\n\t\t\t\t\t\tint size = findWebElements(dealerOptions).size();\n\t\t\t\t\t\tif (size == 1) {\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\thighLighterMethod(dealerOption);\n\t\t\t\t\t\t\tmanualScreenshot(\"Single and expected dealer is present in dealer drop down\");\n\t\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Multiple values present in dealer drop down\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Dealer Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkDealerDropDown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to check applicant type values      \n\t * @param \t      :  label is the name of the field\n\t * @param \t      :  dealerName is the value need to select\n\t */",
        "description": "This Java method, `checkDealerDropDown`, is used to verify the presence and functionality of a dropdown menu for selecting dealers. The method takes two parameters: `label` (the name of the field) and `dealerName` (the value to be selected).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the `dealerName` parameter is not empty.\n2. If it's not empty, it constructs three XPath expressions:\n\t* `dealer`: The path to the dropdown menu with the given label.\n\t* `dealerOptions`: The path to the options within the dropdown menu.\n\t* `dealerOption`: The path to the specific option that matches the provided `dealerName`.\n3. It waits for the `dealer` element to become visible, then checks if it's displayed. If not, it fails the test step.\n4. If the `dealer` element is displayed, it scrolls to and clicks on the dropdown menu.\n5. It checks if the `dealerOptions` element is displayed. If not, it fails the test step.\n6. If the options are displayed, it retrieves the size of the options list. If there's only one option (i.e., the expected dealer), it:\n\t* Waits for the page to load.\n\t* Highlights the selected `dealerOption` using a highlighting method.\n\t* Takes a manual screenshot with the message \"Single and expected dealer is present in dealer drop down\".\n\t* Clicks on the selected `dealerOption`.\n7. If there are multiple options, it fails the test step.\n8. If the `dealerName` parameter is empty, it fails the test step.\n\nThe method also includes error handling using a catch block that catches any exceptions and fails the test step with an appropriate message.",
        "input": [
            "String label",
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "checkApplicantTypeValues",
        "code": "public void checkApplicantTypeValues(String label, String applicantType1, String applicantType2) {\n\t\ttry {\n\t\t\tString applicantType = \"ApplicantType#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\tString applicantTypeValue = \"ApplicantTypeValue#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label\n\t\t\t\t\t+ \"')]/parent::div//following-sibling::div//span/span\";\n\t\t\twaitForElementUntilVisible(applicantType);\n\t\t\tif (isElementDisplayed(applicantType, 10)) {\n\t\t\t\tscrollToWebElement(applicantType);\n\t\t\t\tclickOn(applicantType);\n\t\t\t\tif (isElementDisplayed(applicantTypeValue, 10)) {\n\t\t\t\t\tList<WebElement> values = findWebElements(applicantTypeValue);\n\t\t\t\t\tfor (int iterate = 0; iterate < values.size(); iterate++) {\n\t\t\t\t\t\tString value = values.get(iterate).getText().trim();\n\t\t\t\t\t\tif (value.equalsIgnoreCase(applicantType1) || value.equalsIgnoreCase(applicantType2)) {\n\t\t\t\t\t\t\thighLighterMethod(applicantType);\n\t\t\t\t\t\t\tmanualScreenshot(value + \" is present in applicant type as expected\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Expected applicant type validation is not fire\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is are not present in Applicant Type dropdown.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select Applicant Type drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkApplicantTypeValues \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to validate mobile number length     \n\t * @param \t      :  labelName is the name of the field\n\t * @param \t      :  value is the 10 digit\n\t */",
        "description": "This Java method, `checkApplicantTypeValues`, is used to validate the values present in an \"Applicant Type\" dropdown. The method takes three parameters: `label`, `applicantType1`, and `applicantType2`. \n\nThe method first constructs two XPath expressions to locate the \"Applicant Type\" dropdown and its associated value options. It then uses a series of methods (e.g., `waitForElementUntilVisible`, `isElementDisplayed`, `scrollToWebElement`, `clickOn`) to interact with the dropdown, select an option, and retrieve the available values.\n\nThe method then iterates through these values, checks if they match either of the provided `applicantType1` or `applicantType2` values (case-insensitive), and performs a high-lighting action and takes a manual screenshot if the value is present. If the value is not found, it fails the test step.\n\nThe method also includes error handling using a try-catch block to catch any exceptions that may occur during its execution.",
        "input": [
            "String label",
            "String applicantType1",
            "String applicantType2"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "validateMobileNumerLength",
        "code": "public void validateMobileNumerLength(String labelName, String length,String number) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString value = findWebElement(field).getAttribute(\"maxlength\");\n\t\t\t\tif(value.equals(length))\n\t\t\t\t{\t\t\t\t\t\t\t\n\t\t\t\ttypeIn(field, number);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(\"Maximum length of mobile number field is \"+value+\" and entered \"+number);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName + \" field length is not \"+length+\" instead we got \"+value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validateMobileNumerLength \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get customer type after search\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `validateMobileNumerLength`, validates the length of a mobile number field on a web page. It takes three parameters: `labelName` (the label associated with the field), `length` (the expected maximum length of the field), and `number` (the actual value to be entered into the field).\n\nThe method performs the following steps:\n\n1. Waits for the element corresponding to the given `labelName` to be displayed.\n2. Scrolls to the element if it's not currently visible.\n3. Verifies that the element is an input field with a maximum length equal to the expected value (`length`).\n4. If the lengths match, enters the provided `number` into the field and takes a manual screenshot.\n5. If the lengths do not match, reports a test step failure.\n\nThe method also includes error handling using a try-catch block, which catches any exceptions that may occur during execution and reports a test step failure accordingly.",
        "input": [
            "String labelName",
            "String length",
            "String number"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "getSearchResultCustomerType",
        "code": "public void getSearchResultCustomerType(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Customer Type')]\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).split(\":\")[1].trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue + \" Expected value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Expected value is not present in Search Result Page instead got \"\n\t\t\t\t\t\t\t+ value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getSearchResultCustomerType\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to get text after search\n\t * @param \t      :  expectedValue is value need to compare\n\t */",
        "description": "This Java method, `getSearchResultCustomerType`, is used to verify the customer type in a search result page. It takes a string parameter `expectedValue` which represents the expected customer type.\n\nThe method first tries to locate an element with the specified XPath and waits for it to be displayed. If the element is found and displayed, it scrolls to that element and retrieves its text. The retrieved text is then compared with the expected value. \n\nIf the values match, the method highlights the element (using a highlighter method) and takes a manual screenshot as proof of the expected result being present in the search result page.\n\nIf the values do not match or if the element is not displayed within the specified time limit, the method fails the test step with an appropriate error message. If any exception occurs during the execution of this method, it also fails the test step with the exception details.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "getSearchResultText",
        "code": "public void getSearchResultText(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='slds-align_absolute-center']\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value = getText(Element).trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(expectedValue + \" Expected value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Expected value is not present in Search Result Page instead got \"\n\t\t\t\t\t\t\t+ value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getSearchResultText\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  16/05/2022\n\t * Description    :  method to verify offer details not present in search result page\n\t */",
        "description": "This Java method, `getSearchResultText`, is used to verify if a specific value (expectedValue) is present in the search result page. It uses various WebDriver methods such as `waitForElement`, `isElementDisplayed`, and `scrollToWebElement` to interact with the webpage.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the specified XPath (`#xpath=//div[@class='slds-align_absolute-center']`) to be present on the page.\n2. If the element is displayed, it scrolls to that element and retrieves its text content using `getText(Element)`.\n3. It then compares this text value with the expectedValue passed as a parameter to the method.\n4. If the values match (case-insensitive), it highlights the element using `highLighterMethod` and takes a manual screenshot with a message indicating that the expected value is present in the search result page.\n5. If the values do not match, it marks the test step as failed with a message indicating that the expected value was not found in the search result page (along with the actual text value).\n6. If the element is not displayed or there's an exception during the process, it also marks the test step as failed.\n\nOverall, this method helps verify if specific values are present on a webpage and provides feedback on whether the expected values match what was found.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifySearchOfferNotPresent",
        "code": "public void verifySearchOfferNotPresent() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Two Wheeler Offer')]\";\n\t\t\tString Element1 = \"#xpath=//div[contains(text(),'Two Wheeler Limit')]\";\n\t\t\tif (!isElementDisplayed(Element, 5)) {\n\t\t\t\tif(isElementDisplayed(Element1, 5))\n\t\t\t\t{\n\t\t\t\thighLighterMethod1(Element1);\n\t\t\t\tmanualScreenshot(\"Two Wheeler Offer is not present instead Two Wheeler Limit is present as expected\");\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(\"Two Wheeler Limit is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Two Wheeler Offer details is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchOfferNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchOfferNotPresent()`, verifies that the \"Two Wheeler Limit\" element is present when the \"Two Wheeler Offer\" element is not. The method uses Selenium WebDriver to check if the elements are displayed and then takes a screenshot or fails the test step accordingly.\n\nHere's a breakdown of what the method does:\n\n1. It defines two XPath strings, `Element` and `Element1`, which correspond to the \"Two Wheeler Offer\" and \"Two Wheeler Limit\" elements respectively.\n2. The method checks if the \"Two Wheeler Offer\" element is displayed within 5 seconds using the `isElementDisplayed()` method. If it's not displayed...\n3. ...it then checks if the \"Two Wheeler Limit\" element is displayed within 5 seconds. If it is, the method highlights the element using a custom `highLighterMethod1()` and takes a screenshot with the message \"Two Wheeler Offer is not present instead Two Wheeler Limit is present as expected\".\n4. If the \"Two Wheeler Limit\" element is also not displayed, the method fails the test step with the message \"Two Wheeler Limit is not present\".\n5. If the \"Two Wheeler Offer\" element is actually displayed, the method fails the test step with the message \"Two Wheeler Offer details is present\".\n6. The method catches any exceptions that may occur during execution and fails the test step with a message including the exception's class name.\n\nIn summary, this method verifies that when the \"Two Wheeler Offer\" element is not present, the \"Two Wheeler Limit\" element should be present instead.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifySearchOfferIsPresent",
        "code": "public void verifySearchOfferIsPresent() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'Two Wheeler Offer')]\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString offer =getText(Element);\n\t\t\t\tmanualScreenshot(\"Two Wheeler Offer details is present as expected \"+offer);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Two Wheeler Offer details is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchOfferIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchOfferIsPresent()`, verifies if the \"Two Wheeler Offer\" is present on a web page. It uses an XPath expression to locate the element and then checks if it's displayed within 5 seconds. If the element is found and displayed, it retrieves its text content and takes a manual screenshot with the offer details. If the element is not found or not displayed, the method marks the test step as failed. If any exception occurs during execution, the method also marks the test step as failed and logs the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifyFieldBorderColourIsPresent",
        "code": "public void verifyFieldBorderColourIsPresent(String labelName,String colorName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getCssValue(\"border-color\");\n\t\t\t\tif(value.equalsIgnoreCase(colorName))\n\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(labelName+\" field border is highlited as \"+value+\" - red as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName+\" field border is not highlited as \"+colorName);;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldBorderColourIsPresent`, verifies that the border color of a specific field is present and matches the expected value. The method takes two parameters: `labelName` (the name of the label associated with the field) and `colorName` (the expected border color).\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the input element associated with the given label.\n2. It checks if the element is displayed using a timeout of 5 seconds.\n3. If the element is present, it retrieves the CSS value for the \"border-color\" property and compares it to the expected `colorName`.\n4. If the border color matches the expected value, it takes a manual screenshot with a message indicating that the field border is highlighted as expected.\n5. If the border color does not match the expected value, it fails the test step with an error message.\n6. If the element is not present (i.e., the label is not found), it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during execution and fails the test step if an exception is thrown.",
        "input": [
            "String labelName",
            "String colorName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifyFieldBorderColourIsNotPresent",
        "code": "public void verifyFieldBorderColourIsNotPresent(String labelName,String colorName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getCssValue(\"border-color\");\n\t\t\t\tif(!value.equalsIgnoreCase(colorName))\n\t\t\t\t{\n\t\t\t\t\tmanualScreenshot(labelName+\" field border is not highlited as \"+value+\" - red as expected\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(labelName+\" field border is highlited as \"+colorName+\" - red\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName+\" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldBorderColourIsNotPresent`, verifies that the border color of a specific field is not red. It takes two string parameters: `labelName` and `colorName`. \n\nThe method first constructs an XPath expression to locate the input element associated with the specified label name. If the element is displayed within 5 seconds, it retrieves the current value of the \"border-color\" CSS property for that element. \n\nIf the retrieved border color does not match the expected color (red), a manual screenshot is taken and the test step passes. However, if the retrieved border color matches the expected color (red), the test step fails.\n\nIf the input field is not displayed within 5 seconds or an exception occurs during the execution of the method, the test step fails with an appropriate error message.",
        "input": [
            "String labelName",
            "String colorName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifySearchResult",
        "code": "public void verifySearchResult(String labelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[contains(text(),'\" + labelName + \"')] | //p[contains(text(),'\" + labelName + \"')]\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString value1 = getText(Element);\n\t\t\t\tString value = getText(Element).split(\":\")[1].trim();\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\thighLighterMethod1(Element);\n\t\t\t\t\tmanualScreenshot(value1 + \" value is present in Search Result Page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not populated in Search Result Page of \"\n\t\t\t\t\t\t\t+ value1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Text is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySearchResult\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySearchResult`, is used to verify the search result on a webpage. It takes a string parameter `labelName` which represents the expected label name in the search result.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName`. The expression searches for either a div or p element that contains the specified text.\n2. It waits up to 5 seconds for the element to be present using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method and retrieves its text content using the `getText` method.\n4. It splits the text content by colon (`:`) and trims any whitespace from the resulting string.\n5. If the trimmed value is not empty, it highlights the element using the `highLighterMethod1` method and takes a manual screenshot with the expected label name and its corresponding value.\n6. If the value is empty or the element is not displayed, it fails the test step with an appropriate error message.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifyETBHoldReason",
        "code": "public void verifyETBHoldReason(String expectedValue) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='offer-info']//p//b\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tString value=findWebElement(Element).getText();\n\t\t\t\tif(value.contains(expectedValue))\n\t\t\t\t{\n\t\t\t\t\thighLighterMethodManualScreenShot(Element, \"ETB Customer \"+value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepFailed(expectedValue+\" is Not Available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer Info field is not present in ETB customer Search Page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyETBHoldReason`, verifies if the expected hold reason is present on an ETB (Electronic Trading Book) customer search page. \n\nHere's a step-by-step breakdown of what the method does:\n\n1. It tries to find an element on the page using an XPath expression (`#xpath=//div[@class='offer-info']//p//b`).\n2. If the element is displayed within 5 seconds, it proceeds to check if the text contained in that element matches the expected hold reason passed as a parameter (`expectedValue`).\n3. If the expected value is found in the text, it takes a manual screenshot using the `highLighterMethodManualScreenShot` method and highlights the relevant element.\n4. If the expected value is not found, or if the element is not displayed within 5 seconds, the test step fails with an appropriate error message.\n\nThe method also catches any exceptions that may occur during execution and reports them as a test failure.",
        "input": [
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "searchPage_FOS",
        "function_name": "verifyETBOfferIcon",
        "code": "public void verifyETBOfferIcon() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='offer-info']//lightning-icon//lightning-primitive-icon\";\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\thighLighterMethodManualScreenShot(Element, \"Icon is Present in ETB Customer Search page\");\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitTime(3);\n\t\t\t\tmanualScreenshot(\"Table of Hold Reason is appreared as Expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer Info Icon field is not present in ETB customer Search Page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldBorderColourIsNotPresent\" + e.getClass().getName());\n\t\t}\n\t}\n\n\n}",
        "description": "This Java method, `verifyETBOfferIcon`, is used to verify the presence of an offer icon on the ETB (Electronic Trading and Billing) customer search page. \n\nHere's a step-by-step breakdown:\n\n1. It attempts to locate an element with the specified XPath (`//div[@class='offer-info']//lightning-icon//lightning-primitive-icon`).\n2. If the element is displayed within 5 seconds, it:\n   - Highlights the element using `highLighterMethodManualScreenShot`.\n   - Clicks on the special element.\n   - Waits for 3 seconds.\n   - Takes a manual screenshot to verify that the expected table of hold reasons appears.\n\n3. If the element is not displayed within 5 seconds, it marks the test step as failed with the message \"Offer Info Icon field is not present in ETB customer Search Page\".\n\n4. In case any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a message including the type of exception that occurred (`e.getClass().getName()`).",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "loginToSalesForce",
        "code": "public boolean loginToSalesForce(String appURL_SalesForce, String SalesforceuserName, String Salesforcepassword) {\n\t\twaitForPageToLoad();\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Sales Force Login Page\");\n\t\t\tfor(int i=0;i<=3;i++)\n\t\t\t{\n\t\t\t\tnavigateTo(appURL_SalesForce);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(\"uat.sandbox\")||URL.contains(\"twfpreprod.sandbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\twaitForElement(txt_userNameAdmin,  5);\n\t\t\tif (isElementDisplayed(txt_userNameAdmin, 5)) {\n\t\t\t\ttypeIn(txt_userNameAdmin, SalesforceuserName);\n\t\t\t\tif (isElementDisplayed(txt_passWordAdmin, 5)) {\n\t\t\t\t\ttypeInMaskedData(txt_passWordAdmin, Salesforcepassword);\n\t\t\t\t\tif (isElementDisplayed(btn_loginAdmin, 5)) {\n\t\t\t\t\t\tclickOn(btn_loginAdmin);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Login button is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Password field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(isElementDisplayed(txt_homePage, 10))\n\t\t\t{\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into Master #\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttestStepFailed(\"User Name field is not present\");\n\t\t\t}\t\t\t\t\t\t\t\t\t\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into Master #\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to logout from admin page\n\t */",
        "description": "This Java method, `loginToSalesForce`, is used to log in to a Salesforce account. It takes three parameters: the URL of the Salesforce app, the username, and the password.\n\nThe method first waits for the page to load, then attempts to navigate to the Salesforce login page up to 4 times (with a 5-second wait between each attempt) until it reaches the correct page (either \"uat.sandbox\" or \"twfpreprod.sandbox\").\n\nOnce on the login page, it checks if the username and password fields are present and enters the provided credentials. It then clicks the login button and waits for the page to load again.\n\nIf the login is successful, the method reports a test step success message. If there's an error or the login fails, it reports a test step failure message with the error details.\n\nThe method also checks if any error messages are displayed on the page and reports them as test step failures if found.\n\nFinally, the method returns a boolean flag indicating whether the login was successful (false) or failed (true).",
        "input": [
            "String appURL_SalesForce",
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "logoutFromSalesForce",
        "code": "public void logoutFromSalesForce() {\n\t\ttry {\n\t\t\twaitForElement(salesforceProfileLink, 5);\n\t\t\tif (isElementDisplayed(salesforceProfileLink, 5)) {\n\t\t\t\tclickOn(salesforceProfileLink);\n\t\t\t\tif (isElementDisplayed(btn_logoutAdmin, 5)) {\n\t\t\t\t\tclickOn(btn_logoutAdmin);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\ttestStepInfo(\"# Successfully logged out from salesforce #\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Logout is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"logoutFromSalesForce failed.Error \" + e.getClass().getName());\n\t\t}\n\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to login into the FOS application\n\t * @param         :  appURL_Fos is the value of URL\n\t * @param         :  userName is the value of user id\n\t * @param         :  password is the value of password\n\t * @return        :  flag is return as true when error occurred while login\n\t */",
        "description": "This Java method, `logoutFromSalesForce`, is used to log out from Salesforce. It attempts to locate and click on a profile link, then checks if the logout button is displayed and clicks on it if present. If any of these steps fail (e.g., the profile link or logout button are not found), an error message is logged and the test step is marked as failed. The method also includes try-catch block to handle any exceptions that may occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "loginToFOSApplication",
        "code": "public boolean loginToFOSApplication(String appURL_Fos, String userName, String password) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\ttestStepInfo(\"FOS Login Page\");\n\t\t\tfor (int i = 0; i <= 3; i++) {\n\t\t\t\tnavigateTo(appURL_Fos);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(\"uat.sandbox.my.site.com/twfCommunity/s/\")\n\t\t\t\t\t\t|| URL.contains(\"twfpreprod.sandbox.my.site.com/twfCommunity\")\n\t\t\t\t\t\t|| URL.contains(\"uat.sandbox.my.site.com/revampTWF/s/\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twaitForElement(txt_userNameFOS, 5);\n\t\t\tif (isElementPresent(txt_userNameFOS)) {\n\t\t\t\ttypeIn(txt_userNameFOS, userName);\n\t\t\t\tif (isElementDisplayed(txt_passWordFOS, 5)) {\n\t\t\t\t\ttypeInMaskedData(txt_passWordFOS, password);\n\t\t\t\t\tif (isElementDisplayed(btn_loginFOS, 5)) {\n\t\t\t\t\t\tclickOn(btn_loginFOS);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Login button is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Password field is not present\");\n\t\t\t\t}\n\n\t\t\t} else if (isElementDisplayed(txt_homePage, 10)) {\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into FOS #\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"User Name field is not present\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into FOS #\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToFOSApplication failed.Error \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to logout from FOS page\n\t */",
        "description": "This Java method, `loginToFOSApplication`, is used to login to a FOS (Financial Operations System) application. The method takes three parameters: the URL of the FOS application, the username, and the password.\n\nThe method first refreshes the page, waits for the page to load, and then navigates to the FOS application URL. It then checks if the expected URLs are loaded, and if not, it tries up to 3 times to navigate to the correct URL.\n\nOnce on the FOS login page, the method enters the username and password, clicks the login button, and waits for the page to load again. If the login is successful, it logs a success message. If there's an error during login, it logs a failure message with the error text.\n\nThe method also checks if any error messages are displayed on the page, and if so, it logs a failure message with the error text. Finally, it returns a boolean flag indicating whether the login was successful or not.",
        "input": [
            "String appURL_Fos",
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "logoutFromFOS",
        "code": "public void logoutFromFOS() {\t\n\t\n\t\ttry {\n\t\t\twaitForElement(fosProfileLink,  5);\n\t\t\tif (isElementDisplayed(fosProfileLink, 5)) {\n\t\t\t\tclickOn(fosProfileLink);\n\t\t\t\tif (isElementDisplayed(btn_logoutFOS, 5)) {\n\t\t\t\t\tclickOn(btn_logoutFOS);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\ttestStepInfo(\"# Successfully logged out from FOS #\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Logout is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"logoutFromFOS failed.Error \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `logoutFromFOS()`, logs out from FOS (likely a web-based application). It performs the following steps:\n\n1. Waits for an element (FoS Profile Link) to be displayed within 5 seconds.\n2. If the link is displayed, clicks on it.\n3. Verifies that another element (btn_logoutFOS) is displayed within 5 seconds.\n4. If `btn_logoutFOS` is displayed, clicks on it and waits for the page to load twice.\n5. Logs a successful test step with a message indicating successful logout from FOS.\n6. If any of these steps fail, logs a failed test step with an error message.\n\nNote that this method also includes exception handling to catch and report any errors that may occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "loginToWorkBench",
        "code": "public boolean loginToWorkBench(String userName, String password) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Workbench Login Page\");\n\t\t\twaitForElement(txt_userNameAdmin, 5);\n\t\t\tif (isElementDisplayed(txt_userNameAdmin, 5)) {\n\t\t\t\ttypeIn(txt_userNameAdmin, userName);\n\t\t\t\tif (isElementDisplayed(txt_passWordAdmin, 5)) {\n\t\t\t\t\ttypeInMaskedData(txt_passWordAdmin, password);\n\t\t\t\t\tif (isElementDisplayed(btn_loginAdmin, 5)) {\n\t\t\t\t\t\tclickOn(btn_loginAdmin);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Login button is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Password field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if(isElementDisplayed(GOR.wb_homePage, 5))\n\t\t\t{\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into Work Bench #\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttestStepFailed(\"User Name field is not present\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Successfully Logged Into Workbench\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToWorkBench failed.Error \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `loginToWorkBench`, attempts to log in to a Workbench application using the provided username and password. It performs the following steps:\n\n1. Verifies that the Workbench login page is displayed.\n2. Waits for the username field (`txt_userNameAdmin`) to be present on the page.\n3. Enters the provided username into the username field.\n4. Waits for the password field (`txt_passWordAdmin`) to be present on the page.\n5. Enters the provided password into the password field, using a masked input method (e.g., asterisks or dots).\n6. Clicks the login button (`btn_loginAdmin`).\n7. Waits for the page to load completely.\n8. If the login is successful, it checks if the user has been successfully logged in by verifying that the Workbench home page is displayed.\n\nIf any of these steps fail (e.g., the username or password fields are not present, the login button is not clickable), the method will report a test step failure and set a flag to `true`. If an exception occurs during the execution of this method, it will also report a test step failure. The method returns the value of the flag, indicating whether the login was successful or not.",
        "input": [
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "logoutFromWorkbench",
        "code": "public void logoutFromWorkbench() {\n\t\ttry {\n\t\t\tString tab_name = \" tab_ Name#xpath=//img[contains(@src,workbench)]//parent::span//parent::a\";\n\t\t\tString tab_options = \"Tab_Options#xpath=//img[contains(@src,workbench)]/following::a[text()='Logout']\";\n\t\t\twaitForElement(tab_name, 4);\n\t\t\tclickOn(tab_name);\n\t\t\tWebElement tab_names = findWebElement(tab_options);\n\t\t\tActions action = new Actions(driver);\n\t\t\tif (isElementDisplayed(tab_options, 10)) {\n\t\t\t\taction.moveToElement(tab_names).perform();\n\t\t\t\tclickOn(tab_options);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Logout button is not dispalyed in 10 seconds.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"logoutFromWorkbench failed.Error \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `logoutFromWorkbench()`, is used to log out from a workbench application. It attempts to locate and click on the \"Logout\" button in the workbench by using XPath expressions and Selenium WebDriver methods. The method waits for 4 seconds for the tab with the logout button to appear, then moves the mouse cursor to it and clicks on it. If the logout button is not displayed within 10 seconds, the test fails. If any exception occurs during the execution of this method, it will be caught and the test will fail with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "loginLogoutPage",
        "function_name": "loginToQcUatAdmin",
        "code": "public boolean loginToQcUatAdmin(String appURL_SalesForce, String SalesforceuserName, String Salesforcepassword) {\n\t\twaitForPageToLoad();\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Sales Force Login Page\");\n\t\t\tfor(int i=0;i<=3;i++)\n\t\t\t{\n\t\t\t\tnavigateTo(appURL_SalesForce);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(\"qcuat.sandbox\") || URL.contains(\"qcn2p.sandbox\")) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\twaitForElement(txt_userNameAdmin,  5);\n\t\t\tif (isElementDisplayed(txt_userNameAdmin, 5)) {\n\t\t\t\ttypeIn(txt_userNameAdmin, SalesforceuserName);\n\t\t\t\tif (isElementDisplayed(txt_passWordAdmin, 5)) {\n\t\t\t\t\ttypeInMaskedData(txt_passWordAdmin, Salesforcepassword);\n\t\t\t\t\tif (isElementDisplayed(btn_loginAdmin, 5)) {\n\t\t\t\t\t\tclickOn(btn_loginAdmin);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Login button is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Password field is not present\");\n\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\n\t\t\t}\n\t\t\telse if(isElementDisplayed(txt_homePage, 10))\n\t\t\t{\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into QC Master #\");\n\t\t\t}else {\n\t\t\t\ttestStepFailed(\"User Name field is not present\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"# Successfully Logged Into QC Master #\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error \" + e.getClass().getName());\n\t\t}\n\t\treturn flag;\n\t}\n\t\n\t\n}",
        "description": "This Java method, `loginToQcUatAdmin`, is used to log in to a Salesforce admin page using the provided app URL, username, and password. Here's a brief description of what it does:\n\n1. Waits for the page to load.\n2. Tries to navigate to the Salesforce login page up to 4 times (in case of redirects).\n3. Checks if the current URL contains specific strings (\"qcuat.sandbox\" or \"qcn2p.sandbox\") and breaks out of the loop if found.\n4. Waits for the username field to be displayed, then enters the provided Salesforce username.\n5. If the password field is displayed, enters the provided Salesforce password using a masked input method (likely to hide the password).\n6. Clicks on the login button and waits for the page to load again.\n7. Checks if the user has successfully logged in by verifying the presence of a specific element (\"# Successfully Logged Into QC Master #\").\n8. If the login fails, captures any error messages displayed on the page and sets a flag to `true`.\n9. Returns the flag indicating whether the login was successful or not.\n\nThe method also includes some logging and failure reporting using test steps, which suggests that it's part of an automated testing framework.",
        "input": [
            "String appURL_SalesForce",
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "getCaseStatus",
        "code": "public String getCaseStatus(String labelName, String value) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']/..//div//span | //p[text()='\" + labelName + \"']/..//following-sibling::p//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(value)) {\n\t\t\t\t\tmanualScreenshot(\"Case status is displayed as expected : \" + value);\n\t\t\t\t\ttestStepInfo(\"$ Current Case Status - $\" +text);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Case status is not displayed as expected \" + value + \" instead displayed as \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCaseStatus.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to click document tab\n\t * @param         :  docName is the document tab to click\n\t */",
        "description": "This Java method, `getCaseStatus`, is used to verify the case status in a Salesforce Lightning application. It takes two parameters: `labelName` and `value`. \n\nThe method uses an XPath expression to locate the element containing the case status label and its value. If the element is displayed within a certain time limit (10 seconds), it scrolls to the element, highlights it for visibility, and retrieves the text of the element.\n\nIt then compares this retrieved text with the expected `value`. If they match, it logs a success message; otherwise, it logs a failure message indicating that the case status was not displayed as expected. \n\nIf the element is not displayed within the time limit or if an exception occurs during the process, it logs a failure message and returns the actual text of the element.\n\nThe method also takes a manual screenshot when the case status matches the expected value.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickOnDocumentTab",
        "code": "public void clickOnDocumentTab(String docName) {\n\t\ttry {\n\t\t\tString link = docName + \"#xpath=(//a//span[text()='\" + docName + \"'])[last()]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\ttestStepInfo(\"#Selected QC Document - #\"+docName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(docName + \" tab is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnDocumentTab \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  method to expand side arrows   \n\t * @param \t      :  fieldLabel is the section name need to expand\n\t */",
        "description": "This Java method, `clickOnDocumentTab`, simulates a click on a document tab with the specified name (`docName`). It uses various WebDriver methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToElement`, `scrollToWebElement`, and `clickOnSpecialElement`) to locate and interact with the element.\n\nHere's a brief summary of what the method does:\n\n1. Creates a link string by concatenating the document name (`docName`) with an XPath expression that targets the last occurrence of an HTML element containing the specified text.\n2. Waits for the element to be present (up to 10 seconds) and checks if it's displayed.\n3. If the element is present and displayed, scrolls to it, clicks on it, and logs a success message with the test step information.\n4. If the element is not present or displayed within the specified time limit, logs a failure message with the test step information.\n\nThe method also catches any exceptions that may occur during execution and logs a failure message with the exception class name.",
        "input": [
            "String docName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "expandArrows",
        "code": "public void expandArrows(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//span[contains(text(),'\" + fieldLabel + \"')]/parent::button\";\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"aria-expanded\");\n\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to click document tab\n\t * @param         :  docName is the document tab to click\n\t */",
        "description": "This Java method, `expandArrows`, is used to expand arrow buttons in a web page. It takes a `String` parameter `fieldLabel` which represents the label of the field whose arrow needs to be expanded.\n\nThe method attempts to find an element on the page with a specific XPath that includes the `fieldLabel`. If the element is found, it checks if the element is displayed and scrollable. If the element is not displayed or scrollable, it marks the test as failed.\n\nIf the element is displayed and scrollable, it retrieves the aria-expanded attribute of the element. If the attribute value is \"false\", it means the arrow needs to be expanded, so it clicks on the element to expand it. After expanding the arrow, it waits for the page to load completely.\n\nThe method also catches any exceptions that may occur during its execution and logs a test step failure message if an exception occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyDocumentDetails",
        "code": "public void verifyDocumentDetails(String docName) {\n\t\ttry {\n\t\t\tString element = \"docName #xpath=//button//span[text()='\" + docName + \"']\";\n\t\t\twaitForElement(element, 10);\n\t\t\tif (isElementDisplayed(element,10)) {\n\t\t\t\tscrollToElement(element);\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\texpandArrows(docName);\n\t\t\t\tmanualScreenshot(docName + \" is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(docName + \" is not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocumentDetails. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to enter value in field\n\t * @param         :  labelName is the input field name\n\t * @param         :  value is the input need to enter\n\t */",
        "description": "This Java method, `verifyDocumentDetails`, verifies if a specific document named `docName` exists on a web page. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate an element with text equal to `docName`. This is done by concatenating the strings `\"docName #xpath=//button//span[text()='\"` and `\"'`.\n2. It waits for this element to be present on the page using the `waitForElement` method.\n3. If the element is displayed, it scrolls to that element, expands any arrows (if present), and takes a manual screenshot with the document name as the filename. This suggests that the method is used for visual verification of the document's presence.\n4. If the element is not displayed, it fails the test step.\n\nIf an exception occurs during this process, it catches the exception and reports a failure in the `verifyDocumentDetails` method.",
        "input": [
            "String docName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/following-sibling::input | //label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tif(labelName.equalsIgnoreCase(\"Opportunity Name\"))\n\t\t\t\t{\n\t\t\t\tfindWebElement(field).sendKeys(Keys.ENTER);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(\"Entered \" + value + \" in \" + labelName);\n\t\t\t} \t\t\t\n\t\t\telse {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to select value from drop down\n\t * @param         :  dropdownName is the field name\n\t * @param         :  value is the input need to select\n\t */",
        "description": "This Java method, `enterValueInField`, enters a given value into a specific field on a web page. The method takes two parameters: `labelName` (the label associated with the field) and `value` (the value to be entered). \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding input field.\n2. It waits for the element to be present and displayed, then scrolls into view if necessary.\n3. If the element is found, it enters the given `value` into the field using the `typeIn` method.\n4. If the label name matches \"Opportunity Name\", it sends an ENTER key event to the field (likely to simulate a form submission).\n5. It takes a manual screenshot after entering the value.\n6. If the element is not found or displayed, it marks the test step as failed.\n\nThe method also includes exception handling to catch any errors that may occur during execution and mark the test step as failed accordingly.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to click on Radio Button\n\t * @param         :  RadioLabel is the label need to select\n\t */",
        "description": "This Java method, `selectValueFromDropdown`, is used to select a value from a dropdown menu in a web application. It takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the specific value to be selected). \n\nThe method first constructs an XPath expression to locate the dropdown element, then waits for the element to be displayed and scrollable. If the dropdown is found, it clicks on the dropdown button and then selects the specified `value` from the dropdown list. If the selection is successful, it takes a manual screenshot as proof of the test step. \n\nIf any of these steps fail (e.g., the dropdown is not present or the value is not displayed in the list), the method reports a test failure with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String radioLabel, String value) {\n\t\ttry {\n\t\t\tString radibutton = \"Radio Button#xpath=//legend[text()='\" + radioLabel + \"']/..//span[text()='\" + value\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(radibutton, 10);\n\t\t\tif (isElementDisplayed(radibutton, 10)) {\n\t\t\t\tscrollToWebElement(radibutton);\n\t\t\t\tclickOnSpecialElement(radibutton);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(radioLabel + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on Radio Button. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to select or deselect check box\n\t * @param         :  labelname is the name of check box\n\t * @param         :  status is the input value check or uncheck\n\t */",
        "description": "This Java method, `clickOnRadioButton`, is used to click on a radio button with a specific label and value. \n\nIt takes two parameters: \n- `radioLabel`: The label of the radio button legend.\n- `value`: The text value of the radio button.\n\nThe method first constructs an XPath expression to locate the radio button based on its label and value. It then waits for the element to be displayed, scrolls to it if necessary, and clicks on it. If the element is not present, it fails the test step. In case of any exception, it also fails the test step with a descriptive message.",
        "input": [
            "String radioLabel",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//parent::div//label//span[1]\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to select value from Hold drop down\n\t * @param         :  dropdownName is the field name\n\t * @param         :  value is the input need to select\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox based on the provided label name and status. The method takes two parameters: `labelName` (the name of the checkbox) and `status` (either \"check\" or \"uncheck\" indicating whether to check or uncheck the box).\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the checkbox element based on the provided label name.\n2. It waits for the checkbox element to be present, then scrolls to it if necessary.\n3. If the status is \"check\", it checks if the checkbox is not already selected. If not, it selects the checkbox and takes a manual screenshot as confirmation.\n4. If the status is \"uncheck\", it checks if the checkbox is already selected. If so, it unselects the checkbox and takes another manual screenshot.\n5. If the checkbox element is not present, it fails the test step with an error message.\n6. In case of any exceptions during execution, it logs the exception to a log file and fails the test step.\n\nThis method seems to be part of a larger automation framework for testing web applications, likely using Selenium WebDriver.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectValueFromDropdownInHold",
        "code": "public void selectValueFromDropdownInHold(String dropdownName, String value) {\n\t\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//lightning-combobox//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//span[text()='-Select-'] | //lightning-combobox//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//ancestor::lightning-combobox//div//span[text()='-Select-']\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInHold \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to verify success message\n\t */",
        "description": "This Java method, `selectValueFromDropdownInHold`, is used to select a value from a dropdown list in a Salesforce Lightning application. The method takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element.\n2. It waits for the dropdown element to be displayed using the `waitForElement` method.\n3. If the dropdown is displayed, it scrolls to the element and clicks on it using the `clickOnSpecialElement` method.\n4. It then locates the list of options in the dropdown by constructing another XPath expression.\n5. It waits for the option list to be displayed and checks if the selected value is present in the list.\n6. If the value is present, it clicks on the option using the `clickOnSpecialElement` method and takes a manual screenshot as proof of success.\n7. If the value is not present or the dropdown is not displayed, it fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]\";\n\t\t\twaitForElement(successPopup, 5);\n\t\t\tif (isElementDisplayed(successPopup, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared.\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture success popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  05/05/2022\n\t * Description    :  Method to get error message from submit popup\n\t * @return         :  message returns retrieved error message\n\t */",
        "description": "This Java method, `verifySuccessMessage()`, is used to verify the appearance of a success popup message on a webpage. \n\nIt uses an XPath expression to locate the desired element (in this case, a \"success\" class-div within another div with a \"forceVisual\" class). \n\nThe method first waits for up to 5 seconds for the element to be displayed using `waitForElement()`. If the element is found and displayed, it takes a manual screenshot as confirmation. If not, it logs an error message.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a failure message with the type of exception that occurred.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "getErrorMessageInSubmitPopup",
        "code": "public String getErrorMessageInSubmitPopup() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString error = \"#xpath=//div[contains(@class,'activeState')]//div[contains(text(),'Error')]\";\n\t\t\twaitForElement(error, 5);\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\tmessage = findWebElement(error).getText();\n\t\t\t\ttestStepFailed(message);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getErrorMessageInSubmitPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `getErrorMessageInSubmitPopup`, is used to retrieve and handle any error messages that appear in a submit popup. \n\nHere's what it does:\n\n1. It first tries to find an XPath expression that matches the error message in the submit popup.\n2. If the element is displayed within 5 seconds, it retrieves the text of the error message using `findWebElement` method and stores it in the `message` variable.\n3. If the error message is found, it calls the `testStepFailed` method to mark the test step as failed with the error message.\n4. If the error message is not found within 5 seconds, it takes a manual screenshot with a default error message \"There is no error message while saving the blind data entry.\"\n5. If any exception occurs during this process, it calls `testStepFailed` method again to mark the test step as failed and log the exception.\n\nThe method returns the `message` variable which contains the error message if found, or null otherwise.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "getErrorMessageInSubmitPopupWithoutFail",
        "code": "public String getErrorMessageInSubmitPopupWithoutFail(String expectedMessage) {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString error = \"#xpath=//div[contains(@class,'activeState')]//div[contains(text(),'Error')]\";\n\t\t\twaitForElement(error, 5);\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\tmessage = findWebElement(error).getText();\n\t\t\t\tif (message.contains(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(error);\n\t\t\t\t\tmanualScreenshot(message);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" expected validation not fired\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getErrorMessageInSubmitPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `getErrorMessageInSubmitPopupWithoutFail`, is used to verify that an expected error message is displayed when submitting a form (or performing some other action) without failing the test. \n\nHere's what it does:\n\n1. It waits for and verifies if an element with a specific XPath exists on the page.\n2. If the element is displayed, it retrieves the text of the element and checks if it contains the expected error message.\n3. If the expected error message is found, it highlights the element (using `highLighterMethod1`) and takes a manual screenshot (using `manualScreenshot`).\n4. If the expected error message is not found, or if the element does not exist, it marks the test step as failed.\n\nThe method returns the actual error message text if the expected error message is found, otherwise it returns null.",
        "input": [
            "String expectedMessage"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyQcOwnerName",
        "code": "public String verifyQcOwnerName() {\n\t\tString caseOwnerName = \"\";\n\t\ttry {\n\t\t\tString ownerLabel = \"Owner Label #xpath=//span[@title='QC Owner']/../div | //p[@title='QC Owner']/..//a//span\";\n\t\t\tif (isElementDisplayed(ownerLabel, 10)) {\n\t\t\t\thighLighterMethodManualScreenShot(ownerLabel, \"QC Owner\");\n\t\t\t\tcaseOwnerName = getText(ownerLabel);\n\t\t\t\ttestStepInfo(\"$Case is assigned to  : $\"+caseOwnerName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case is not assigned\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyQcOwnerName \" + e.getClass().getName());\n\t\t}\n\t\treturn caseOwnerName;\n\t}",
        "description": "This Java method, `verifyQcOwnerName`, verifies the name of the Quality Control (QC) owner for a given case. It uses an XPath expression to locate the element containing the QC owner's name, and then extracts the text from that element. The method also takes a screenshot if the element is displayed, logs test step information, and reports a failure if the element is not found or an exception occurs. The method returns the verified QC owner's name as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "getCaseID",
        "code": "public String getCaseID() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"case/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\tmanualScreenshot(\"Successfully got case Id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get OCR id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, named `getCaseID`, retrieves the Case ID from a URL and returns it as a string. It uses the Selenium WebDriver's `getCurrentUrl` method to get the current URL, then splits the URL into parts using the \"case/\" delimiter. The last part of the split URL is further split using the \"/\" delimiter, and the first element of the resulting array is taken as the Case ID. If the URL is empty or an exception occurs during this process, the method logs a failure message and returns null.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow1",
        "code": "public void qcFlow1(String statusLabel,String statusValue1,String acceptLabel,String ovdLabel, String ovdDetailsLabel, String blindDataEntryLabel, String qcDateOfBirthLabel,\n\t\t\tString qcDateOfBirthValue, String qcOvdNumberLabel, String qcOvdNumberValue, String passLabel,\n\t\t\tString applicationFormLabel, String applicationFormDetailsLabel, String qcMobileNumberLabel,\n\t\t\tString qcMobileNumberValue, String panForm60Label, String panForm60DetailsLabel,\n\t\t\tString qcPanValidationLabel, String qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue, String customerPhotoLabel, String customerPhotoDetailsLabel,\n\t\t\tString downPaymentReceiptLabel, String downpaymentReceiptDetailsLabel, String submitLabel,\n\t\t\tString onlySaveLabel,String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"First QC Flow\");\n\n\t\t    getCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\t\t\t\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is named `qcFlow1` and it appears to be part of a test automation suite. The method simulates a user interacting with a web application, performing various actions such as:\n\n1. Verifying case status\n2. Clicking main buttons (e.g., \"Accept\")\n3. Navigating through different document tabs (e.g., OVD, Application Form, PAN Form 60)\n4. Entering values in fields and selecting options from dropdowns\n5. Expanding arrows and clicking on buttons (e.g., \"Pass\")\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during the execution of the test steps.\n\nThe method takes 23 string parameters, which seem to be labels or values used in the test steps. These parameters include things like:\n\n* Status labels and values\n* Document tab names and details\n* Field names and values\n* Button labels\n* Dropdown option labels and values\n\nOverall, this method appears to automate a series of test steps for a web-based application, likely related to quality control (QC) or validation processes.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow1NonIMPS",
        "code": "public void qcFlow1NonIMPS(String statusLabel,String statusValue1,String acceptLabel,String ovdLabel, String ovdDetailsLabel, String blindDataEntryLabel, String qcDateOfBirthLabel,\n\t\t\tString qcDateOfBirthValue, String qcOvdNumberLabel, String qcOvdNumberValue, String passLabel,\n\t\t\tString applicationFormLabel, String applicationFormDetailsLabel, String qcMobileNumberLabel,\n\t\t\tString qcMobileNumberValue, String panForm60Label, String panForm60DetailsLabel,\n\t\t\tString qcPanValidationLabel, String qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue,String qcCancelledChequeACNumberLabel, String customerPhotoLabel, String customerPhotoDetailsLabel,\n\t\t\tString downPaymentReceiptLabel, String downpaymentReceiptDetailsLabel, String submitLabel,\n\t\t\tString onlySaveLabel,String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"First QC Flow\");\n\n\t\t    getCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\t\t\t\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcCancelledChequeACNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1NonIMPS\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `qcFlow1NonIMPS` that appears to be part of a test automation framework. The method simulates user interactions with a web application, specifically a loan or financial services system.\n\nThe method takes 34 string parameters, which are likely labels and values for various fields and buttons in the application. It performs the following actions:\n\n1. Logs a test step information message.\n2. Retrieves the case status based on the `statusLabel` and `statusValue1`.\n3. Clicks the main accept button.\n4. Verifies the QC owner name (not specified which field this is).\n5. Navigates to various document tabs, such as OVD, Application Form, PAN Form 60, Loan Cum Hypothecation Agreement, Proforma Invoice, ECS Mandate, Cancelled Cheque, and Customer Photo.\n6. Performs various actions on each tab, including:\n\t* Verifying document details\n\t* Expanding arrows (blind data entry)\n\t* Entering values in fields\n\t* Clicking buttons or radio buttons\n7. Submits the application by clicking the submit button.\n8. Saves the changes without submitting (only saves).\n9. Retrieves the error message in the submit popup (if any).\n10. Verifies the case status again based on the `statusLabel` and `statusValue2`.\n\nThe method catches any exceptions that occur during execution and logs a test step failure message if an exception is thrown.\n\nIn summary, this method simulates a user's interaction with a loan or financial services system, performing various actions to complete a QC flow.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String qcCancelledChequeACNumberLabel",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "uploadDocumentsForQcFlow1",
        "code": "public void uploadDocumentsForQcFlow1(String docLibLabel, String invoiceLabel,\n\t\t\tString insuranceLabel, String customerPhotoLocation, String saveLabel, String successMessage) {\n\t\ttry {\n\t\t\t\n\t\t\ttestStepInfo(\"# Document upload for First QC Flow #\");\n\t\t\t\n\t\t\topportunityPageFos.selectTabs(docLibLabel);\n\t\t\tString arr[] = { invoiceLabel, insuranceLabel };\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\topportunityPageFos.selectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\topportunityPageFos.documentToUpload(customerPhotoLocation);\n\t\t\tclickOnButton(saveLabel);\n\t\t\tverifySuccessMessage(successMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Upload docs after QC stage1 in FOS\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `uploadDocumentsForQcFlow1`, is used to upload documents for the first quality control flow in a system. The method takes seven parameters:\n\n* `docLibLabel`: the label of the document library\n* `invoiceLabel`: the label of an invoice-related document\n* `insuranceLabel`: the label of an insurance-related document\n* `customerPhotoLocation`: the location of the customer photo to be uploaded\n* `saveLabel`: the label of the \"Save\" button to upload the documents\n* `successMessage`: a message indicating that the upload was successful\n\nThe method performs the following steps:\n\n1. It records a test step with a description \"# Document upload for First QC Flow #\".\n2. It selects the specified document library tab.\n3. It loops through an array of labels (invoice and insurance) and checks or unchecks the corresponding checkboxes under the selected document library.\n4. It uploads the customer photo from the specified location.\n5. It clicks on the \"Save\" button to upload the documents.\n6. It verifies that a success message is displayed.\n\nIf any exception occurs during the execution of these steps, the method catches it and records a test step failure with an error message indicating that the document upload failed after the QC stage1 in FOS.",
        "input": [
            "String docLibLabel",
            "String invoiceLabel",
            "String insuranceLabel",
            "String customerPhotoLocation",
            "String saveLabel",
            "String successMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "adSubmitDetails1",
        "code": "public void adSubmitDetails1(String editLabel,String invoiceNumberLabel,String invoiceNumberValue,String insuranceNumberLabel,String insuranceNumberValue,\n\t\t\tString engineNumberLabel,String engineNumberValue,String engineNoEncryptedLabel,String insuranceDateLabel,String insuranceDateValue,\n\t\t\tString insuranceCompanyNameLabel,String insuranceCompanyNameValue,String chasisNoLabel,String chasisNoValue,String taxReceiptLabel,String taxReceiptValue,\n\t\t\tString registrationNumberLabel,String registrationNumberValue,\n\t\t\tString actualInvoiceDateLabel,String actualInvoiceDateValue,String actualInvoiceNoLabel,String actualInvoiceNoValue,\n\t\t\tString stageLabel, String stageValue,String saveLabel) {\n\t\ttry {\n\t\t\t\n\t\t\ttestStepInfo(\"# AD Submit Details for First QC Flow #\");\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\t\t\t\tselectTabs(\"Details\");\n\t\t\t\texpandArrows(\"Invoice Details\");\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Invoice Engine No\", engineNumberValue);\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Invoice Chassis No\", chasisNoValue);\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Insurance Engine Number\", engineNumberValue);\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Insurance Chassis Number\", chasisNoValue);\n\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceNoLabel, actualInvoiceNoValue);\n\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceDateLabel,changeDateFormat1(actualInvoiceDateValue) );\n\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString link = \"#xpath=//button[text()='\" + saveLabel + \"']\";\n\t\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t}\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t\texpandArrows(\"Details\");\n\t\t\t\tclickEditIcon(insuranceCompanyNameLabel);\t\t\t\n\t\t\t} else {\n\t\t\t\topportunityPageFos.selectOptionfromSideArrowButton(editLabel);\n\t\t\t}\n\t\t\n\t\t\n\t\t\t\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(insuranceNumberLabel, insuranceNumberValue);\n\t\t\t\n\t//\t\topportunityPageFos.enterValueInEditDialogueBox(engineNoEncryptedLabel, engineNumberValue);\n\t\t\topportunityPageFos.enterDateInEditDialogueBox(insuranceDateLabel, insuranceDateValue);\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(insuranceCompanyNameLabel, insuranceCompanyNameValue);\n\t\t\t\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(engineNumberLabel, engineNumberValue);\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(chasisNoLabel, chasisNoValue);\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Re Engine Number\", engineNumberValue);\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Re Chasis Number\", chasisNoValue);\n\t\t\t\topportunityPageFos.enterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(actualInvoiceNoLabel, actualInvoiceNoValue);\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Tax Receipt Date\", actualInvoiceDateValue);\t\t\n\t\t\t}\n\t\t\t\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Invoice Date\", actualInvoiceDateValue);\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(invoiceNumberLabel, invoiceNumberValue);\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(taxReceiptLabel, taxReceiptValue);\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(registrationNumberLabel, registrationNumberValue);\n\t\t\t\n\t\t\n\t\t\t\topportunityPageFos.chooseValueFromSearchAndListField(\"TWF Insurance Company Name\", \"Others\");\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Insurance\",\n\t\t\t\t\t\t \"5000\");\n\t\t\t\t\t\t opportunityPageFos.enterValueInEditDialogueBox(\"Ex-showroom price\",\n\t\t\t\t\t\t\t\t \"80000\");\n\n\t\t\t\n\t\t\topportunityPageFos.selectValueFromDropdownInEditBox(stageLabel, stageValue);\n\t\t\tclickOnButtonInPopup(saveLabel);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in adSubmitDetails1\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to submit details for the first QC flow. It takes several string parameters and uses them to fill out various fields on an opportunity page. The method is designed to handle different environments (PREPROD, UAT) by selecting different options or entering values in specific fields.\n\nHere's a brief overview of what the method does:\n\n1. It tests a step with the label \"# AD Submit Details for First QC Flow #\".\n2. If the environment is PREPROD, it selects the \"Details\" tab and expands the \"Invoice Details\" section.\n3. It enters values in specific fields on the page, including engine number, chassis number, insurance company name, actual invoice date, and registration number.\n4. It clicks the \"Save\" button and waits for the page to load.\n5. If the environment is UAT, it enters additional values in specific fields.\n6. It selects a value from a dropdown list in an edit box and clicks the \"Save\" button again.\n\nThe method also includes some error handling using try-catch blocks.",
        "input": [
            "String editLabel",
            "String invoiceNumberLabel",
            "String invoiceNumberValue",
            "String insuranceNumberLabel",
            "String insuranceNumberValue",
            "String engineNumberLabel",
            "String engineNumberValue",
            "String engineNoEncryptedLabel",
            "String insuranceDateLabel",
            "String insuranceDateValue",
            "String insuranceCompanyNameLabel",
            "String insuranceCompanyNameValue",
            "String chasisNoLabel",
            "String chasisNoValue",
            "String taxReceiptLabel",
            "String taxReceiptValue",
            "String registrationNumberLabel",
            "String registrationNumberValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String stageLabel",
            "String stageValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "adSubmitDetails",
        "code": "public void adSubmitDetails(String editLabel,String invoiceNumberLabel,String invoiceNumberValue,String insuranceNumberLabel,String insuranceNumberValue,\n\n\t\t\tString engineNumberLabel,String engineNumberValue,String engineNoEncryptedLabel,String insuranceDateLabel,String insuranceDateValue,\n\n\t\t\tString insuranceCompanyNameLabel,String insuranceCompanyNameValue,String chasisNoLabel,String chasisNoValue,String taxReceiptLabel,String taxReceiptValue,\n\n\t\t\tString registrationNumberLabel,String registrationNumberValue,\n\n\t\t\tString actualInvoiceDateLabel,String actualInvoiceDateValue,String actualInvoiceNoLabel,String actualInvoiceNoValue,\n\n\t\t\tString stageLabel, String stageValue,String saveLabel) {\n\n\t\ttry {\n\n\t\t\t\n\n\t\t\ttestStepInfo(\"# AD Submit Details for First QC Flow #\");\n\n\t\t\t\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"PREPROD\")) {\n\n\t\t\t\tselectTabs(\"Details\");\n\n\t\t\t\texpandArrows(\"Invoice Details\");\n\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Invoice Engine No\", engineNumberValue);\n\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Invoice Chassis No\", chasisNoValue);\n\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Insurance Engine Number\", engineNumberValue);\n\n\t\t\t\topportunityPageFos.enterValueInField(\"Enter Insurance Chassis Number\", chasisNoValue);\n\n\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceNoLabel, actualInvoiceNoValue);\n\n\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceDateLabel,changeDateFormat1(actualInvoiceDateValue) );\n\n\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\tString link = \"#xpath=//button[text()='\" + saveLabel + \"']\";\n\t\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\t\tclickOnButton(saveLabel);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\twaitTime(5);\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\tclickEditIcon(\"Opportunity Name\");\n\n\t\t\t} else {\n\n\t\t\t\topportunityPageFos.selectOptionfromSideArrowButton(editLabel);\n\n\t\t\t}\n\n\t\t\n\n\t\t\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(insuranceNumberLabel, insuranceNumberValue);\n\n\t\t\t\n\n\t//\t\topportunityPageFos.enterValueInEditDialogueBox(engineNoEncryptedLabel, engineNumberValue);\n\n\t\t\topportunityPageFos.enterDateInEditDialogueBox(insuranceDateLabel, insuranceDateValue);\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(insuranceCompanyNameLabel, insuranceCompanyNameValue);\n\n\t\t\t\t\t\t\n\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(engineNumberLabel, engineNumberValue);\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(chasisNoLabel, chasisNoValue);\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Re Engine Number\", engineNumberValue);\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Re Chasis Number\", chasisNoValue);\n\n\t\t\t\topportunityPageFos.enterDateInEditDialogueBox(actualInvoiceDateLabel, actualInvoiceDateValue);\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(actualInvoiceNoLabel, actualInvoiceNoValue);\n\n\t\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Tax Receipt Date\", actualInvoiceDateValue);\t\t\n\n\t\t\t}\n\n\t\t\t\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Invoice Date\", actualInvoiceDateValue);\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(invoiceNumberLabel, invoiceNumberValue);\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(taxReceiptLabel, taxReceiptValue);\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(registrationNumberLabel, registrationNumberValue);\n\n\t\t\t\n\t\t\topportunityPageFos.chooseValueFromSearchAndListField(\"TWF Insurance Company Name\", \"Others\");\n\n\t\t\topportunityPageFos.enterValueInEditDialogueBox(\"Insurance\",\n\t\t\t\t\t \"5000\");\n\t\t\t\t\t opportunityPageFos.enterValueInEditDialogueBox(\"Ex-showroom price\",\n\t\t\t\t\t\t\t \"80000\");\n\n\t\t\topportunityPageFos.selectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\tclickOnButton(saveLabel);\n\n\t\t\twaitTime(3);\n\n\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\n\t\t\t\t\n\n\t\t\t\tint count=0;\n\n\t\t\t\tdo {\n\n\t\t\t\t\tif (count<2) {\n\n\t\t\t\t\tif (isElementPresent(GOR.error_sqcMethod)) {\n\n\t\t\t\t\tString Errormessage=verifyHandleErrorMessageForBarcode();\n\n\t\t\t\t\tif (Errormessage.contains(\"Actual Invoice Date can not be less than Proforma Invoice\")) {\n\n\t\t\t\t\t\topportunityPageFos.selectValueFromDropdownInEditBox(stageLabel, \"AD Pending\");\n\n\t\t\t\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t\t\t\t\trefreshPage();\n\n\t\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\t\tselectTabs(\"Details\");\n\n\t\t\t\t\t\texpandArrows(\"Invoice Details\");\n\n\t\t\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceNoLabel, actualInvoiceNoValue);\n\n\t\t\t\t\t\topportunityPageFos.enterValueInField(actualInvoiceDateLabel, actualInvoiceDateValue);\n\n\t\t\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\t\tclickOnButton(saveLabel);\n\n\t\t\t\t\t\trefreshPage();\n\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\n\t\t\t\t\t\tclickEditIcon(\"Opportunity Name\");\n\t\t\t\t\t\t\n\t\t\t\t\t\topportunityPageFos.selectValueFromDropdownInEditBox(stageLabel, stageValue);\n\n\t\t\t\t\t\tclickOnButtonInPopup(saveLabel);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\n\t\t\t\t\t\ttestStepFailed(\"Due to above errors : \"+Errormessage +\" , We cannot move further.\");\n\n\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t\n\n\t\t\t\t\t}count++;\n\n\t\t\t\t\t}while ((isElementPresent(GOR.error_sqcMethod)));\n\n\t\t\t\t\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in adSubmitDetails\" + e.getClass().getName());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `adSubmitDetails`, appears to be a test automation script that submits details for an opportunity in a software application. The method takes 23 parameters:\n\n1-21: Various labels and values for fields such as invoice numbers, engine numbers, chassis numbers, insurance company names, dates, etc.\n\n22-23: Two more labels, `stageLabel` and `saveLabel`, which are used to select a stage and save the opportunity.\n\nThe method performs the following actions:\n\n1. Tests whether it's running in a specific environment (PREPROD or UAT) and adjusts its behavior accordingly.\n2. Enters values into various fields on the opportunity page, including:\n\t* Invoice numbers\n\t* Engine numbers\n\t* Chassis numbers\n\t* Insurance company names\n\t* Dates\n3. Selects options from dropdown menus and side arrows as needed.\n4. Saves the opportunity and waits for the page to load.\n5. If an error message is displayed, it attempts to resolve the issue by:\n\t* Changing the stage of the opportunity to \"AD Pending\"\n\t* Saving the opportunity again\n\t* Refreshing the page\n\t* Waiting for the page to load again\n6. If the error persists after three attempts, it marks the test as failed.\n\nThe method also includes some error handling and logging mechanisms to report any issues that may occur during execution.",
        "input": [
            "String editLabel",
            "String invoiceNumberLabel",
            "String invoiceNumberValue",
            "String insuranceNumberLabel",
            "String insuranceNumberValue",
            "String engineNumberLabel",
            "String engineNumberValue",
            "String engineNoEncryptedLabel",
            "String insuranceDateLabel",
            "String insuranceDateValue",
            "String insuranceCompanyNameLabel",
            "String insuranceCompanyNameValue",
            "String chasisNoLabel",
            "String chasisNoValue",
            "String taxReceiptLabel",
            "String taxReceiptValue",
            "String registrationNumberLabel",
            "String registrationNumberValue",
            "String actualInvoiceDateLabel",
            "String actualInvoiceDateValue",
            "String actualInvoiceNoLabel",
            "String actualInvoiceNoValue",
            "String stageLabel",
            "String stageValue",
            "String saveLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow2",
        "code": "public void qcFlow2(String statusLabel,String statusValue3,String acceptLabel,String invoiceLabel, String invoiceDetailsLabel, String blindDataEntryLabel,\n\t\t\tString qcEngineNumberLabel, String qcEngineNumberValue, String qcChassisNumberLabel,\n\t\t\tString qcChassisNumberValue, String passLabel,\n\t\t\tString insuranceLabel, String insuranceDetailsLabel, String submitLabel, String onlySaveLabel,String statusValue4) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# Second QC Flow #\");\n\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue3);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\t\t\t\n\t\t\tclickOnDocumentTab(invoiceLabel);\n\t\t\tverifyDocumentDetails(invoiceDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcEngineNumberLabel, qcEngineNumberValue);\n\t\t\tenterValueInField(qcChassisNumberLabel, qcChassisNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(insuranceLabel);\n\t\t\tverifyDocumentDetails(insuranceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue4);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow2\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `qcFlow2`, is a test step that simulates a series of actions in an application. The method takes 16 string parameters, which are used to perform various actions such as:\n\n1. Refreshing the page and waiting for it to load\n2. Verifying the case status and accepting it\n3. Entering values into fields for QC engine number and chassis number\n4. Clicking on buttons for passing documents (invoice and insurance)\n5. Submitting and saving changes\n\nThe method also includes error handling, where if any exception occurs during the execution of the test step, it will be caught and a failure message will be logged with the type of exception.\n\nIn summary, this method is designed to automate a specific workflow or process in an application, likely related to quality control (QC) processes.",
        "input": [
            "String statusLabel",
            "String statusValue3",
            "String acceptLabel",
            "String invoiceLabel",
            "String invoiceDetailsLabel",
            "String blindDataEntryLabel",
            "String qcEngineNumberLabel",
            "String qcEngineNumberValue",
            "String qcChassisNumberLabel",
            "String qcChassisNumberValue",
            "String passLabel",
            "String insuranceLabel",
            "String insuranceDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue4"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "workbenchFlow",
        "code": "public void workbenchFlow(String environmentValue, String loginWithSalesLabel, String userName, String password,\n\t\t\tString caseIdLabel, String caseIdValue,String chassisNumberLabel,String chasisNumberValue,String engineNumberLabel,String engineNumberValue,String workBenchFileLocation,String dataLabel,String insertLabel,\n\t\t\tString vahanApiEventLabel, String fromFileLabel, String nextLabel, String mapFieldsLabel,\n\t\t\tString confirmInsertLabel) {\n\t\ttry {\n\t\t\t\n\t\t\ttestStepInfo(\"# Workbench flow for Vaahan API Process #\");\n\t\t\t\n\t\t\tworkBench.selectValueFromDropdown(environmentValue);\n\t\t\tworkBench.clickOnTermsCheckbox();\n\t\t\tworkBench.clickOnButton(loginWithSalesLabel);\n\n\t\t\tloginLogout.loginToWorkBench(userName, password);\n\t\t\t\n\t\t\tif(!isElementDisplayed(GOR.wb_homePage, 5))\n\t\t\t{\n\t\t\t\tworkBench.selectValueFromDropdown(environmentValue);\n\t\t\t\tworkBench.clickOnTermsCheckbox();\n\t\t\t\tworkBench.clickOnButton(loginWithSalesLabel);\n\t\t\t\tloginLogout.loginToWorkBench(userName, password);\n\t\t\t}\n\t\t\t\n\t\t\tworkBench.readAndReplaceDataInCsvFile(workBenchFileLocation, caseIdLabel, caseIdValue);\n\t\t\tworkBench.readAndReplaceDataInCsvFile(workBenchFileLocation,chassisNumberLabel,chasisNumberValue);\n\t\t    workBench.readAndReplaceDataInCsvFile(workBenchFileLocation, engineNumberLabel,engineNumberValue );\n\t\t\n\t\t    workBench.selectValueFromGlobalDropdown(dataLabel,insertLabel);\n\t\t\tworkBench.selectObjectTypeValue(vahanApiEventLabel);\n\t\t\tworkBench.clickOnRadioButton(fromFileLabel);\n\t\t\tworkBench.toUploadFile(workBenchFileLocation);\n\t\t\tworkBench.clickOnButton(nextLabel);\n\n\t\t\tworkBench.clickOnButton(mapFieldsLabel);\n\t\t\tworkBench.clickOnButton(confirmInsertLabel);\n\t\t\t\n\t\t\tworkBench.verifyWorkbenchStatus();\n\t\t\t\n\t\t//\tloginLogout.logoutFromWorkbench();\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\ttestStepFailed(\"Failled in workbenchFlow\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `workbenchFlow`, is used to automate a workflow process in the WorkBench application. The method takes 17 input parameters that represent various values and labels required for the workflow.\n\nThe method performs the following steps:\n\n1. It logs a test step information with the description \"# Workbench flow for Vaahan API Process #\".\n2. It selects a value from a dropdown menu using the `environmentValue` parameter.\n3. It clicks on a terms checkbox and then a button labeled `loginWithSalesLabel`.\n4. It logs in to the WorkBench application using the `userName` and `password` parameters.\n5. If the home page of the WorkBench is not displayed, it repeats steps 2-4.\n6. It reads and replaces data from CSV files for case ID, chassis number, and engine number using the respective label and value parameters.\n7. It selects values from global dropdowns using the `dataLabel` and `insertLabel` parameters.\n8. It sets the object type to a Vahan API event using the `vahanApiEventLabel` parameter.\n9. It uploads a file from the specified location using the `workBenchFileLocation` parameter.\n10. It clicks on the \"Next\" button.\n11. It maps fields and then confirms the insertion.\n12. Finally, it verifies the WorkBench status.\n\nThe method also includes error handling to catch any exceptions that may occur during the execution of the workflow.",
        "input": [
            "String environmentValue",
            "String loginWithSalesLabel",
            "String userName",
            "String password",
            "String caseIdLabel",
            "String caseIdValue",
            "String chassisNumberLabel",
            "String chasisNumberValue",
            "String engineNumberLabel",
            "String engineNumberValue",
            "String workBenchFileLocation",
            "String dataLabel",
            "String insertLabel",
            "String vahanApiEventLabel",
            "String fromFileLabel",
            "String nextLabel",
            "String mapFieldsLabel",
            "String confirmInsertLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow3",
        "code": "public void qcFlow3(String statusLabel, String statusValue5, String acceptLabel, String rcCheckLabel,String rcCheckDetailsLabel,String passLabel,\n\t\t\tString submitLabel, String onlySaveLabel, String statusValue6) {\n\t\ttry {\t\t\t\n\t\t\ttestStepInfo(\"# Third QC Flow #\");\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue5);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\n\t\t\tclickOnDocumentTab(rcCheckLabel);\n\t\t\tverifyDocumentDetails(rcCheckDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\t\t\t\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue6);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed In qcFlow3\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is named `qcFlow3` and it appears to be a test case for quality control (QC) flow. The method takes 10 string parameters that represent various labels and values used in the QC process.\n\nThe method performs several actions:\n\n1. It records a test step information with the label \"# Third QC Flow #\".\n2. It gets the current case status based on the `statusLabel` and `statusValue5`.\n3. It clicks the main buttons associated with the `acceptLabel`.\n4. It verifies the QC owner name.\n5. It navigates to the document tab and verifies the document details using the `rcCheckLabel` and `rcCheckDetailsLabel`.\n6. It clicks on the button labeled `passLabel`.\n7. It submits the case by clicking the main buttons associated with the `submitLabel`.\n8. It saves the changes without submitting by clicking the button labeled `onlySaveLabel`.\n9. It gets an error message from a submit popup, if any.\n10. Finally, it checks the current case status again using the `statusLabel` and `statusValue6`.\n\nThe method catches any exceptions that occur during its execution and logs them as test step failures.",
        "input": [
            "String statusLabel",
            "String statusValue5",
            "String acceptLabel",
            "String rcCheckLabel",
            "String rcCheckDetailsLabel",
            "String passLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue6"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyButtonIsPresent",
        "code": "public void verifyButtonIsPresent(String optionToClick) {\n\t\ttry {\n\t\t\tString navigationOption = \"'\" + optionToClick + \"' navigation option #xpath=//div[text()='\" + optionToClick\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(navigationOption, 10);\n\t\t\tif (isElementDisplayed(navigationOption, 5)) {\n\t\t\t\tmanualScreenshot(optionToClick + \" button is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(optionToClick + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyButtonIsPresent. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyButtonIsPresent`, verifies if a specific button or option with the given text is present on the UI. It uses Selenium WebDriver to perform this verification.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `optionToClick` string.\n2. It waits for the element matching the constructed XPath expression using the `waitForElement` method (not shown in the code snippet).\n3. If the element is displayed within a certain timeout period, it takes a manual screenshot with the button's name as the filename to confirm that the button is present.\n4. If the element is not displayed or the timeout expires, it marks the test step as failed.\n\nThe method catches any exceptions that might occur during execution and reports them as test failures if they do.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyFieldHasListOfValues",
        "code": "public void verifyFieldHasListOfValues(String fieldName) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[text()='\" + fieldName + \"']//..//button\";\n\t\t\tString valueList = \"#xpath=//label[text()='\" + fieldName\n\t\t\t\t\t+ \"']//..//div[@role='listbox']//lightning-base-combobox-item\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t\tList<WebElement> e = findWebElements(valueList);\n\t\t\t\tif (e.size() > 1) {\n\t\t\t\t\tmanualScreenshot(\"Pick list has appeared after clicking \" + fieldName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Pick list has not appeared after clicking \" + fieldName);\n\t\t\t\t}\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"list is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldHasListOfValues \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldHasListOfValues`, verifies that a specific field on a web page has a list of values when clicked. The method takes a `String` parameter `fieldName` which is the name of the field to verify.\n\nHere's what the method does:\n\n1. It constructs two XPath expressions: one for the field itself and another for the list box containing the pick list.\n2. It waits for the field element to be displayed, then scrolls to it and clicks on it.\n3. If the list box is displayed, it takes a manual screenshot if the list has more than one item. Otherwise, it fails the test step.\n4. If the list box is not displayed, it fails the test step.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String fieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String fieldName) {\n\t\ttry {\n\t\t\tString field = fieldName + \"#xpath=//label[normalize-space(text())='\" + fieldName + \"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(fieldName + \" field is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresent \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresent`, verifies if a specific field is present on the web page. It takes a `fieldName` as input and performs the following actions:\n\n1. Creates an XPath expression to locate the field using the provided `fieldName`.\n2. Waits for the element to be present using the `waitForElement` method.\n3. Checks if the element is displayed using the `isElementDisplayed` method.\n4. If the element is present, scrolls to it and highlights it using the `scrollToWebElement` and `highLighterMethod` methods respectively.\n5. Takes a manual screenshot with the field name as the file name.\n6. If the element is not present, marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String fieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyFieldIsPresentAndValueAutoPopulated",
        "code": "public String verifyFieldIsPresentAndValueAutoPopulated(String fieldName) {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString field = fieldName + \"#xpath=//label[normalize-space(text())='\" + fieldName + \"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod1(field);\t\n\t\t\t\t value = findWebElement(field).getAttribute(\"value\");\t\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(fieldName + \" field is present and value auto populated as \"+value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" field is present but value not auto populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresentAndValueAutoPopulated \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyFieldIsPresentAndValueAutoPopulated`, is used to verify if a specific field (identified by its name) is present on the web page and if its value has been auto-populated. \n\nThe method takes a string parameter `fieldName` which represents the name of the field to be verified. It performs the following actions:\n\n1. Creates an XPath expression to locate the field element.\n2. Waits for the field to appear (up to 10 seconds).\n3. Checks if the field is displayed.\n4. Scrolls to the field and highlights it using a highlighting method (`highLighterMethod1`).\n5. Retrieves the value of the field's input element.\n6. Verifies if the value is not empty. If it is, it indicates that the value has been auto-populated.\n7. Takes a manual screenshot with a message indicating whether the field is present and its value has been auto-populated or not.\n8. Returns the value of the field.\n\nIf any of these steps fail (e.g., the field is not present, or its value is empty), the method reports a test step failure with an appropriate error message.",
        "input": [
            "String fieldName"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickOnPopupButton",
        "code": "public void clickOnPopupButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=(//span[text()='\" + buttonName + \"']//parent::button)[2]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnPopupButton`, simulates a click on a popup button with the specified name. It uses Selenium WebDriver to perform the following actions:\n\n1. Construct an XPath expression to locate the button by its text.\n2. Wait for the element to be displayed within a certain time limit (10 seconds).\n3. If the element is displayed, simulate a click on it using `clickOn` method.\n4. Wait for 3 seconds after clicking the button.\n\nIf the button is not present or an exception occurs during the execution of these steps, the test step fails and an error message is logged.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyDocIsPresent",
        "code": "public void verifyDocIsPresent(String labelName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//span[@class='slds-path__title'][normalize-space(text())='\" + labelName + \"'] | //li[normalize-space(text())='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (isElementPresent(targetField)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\tmanualScreenshot(labelName + \" document is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocIsPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocIsPresent`, verifies if a specific document with the given label name is present on the webpage. \n\nIt uses an XPath expression to locate the element (either a span or li tag) containing the specified label name. The method then waits for this element to be present, scrolls to it, highlights it using a separate method (`highLighterMethod1`), and takes a manual screenshot if the document is found as expected.\n\nIf the document is not found within the allotted time (3 seconds), or if any exceptions occur during the verification process, the method fails the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyErrorMessageInPopup",
        "code": "public String verifyErrorMessageInPopup(String validation) {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString error = \"#xpath=//div[@role='alert']//li\";\n\t\t\twaitForElement(error, 5);\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\tmessage = findWebElement(error).getText();\n\t\t\t\tif (message.equalsIgnoreCase(validation)) {\n\t\t\t\t\tmanualScreenshot(validation + \" Validation fired as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(validation + \" Validation not fired as expected instead we got \" + message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no any validation\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorMessageInPopup \" + e.getClass().getName());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `verifyErrorMessageInPopup`, verifies if a specific error message is displayed in a popup after an operation. It takes a `validation` string as input and checks if the expected error message matches the actual error message displayed in the popup.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the specified XPath (`#xpath=//div[@role='alert']//li`) to be displayed within 5 seconds.\n2. If the element is displayed, it checks if the error message text matches the input `validation` string (case-insensitive).\n3. If the messages match, it takes a manual screenshot with the validation message as the filename.\n4. If the messages do not match or if the element is not displayed within 5 seconds, it marks the test step as failed and provides an error message.\n5. In case of any exception, it also marks the test step as failed and logs the exception.\n\nThe method returns the actual error message that was found (if any).",
        "input": [
            "String validation"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "enterValueInBlindDataField",
        "code": "public void enterValueInBlindDataField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//label[text()='\" + labelName + \"']/..//input)[2]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tmanualScreenshot(\"Entered \" + value + \" in \" + labelName);\n\t\t\t} \t\t\t\n\t\t\telse {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInBlindDataField`, is used to enter a given value into a specific field on a web page. The field is identified by its label name and the method uses XPath to locate the input element corresponding to that label.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` and uses it to find the input element.\n2. It waits for the element to be present (up to 10 seconds) and then checks if the element is displayed.\n3. If the element is displayed, it scrolls to the element and enters the given `value` into the field using a typing action.\n4. After entering the value, it takes a manual screenshot as a test step.\n5. If the element is not present or the operation fails for any reason, it marks the test step as failed.\n\nThe method catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "coApplicantQcFlow1",
        "code": "public void coApplicantQcFlow1(String statusLabel, String statusValue1, String acceptLabel, String primaryOvdLabel,\n\t\t\tString primaryOvdDetailsLabel, String qcPrimaryDobLabel, String qcPrimaryDobValue,\n\t\t\tString qcPrimaryOvdNoLabel, String qcPrimaryOvdNoValue, String ovdLabel, String ovdDetailsLabel,\n\t\t\tString blindDataEntryLabel, String qcDateOfBirthLabel, String qcDateOfBirthValue, String qcOvdNumberLabel,\n\t\t\tString qcOvdNumberValue, String passLabel, String applicationFormLabel, String applicationFormDetailsLabel,\n\t\t\tString qcMobileNumberLabel, String qcMobileNumberValue, String primaryPanForm60Label,\n\t\t\tString primaryPanForm60DetailsLabel, String primaryQcPanNoLabel, String primaryQcPanNoValue,\n\t\t\tString panForm60Label, String panForm60DetailsLabel, String qcPanValidationLabel,\n\t\t\tString qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue, String primaryCustomerPhotoLabel, String primaryCustomerPhotoDetailsLabel,\n\t\t\tString customerPhotoLabel, String customerPhotoDetailsLabel, String downPaymentReceiptLabel,\n\t\t\tString downpaymentReceiptDetailsLabel, String submitLabel, String onlySaveLabel, String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"First QC Flow\");\n\n\t\t\tgetCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\n\t\t\tclickOnDocumentTab(primaryOvdLabel);\n\t\t\tverifyDocumentDetails(primaryOvdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPrimaryDobLabel, qcPrimaryDobValue);\n\t\t\tenterValueInField(qcPrimaryOvdNoLabel, qcPrimaryOvdNoValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(primaryPanForm60Label);\n\t\t\tverifyDocumentDetails(primaryPanForm60DetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(primaryQcPanNoLabel, primaryQcPanNoValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(primaryCustomerPhotoLabel);\n\t\t\tverifyDocumentDetails(primaryCustomerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `coApplicantQcFlow1` that appears to be part of a test automation framework. The method simulates a user interacting with a web application, specifically completing a \"QC Flow 1\" process.\n\nHere's a brief overview of what the method does:\n\n1. It sets up some initial conditions by calling a `testStepInfo` method and getting the current case status.\n2. It then performs various actions on the application:\n\t* Clicks main buttons (accept, pass) and verifies document details for several documents (primary OVD, OVD, Application Form, Pan Form 60, etc.).\n\t* Enters values in fields and selects options from dropdown menus.\n\t* Expands arrows and clicks on radio buttons.\n3. After completing these actions, the method calls `getErrorMessageInSubmitPopup` to check for any error messages that may have appeared during the process.\n4. Finally, it updates the case status again.\n\nThe method catches any exceptions that occur during its execution and logs an error message if one is thrown.\n\nOverall, this method seems to be designed to test a specific workflow or process in a web application, likely related to mortgage or loan processing.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String primaryOvdLabel",
            "String primaryOvdDetailsLabel",
            "String qcPrimaryDobLabel",
            "String qcPrimaryDobValue",
            "String qcPrimaryOvdNoLabel",
            "String qcPrimaryOvdNoValue",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String primaryPanForm60Label",
            "String primaryPanForm60DetailsLabel",
            "String primaryQcPanNoLabel",
            "String primaryQcPanNoValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String primaryCustomerPhotoLabel",
            "String primaryCustomerPhotoDetailsLabel",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyAndPrintErrorMessageInQcField",
        "code": "public void verifyAndPrintErrorMessageInQcField(String labelName, String expectedMessage) {\n\t\ttry {\n\t\t\tString errorField = \"Error Filed#xpath=//label[text()='\" + labelName + \"']/..//p//span[text()='\"\n\t\t\t\t\t+ expectedMessage + \"']\";\n\t\t\tif (isElementDisplayed(errorField, 3)) {\n\t\t\t\tmanualScreenshot(\"Expected Validation is fired : \" + expectedMessage + \" in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(expectedMessage+ \" Error message not displayed under \" + labelName + \" field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessageInQcField. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInQcField`, is used to verify if a specific error message is displayed under a given label name in a Quality Control (QC) field. \n\nThe method takes two string parameters: `labelName` and `expectedMessage`. It constructs an XPath expression to locate the error message span element based on these input values.\n\nThe method then attempts to find the error message span element using the constructed XPath expression. If the element is displayed, it takes a manual screenshot with a descriptive name indicating that the expected validation is fired for the given label and message. \n\nIf the error message is not displayed, the test step fails. In case of any exception during the execution of this method, the test step also fails with an error message including the type of exception that occurred.",
        "input": [
            "String labelName",
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyDocNotPresent",
        "code": "public void verifyDocNotPresent(String labelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//li[normalize-space(text())='\" + labelName + \"']\";\n\t\t\twaitForElement(targetField, 3);\n\t\t\tif (!isElementDisplayed(targetField, 3)) {\n\t\t\t\tmanualScreenshot(labelName + \" document is not present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  document is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocNotPresent\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocNotPresent`, verifies if a specific document (identified by the `labelName` parameter) is not present on the current page. It uses Selenium WebDriver to interact with the page.\n\nHere's a step-by-step breakdown:\n\n1. The method first waits for the page to load using the `waitForPageToLoad()` method.\n2. It then constructs an XPath expression to locate an HTML element (`li` tag) that contains the specified `labelName`.\n3. The method waits for this element to be present on the page, with a timeout of 3 seconds, using the `waitForElement()` method.\n4. If the element is not displayed within the specified time, it takes a manual screenshot with a name indicating that the document was not present as expected.\n5. If the element is displayed, it considers the test step failed because the document was unexpectedly present.\n6. The method catches any exceptions that may occur during execution and marks the test step as failed if an exception is thrown.\n\nIn summary, this method verifies the absence of a specific document on a page and takes appropriate actions based on its presence or absence.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow1NonIMPSWithPOA",
        "code": "public void qcFlow1NonIMPSWithPOA(String statusLabel,String statusValue1,String acceptLabel,String ovdLabel, String ovdDetailsLabel, String blindDataEntryLabel, String qcDateOfBirthLabel,\n\t\t\tString qcDateOfBirthValue, String qcOvdNumberLabel, String qcOvdNumberValue, String passLabel,String poaLabel,String poaDetailsLabel,\n\t\t\tString applicationFormLabel, String applicationFormDetailsLabel, String qcMobileNumberLabel,\n\t\t\tString qcMobileNumberValue, String panForm60Label, String panForm60DetailsLabel,\n\t\t\tString qcPanValidationLabel, String qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue,String qcCancelledChequeACNumberLabel, String customerPhotoLabel, String customerPhotoDetailsLabel,\n\t\t\tString downPaymentReceiptLabel, String downpaymentReceiptDetailsLabel, String submitLabel,\n\t\t\tString onlySaveLabel,String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# First QC Flow #\");\t\t\n\t\t    getCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\t\t\t\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(poaLabel);\n\t\t\tverifyDocumentDetails(poaDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\t\t\t\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(\"Key Fact Statement\");\n\t\t\tclickOnButton(passLabel);\n\t\t\t\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t//\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\n\t\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\n\t\t//\t}else {\n\n\t\t//\t\tselectValueFromDropdown(qcPanValidationLabel, \"Complete Form 60 Available\");\n\n\t\t//\t}\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t//\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\n\t\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\n\t\t//\t}\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t//\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\n\t\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, \"12/31/2034\");\n\n\t\t\t}else {\n\n\t\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, \"31/12/2034\");\n\n\t\t\t}\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcCancelledChequeACNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\ttransferControlToWindow(1, false);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tcustomerPageAdmin.clickEditIcon(\"Dedupe Status\");\n\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Dedupe Status\",\"No Match\");\n\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Primary Dedupe Status\",\"No Match\");\n\t\t\thomePageAdmin.clickOnSaveButton(\"Save\");\t\t\n\t\t\ttransferControlToWindow(2, false);\n\t\t\t\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1NonIMPS\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `qcFlow1NonIMPSWithPOA` that appears to be part of an automated testing framework. The method simulates user interactions with a web application, specifically a loan processing system.\n\nThe method takes 34 string parameters, which are likely labels and values used in the test case. It then performs various actions, such as:\n\n1. Verifying the case status\n2. Clicking main buttons (e.g., \"Accept\")\n3. Expanding arrows for blind data entry\n4. Entering values into fields\n5. Selecting values from dropdown menus\n6. Verifying document details\n7. Transferring control to a new window\n8. Refreshing the page and waiting for it to load\n\nThe method also includes some conditional logic, such as checking the environment value (UAT or not) to determine which values to enter in certain fields.\n\nFinally, the method catches any exceptions that may occur during execution and reports them as test failures.\n\nOverall, this method appears to be a comprehensive testing script for a loan processing system, covering various scenarios and user interactions.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String poaLabel",
            "String poaDetailsLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String qcCancelledChequeACNumberLabel",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "compareTextInFMSTable",
        "code": "public String compareTextInFMSTable(String labelName,String value) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']//ancestor::table//td//span[text()='\" + value + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\tmanualScreenshot(labelName+\" field is updated as expected \"+value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromFMSTable.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `compareTextInFMSTable`, compares the expected value with the actual value in a table cell of an FMSTable (Flexible Markup Structure Table) based on a given label name and value. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the table cell that matches the provided label name and value.\n2. It waits for the element to be displayed within a certain time limit (10 seconds).\n3. If the element is displayed, it scrolls to the element, highlights it using `highLighterMethod1`, and takes a manual screenshot with a descriptive message indicating that the field has been updated as expected.\n4. If the element is not displayed, it marks the test step as failed.\n5. In case of any exception during this process, it also marks the test step as failed.\n\nThe method returns an empty string (`text = \"\";`) but does not seem to use this return value in its current implementation.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectValueFromFMSDocDropdown",
        "code": "public void selectValueFromFMSDocDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//li[normalize-space(text())='\" + dropdownName + \"']//select[1]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//li[normalize-space(text())='\" + dropdownName + \"']//option[text()='\" + value + \"']\";\t\t\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\t\tselect.selectByVisibleText(value);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromFMSDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromFMSDocDropdown`, is used to select a value from a dropdown list within an FMS Doc document. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression for the dropdown element based on its name.\n2. It waits for the dropdown element to appear (with a timeout of 10 seconds).\n3. If the dropdown is displayed, it scrolls to that element and then constructs an XPath expression for the specific value within the dropdown list.\n4. It waits for the selected value to appear (again with a timeout of 10 seconds).\n5. If the value is displayed, it uses the `Select` class to select the value by its visible text.\n6. The method takes a manual screenshot after successfully selecting the value.\n7. If any step fails (e.g., the dropdown or value are not present), it reports a test failure.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectValueFromFMSDropdown",
        "code": "public void selectValueFromFMSDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[contains(@class,'forcePageBlockItemEdit')]//span[text()='\" + dropdownName + \"']/..//..//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'forcePageBlockItemEdit')]//span[text()='\" + dropdownName + \"']/ancestor::div//..//li//a[text()='\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromFMSDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromFMSDropdown`, is used to select a value from a dropdown menu with the given name and value. The method uses various UI automation tools (e.g., WebDriver, Selenium) to interact with the web application.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression for the dropdown element based on the provided `dropdownName`.\n2. It waits for the dropdown element to be visible and then scrolls to it.\n3. If the dropdown is displayed, it clicks on the dropdown to expand its list of options.\n4. It constructs another XPath expression for the specific value in the dropdown's list and waits for it to be visible.\n5. If the value is displayed, it clicks on the value to select it.\n6. If the selection is successful, it takes a manual screenshot as proof.\n7. If any step fails (e.g., the dropdown or value is not present), it reports a test failure with an error message.\n\nThe method catches and handles any exceptions that may occur during execution, reporting a test failure if an exception is thrown.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickEditIcon",
        "code": "public void clickEditIcon(String fieldLabel) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/..//parent::div/..//following-sibling::dd//button\";\n\t\t\tString scroll = fieldLabel + \" Edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(scroll, 10);\n\t\t\tscrollToElement(scroll);\n\t\t\tscrollbycordinates(scroll);\n\t\t\tif (isElementPresent(editOption)) {\n\t\t\t\tscrollToElement(editOption);\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickEditIcon. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditIcon`, attempts to locate and click an \"Edit\" button associated with a specific field label. Here's a step-by-step breakdown:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs two XPath expressions:\n\t* `editOption`: The full XPath expression to locate the \"Edit\" button, which includes navigating from the field label element to its parent and then to the sibling \"dd\" element, followed by a \"button\" element.\n\t* `scroll`: A shorter XPath expression that simply targets the field label element.\n3. It waits for the `scroll` element to be present using `waitForElement()` with a timeout of 10 seconds.\n4. If the `scroll` element is found, it scrolls to that element using `scrollToElement()`.\n5. It then uses `scrollbycordinates()` to scroll to the correct position.\n6. The method checks if the `editOption` element is present using `isElementPresent()`. If it is:\n\t* It scrolls to the `editOption` element using `scrollToElement()`.\n\t* It scrolls to the web element associated with the `editOption` element using `scrollToWebElement()`.\n\t* It clicks on the `editOption` element using `clickOnSpecialElement()`.\n\t* It waits for 3 seconds using `waitTime(3)`.\n7. If the `editOption` element is not present, it logs a test step failure with the message \"Field label edit button is not present.\"\n\nIf any exceptions occur during this process, they are caught and logged as test step information.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "qcFlow1WithPOA",
        "code": "public void qcFlow1WithPOA(String statusLabel,String statusValue1,String acceptLabel,String ovdLabel, String ovdDetailsLabel, String blindDataEntryLabel, String qcDateOfBirthLabel,\n\t\t\tString qcDateOfBirthValue, String qcOvdNumberLabel, String qcOvdNumberValue, String passLabel,String poaLabel,String poaDetailsLabel,\n\t\t\tString applicationFormLabel, String applicationFormDetailsLabel, String qcMobileNumberLabel,\n\t\t\tString qcMobileNumberValue, String panForm60Label, String panForm60DetailsLabel,\n\t\t\tString qcPanValidationLabel, String qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue, String customerPhotoLabel, String customerPhotoDetailsLabel,\n\t\t\tString downPaymentReceiptLabel, String downpaymentReceiptDetailsLabel, String submitLabel,\n\t\t\tString onlySaveLabel,String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"# First QC Flow #\");\n\n\t\t    getCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\t\t\t\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(poaLabel);\n\t\t\tverifyDocumentDetails(poaDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\t\t\t\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t\t\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\t\t\t} else {\n\t\t\t\tselectValueFromDropdown(qcPanValidationLabel, \"Complete Form 60 Available\");\n\t\t\t}\n\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\t\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\t\t\t}\n\t\t\t\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t//\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tif (GOR.environmentValue.equalsIgnoreCase(\"UAT\")) {\n\n\t\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, \"12/31/2034\");\n\n\t\t\t}else {\n\n\t\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, \"31/12/2034\");\n\n\t\t\t}\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\t\t\t\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `qcFlow1WithPOA` that appears to be part of a test automation framework. The method simulates user interactions with a web-based application, specifically a mortgage loan application process.\n\nHere's a brief summary of what the method does:\n\n1. It sets up some initial conditions by calling various methods (e.g., `testStepInfo`, `getCaseStatus`, `clickMainButtons`, etc.).\n2. It then performs a series of actions on the application, including:\n\t* Clicking on different tabs and buttons\n\t* Entering values in text fields\n\t* Selecting options from dropdown menus\n\t* Verifying document details\n\t* Expanding or collapsing sections (e.g., \"blind data entry\")\n3. The method also handles some conditional logic based on the environment value (UAT or otherwise).\n4. Finally, it calls `getErrorMessageInSubmitPopup` to retrieve any error messages that may have occurred during the submission process.\n5. If an exception occurs at any point during the execution of the method, it catches and logs the error using a `testStepFailed` method.\n\nOverall, this method is designed to automate the testing of a mortgage loan application process by simulating user interactions with the application.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String poaLabel",
            "String poaDetailsLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "coApplicantQcFlow1WithPOA",
        "code": "public void coApplicantQcFlow1WithPOA(String statusLabel, String statusValue1, String acceptLabel,\n\t\t\tString primaryOvdLabel, String primaryOvdDetailsLabel, String qcPrimaryDobLabel, String qcPrimaryDobValue,\n\t\t\tString qcPrimaryOvdNoLabel, String qcPrimaryOvdNoValue, String ovdLabel, String ovdDetailsLabel,\n\t\t\tString blindDataEntryLabel, String qcDateOfBirthLabel, String qcDateOfBirthValue, String qcOvdNumberLabel,\n\t\t\tString qcOvdNumberValue, String passLabel, String primaryPoaLabel, String primaryPoaDetailsLabel,\n\t\t\tString poaLabel, String poaDetailsLabel, String applicationFormLabel, String applicationFormDetailsLabel,\n\t\t\tString qcMobileNumberLabel, String qcMobileNumberValue,String qcPrimaryMobileNumberLabel, String qcPrimaryMobileNumberValue, String primaryPanForm60Label,\n\t\t\tString primaryPanForm60DetailsLabel,String primaryQcPanValidationLabel, String primaryQcPanNoLabel, String primaryQcPanNoValue,\n\t\t\tString panForm60Label, String panForm60DetailsLabel, String qcPanValidationLabel,\n\t\t\tString qcPanValidationValue, String qcPanNumberLabel, String qcPanNumberValue,\n\t\t\tString loanCumHypothecationAgreementLabel, String qcLoanCumHypothecationAgreementLabel,\n\t\t\tString proformaInvoiceLabel, String proformaInvoiceDetailsLabel, String ecsMandateLabel,\n\t\t\tString ecsMandateDetailsLabel, String mandateTypeLabel, String mandateTypeValue, String qcDealIdLabel,\n\t\t\tString dealIdValue, String qcMandateBarcodeLabel, String ecsBarcodeValue, String qcEcsEndDateLabel,\n\t\t\tString qcEcsEndDateValue, String qcMandateAcNumberLabel, String bankAccountNumberValue,\n\t\t\tString cancelledChequeLabel, String cancelledChequeDetailsLabel, String qcImpsValidationLabel,\n\t\t\tString qcImpsValidationValue, String qcCancelledChequeAcNumberLabel, String primaryCustomerPhotoLabel,\n\t\t\tString primaryCustomerPhotoDetailsLabel, String customerPhotoLabel, String customerPhotoDetailsLabel,\n\t\t\tString downPaymentReceiptLabel, String downpaymentReceiptDetailsLabel, String submitLabel,\n\t\t\tString onlySaveLabel, String statusValue2) {\n\t\ttry {\n\t\t\ttestStepInfo(\"First QC Flow\");\n\n\t\t\tgetCaseStatus(statusLabel, statusValue1);\n\t\t\tclickMainButtons(acceptLabel);\n\t\t\tverifyQcOwnerName();\n\n\t\t\tclickOnDocumentTab(primaryOvdLabel);\n\t\t\tverifyDocumentDetails(primaryOvdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPrimaryDobLabel, qcPrimaryDobValue);\n\t\t\tenterValueInField(qcPrimaryOvdNoLabel, qcPrimaryOvdNoValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ovdLabel);\n\t\t\tverifyDocumentDetails(ovdDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDateOfBirthLabel, qcDateOfBirthValue);\n\t\t\tenterValueInField(qcOvdNumberLabel, qcOvdNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(primaryPoaLabel);\n\t\t\tverifyDocumentDetails(primaryPoaDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(poaLabel);\n\t\t\tverifyDocumentDetails(poaDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(applicationFormLabel);\n\t\t\tverifyDocumentDetails(applicationFormDetailsLabel);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcMobileNumberLabel, qcMobileNumberValue);\n\t\t\tenterValueInField(qcPrimaryMobileNumberLabel, qcPrimaryMobileNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(\"Key Fact Statement\");\n\t\t\tclickOnButton(passLabel);\n\t\t\t\n\t\t\tclickOnDocumentTab(primaryPanForm60Label);\n\t\t\tverifyDocumentDetails(primaryPanForm60DetailsLabel);\n\t\t\tselectValueFromDropdown(primaryQcPanValidationLabel, qcPanValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(primaryQcPanNoLabel, primaryQcPanNoValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(panForm60Label);\n\t\t\tverifyDocumentDetails(panForm60DetailsLabel);\n\t\t\tselectValueFromDropdown(qcPanValidationLabel, qcPanValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcPanNumberLabel, qcPanNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(loanCumHypothecationAgreementLabel);\n\t\t\tverifyDocumentDetails(qcLoanCumHypothecationAgreementLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(proformaInvoiceLabel);\n\t\t\tverifyDocumentDetails(proformaInvoiceDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(ecsMandateLabel);\n\t\t\tverifyDocumentDetails(ecsMandateDetailsLabel);\n\t\t\tclickOnRadioButton(mandateTypeLabel, mandateTypeValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcDealIdLabel, dealIdValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ecsBarcodeValue);\n\t\t\tenterValueInBlindDataField(qcEcsEndDateLabel, qcEcsEndDateValue);\n\t\t\tenterValueInBlindDataField(qcMandateAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(cancelledChequeLabel);\n\t\t\tverifyDocumentDetails(cancelledChequeDetailsLabel);\n\t\t\tselectValueFromDropdown(qcImpsValidationLabel, qcImpsValidationValue);\n\t\t\texpandArrows(blindDataEntryLabel);\n\t\t\tenterValueInField(qcCancelledChequeAcNumberLabel, bankAccountNumberValue);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(primaryCustomerPhotoLabel);\n\t\t\tverifyDocumentDetails(primaryCustomerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(customerPhotoLabel);\n\t\t\tverifyDocumentDetails(customerPhotoDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\tclickOnDocumentTab(downPaymentReceiptLabel);\n\t\t\tverifyDocumentDetails(downpaymentReceiptDetailsLabel);\n\t\t\tclickOnButton(passLabel);\n\n\t\t\ttransferControlToWindow(1, false);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tcustomerPageAdmin.clickEditIcon(\"Dedupe Status\");\n\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Dedupe Status\",\"No Match\");\n\t\t\tcustomerPageAdmin.selectValueFromDropdown(\"Primary Dedupe Status\",\"No Match\");\n\t\t\thomePageAdmin.clickOnSaveButton(\"Save\");\t\t\n\t\t\ttransferControlToWindow(2, false);\n\t\t\t\n\t\t\tclickMainButtons(submitLabel);\n\t\t\tclickOnButton(onlySaveLabel);\n\t\t\tgetErrorMessageInSubmitPopup();\n\n\t\t\tgetCaseStatus(statusLabel, statusValue2);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to complete qcFlow1\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This is a Java method named `coApplicantQcFlow1WithPOA` that appears to be part of an automated testing framework. The method is designed to perform a series of actions on a web-based application, specifically the \"First QC Flow\" process.\n\nThe method takes 64 parameters, which are all string values, and uses them to perform various actions such as:\n\n* Verifying case status\n* Clicking buttons and links\n* Entering values into fields\n* Selecting values from dropdown menus\n* Expanding/collapsing arrows\n* Transferring control between windows\n* Refreshing the page\n* Waiting for the page to load\n\nThe method also includes error handling, catching any exceptions that may occur during execution and reporting a failure if an exception is thrown.\n\nIn summary, this method simulates a user interacting with a web-based application to complete the \"First QC Flow\" process, which appears to be related to loan or mortgage processing.",
        "input": [
            "String statusLabel",
            "String statusValue1",
            "String acceptLabel",
            "String primaryOvdLabel",
            "String primaryOvdDetailsLabel",
            "String qcPrimaryDobLabel",
            "String qcPrimaryDobValue",
            "String qcPrimaryOvdNoLabel",
            "String qcPrimaryOvdNoValue",
            "String ovdLabel",
            "String ovdDetailsLabel",
            "String blindDataEntryLabel",
            "String qcDateOfBirthLabel",
            "String qcDateOfBirthValue",
            "String qcOvdNumberLabel",
            "String qcOvdNumberValue",
            "String passLabel",
            "String primaryPoaLabel",
            "String primaryPoaDetailsLabel",
            "String poaLabel",
            "String poaDetailsLabel",
            "String applicationFormLabel",
            "String applicationFormDetailsLabel",
            "String qcMobileNumberLabel",
            "String qcMobileNumberValue",
            "String qcPrimaryMobileNumberLabel",
            "String qcPrimaryMobileNumberValue",
            "String primaryPanForm60Label",
            "String primaryPanForm60DetailsLabel",
            "String primaryQcPanValidationLabel",
            "String primaryQcPanNoLabel",
            "String primaryQcPanNoValue",
            "String panForm60Label",
            "String panForm60DetailsLabel",
            "String qcPanValidationLabel",
            "String qcPanValidationValue",
            "String qcPanNumberLabel",
            "String qcPanNumberValue",
            "String loanCumHypothecationAgreementLabel",
            "String qcLoanCumHypothecationAgreementLabel",
            "String proformaInvoiceLabel",
            "String proformaInvoiceDetailsLabel",
            "String ecsMandateLabel",
            "String ecsMandateDetailsLabel",
            "String mandateTypeLabel",
            "String mandateTypeValue",
            "String qcDealIdLabel",
            "String dealIdValue",
            "String qcMandateBarcodeLabel",
            "String ecsBarcodeValue",
            "String qcEcsEndDateLabel",
            "String qcEcsEndDateValue",
            "String qcMandateAcNumberLabel",
            "String bankAccountNumberValue",
            "String cancelledChequeLabel",
            "String cancelledChequeDetailsLabel",
            "String qcImpsValidationLabel",
            "String qcImpsValidationValue",
            "String qcCancelledChequeAcNumberLabel",
            "String primaryCustomerPhotoLabel",
            "String primaryCustomerPhotoDetailsLabel",
            "String customerPhotoLabel",
            "String customerPhotoDetailsLabel",
            "String downPaymentReceiptLabel",
            "String downpaymentReceiptDetailsLabel",
            "String submitLabel",
            "String onlySaveLabel",
            "String statusValue2"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickOnDedupeRadioButton",
        "code": "public void clickOnDedupeRadioButton(String RadioLabel) {\n\t\ttry {\n\t\t\tString radibutton = \"Radio Button#xpath=//div[text()='\" + RadioLabel\n\t\t\t\t\t+ \"']/following-sibling::div//following-sibling::div//span[@class='slds-radio_faux']\";\n\t\t\twaitForElement(radibutton, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(radibutton, 5)) {\n\t\t\t\tscrollToWebElement(radibutton);\n\t\t\t\tclickOnSpecialElement(radibutton);\n\t\t\t\tmanualScreenshot(\"Selected \" + RadioLabel + \" radio button\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(RadioLabel + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnDedupeRadioButton. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDedupeRadioButton`, simulates a user clicking on a dedupe radio button with the specified label on a web page. Here's a breakdown of what it does:\n\n1. It constructs an XPath expression to locate the radio button based on its text content matching the provided `RadioLabel` parameter.\n2. It waits for the element to be present using the `waitForElement` method, and then checks if the element is displayed within 5 seconds using `isElementDisplayed`.\n3. If the element is displayed, it scrolls to the element using `scrollToWebElement`, clicks on the element using `clickOnSpecialElement`, and takes a manual screenshot as proof of the action.\n4. If the element is not present or not displayed, it fails the test step with an error message indicating that the radio button was not found.\n5. The method catches any exceptions that may occur during execution and reports them as test failures.\n\nIn summary, this method automates the process of clicking on a dedupe radio button with a specific label on a web page, providing a way to verify the selection of the radio button in automated tests.",
        "input": [
            "String RadioLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "selectOrDeselectDedupeCheckBox",
        "code": "public void selectOrDeselectDedupeCheckBox(String applicantName,String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName + \"#xpath=//div[text()='\"+applicantName+\"']/following-sibling::div//following-sibling::div//span[text()='\"+labelName+\"']//parent::div//input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOrDeselectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectDedupeCheckBox`, is used to select or deselect a checkbox on a webpage based on the status provided (either \"check\" or \"uncheck\"). The method takes three parameters:\n\n* `applicantName`: the name of the applicant\n* `labelName`: the label associated with the checkbox\n* `status`: either \"check\" or \"uncheck\", indicating whether to select or deselect the checkbox\n\nThe method uses various Selenium WebDriver methods, such as `waitForElement`, `isElementPresent`, and `clickOnSpecialElement`, to interact with the checkbox. It also includes logging and screenshot functionality to record the test results.\n\nIn summary, this method is used to automate the selection or deselection of a specific checkbox on a webpage based on the provided status.",
        "input": [
            "String applicantName",
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "clickOnDedupeButton",
        "code": "public void clickOnDedupeButton(String applicantName,String value) {\n\t\ttry {\n\t\t\t\tString link = value + \"#xpath=//div[text()='\"+applicantName+\"']//following-sibling::div//button[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value+ e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDedupeButton`, attempts to click on a button with a specific text value that is located after an element containing a specified applicant name. The method takes two parameters: `applicantName` and `value`. \n\nHere's what the method does:\n\n1. It constructs a link string by concatenating the provided `value`, an XPath expression, and the `applicantName`.\n2. It waits for the constructed link to be displayed within a certain time frame (10 seconds).\n3. If the link is displayed, it scrolls to the link, highlights it using a separate method (`highLighterMethod`), and then attempts to click on the link using another method (`clickOnSpecialElement`).\n4. If the link is not displayed, it fails the test step with an error message.\n5. If any exception occurs during the execution of these steps, it catches the exception and fails the test step with a message that includes the value and the type of exception.\n\nIn summary, this method attempts to automate clicking on a button that is located after an element containing a specific applicant name, while handling potential exceptions and errors.",
        "input": [
            "String applicantName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyAndPrintErrorPopupMessage",
        "code": "public void verifyAndPrintErrorPopupMessage(String expectedErrorValidation) {\n\t\ttry {\n\t\t\twaitForElementToDisplay(errorTitle_Msg, 3);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 5)) {\n\t\t\t\tif (isElementDisplayed(error_Msg, 3)) {\n\t\t\t\t\tString errorValidation = getText(error_Msg);\n\t\t\t\t\tif (errorValidation.contains(expectedErrorValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - Got '\" + errorValidation + \"' instead of \"\n\t\t\t\t\t\t\t\t+ expectedErrorValidation);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorPopupMessage. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorPopupMessage`, verifies if an error popup message is displayed and contains the expected error validation. Here's a brief summary:\n\n1. The method waits for an element (`errorTitle_Msg`) to be displayed.\n2. If the element is displayed, it checks if another element (`error_Msg`) is also displayed.\n3. It extracts the text from `error_Msg` and checks if it contains the expected error validation provided as an input parameter (`expectedErrorValidation`).\n4. If the expected error validation is found, it takes a manual screenshot with a descriptive message. If not, it marks the test step as failed with a failure message.\n5. If either of the elements are not displayed or the expected error validation is not found, the method fails the test step with an appropriate failure message.\n\nThis method appears to be part of a test automation framework, likely used for verifying UI interactions and error handling in a Java-based application.",
        "input": [
            "String expectedErrorValidation"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "printStatement",
        "code": "public void printStatement(String infoMessage) {\n\t\ttry {\n\t\t\ttestStepInfo(infoMessage);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in testStepInfo. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "The `printStatement` method is a Java method that takes a `String` parameter `infoMessage`. It attempts to execute the `testStepInfo` method with the provided information message as an argument. If any exception occurs during this execution, it catches and logs the failure of the test step using the `testStepFailed` method, including the class name of the caught exception in the log message.",
        "input": [
            "String infoMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage(String message) {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]//span[text()='\"+message+\"']\";\n\t\t\twaitForElement(successPopup, 5);\n\t\t\tif (isElementDisplayed(successPopup, 5)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared : \"+message);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Cannot able to capture \"+message+\" success message\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessage`, is used to verify the presence of a specific success message on a webpage. It takes a string parameter `message` which represents the expected success message.\n\nHere's what it does:\n\n1. It constructs an XPath expression that targets the desired element containing the `message`.\n2. It uses a wait function (`waitForElement`) to wait for the specified time (5 seconds) until the element is displayed.\n3. If the element is displayed, it takes a manual screenshot with the message as part of the filename to confirm the success message was present.\n4. If the element is not displayed within the specified time, it logs an error message indicating that the success message was not found.\n5. In case any exception occurs during the execution, it logs an error message with the type of exception.\n\nIn summary, this method verifies if a specific success message appears on the webpage and takes a screenshot to confirm its presence.",
        "input": [
            "String message"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyValueInFMSDocDropdown",
        "code": "public void verifyValueInFMSDocDropdown(String dropdownName) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//li[normalize-space(text())='\" + dropdownName + \"']//select[1]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList =  dropdownName + \" value#xpath=//li[normalize-space(text())='\" + dropdownName + \"']//option[text()='Passed']\";\t\t\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\t\tselect.selectByVisibleText(\"Passed\");\n\t\t\t\t\tmanualScreenshot(\"Successfully verified Passed value is present in \" + dropdownName + \" dropdown\");\n\t\t\t\t\tselect.selectByVisibleText(\"Hold\");\n\t\t\t\t\tmanualScreenshot(\"Successfully verified Hold value is present in \" + dropdownName + \" dropdown\");\n\t\t\t\t\tselect.selectByVisibleText(\"Not Applicable\");\n\t\t\t\t\tmanualScreenshot(\"Successfully verified Hold value is present in \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Options are not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyValueInFMSDocDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t// This method is specific to US_2766934",
        "description": "This Java method, `verifyValueInFMSDocDropdown`, verifies the presence and selection of specific values (\"Passed\", \"Hold\", and \"Not Applicable\") in a dropdown list within an FMS Doc (likely a financial management system document). \n\nThe method takes a `String` parameter `dropdownName`, which is used to construct the XPath for locating the dropdown element. It then uses various WebDriver methods (`waitForElement`, `isElementDisplayed`, and `scrollToWebElement`) to interact with the dropdown.\n\nIf the dropdown is present, it selects each of the specified values (\"Passed\", \"Hold\", and \"Not Applicable\") using a `Select` object and takes manual screenshots after each selection. If any of these steps fail (e.g., the dropdown is not present or the options are not displayed), the method reports a test step failure.\n\nThis method appears to be specific to US_2766934, which suggests that it's part of a larger test suite for this specific requirement.",
        "input": [
            "String dropdownName"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "getTextAndCompare",
        "code": "public void getTextAndCompare(String LabelName, String expectedValue) {\n\t\t\tString text = \"\";\n\t\t\ttry {\n\t\t\t\tString Element = \"#xpath=//div[contains(text(),'\"+LabelName+\"')]\";\n\t\t\t\twaitForElement(Element, 10);\n\t\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\t\tscrollToWebElement(Element);\n\t\t\t\t\thighLighterMethod1(Element);\n\t\t\t\t\t\n\t\t\t\t\ttext = getText(Element);\n\t\t\t\t\tString arr[] = text.split(\":\");\n\t\t\t\t\tString value = arr[0];\n\t\t\t\t\t\n\t\t\t\t\tif (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\t\tmanualScreenshot(value + \" Value is available in \" + LabelName + \" as expected\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(expectedValue + \" Value is not populated in \" + LabelName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t\t}\n\n\t\t}",
        "description": "This Java method, `getTextAndCompare`, takes two string parameters: `LabelName` and `expectedValue`. It is used to retrieve the text value of an element on a web page that contains the given `LabelName`, compare it with the expected value, and report any discrepancies.\n\nThe method uses various Selenium WebDriver methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `highLighterMethod1`, `getText`) to interact with the web page. It also includes some custom error handling using a `try`-`catch` block.\n\nIn summary, this method is designed to:\n\n1. Locate an element on a web page that contains the given `LabelName`.\n2. Retrieve the text value of that element.\n3. Compare the retrieved text with the expected value.\n4. Report any differences between the two values.\n\nIf the element is not found or the comparison fails, the method reports a test step failure.",
        "input": [
            "String LabelName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyStatementInCase",
        "code": "public String verifyStatementInCase(String expectedValue) {\n\t\t\tString value=\"\";\n\t\t\ttry {\n\t\t\t\tString field = \"#xpath=//div[@class='slds-path__scroller_inner']\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\thighLighterMethod1(field);\t\n\t\t\t\t\t value = findWebElement(field).getText();\n\t\t\t\t\t value= value.split(\"\\n\")[0].trim();\n\t\t\t\t\t if (value.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\t\t\tmanualScreenshot(value +\" statement is present as expected in case page\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(expectedValue + \" statement is not present in case page\");\n\t\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Case statement is not present\");\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\ttestStepFailed(\"Failed in verifyStatementInCase \" + e.getClass().getName());\n\t\t\t}\n\t\t\treturn value;\n\t\t}",
        "description": "This Java method, `verifyStatementInCase`, verifies the presence of a specific statement on a web page. It takes an expected value as input and checks if it matches the actual text displayed on the page. The method uses various WebDriver methods to locate the element, scroll to it, highlight it, get its text, and compare it with the expected value. If the values match, it takes a manual screenshot; otherwise, it fails the test step.",
        "input": [
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "hoverToFieldAndGetText",
        "code": "public String hoverToFieldAndGetText(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[normalize-space(text())='\" + LabelName + \"']//following-sibling::input\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(findWebElement(Element)).perform();\n\t\t\t\tString value = \"#xpath=//label[normalize-space(text())='\" + LabelName + \"']//following-sibling::span\";\n\t\t\t\tif (isElementPresent(value)) {\n\t\t\t\t\ttext = getText(value);\n\t\t\t\t\thighLighterMethodManualScreenShot(value, LabelName + \" Value is Populated as expected : \" + text);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName + \" Value is not Populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `hoverToFieldAndGetText`, is used to hover over a specific field on the screen and retrieve its associated text value. The method takes a `LabelName` as input, which is used to identify the desired field.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the element (field) based on the provided `LabelName`.\n2. It waits for the element to be present and displayed.\n3. If the element is displayed, it scrolls to that element and uses an `Actions` object to hover over the field.\n4. It then checks if there's a sibling span element associated with the label (field). If found, it retrieves the text value of that span element.\n5. If the text value is retrieved successfully, it highlights the element and takes a screenshot as evidence.\n6. If the text value is not retrieved or the field is not present, it fails the test step.\n\nThe method returns the retrieved text value as a string. If any exceptions occur during the execution of the method, it fails the test step with an error message.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyToggleButton",
        "code": "public void verifyToggleButton(String optionToClick) {\n\t\ttry {\n\t\t\tString toggleBtn = \"'\" + optionToClick + \"' navigation option #xpath=//span[text()='\"+optionToClick+\"']//parent::label//span[contains(@id,'toggle')]//span[1]\";\n\t\t\twaitForElement(toggleBtn, 10);\n\t\t\tif (isElementDisplayed(toggleBtn, 5)) {\t\t\t\n\t\t\t\tif (!isCheckBoxSelected(toggleBtn)) {\n\t\t\t\t\thighLighterMethod1(toggleBtn);\n\t\t\t\t\tclickOn(toggleBtn);\n\t\t\t\t\tmanualScreenshot(optionToClick + \" button is enabled\");\n\t\t\t\t}else {\n\t\t\t\t\tmanualScreenshot(optionToClick + \" button is already enabled as expected\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(optionToClick + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyToggleButton. Exception: \" + e.getClass());\n\t\t}\n\t}",
        "description": "This Java method, `verifyToggleButton`, verifies the state of a toggle button with the specified option to click. It uses Selenium WebDriver and XPath expressions to locate the element.\n\nHere's what it does:\n\n1. It constructs an XPath expression to find the toggle button based on the provided `optionToClick`.\n2. It waits for the toggle button to be displayed using `waitForElement` method.\n3. If the toggle button is displayed, it checks if the checkbox associated with the toggle button is selected or not.\n4. If the checkbox is not selected, it highlights the toggle button using `highLighterMethod1`, clicks on it using `clickOn`, and takes a manual screenshot to confirm that the button is enabled.\n5. If the checkbox is already selected (i.e., the button is already enabled), it takes a manual screenshot to confirm the expected state.\n6. If the toggle button is not displayed, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String optionToClick"
        ],
        "output": "void"
    },
    {
        "class_name": "casePage_QcOrg",
        "function_name": "verifyFieldBackgroundColour",
        "code": "public void verifyFieldBackgroundColour(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[normalize-space(text())='\"+ labelName +\"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tscrollToElementTillPresent(field);\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString valueofField=getAttributeValue(field,\"style\");\n\t\t\t\tif (valueofField.contains(value)) {\n\t\t\t\t\tmanualScreenshot(labelName+\" field Backgroung colour is same as expected: \"+value);\n\t\t\t\t}else {\n\t\t\t\t\ttestStepFailed(labelName+\" field Backgroung colour is not same as expected : \"+value);\n\t\t\t\t}\t\t\n\t\t\t} \t\t\t\n\t\t\telse {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}\n\t\n}",
        "description": "This Java method, named `verifyFieldBackgroundColour`, verifies the background color of a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\n1. It first constructs an XPath expression to locate the input field based on its label name.\n2. It then waits for the element to be present, checks if it is displayed, and scrolls to the element if necessary.\n3. If the element is found, it gets the style attribute of the field (which should contain the background color information).\n4. It then checks if the expected background color (`value`) is present in the style attribute. \n5. If the colors match, it takes a manual screenshot and marks the test as passed. Otherwise, it fails the test step.\n6. If the element is not found, it also fails the test step with an error message.\n\nThe method catches any exceptions that occur during execution and fails the test step if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "enterValueInGlobalSearchAndClick",
        "code": "public String enterValueInGlobalSearchAndClick(String value) {\n\t\tString caseId = null;\n\t\ttry {\n\t\t\ttestStepInfo(\"# Search Opp id in QC #\");\n\t\t\twaitForPageToLoad();\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\tString clickValue = value + \"#xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\twaitForElement(search,20);\n\t\t\tif (isElementDisplayed(search, 20)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchValue, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tif (isElementDisplayed(clickValue, elementLoadWaitTime)) {\n\t\t\t\t\t\tcaseId=getText(clickValue);\n\t\t\t\t\t\ttestStepInfo(\"$ Case Id Created - $\" +caseId);\n\t\t\t\t\t\thighLighterMethodManualScreenShot(clickValue, value);\n\t\t\t\t\t\tclickOn(clickValue);\n\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Case is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is not auto populated\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchAndClick. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn caseId;\n\t}",
        "description": "This Java method, `enterValueInGlobalSearchAndClick`, is used to search for a value in a global search field and click on the resulting option. The method takes a string parameter `value` which represents the search query.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It searches for an element with the specified XPath (`//div[@class='uiInput uiAutocomplete uiInput--default']//input`) and enters the provided `value`.\n3. If the entered value is displayed, it clicks on the next available option (represented by the XPath `//a[@role='option']//parent::li[1]`).\n4. It waits for the page to load again.\n5. If the clicked option has a child element with the specified XPath (`//table[contains(@class,'-table')]//tbody//tr//a`), it extracts the text from that element and stores it in the `caseId` variable.\n6. The method then performs some additional actions, including taking a screenshot, clicking on the extracted case ID, waiting for 3 seconds, and loading the page again.\n7. If any of these steps fail, the method reports an error and returns null.\n\nThe method returns the extracted `caseId` if all steps are successful, otherwise it returns null.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "getOcrId",
        "code": "public String getOcrId() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"OCR__c/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\tmanualScreenshot(\"Successfully got OCR Id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get OCR id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOcrId. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, `getOcrId()`, is used to extract the OCR ID from a URL and return it as a string. The method first gets the current URL using the `driver.getCurrentUrl()` method. If the URL is not empty, it splits the URL into parts using the \"OCR__c/\" delimiter. It then takes the last part of the split URL (assuming this contains the OCR ID) and further splits it into an array using the \"/\" delimiter. The first element of this array is assumed to be the OCR ID, which is then returned as a string. If any exception occurs during this process, the method catches it and reports a failure.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "qcGlobalSalesSearch",
        "code": "public String qcGlobalSalesSearch(String searchValue) {\t\t\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//button[contains(@class,'search')]\";\n\t\t\tString type = searchValue + \"#xpath=//input[contains(@placeholder,'Search')]\";\n\t\t\tString searchResults = searchValue + \"#xpath=//span//a[contains(@title,'Q-')]\";\n\t    \twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\tclickOn(search);\n\t\t\t\ttypeIn(type, searchValue);\t\n\t\t\t\tfindWebElement(type).sendKeys(Keys.ENTER);\n\t\t\t\twaitTime(5);\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchResults, 10)) {\n\t\t\t\t\tclickOn(searchResults);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchResults + \" is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Qc Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in qcGlobalSalesSearch \" + e.getClass().getName());\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "Here is a brief description of the Java method `qcGlobalSalesSearch`:\n\nThis method performs a global search on a webpage, searching for a given value (`searchValue`) and clicking on the relevant results. It uses Selenium WebDriver to interact with the webpage, waiting for elements to be displayed, clicking on them, typing in values, and refreshing the page as needed. The method returns the original `searchValue`. If any step fails (e.g., an element is not displayed), it reports a test failure.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//span[text()='\" + linkName\n\t\t\t\t\t+ \"']//..//..//slot//div//a//slot//span\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method `clickOnLink`:\n\nThis method attempts to click on a link with the given name. It constructs an XPath expression to locate the link element, waits for the element to be present and visible, scrolls to it if necessary, clicks on it, and then waits for the page to load. If the link is not found or any other exception occurs during the process, the method reports a test step failure.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "slecetingdropdwonvaluesinFMS",
        "code": "public void slecetingdropdwonvaluesinFMS(String detailsLabel, String Stagevlaue, String clickonbutton,\n\t\t\tString savelable, String opportunityNameLabel, String opportunityId, String filebarcodelabel,\n\t\t\tString addFileLabel, String branchinward, String branchhold, String cpuinward, String cpuoutward,\n\t\t\tString branchacknowledge, String cpuhold, String cpuacknowledge, String branchoutward) {\n\t\ttry {\n\n\t\t\tString arr[] = { branchinward, branchhold, cpuinward, cpuoutward, branchacknowledge, cpuhold,\n\t\t\t\t\tcpuacknowledge, branchoutward };\n\n\t\t//\tdriver.manage().timeouts().implicitlyWait(5, TimeUnit.SECONDS);\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\n\t//\t\t\tclickOnEditdropdwon(Stagevlaue);\n\n\t\t//\t\tclickondrpdownCPU(clickonbutton);\n\n\t\t\t\tString Dynamicelement = \"#xpath=//lightning-base-combobox-item/descendant::span[text()='\" + arr[i]\n\t\t\t\t\t\t+ \"']\";\n\n\t\t\t\tclickOnSpecialElement(Dynamicelement);\n\n\t\t\t\tclickOnButton(savelable);\n\n\t\t\t\ttransferControlToWindow(1, false);\n\n\t\t\t\trefreshPage();\n\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\tselectTabs(addFileLabel);\n\n\t\t\t\tif ((arr[i].trim().equals(cpuacknowledge)) || (arr[i].trim().equals(branchoutward))\n\t\t\t\t\t\t|| (arr[i].trim().equals(cpuhold))) {\n\n\t\t\t\t\tenterValueInField(opportunityNameLabel, opportunityId);\n\n\t\t\t\t\tThread.sleep(2000);\n\n\t\t//\t\t\tActions action = new Actions(driver);\n\t\t//\t\t\taction.sendKeys(Keys.ENTER).build().perform();\n\n\t\t\t\t\tString Element = \"#xpath=//span[text()='\" + filebarcodelabel\n\t\t\t\t\t\t\t+ \"']/ancestor::table/tbody/descendant::td[1]/span/input\";\n\n\t\t\t\t\tString text = getText(Element);\n\n\t\t\t\t\thighLighterMethod(Element);\n\n\t\t\t\t\tmanualScreenshot(text + arr[i] + \"Value is Displayed As Expected\");\n\n\t\t\t\t\ttestStepInfo(\n\t\t\t\t\t\t\t\"Selected Value is \" + arr[i] + \"==>\" + \"Record is Displayed after search as expected\");\n\n\t\t\t\t\tThread.sleep(2000);\n\n\t\t\t\t} else {\n\n\t\t\t\t\tenterValueInField(opportunityNameLabel, opportunityId);\n\n\t\t\t\t\tThread.sleep(2000);\n\n\t\t//\t\t\tActions action = new Actions(driver);\n\t\t\t//\t\taction.sendKeys(Keys.ENTER).build().perform();\n\n\t\t\t//\t\tverifyAndPrintErrorPopupMessage();\n\n\t\t\t\t\ttestStepInfo(arr[i] + \"No Records Will be Shown as expected and Validation is Firing\");\n\n\t\t\t\t\tThread.sleep(2000);\n\t\t\t\t}\n\n\t\t\t\ttransferControlToWindow(2, false);\n\n\t\t\t}\n\t\t\ttransferControlToWindow(1, true);\n\n\t\t\tThread.sleep(1000);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Locating FMS link \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method is used to select drop-down values in a Financial Management System (FMS) application. The method takes 17 string parameters, including labels and IDs for various UI elements.\n\nThe method iterates through an array of strings containing the values to be selected from the drop-downs. For each value, it performs the following steps:\n\n1. Finds the dynamic element matching the current value using XPath.\n2. Clicks on the special element (likely a drop-down).\n3. Saves the record.\n4. Transfers control to the next window.\n5. Refreshes the page and waits for it to load.\n6. Selects the \"Add File\" tab.\n7. If the selected value is CPU Acknowledge, Branch Outward, or CPU Hold, it enters a value in the opportunity name field and verifies that the record is displayed as expected.\n8. If the selected value is not one of the above, it enters a value in the opportunity name field but does not verify any records.\n\nThe method also includes some error handling and logging mechanisms to track its progress and report any failures.",
        "input": [
            "String detailsLabel",
            "String Stagevlaue",
            "String clickonbutton",
            "String savelable",
            "String opportunityNameLabel",
            "String opportunityId",
            "String filebarcodelabel",
            "String addFileLabel",
            "String branchinward",
            "String branchhold",
            "String cpuinward",
            "String cpuoutward",
            "String branchacknowledge",
            "String cpuhold",
            "String cpuacknowledge",
            "String branchoutward"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "qcGlobalSalesSearchForFMSClick",
        "code": "public String qcGlobalSalesSearchForFMSClick(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//button[contains(@class,'search')]\";\n\t\t\tString type = searchValue + \"#xpath=//input[contains(@placeholder,'Search')]\";\n\t    \twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\tclickOn(search);\n\t\t\t\ttypeIn(type, searchValue);\t\n\t\t\t\tfindWebElement(type).sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Qc Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in qcGlobalSalesSearch \" + e.getClass().getName());\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `qcGlobalSalesSearchForFMSClick`, performs a search for a given value on the Global Qc Sales page. \n\nHere's what it does:\n\n1. It constructs two strings: `search` and `type`. The `search` string is the search query with an XPath locator to find the search button, and the `type` string is the input field with an XPath locator to find the search input box.\n\n2. It waits for the element located by the `search` XPath to be displayed within 20 seconds using the `waitForElement` method.\n\n3. If the element is displayed within 10 seconds, it clicks on the search button and types in the search value into the search input box using the `typeIn` method. Then, it simulates an Enter key press by sending the ENTER key to the input field.\n\n4. If the element is not displayed within 10 seconds, it fails the test step with a message \"Global Qc Sales Search is not displayed\".\n\n5. In case of any exception during the execution of this method, it fails the test step with a message \"Failed in qcGlobalSalesSearch\" and the name of the exception class.\n\n6. Finally, it returns the original search value passed to the method.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "clickOnFMSLinkButton",
        "code": "public void clickOnFMSLinkButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"Button#xpath=//lightning-formatted-text[text()='\"+buttonName+\"']//parent::li//div/a\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInPopup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFMSLinkButton`, attempts to locate and click on a link button with the specified name (`buttonName`) within a Lightning-formatted text element. It uses an XPath expression to identify the button, waits for it to be displayed, clicks on it if present, and then waits for 3 seconds before continuing. If the button is not found or any other exception occurs, the method reports a test step failure.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "clickOnCardBoundaryInQC",
        "code": "public void clickOnCardBoundaryInQC(String cardName) {\n\t\ttry {\n\t\t\tString path = cardName + \" #xpath=//span[text()='\"+cardName+\"' and contains(@class,'scopesItem_name')]\";\n\t\t\tpageScrollDown();\n\t\t\tscrollToElementTillPresent(path);\n\t\t\tif (isElementDisplayed(path, 4)) {\n\t\t\t\thighLighterMethod1(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(cardName +\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCardBoundaryInQC`, is used to interact with a specific card element on a webpage. The method takes a string parameter `cardName` which represents the name of the card.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `cardName` and uses it to locate the corresponding card element.\n2. It scrolls down the page using the `pageScrollDown()` method.\n3. It then tries to scroll to the located card element until it becomes visible using the `scrollToElementTillPresent(path)` method.\n4. If the element is displayed within a certain time limit (4 seconds), the method calls two other methods: `highLighterMethod1(path)` and `clickOnSpecialElement(path)`. These methods are likely used to highlight the element for visual inspection and then click on it, respectively.\n5. If the element is not displayed within the specified time limit, the method fails the test step with an error message.\n\nThe method also includes exception handling to catch any errors that might occur during execution.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "clickOnTableLinkInQC",
        "code": "public String clickOnTableLinkInQC(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[1]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\thighLighterMethod1(ClickOnLink);\n\t\t\t\tmanualScreenshot(labelname+ \" record got created as expected : \"+ value);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname +\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTableLink. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTableLinkInQC`, is used to interact with a table link in a Quality Control (QC) scenario. It takes a string parameter `labelname` which likely represents the label or text of the link.\n\nThe method attempts to:\n\n1. Construct an XPath expression that identifies the link based on its label and title.\n2. Check if the link is displayed using the `isElementDisplayed` method with a timeout of 4 seconds.\n3. If the link is displayed, retrieve its text content using the `getText` method, highlight it using the `highLighterMethod1` method, take a manual screenshot, click on the link using the `clickOnSpecialElement` method, and wait for the page to load.\n4. If the link is not displayed, mark the test step as failed with an error message.\n\nThe method returns the text value of the clicked link or an empty string if the link was not found.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_QcOrg",
        "function_name": "getCaseStatusInQCPublish",
        "code": "public void getCaseStatusInQCPublish(String labelName, String value) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\tString text = getText(Element).replaceAll(\"[\\\"{}]\", \"\");\n\t\t\t\tString[] split = text.split(\",\");\n\t\t\t\tfor (int i = 0; i < split.length; i++) {\n\t\t\t\t\tif (split[i].contains(value)) {\n\t\t\t\t\t\ttestStepPassed(\"Expected value is Available in the \" + labelName + \" : \" + split[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCaseStatus.Exception\" + e.getClass().getName());\n\t\t}\n\n\t}\n}",
        "description": "This Java method, `getCaseStatusInQCPublish`, checks if a specific value exists in the UI for a given label name. \n\nThe method takes two parameters: `labelName` and `value`. It uses an XPath to locate an element on the page with the specified `labelName`, then scrolls to that element, highlights it, and extracts its text content. The extracted text is split into individual lines, and if any line contains the provided `value`, the method considers this a success and logs a test step as passed. If the element is not found or if an exception occurs during execution, the method logs a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterValueInFields",
        "code": "public void enterValueInFields(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//parent::lightning-input//div//input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//ancestor::lightning-input//div//input | //label[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//ancestor::lightning-prompt//div//input | //span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t        scrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInFields. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to get text value from field in admin\n\t * @param         :  LabelName is the text field\n\t * @return        :  text is return the value get from the field\n\t */",
        "description": "This Java method, `enterValueInFields`, is used to enter a specified value into a text field on a web page. The method takes two parameters: `labelName` (the text label of the field) and `value` (the value to be entered).\n\nThe method first constructs an XPath expression based on the provided `labelName`. It then uses this expression to locate the corresponding text field, scroll into view if necessary, enter the specified `value`, and wait for the page to load. If the field is not present, it fails the test step.\n\nThe method also includes some error handling using a `try`-`catch` block. If any exception occurs during the execution of the method, it will fail the test step with an appropriate message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTextValue",
        "code": "public String getTextValue(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\t\t\n\t\t\tString Element = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-text)[last()]\";\t\t\t\t\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\t\t\t\t\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepFailed(\"Value is not populated in \"+LabelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getTextValue`, retrieves the text value associated with a given label name. It uses XPath to locate an element containing the specified label name, and then performs the following actions:\n\n1. Checks if the element is displayed within 10 seconds.\n2. Scrolls to the element and highlights it using the `highLighterMethod1` method.\n3. Retrieves the text value of the element using the `getText` method.\n4. Verifies that the text value is not empty; if it is, fails the test step with a message indicating that the value is not populated for the given label name.\n5. Takes a manual screenshot with the label name and text value as the filename.\n\nIf any of these steps fail (e.g., the element is not displayed or the text value is empty), the method catches the exception, fails the test step with an appropriate message, and returns an empty string.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTextValue1",
        "code": "public String getTextValue1(String LabelName) {\n\t\trefreshPage();\n\t\twaitForPageToLoad();\n\t\tString text = \"\";\n\t\ttry {\t\t\n\t\t\tString Element = \"#xpath=//span[text()='\" + LabelName + \"']\";\n\t\t\tString Element1 = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-text)[last()]\";\t\t\t\t\n \t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element1);\n\t\t\t\thighLighterMethod1(Element1);\n\t\t\t\ttext = getText(Element1);\t\t\t\t\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(\"Value is not populated in \"+LabelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  method to click edit icon        \n\t * @param \t      :  labelName is the field name\n\t */",
        "description": "This Java method, `getTextValue1`, retrieves the text value of a specific element on a web page. The method takes a `String` parameter `LabelName`, which represents the field name to be retrieved.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It calls two utility methods: `refreshPage()` and `waitForPageToLoad()`, likely to ensure the page is fully loaded before attempting to retrieve the text value.\n2. It defines two `String` variables, `Element` and `Element1`, which contain XPath expressions used to locate the desired element on the page.\n3. The method checks if the element with the specified label name (`LabelName`) is displayed within a 10-second timeout using the `isElementDisplayed()` method.\n4. If the element is displayed, it scrolls to the element using `scrollToWebElement()`, highlights the element using `highLighterMethod1()`, and retrieves the text value of the element using `getText(Element1)`.\n5. It checks if the retrieved text value is empty and, if so, logs a test step failure with a message indicating that the value is not populated for the specified label name.\n6. If the text value is not empty, it takes a manual screenshot with a caption including the label name and the text value.\n7. If the element is not displayed within the timeout, the method logs a test step failure with a message indicating that the field is not present.\n\nThe method returns the retrieved text value as a `String`.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickEditIcon",
        "code": "public void clickEditIcon(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//..//parent::dd//..//button\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditIcon. Exception\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to select or deselect check box\n\t * @param         :  labelname is the name of check box\n\t * @param         :  status is the input value check or uncheck\n\t */",
        "description": "This Java method, `clickEditIcon`, is used to click on an edit icon with a specified label name. The method attempts to locate the edit icon using XPath and perform the following actions:\n\n1. Waits for the element to be present.\n2. Scrolls to the element if it's not visible.\n3. Clicks on the special element (likely a button).\n4. Waits for the page to load.\n5. Waits for 3 seconds.\n\nIf the edit icon is not available, the method fails the test step with an error message. If any exception occurs during execution, the method also fails the test step with an error message. The method is designed to handle exceptions and provide clear feedback on failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input | //span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input | //span[text()='\"+ labelName + \"']/../following-sibling::input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\t\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to click link\n\t * @param         :  linkName is the value to click\n\t */",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox based on the provided status (either \"check\" or \"uncheck\"). The method takes two parameters: `labelName` and `status`. \n\n- It first constructs an XPath expression to locate the checkbox element by its label name.\n- Then, it waits for the element to be present, scrolls to the element if necessary, and checks if the status is \"check\" or \"uncheck\".\n- If the status is \"check\", it checks if the checkbox is not already selected. If not, it selects the checkbox, highlights it, and takes a manual screenshot.\n- If the status is \"uncheck\", it does the opposite: unchecks the checkbox if it's currently checked, highlights it, and takes a manual screenshot.\n- If the checkbox is not present, it fails the test step with an error message.\n- In case of any exception during the execution of this method, it logs the exception information to a log file and fails the test step.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String linkName) {\n\t/*\trefreshPage();\n\t\twaitForPageToLoad();*/\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//span[text()='\" + linkName\n\t\t\t\t\t+ \"']//..//..//..//slot//div//a//slot//span\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  29/03/2022\n\t * Description    :  method to select value from drop down       \n\t * @param \t      :  dropdownName is the name of the field\n\t * @param \t      :  value is the value need to select\n\t */",
        "description": "This Java method, `clickOnLink`, is used to click on a specific link on a web page. The method takes a string parameter `linkName` which represents the name of the link to be clicked.\n\nHere's what the method does:\n\n1. It tries to find an element with the given `linkName` and an XPath that contains the link name.\n2. If the element is present, it clicks on the element using the `clickOnSpecialElement(link)` method.\n3. After clicking the link, it waits for the page to load completely using the `waitForPageToLoad()` method.\n4. If the element is not found, it fails the test step with a message indicating that the link is not present.\n\nThe method also has some commented out code, which seems to be related to refreshing the page and waiting for the page to load before clicking on the link. However, this part of the code is currently disabled.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 25);\t\t\n\t\t\tif (isElementPresent(dropdown)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/..//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  30/03/2022\n\t * Description    :  Method to click edit button of record type\n\t * @param         :  labelname is the name of button\n\t */",
        "description": "This Java method, `selectValueFromDropdown`, selects a specific value from a dropdown list on a web page. \n\nThe method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected). It uses various helper methods (`waitForPageToLoad`, `waitForElement`, `scrollToElement`, `scrollToWebElement`, `clickOnSpecialElement`, `isElementPresent`, `isElementDisplayed`) to navigate the dropdown, find the desired value, click on it, and verify that the selection was successful. \n\nIf the selected value is not present in the dropdown or if the dropdown itself is not present, the method will fail the test step. It also takes a manual screenshot when the selection is successful.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickRecordTypeEditIcon",
        "code": "public void clickRecordTypeEditIcon(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//..//..//button\";\n\t\t\twaitForElement(button,10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickRecordTypeEditIcon. Exception\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  17/05/2022\n\t * Description    :  Method to get line status\n\t * @param         :  LabelName is the text field\n\t * @return        :  text is return the value get from the field\n\t */",
        "description": "This Java method, `clickRecordTypeEditIcon`, simulates a click on an edit icon associated with a specific record type label. It takes a `labelName` parameter as input and attempts to find the corresponding edit button using XPath. The method waits for the element to be present, clicks on it if available, and then pauses for 3 seconds. If the element is not found or the click operation fails, it reports a test step failure with an error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTWLinesStatus",
        "code": "public String getTWLinesStatus(String labelName, String status) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/following-sibling::div//span//slot//lightning-formatted-rich-text//span)[last()]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(status)) {\n\t\t\t\t\tmanualScreenshot(labelName + \" status is populated as expected \" + text);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\tlabelName + \" status is not populated as expected \" + status + \" instead got \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTWLinesStatus.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to add charge amount\n\t * @param         :  fieldName is the amount field name\n\t * @return        :  chargeAmt is return the calculated charge amount\n\t */",
        "description": "This Java method, `getTWLinesStatus`, is used to verify the status of a specific label in a web application. It takes two parameters: `labelName` and `status`. The method uses an XPath expression to locate the element containing the specified label name, then checks if the element is displayed and scrollable. If it is, it highlights the element, retrieves its text content, and compares it with the expected status. If the statuses match, it takes a manual screenshot; otherwise, it fails the test step. If the element is not found or displayed, it also fails the test step. The method returns the actual text content of the element.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "toAddchargeAmount",
        "code": "public int toAddchargeAmount(String fieldName) {\n\t\tint chargeAmt=0;\n\t\ttry {\n\t\t\tString link = fieldName + \"#xpath=//table//a[contains(text(),'OC')]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tString value=\"\";\n\t\t\t\tString value1=\"\";\n\t\t\t\tList<WebElement> list =findWebElements(link);\n\t\t\t\tfor(int i=0;i<list.size();i++)\n\t\t\t\t{\n\t\t\t\t\tlist.get(i).click();\n\t\t\t\t\tvalue1=getTextValue(fieldName).replaceFirst(\"\u00e2\u201a\u00b9\", \"\");\t\n\t\t\t\t\tif(i==1)\n\t\t\t\t\tbreak;\n\t\t\t\t\tvalue=value1;\n\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t}\t\t\t\n\t\t\t    chargeAmt=Integer.parseInt(value)+Integer.parseInt(value1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toAddchargeAmount \" + e.getClass().getName());\n\t\t}\n\t\treturn chargeAmt;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to enter date in fields\n\t * @param         :  labelName is the field need to enter date\n\t * @param         :  value is the date need to enter\n\t */",
        "description": "This Java method, `toAddchargeAmount`, takes a String parameter `fieldName` and returns an integer value representing the total charge amount. The method attempts to find a specific link on the webpage, clicks on it, and then extracts two values from the page. These values are parsed as integers and added together to calculate the total charge amount. If the link is not present or there's an exception during execution, the method logs a test step failure and returns 0.\n\nThe method seems to be part of a larger testing framework, likely for a web application, and uses various WebDriver methods (e.g., `waitForElement`, `isElementPresent`, `findWebElements`) to interact with the webpage.",
        "input": [
            "String fieldName"
        ],
        "output": "int"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterDate",
        "code": "public void enterDate(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//legend[text()='\" + labelName + \"']/..//label[text()='Date']/..//input|//div[contains(@class,'uiInput')]//span[text()='\" + labelName + \"']//..//parent::div//following-sibling::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tscrollToElementTillPresent(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterDate`, is used to enter a date value into a field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the specific date input field based on the provided `labelName`. It then waits for this element to be present, scrolls to it if necessary, and enters the specified `value` into the field.\n\nIf the element is not found or any other exception occurs during the process, the method reports a test failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterTime",
        "code": "public void enterTime(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//legend[text()='\" + labelName + \"']/..//label[text()='Time']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tscrollToElementTillPresent(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to click tabs\n\t * @param         :  labelName is the tab name\n\t */",
        "description": "This Java method, `enterTime`, is used to enter a value into a specific field with a given label name. The method takes two parameters: `labelName` and `value`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding time input field.\n2. It waits for the element to be displayed, then scrolls to it if necessary.\n3. If the element is present, it types in the given `value`, waits for the page to load, and takes a manual screenshot of the screen (using the `highLighterMethodManualScreenShot` method).\n4. If the element is not present, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickOnTabs",
        "code": "public void clickOnTabs(String linkName) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//div[contains(@class,'active')]//a[text()='\" + linkName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" tab is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnTabs \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to get number value from field in admin\n\t * @param         :  LabelName is the text field\n\t * @return        :  text is return the value get from the field\n\t */",
        "description": "This Java method, `clickOnTabs`, appears to be used for clicking on a tab with a specific name. The method takes a `String` parameter `linkName` which represents the name of the tab to click on.\n\nHere's what the method does:\n\n1. It refreshes the current page using the `refreshPage()` method.\n2. It waits for the page to load using the `waitForPageToLoad()` method.\n3. It constructs a `String` variable `link` by concatenating the `linkName` with an XPath expression that targets the tab element.\n4. It waits for the constructed link to be present on the page using the `waitForElement(link, 10)` method, and then checks if the element is displayed using the `isElementDisplayed(link, 10)` method.\n5. If the tab is present and displayed, it scrolls to the tab using the `scrollToElement(link)` and `scrollToWebElement(link)` methods, clicks on the tab using the `clickOnSpecialElement(link)` method, and then waits for the page to load again.\n6. If the tab is not present or displayed, it marks the test step as failed using the `testStepFailed(linkName + \" tab is not present\")` method.\n7. In case of any exception during the execution of the method, it catches the exception and marks the test step as failed using the `testStepFailed(\"Failed in clickOnTabs \" + e.getClass().getName())` method.\n\nThe method seems to be designed for automating a web application's tab navigation functionality.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getNumberValue",
        "code": "public String getNumberValue(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-number)[last()]\";\n\t\twaitForElement(Element, 10);\n\t\t\tif (isElementPresent(Element)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepFailed(\"Value is not populated in \" + LabelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getNumberValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to enter value in OTP field\n\t * @param         :  LabelName is the OTP field\n\t * @param        :  value is OTP need to enter\n\t */",
        "description": "This Java method, `getNumberValue`, retrieves and returns the text value of a specific element (identified by its label name) on a web page. It uses XPath expressions to locate the element, waits for it to be present, scrolls into view, highlights the element, and then extracts the text content. If the element is not found or the text is empty, the method fails the test step with an appropriate error message.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterValueInOTPField",
        "code": "public void enterValueInOTPField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::th/following-sibling::td//input\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInOTPField \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to get empty text\n\t * @param         :  LabelName is the text field\n\t */",
        "description": "This Java method, `enterValueInOTPField`, enters a given value into an OTP (One-Time Password) field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the OTP field based on its label name. It then checks if the element is displayed using the `isElementDisplayed` method, waits for the specified amount of time (`elementLoadWaitTime`). If the element is present, it highlights the field with a red border (using the `highLighterMethod`) and enters the provided value into the field using the `typeIn` method. \n\nIf the OTP field is not present, the method fails the test step with an error message. In case of any exceptions during this process, it also fails the test step with an error message including the exception class name.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getEmptyTextValue",
        "code": "public void getEmptyTextValue(String LabelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + LabelName + \"']\";\n\t\t\tString Element1 = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-text)[last()]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\tString text = getText(Element1);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"Value is not populated in \" + LabelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName + \" field has value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  27/05/2022\n\t * Description    :  Method to get text and compare\n\t * @param         :  LabelName is the text field\n\t * @param         :  expectedValue is expected value to compare\n\t * @return        :  text return the retrieved value\n\t */",
        "description": "This Java method, `getEmptyTextValue`, checks if a specific text field (`LabelName`) on a web page contains any text. The method uses Selenium WebDriver to interact with the webpage.\n\nHere's what it does:\n\n1. It constructs two XPath expressions to locate the desired element.\n2. It waits for the element to be displayed and then scrolls to it, highlighting it using `highLighterMethod1`.\n3. If the element is displayed, it retrieves the text value of the element using `getText(Element1)`.\n4. If the text value is empty (i.e., an empty string), it takes a manual screenshot with a failure message indicating that the field does not contain any value.\n5. If the text value is not empty, it fails the test step with a message indicating that the field contains a value.\n\nThe method also includes error handling to catch and handle any exceptions that may occur during execution.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTextAndCompare",
        "code": "public String getTextAndCompare(String LabelName, String expectedValue) {\t\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementPresent(Element)) {\n\t\t\t\tscrollToElement(Element);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tscrollToElementTillPresent(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" Value is populated in \" + LabelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Value is not populated in \" +LabelName+\" instead got \"+text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `getTextAndCompare`, takes two string parameters: `LabelName` and `expectedValue`. It is designed to retrieve the text value of an element on a web page that matches the given `LabelName`, compare it with the expected value, and then report the result.\n\nHere's a step-by-step breakdown:\n\n1. The method first constructs an XPath expression based on the provided `LabelName` to locate the desired element.\n2. It waits for the element to be present using the `waitForElement` method.\n3. If the element is found, it scrolls to the element using various scrolling methods (`scrollToElement`, `scrollToWebElement`, and `scrollToElementTillPresent`) to ensure the entire text value is visible.\n4. The method highlights the element using `highLighterMethod1`.\n5. It retrieves the text value of the element using the `getText` method.\n6. If the retrieved text matches the expected value (ignoring case), it takes a manual screenshot and reports success. Otherwise, it fails the test step with an error message indicating that the expected value was not found.\n7. If the element is not present, it also fails the test step with an error message indicating that the field is not present.\n8. In case of any exceptions during execution, it catches them and reports a failure with an error message.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String LabelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTextAndCompare1",
        "code": "public String getTextAndCompare1(String LabelName, String expectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-text)[last()] | (//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-rich-text)[last()]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementPresent(Element)) {\n\t\t\t\tscrollToElement(Element);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tscrollToElementTillPresent(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(expectedValue + \" Value is populated in \" + LabelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Value is not populated in \" +LabelName+\" instead got \"+text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getTextAndCompare1`, takes two string parameters: `LabelName` and `expectedValue`. It is designed to retrieve the text content of a specific element on a web page, identified by an XPath expression that includes the provided `LabelName`.\n\nThe method performs the following steps:\n\n1. Constructs an XPath expression using the provided `LabelName`.\n2. Waits for the element to be present and visible.\n3. Scrolls the element into view.\n4. Retrieves the text content of the element.\n5. Compares the retrieved text with the expected value provided as a parameter.\n6. If the text contains the expected value, it takes a manual screenshot; otherwise, it marks the test step as failed.\n\nThe method returns the retrieved text content. If any exceptions occur during execution, it marks the test step as failed and returns an empty string.",
        "input": [
            "String LabelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + labelname + \"']\";\n\t\t\tString searchField1 = labelname + \" #xpath=//label[text()='\" + labelname + \"']\";\n\t\t\tString searchField2 = labelname + \" #xpath=//legend[text()='\" + labelname + \"']\";\n\t\t\tif (isElementDisplayed(searchField, 10)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\thighLighterMethod1(searchField);\n\t\t\t\tmanualScreenshot(labelname + \" field is present\");\n\t\t\t} else if (isElementDisplayed(searchField1, 10)) {\n\t\t\t\tscrollToWebElement(searchField1);\n\t\t\t\thighLighterMethod1(searchField1);\n\t\t\t\tmanualScreenshot(labelname + \" field is present\");\n\t\t\t} else if (isElementDisplayed(searchField2, 10)) {\n\t\t\t\tscrollToWebElement(searchField2);\n\t\t\t\thighLighterMethod1(searchField2);\n\t\t\t\tmanualScreenshot(labelname + \" field is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresent.Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresent`, verifies whether a specific field with the given label name is present on the UI. It uses XPath expressions to locate the field and performs the following actions:\n\n1. Searches for the field using three different XPath expressions (for `<span>`, `<label>`, and `<legend>` elements).\n2. If the field is found, it scrolls to the element, highlights it using `highLighterMethod1`, and takes a manual screenshot with the label name as the filename.\n3. If the field is not found after 10 seconds of searching, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures if they do.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "verifyFieldIsNotPresent",
        "code": "public void verifyFieldIsNotPresent(String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + labelname + \"']\";\n\t\t\tif (!isElementDisplayed(searchField, 10)) {\n\t\t\t\tmanualScreenshot(labelname + \" field is not present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsNotPresent.Exception\" + e.getClass().getName());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyFieldIsNotPresent`, checks if a specific field or element with the given label name is not present on the UI. It uses an XPath expression to search for the element and verifies its presence within 10 seconds. If the element is found, it takes a manual screenshot and marks the test step as failed. If an exception occurs during the execution of this method, it also marks the test step as failed with an error message including the type of exception that occurred.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "verifyCampaignName",
        "code": "public void verifyCampaignName(String dealID, String campaignId) {\n\t\ttry {\n\t\t\tString link = dealID + \"#xpath=//div[contains(@class,'active')]//a[@title='\" + dealID + \"']\";\n\t\t\tString Element = \"#xpath=(//span[text()='Description']//parent::div//parent::div/following-sibling::div//span//slot//lightning-formatted-text)[last()]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link)) {\n\t\t\t\tList<WebElement> record = findWebElements(link);\n\t\t\t\tfor (int i = 1; i <=record.size(); i++) {\n\t\t\t\t\tString link1 = dealID + \"#xpath=(//div[contains(@class,'active')]//a[@title='\" + dealID + \"'])[\"+ i + \"]\";\n\t\t\t\t    clickOn(link1);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tif (isElementDisplayed(Element)) {\n\t\t\t\t\t\tString id = getText(Element);\n\t\t\t\t\t\tif (id.contains(campaignId)) {\n\t\t\t\t\t\t\tmanualScreenshot(\"Description value \" + id + \" contains \" + campaignId + \" as expected\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else if (i == (record.size())) {\n\t\t\t\t\t\t\ttestStepFailed(\"Description value \" + id + \" not contains \" + campaignId);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Discription field is not present\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dealID + \"Record not created in task redesign\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCampaignName \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCampaignName`, is used to validate the campaign name in a web application. It takes two parameters: `dealID` and `campaignId`. The method attempts to find an element on the page that contains the `dealID` and then clicks on each subsequent occurrence of this element until it finds one where the description text contains the `campaignId`. If the expected campaign name is found, a manual screenshot is taken. If not, the test step fails. The method also handles exceptions and logs any failures.",
        "input": [
            "String dealID",
            "String campaignId"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "checkSupplierTypeValues",
        "code": "public void checkSupplierTypeValues(String label, String supplierTypeValue1, String supplierTypeValue2,\n\t\t\tString supplierTypeValue3) {\n\t\ttry {\n\t\t\tString applicantType = \"ApplicantType#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label + \"')]\";\n\t\t\tString applicantTypeValue = \"ApplicantTypeValue#xpath=//label[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div//div//button[contains(@aria-label,'\" + label\n\t\t\t\t\t+ \"')]/parent::div//following-sibling::div//span/span\";\n\t\t\twaitForElementUntilVisible(applicantType);\n\t\t\tif (isElementDisplayed(applicantType, 10)) {\n\t\t\t\tscrollToWebElement(applicantType);\n\t\t\t\tclickOn(applicantType);\n\t\t\t\tif (isElementDisplayed(applicantTypeValue, 10)) {\n\t\t\t\t\tList<WebElement> values = findWebElements(applicantTypeValue);\n\t\t\t\t\tfor (int iterate = 0; iterate <=3; iterate++) {\n\t\t\t\t\t\tString value = values.get(iterate).getText().trim();\n\t\t\t\t\t\tif(values.size()==4){\n\t\t\t\t\t\tif(!value.contains(\"None\")){\n\t\t\t\t\t\tif (value.equalsIgnoreCase(supplierTypeValue1) || value.equalsIgnoreCase(supplierTypeValue2)\n\t\t\t\t\t\t\t\t|| value.equalsIgnoreCase(supplierTypeValue3)) {\n\t\t\t\t\t\t\tmanualScreenshot(value+\" value is present in supplier type as expected\");\t\t\t\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Expected supplier type value is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Value is are not present in supplier Type dropdown.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select supplier Type drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkSupplierTypeValues \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `checkSupplierTypeValues`, checks if specific values are present in a supplier type dropdown list on a web page. The method takes four string parameters: `label`, `supplierTypeValue1`, `supplierTypeValue2`, and `supplierTypeValue3`. \n\nThe method first constructs two XPath expressions to locate the applicant type dropdown and its corresponding value list. It then waits for the dropdown to be visible, scrolls to it if necessary, clicks on it, and checks if the values are displayed.\n\nFor each value in the list, it extracts the text, trims any whitespace, and checks if the value matches one of the provided `supplierTypeValue` parameters. If a match is found, it takes a manual screenshot as evidence. If no match is found or if the dropdown or its values are not present, the method fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String label",
            "String supplierTypeValue1",
            "String supplierTypeValue2",
            "String supplierTypeValue3"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickCustomerName",
        "code": "public String clickCustomerName() {\n\t\tString value=\"\";\n\t\ttry {\n\t\t\tString customerName = \"customerName #xpath=//p[@title='Customer']//parent::div//a | //span[text()='Customer']/..//following-sibling::div//a//span\";\n\t\t\twaitForElement(customerName, 10);\n\t\t\tscrollbycordinates(customerName);\n\t\t\tif (isElementDisplayed(customerName, 10)) {\n\t\t\t\tscrollToWebElement(customerName);\n\t\t\t\tclickOnSpecialElement(customerName);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer name is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickCustomerName. Exception : \" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickCustomerName()`, attempts to locate and click on an HTML element with the XPath expression provided. The method:\n\n1. Waits for the specified element (customer name) to be displayed within a certain time frame.\n2. Scrolls down to the element if it's not visible in the current view port.\n3. Clicks on the special element (customer name) and waits for the page to load.\n4. If the element is not present, it logs a test step failure.\n\nThe method returns an empty string (`value = \"\";`) but does not seem to use this return value in any way. The exception handling catches any exceptions that occur during the execution of the method and logs a test step failure with the caught exception's name.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterDate. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterDob`, is used to enter a date of birth (DOB) value into a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\nIt first constructs an XPath expression to locate the field based on the provided `labelName`. It then uses this expression to wait for the element, check if it's displayed, scroll to it, enter the value using the `typeIn` method, and finally verify that the page has finished loading.\n\nIf any of these steps fail (e.g., the field is not present), an error message is logged indicating that the test step failed. If any exception occurs during the execution of this method, another error message is logged with more detailed information about the exception.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=(//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input)[1]//..//..//..//..//ul//li\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementPresent(searchField)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\t\t\t\t\n\t\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\t\tmanualScreenshot(\"Successfully selected \"+value);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField`, is used to select a value from a search field and list. It takes two parameters: `labelName` (the name of the label) and `value` (the actual value to be selected).\n\nHere's what the method does:\n\n1. If the `value` parameter is not empty, it:\n\t* Creates an XPath expression for the search field based on the `labelName`.\n\t* Waits for the search field to appear using `waitForElement`.\n\t* Scrolls to the search field using `scrollbycordinates`.\n\t* Checks if the search field is present using `isElementPresent`.\n\t* If the search field is present, it:\n\t\t+ Scrolls to the web element using `scrollToWebElement`.\n\t\t+ Highlights the search field using `highLighterMethod`.\n\t\t+ Types the value into the search field using `typeIn`.\n\t\t+ Waits for 2 seconds.\n\t\t+ Checks if the list of values is present using `isElementDisplayed` and waits for it to load.\n\t\t+ If the list is present, it:\n\t\t\t- Highlights the list using `highLighterMethod`.\n\t\t\t- Clicks on the selected value using `clickOn`.\n\t\t\t- Takes a manual screenshot with the message \"Successfully selected <value>\".\n\t\t\t- Waits for 2 seconds.\n\t* If the search field is not present, it fails the test step with an error message.\n2. If the `value` parameter is empty, it fails the test step with an error message saying \"Please provide some value for this field\".\n3. If any exception occurs during the execution of the method, it catches the exception and fails the test step with a generic error message.\n\nIn summary, this method is used to select a value from a search field and list, and it handles various scenarios such as the presence or absence of the search field, the selection of the value, and any exceptions that may occur.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "enterValueInTextArea",
        "code": "public void enterValueInTextArea(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']/..//parent::lightning-textarea//div//textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextArea. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextArea`, enters a given value into a text area field with a specific label name on the screen. \n\nHere's how it works:\n\n1. It constructs an XPath expression to locate the text area field based on the provided label name.\n2. It waits for the element to be displayed and then scrolls to that element if necessary.\n3. The method enters the given value into the text area field using a `typeIn` method (not shown in this snippet).\n4. After entering the value, it waits for the page to load completely to ensure the entered value is processed correctly.\n5. Finally, it takes a manual screenshot of the screen using a `highLighterMethodManualScreenShot` method (not shown in this snippet) and highlights the element.\n\nIf any step fails (e.g., the field is not present), the method reports a test failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getNumberAndCompare",
        "code": "public String getNumberAndCompare(String LabelName,String expectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/..//following-sibling::dd//span//slot//lightning-formatted-number)[last()]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element).replace(\",\", \"\");\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" Value is populated in \" + LabelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Value is not populated in \" + LabelName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getNumberAndCompare.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getNumberAndCompare`, takes two string parameters: `LabelName` and `expectedValue`. It uses XPath to locate an element on a webpage with the given label name. The method then:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not visible.\n3. Highlights the element using a highlighting method (`highLighterMethod1`).\n4. Retrieves the text content of the element, removes commas from the text, and compares it with the expected value.\n5. If the values match, takes a manual screenshot; otherwise, marks the test step as failed.\n6. If the element is not found or displayed within the timeout period (10 seconds), also marks the test step as failed.\n\nThe method returns the retrieved text content of the element.",
        "input": [
            "String LabelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickDiffEditIcon",
        "code": "public void clickDiffEditIcon(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//..//parent::dd//..//button[contains(@title,'Edit')]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickDiffEditIcon. Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickDiffEditIcon`, simulates a mouse click on an edit button associated with a specific label name. The method uses Selenium WebDriver to:\n\n1. Construct an XPath expression to locate the edit button based on the provided label name.\n2. Wait for the edit button to be present (up to 10 seconds).\n3. If the edit button is present, scroll to it and click on it.\n4. Verify that the page has fully loaded after clicking the edit button.\n5. Wait for a short period of time (3 seconds) before completing the method.\n\nIf the edit button is not found or an exception occurs during the process, the method reports a test step failure with an error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getMobiwikId",
        "code": "public String getMobiwikId() {\n        String OCR_Id = null;\n        try {\n            String url = driver.getCurrentUrl();\n            if (!(url.isEmpty())) {\n                String[] splited_Url = url.split(\"Mobikwik__c/\");\n                int size = splited_Url.length;\n                String[] ocrId = splited_Url[size - 1].split(\"/\");\n                OCR_Id = ocrId[0];\n                manualScreenshot(\"Successfully got customer id : \" + OCR_Id);\n            } else {\n                testStepFailed(\"Failed to get customer id\");\n            }\n        } catch (Exception e) {\n        \ttestStepFailed(\"Failed in getMobiwikId. Exception\" + e.getClass().getName());\n        }\n        return OCR_Id;\n    }",
        "description": "This Java method, `getMobiwikId`, is used to extract a specific ID from the current URL of a web driver instance (`driver`) and returns it as a string. The ID is extracted by splitting the URL into parts using \"Mobikwik__c/\" as a delimiter, then taking the last part and further splitting it using \"/\" as a delimiter. If the extraction process fails or no ID is found, an error message is logged and the method returns `null`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getIRIdFromUrl",
        "code": "public String getIRIdFromUrl() {\n        String iR_Id = null;\n        try {\n            String url = driver.getCurrentUrl();\n            if (!(url.isEmpty())) {\n                String[] splited_Url = url.split(\"Integration_Response__c/\");\n                int size = splited_Url.length;\n                String[] ocrId = splited_Url[size - 1].split(\"/\");\n                iR_Id = ocrId[0];\n                manualScreenshot(\"Successfully got IR id : \" + iR_Id);\n            } else {\n                testStepFailed(\"Failed to get IR id\");\n            }\n        } catch (Exception e) {\n        \ttestStepFailed(\"Failed in getIRIdFromUrl. Exception\" + e.getClass().getName());\n        }\n        return iR_Id;\n    }",
        "description": "This Java method, `getIRIdFromUrl`, attempts to extract an Integration Response ID (IR Id) from the current URL of a driver object. \n\nHere's what it does:\n\n1. It retrieves the current URL using the `driver.getCurrentUrl()` method.\n2. If the URL is not empty, it splits the URL into parts using \"Integration_Response__c/\" as the separator.\n3. It then takes the last part of the split URL and splits it again using \"/\" as the separator.\n4. The first part of this second split is taken to be the IR Id.\n5. If the IR Id is successfully extracted, a manual screenshot is taken with a message indicating that the IR id was obtained successfully.\n6. If any exception occurs during this process (including if the URL is empty), the method catches it and reports a test step failure.\n\nThe method returns the extracted IR Id as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getCampaignIdFromUrl",
        "code": "public String getCampaignIdFromUrl() {\n        String iR_Id = null;\n        try {\n            String url = driver.getCurrentUrl();\n            if (!(url.isEmpty())) {\n                String[] splited_Url = url.split(\"Campaign/\");\n                int size = splited_Url.length;\n                String[] ocrId = splited_Url[size - 1].split(\"/\");\n                iR_Id = ocrId[0];\n                manualScreenshot(\"Successfully got Campaign id : \" + iR_Id);\n            } else {\n                testStepFailed(\"Failed to get IR id\");\n            }\n        } catch (Exception e) {\n        \ttestStepFailed(\"Failed in getCampaignIdFromUrl. Exception\" + e.getClass().getName());\n        }\n        return iR_Id;\n    }",
        "description": "This Java method, `getCampaignIdFromUrl`, attempts to extract a campaign ID from the current URL of a driver (likely a web browser). It does this by splitting the URL into parts using \"Campaign/\" as a delimiter, then further splitting the last part of the resulting array using \"/\" as a delimiter. The first element of the resulting sub-array is considered the campaign ID. If the URL is empty or an exception occurs during processing, the method logs a failure message and returns null.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "ownerID",
        "code": "public String ownerID() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"User/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\ttestStepPassed(\"Successfully got OCR Id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get OCR id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ownerID. Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, `ownerID()`, attempts to extract an OCR ID from the current URL of a driver object. It splits the URL into parts, extracts the last part, and then splits it again to get the OCR ID. If successful, it logs a test step as passed with the extracted OCR ID. If not, or if an exception occurs, it logs a test step as failed. The method returns the extracted OCR ID.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "editOpportunityOwner",
        "code": "public void editOpportunityOwner(String labelName, String userName, String value) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//button[@title='Change Owner']\";\n\t\t\tString dropdown = \" Edit or Change#xpath=//a[contains(@class,'entityMenuTrigger')]//lightning-icon[@icon-name='utility:down']\";\n\t\t\tString dropdownValue = \" Edit or Change#xpath=//a[contains(@class,'entityMenuTrigger')]//lightning-icon[@icon-name='utility:down']//following::div//a[@title='\"\n\t\t\t\t\t+ userName + \"']\";\n\t\t\tString search = labelName + \" Edit or Change#xpath=//input[contains(@title,'Users')]\";\n\t\t\tString click = labelName + \" Edit or Change#xpath=//a//div[@title='\" + value + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tif (isElementPresent(dropdown)) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\tif (isElementPresent(dropdownValue)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownValue);\n\t\t\t\t\t\tif (isElementPresent(search)) {\n\t\t\t\t\t\t\ttypeIn(search, value);\n\t\t\t\t\t\t\tif (isElementPresent(click)) {\n\t\t\t\t\t\t\t\tclickOnSpecialElement(click);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttestStepFailed(value + \" is not populated in the list\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Search field is not available\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}else\n\t\t\t\t\t{\n\t\t\t\t\t\ttestStepFailed(dropdownValue + \" drop down value is not available\");\n\t\t\t\t\t}\n\t\t\t\t}else\n\t\t\t\t{\n\t\t\t\t\ttestStepFailed(\"Utility drop down is not available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickRecordTypeEditIcon. Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `editOpportunityOwner`, appears to be part of a test automation framework for Salesforce. The method is designed to edit the owner of an opportunity in Salesforce.\n\nThe method takes three parameters:\n\n* `labelName`: The name of the label associated with the opportunity.\n* `userName`: The username of the user who owns the opportunity.\n* `value`: The new value to set as the owner of the opportunity.\n\nThe method performs the following steps:\n\n1. It searches for a button with the given `labelName` and clicks it if present.\n2. If the button is found, it clicks on a utility dropdown menu.\n3. It then selects the user from the dropdown list whose username matches the given `userName`.\n4. After selecting the user, it types in a search field to find the new owner's name (if available).\n5. Finally, if the new owner's name is found in the search results, it clicks on that name to set it as the new owner.\n\nThe method uses various helper methods to perform these steps, such as `waitForElement`, `isElementPresent`, `clickOnSpecialElement`, and `typeIn`. It also includes some error handling using a `try`-`catch` block. If any of the steps fail, the method will report an error with a descriptive message.",
        "input": [
            "String labelName",
            "String userName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "verifyAndPrintErrorPopupMessage",
        "code": "public void verifyAndPrintErrorPopupMessage(String expectedMessage) {\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//strong[text()='Review the errors on this page.']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tString value = findWebElement(errorList).getText().trim();\n\t\t\t\tif (value.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\thighLighterMethod1(errorList);\n\t\t\t\t\tmanualScreenshot(\"Succesfully captured the expected error Validation : \" + value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedMessage + \" expected validation not fire instead got \" + value);\n\t\t\t//\t\ttestStepFailed(\"Expected validation not fire instead got \" + value);\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorPopupMessage \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorPopupMessage`, verifies that a specific error message is displayed on the page and takes a screenshot if it matches the expected message. Here's a breakdown of what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It then waits for an element with the specified XPath (`error`) to be displayed within 4 seconds using the `waitForElement()` method.\n3. If the element is displayed, it checks if the text of another element (`errorList`) matches the expected message (`expectedMessage`). The `findWebElement()` method is used to get the web element and then its text is retrieved and trimmed.\n4. If the text matches the expected message, it highlights the error list using the `highLighterMethod1()` method and takes a screenshot with the description \"Succesfully captured the expected error Validation : <value>\" where `<value>` is the actual error message.\n5. If the text does not match the expected message, it marks the test step as failed with an error message indicating that the expected validation did not fire instead got the actual value.\n6. If no error element is displayed within 4 seconds, it marks the test step as failed with an error message \"There is no error while entering the fields\".\n7. Finally, if any exception occurs during the execution of the method, it catches the exception and marks the test step as failed with an error message indicating the type of exception that occurred.\n\nIn summary, this method verifies that a specific error message is displayed on the page and takes a screenshot if it matches the expected message, or fails the test step if the expected message does not match or no error is displayed.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "editOrDeleteOpportunityCharges",
        "code": "public void editOrDeleteOpportunityCharges(String labelName, String status) {\n\t\ttry {\n\t\t\tString button = labelName + \" click Dropdown #xpath=//slot[text()= '\" + labelName\n\t\t\t\t\t+ \"']//ancestor::tr//lightning-primitive-cell-factory//lightning-button-menu| //span[text()= '\"\n\t\t\t\t\t+ labelName + \"']//ancestor::lst-customized-datatable//descendant::table[@aria-label='\" + labelName\n\t\t\t\t\t+ \"']//..//td//div[@class='slds-truncate']/lightning-primitive-custom-cell\";\n\t\t\tString statusBtn = status + \"#xpath=//div[text()='\" + status\n\t\t\t\t\t+ \"' and @data-aura-class='forceActionLink']//parent::a\";\n\t\t\tString popupButton = status + \"#xpath=//h2[text()]//parent::div//..//button//span[text()='\" + status + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\tif (isElementDisplayed(statusBtn, 10)) {\n\t\t\t\t\tclickOn(statusBtn);\n\t\t\t\t\tif (status.equalsIgnoreCase(\"Delete\")) {\n\t\t\t\t\t\twaitForElementToDisplay(popupButton, failuretestStepNo);\n\t\t\t\t\t\thighLighterMethodManualScreenShot(popupButton, labelName + \" Opportunity Charges is \" + status);\n\t\t\t\t\t\tclickOn(popupButton);\n\t\t\t\t\t\tmanualScreenshot(\"Success Message\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickDiffEditIcon. Exception\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `editOrDeleteOpportunityCharges`, appears to be used for editing or deleting opportunity charges in a Salesforce application. The method takes two string parameters: `labelName` and `status`.\n\nThe method first constructs three XPath strings based on the input values:\n\n1. `button`: an XPath expression that locates a button with a label matching `labelName`.\n2. `statusBtn`: an XPath expression that locates a button with a text value matching `status`, which is assumed to be either \"Edit\" or \"Delete\".\n3. `popupButton`: an XPath expression that locates a popup button with a text value matching `status`.\n\nThe method then performs the following actions:\n\n1. Waits for the element located by the `button` XPath expression (up to 10 seconds).\n2. If the element is present, scrolls to it and clicks on it.\n3. If the status is \"Delete\", waits for the popup button to appear, highlights it, takes a manual screenshot, and then clicks on the popup button.\n4. Waits for the page to load and pauses for 3 seconds.\n\nIf any of these steps fail or if the element is not present, the method reports a test failure with an error message.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTWLines",
        "code": "public String getTWLines(String labelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//parent::div/following-sibling::div//span//slot//lightning-formatted-rich-text//span)[last()]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(labelName);\n\t\t\t\ttext = getText(Element);\n\t\t\t\ttestStepPassed(text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTWLinesStatus.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`getTWLines(String labelName)` retrieves the text content of an element with the specified `labelName` within a specific time limit (10 seconds). The method uses XPath to locate the element, waits for it to be displayed, scrolls to it, highlights it, takes a manual screenshot, and extracts the text. If the element is not found or the operation fails, the method reports a test step failure with an error message. The extracted text is returned as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getCustomerIdFromUrl",
        "code": "public String getCustomerIdFromUrl() {\n\t\tString customerId = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"Customer__c/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tcustomerId = ocrId[0];\n\t\t\t\tmanualScreenshot(\"Successfully got Customer case Id : \" + customerId);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get OCR id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn customerId;\n\t}",
        "description": "This Java method, `getCustomerIdFromUrl`, extracts the customer ID from the current URL of a web driver. It does this by splitting the URL into parts, finding the last part that contains the customer ID, and then extracting the ID from that part. If the URL is empty or the extraction fails, it reports a test step failure. The method takes a screenshot after successfully extracting the customer ID. Finally, it returns the extracted customer ID.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "selectValueFromDropdownInFrame",
        "code": "public void selectValueFromDropdownInFrame(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button|//label[text()='\"+dropdownName+\"']//parent::div//div\";\n\t\t\tString frame = dropdownName+\"#xpath=//iframe[@title='accessibility title']\";\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(dropdown, 25);\t\t\n\t\t\tif (isElementPresent(dropdown)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/..//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']|//label[text()='\"+dropdownName+\"']//..//select//option[text()='\"+value+\"']\";\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInFrame`, is used to select a specific value from a dropdown list within an iframe. \n\nThe method takes two parameters: `dropdownName` and `value`. The `dropdownName` parameter is the name of the dropdown list, and the `value` parameter is the specific value to be selected from that dropdown.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It switches to the iframe containing the dropdown list.\n3. It waits for the dropdown list to appear.\n4. If the dropdown list appears, it scrolls to the dropdown and selects the specified value by clicking on its corresponding option in the dropdown list.\n5. It takes a manual screenshot if the selection is successful.\n6. If the value is not present in the dropdown list or the dropdown list does not appear, it fails the test step.\n\nThe method also has a default catch block to handle any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickOnButtonInFrame",
        "code": "public void clickOnButtonInFrame(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value[normalize-space()]='\"\n\t\t\t\t\t+ value + \"']\";\n\t\t\tString frame = value + \"#xpath=//iframe[@title='accessibility title']\";\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tmanualScreenshot(\"Successfully Clicked On : \" + value);\n\t\t\t\twaitTime(5);\n\t\t\t\tif (value.equalsIgnoreCase(\"Pass\")) {\n\t\t\t\t\tprintErrorMessageInQcField();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInFrame`, attempts to click on a button or input field with the specified value within an iframe. It uses Selenium WebDriver's methods for switching to the frame, waiting for the element to be displayed, scrolling and highlighting the element, clicking on it, and taking a screenshot if successful. If the element is not found or there's an exception during the process, it reports a test step failure with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getTextFromList",
        "code": "public void getTextFromList() {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[@class='slds-text-heading_small']//child::b\";\n\t\t\tif (isElementDisplayed(targetField, 10)) {\n\t\t\t\tList<WebElement> findWebElements = findWebElements(targetField);\n\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\thighLighterMethod1(targetField);\n\t\t\t\t\tmanualScreenshot(\"Value is auto poplated as expected :\" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to auto poplated value \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to auto poplated value \" + e.getClass().getName());\n\t\t}\n\n\t}",
        "description": "This Java method, `getTextFromList`, is used to retrieve the text from a list of web elements that match a specific XPath expression. The method attempts to locate the specified elements using the provided XPath and then iterates through the found elements to extract their text content. If the target element is not displayed within a certain time limit (10 seconds), the test step fails. Additionally, the method takes manual screenshots for each successfully retrieved text value and highlights the corresponding web elements using another method (`highLighterMethod1`). If any exceptions occur during the execution of this method, it will fail the test step with an error message including the exception's class name.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "chooseValueFromSearchAndListFieldInISDCreation",
        "code": "public void chooseValueFromSearchAndListFieldInISDCreation(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString clksearch = labelName + \" #xpath=//span[contains(@title,'Show All Results for')]\";\n\t\t\t\tString lnk_zipCity = value\n\t\t\t\t\t\t+ \"#xpath=(//a[contains(text(),'Account Name')]//ancestor::tr//parent::thead//../tbody//a[@data-refid])[1] | //a[@title='\"\n\t\t\t\t\t\t+ value + \"']/following::span[text()='abeld']\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tscrollToElementTillPresent(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tclickOn(clksearch);\n\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" is not present\");\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please provide some value for this field\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchAndListField \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListFieldInISDCreation`, is used to select a value from a search result list in an ISD (Integrated System Development) creation process. \n\nThe method takes two parameters: `labelName` and `value`. It first checks if the provided `value` is not empty. If it's not, it performs the following steps:\n\n1. Waits for an element with the specified `searchField` XPath to be present.\n2. Scrolls to this element.\n3. Types the provided `value` into the search field.\n4. Clicks on the \"Show All Results\" button.\n5. Waits for an element with the specified `lnk_zipCity` XPath to be present.\n6. If this element is displayed, it highlights and clicks on it.\n\nIf the `value` is empty or any of these steps fail, the method reports a test step failure with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "selectValueInDealerAccountAvailableOrChosenField",
        "code": "public void selectValueInDealerAccountAvailableOrChosenField(String labelName,String fieldName,String value) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//span[text()='\"+fieldName+\"']//following-sibling::div//li//span[text()='\"+value+\"']\";\n\t\t\t\t\n\t\t\tif (isElementDisplayed(targetField, 10)) {\n\t\t\t\tscrollToElementTillPresent(targetField);\n\t\t\t\t\n\t\t\t\tclickOnSpecialElement(targetField);\n\t\t\t\tif (fieldName.equalsIgnoreCase(\"Available\")) {\n\t\t\t\t\tString clickbutton=\"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//button[@title='Move selection to Chosen']\";\n\t\t\t\t\tclickOn(clickbutton);\n\t\t\t\t}else {\n\t\t\t\t\tString clickbutton=\"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//button[@title='Move selection to Available']\";\n\t\t\t\t\tclickOn(clickbutton);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(fieldName +\" already moved to \"+value +\" Field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to auto poplated value \" + e.getClass().getName());\n\t\t}\n \n\t}",
        "description": "This Java method, named `selectValueInDealerAccountAvailableOrChosenField`, is used to select a specific value from a dropdown list in a web application. The method takes three parameters: `labelName`, `fieldName`, and `value`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the desired value based on the provided `labelName`, `fieldName`, and `value`.\n2. If the target element is displayed within 10 seconds, it scrolls to that element.\n3. It then clicks on the special element (likely a dropdown arrow or caret).\n4. If the `fieldName` is \"Available\", it clicks on the \"Move selection to Chosen\" button; otherwise, if `fieldName` is not \"Available\", it clicks on the \"Move selection to Available\" button.\n5. If the target element is not displayed within 10 seconds, it logs a test step failure with a message indicating that the value has already been moved.\n\nThe method catches any exceptions that occur during execution and logs a test step failed message if an exception occurs.",
        "input": [
            "String labelName",
            "String fieldName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "selectAllValueInDealerAccountAvailableOrChosenField",
        "code": "public void selectAllValueInDealerAccountAvailableOrChosenField(String labelName,String fieldName) {\n\t\ttry {\n\t\t\tString targetField = \"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//span[text()='\"+fieldName+\"']//following-sibling::div//li[1]\";\n\t\t\tif (isElementDisplayed(targetField, 10)) {\n\t\t\t\tscrollToElement(targetField);\n\t\t\t\tclickOn(targetField);\n\t\t\t\tActions act = new Actions(driver);\n\t\t\t\tact.keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).build().perform();\n\t\t\t\tif (fieldName.equalsIgnoreCase(\"Available\")) {\n\t\t\t\t\tString clickbutton=\"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//button[@title='Move selection to Chosen']\";\n\t\t\t\t\tclickOn(clickbutton);\n\t\t\t\t}else {\n\t\t\t\t\tString clickbutton=\"#xpath=//div[text()='\"+labelName+\"']//parent::div//..//button[@title='Move selection to Available']\";\n\t\t\t\t\tclickOn(clickbutton);\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName +\" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to selectAllValueInDealerAccountAvailableOrChosenField \" + e.getClass().getName());\n\t\t}\n \n\t}",
        "description": "This Java method, `selectAllValueInDealerAccountAvailableOrChosenField`, is used to select all values in a specific field within the Dealer Account page. The method takes two parameters: `labelName` and `fieldName`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the target field based on the provided `labelName` and `fieldName`.\n2. It checks if the target field is displayed using the `isElementDisplayed` method, with a timeout of 10 seconds.\n3. If the field is displayed, it scrolls to the element using the `scrollToElement` method, then clicks on the element using the `clickOn` method.\n4. It uses the `Actions` class to perform a keyboard action (Ctrl+A) to select all values in the field.\n5. If the selected value is \"Available\", it clicks on the \"Move selection to Chosen\" button; otherwise, if the selected value is \"Chosen\", it clicks on the \"Move selection to Available\" button.\n6. If the target field is not displayed, it fails the test step with a message indicating that the field is not present.\n\nThe method also includes error handling using a `try`-`catch` block. If any exception occurs during the execution of the method, it will fail the test step with a message indicating the failure.",
        "input": [
            "String labelName",
            "String fieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "getRecordTypeAndCompare",
        "code": "public String getRecordTypeAndCompare(String LabelName, String expectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=(//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::div//parent::div//../following-sibling::dd//div//span//span)[1]\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementPresent(Element)) {\n\t\t\t\tscrollToElement(Element);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tscrollToElementTillPresent(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" Value is populated in \" + LabelName + \" as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(expectedValue + \" Value is not populated in \" +LabelName+\" instead got \"+text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getRecordTypeAndCompare.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getRecordTypeAndCompare`, takes two string parameters: `LabelName` and `expectedValue`. It is used to verify the value of an element on a web page that has the specified label name. \n\nThe method uses various WebDriver methods (e.g., `waitForElement`, `isElementPresent`, `scrollToElement`, etc.) to locate the element, scroll into view, and retrieve its text. It then compares this text with the expected value provided as an input parameter.\n\nIf the actual value matches the expected value, it takes a manual screenshot for verification. If they do not match, it marks the test step as failed. The method also catches any exceptions that may occur during execution and marks the test step as failed if one occurs. \n\nFinally, the method returns the text of the element.",
        "input": [
            "String LabelName",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "customerPage_Admin",
        "function_name": "clickOnLinkInTaskRedesign",
        "code": "public void clickOnLinkInTaskRedesign(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//span[text()='\" + linkName\n\t\t\t\t\t+ \"']//..//..//..//slot//a\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLinkInTaskRedesign \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t}",
        "description": "This Java method, `clickOnLinkInTaskRedesign`, attempts to find and click on a link with the given name (`linkName`) within a specific time frame (10 seconds). Here's a brief summary of its functionality:\n\n1. The method constructs an XPath expression by concatenating the `linkName` with a specific XPath syntax.\n2. It then uses this XPath expression to locate the element using the `waitForElement` method, which waits for up to 10 seconds for the element to be present.\n3. If the element is found, it calls the `clickOnSpecialElement` method to perform the actual click action.\n4. After clicking the link, the method waits for the page to load completely using the `waitForPageToLoad` method.\n5. If the element is not found after 10 seconds, the method logs a failure test step with the message \"linkName link is not present\".\n6. In case of any exceptions (e.g., timeouts, network errors), the method catches them and logs a failed test step with the exception's class name.\n\nIn summary, this method helps automate clicking on specific links within a web page, with built-in timeout handling and error reporting.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "switchToApplicationClassicOrLightning",
        "code": "public void switchToApplicationClassicOrLightning(String mode) {\n\t\ttry {\n\t\t\tif (mode.equalsIgnoreCase(\"Lightning\")) {\n\t\t\t\tif (!isElementDisplayed(\"Waffle icon#xpath=//div[@class='slds-icon-waffle']\", 2)) {\n\t\t\t\t\tif (isElementDisplayed(GOR.img_user, 2)) {\n\t\t\t\t\t\ttestStepPassed(\"Already present in lightining mode\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclickOn(GOR.lnk_switchToLightning);\n\t\t\t\t\t\tif (isElementDisplayed(GOR.txt_salesForceSearchbox, 2)) {\n\t\t\t\t\t\t\ttestStepPassed(\"# Successfully navigated to application lightning mode #\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Failed to navigate application lightning mode\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"# Already present in lightining mode #\");\n\t\t\t\t}\n\t\t\t} else if (mode.equals(\"Classic\")) {\n\t\t\t\tif (isElementDisplayed(GOR.lnk_switchToLightning, 2)) {\n\t\t\t\t\ttestStepPassed(\"Already present in classic mode\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnSpecialElement(GOR.img_user);\n\t\t\t\t\tclickOn(GOR.lnk_switchToClassic);\n\t\t\t\t\tif (isElementDisplayed(GOR.lnk_switchToLightning, 2)) {\n\t\t\t\t\t\ttestStepPassed(\"# Successfully navigated application to Classic mode #\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Failed to navigate to application Classic mode\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"An exception occurred switchToApplicationClassicOrLightning() \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to click on App launcher ICON on Admin and enter value in Search Field\n\t * @param         :  sales is the value need to search\n\t */",
        "description": "This Java method, `switchToApplicationClassicOrLightning`, is used to switch between two modes (Classic and Lightning) of a Salesforce application. \n\nThe method takes a string parameter `mode` which can be either \"Lightning\" or \"Classic\". It uses an if-else statement to determine the mode and perform the necessary actions to switch to that mode.\n\nIn the \"Lightning\" mode, it checks if the Waffle icon is displayed. If not, it clicks on the \"Switch To Lightning\" button and verifies if the SalesForce search box is displayed. \n\nIn the \"Classic\" mode, it checks if the \"Switch To Classic\" link is displayed. If not, it clicks on the user image and then clicks on the \"Switch To Classic\" link.\n\nThe method also includes error handling using a try-catch block to catch any exceptions that may occur during the execution of the method.",
        "input": [
            "String mode"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectSales",
        "code": "public void selectSales(String sales) {\n\t\ttry {\n\t\t\tString waffle = \"App Launcher icon#xpath=//div[contains(@class,'appLauncher')]//button\";\n\t\t\tString search = \"App Launcher search field#xpath=//div[contains(@class,'appLauncherMenu')]//input\";\n\t\t\twaitForElement(waffle, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(waffle, 5)) {\n\t\t\t\tclickOn(waffle);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(search, implicitlyWaitTime);\n\t\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\t\ttypeIn(search, sales);\n\t\t\t\t\tWebElement ele = findWebElement(search);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t}else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\ttestStepFailed(\"App Launcher is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Sales. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to click on New Button in Record Creation\n\t */",
        "description": "This Java method, `selectSales`, is used to select a sales option from an App Launcher search field. \n\nThe method first waits for the App Launcher icon and button to be displayed, then clicks on it and waits for the page to load. It then checks if the search field is present and if so, types in the provided `sales` string and presses Enter.\n\nIf any of these steps fail (e.g., the icon or search field is not found), the method will report a test step failure with an appropriate error message.",
        "input": [
            "String sales"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnNewButtonInRecordCreation",
        "code": "public void clickOnNewButtonInRecordCreation() {\n\t\ttry {\n\t\t\tString newButton = \"New Button#xpath=(//ul//li//a//div[text()='New'])[1] | //li//button[text()='Change Owner']//ancestor::ul//li//button[text()='New']\";\n\t\t\twaitForElement(newButton, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(newButton, 5)) {\n\t\t\t\tscrollToWebElement(newButton);\n\t\t\t\tclickOnSpecialElement(newButton);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"New Button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on New Button. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to click on Radio Button\n\t * @param         :  RadioLabel is the label need to select\n\t */",
        "description": "This Java method, `clickOnNewButtonInRecordCreation()`, is used to simulate a user clicking on a \"New\" button in a record creation process. The method uses various Selenium WebDriver methods to:\n\n1. Wait for the new button to be present and visible.\n2. Scroll to the new button if it's not immediately visible.\n3. Click on the new button.\n4. Verify that the page has finished loading after clicking the button.\n\nThe method also includes error handling, where it will fail the test step if the new button is not found or if an exception occurs while attempting to click the button.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String RadioLabel) {\n\t\ttry {\n\t\t\tString radibutton =  \"Radio Button#xpath=//span[text()='\"+RadioLabel+\"']//parent::div//parent::label//div//input//following-sibling::span\";\n\t\t\twaitForElement(radibutton, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(radibutton, 5)) {\n\t\t\t\tscrollToWebElement(radibutton);\n\t\t\t\tclickOnSpecialElement(radibutton);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(RadioLabel+\" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on Radio Button. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to click on buttons\n\t * @param         :  buttonName is the name of button need to click\n\t */",
        "description": "This Java method, `clickOnRadioButton`, is used to click on a radio button with a specific label. The method uses Selenium WebDriver's built-in functions to locate and interact with the radio button.\n\nHere's what it does:\n\n1. It takes a `String` parameter `RadioLabel`, which represents the text of the radio button.\n2. It constructs an XPath expression to locate the radio button element based on its label.\n3. It uses the `waitForElement` method to wait for the radio button element to be displayed.\n4. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method and then clicks on it using the `clickOnSpecialElement` method.\n5. If the element is not displayed after a certain time (5 seconds), it reports a test step failure with a message indicating that the radio button is not present.\n6. If any exception occurs during the execution of this method, it catches the exception and reports a test step failure with a message indicating the type of exception.\n\nIn summary, this method is designed to click on a specific radio button based on its label, while handling potential exceptions and reporting test step failures if necessary.",
        "input": [
            "String RadioLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button//span[text()='\" + buttonName + \"'] | //div[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Pradeep T\n\t * @created Date  :  09/02/2022\n\t * Description    :  Method to click on buttons\n\t * @param         :  buttonLabel is the name of button need to click\n\t */",
        "description": "This Java method, `clickOnButton`, attempts to find and click a button with the given `buttonName` using XPath or CSS selectors. The method:\n\n1. Constructs an XPath/CSS selector string by concatenating the `buttonName` with specific XPath/CSS syntax.\n2. Waits for the element to be displayed (using `waitForElement`) and then checks if it's actually visible on the screen (using `isElementDisplayed`).\n3. If the button is present, it clicks on the button using `clickOn`.\n4. If the button is not present, it marks the test step as failed.\n5. If any exception occurs during this process, it also marks the test step as failed and logs the exception.\n\nThe method takes a single parameter, `buttonName`, which represents the name of the button to be clicked.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton(String buttonLabel) {\n\t\ttry { \n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"'] | //button[@title='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, implicitlyWaitTime);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\twaitTime(5);\n\t\t\t\tmanualScreenshot(\"Clicked on \"+buttonLabel);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in clickOnSaveButton. Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/02/2022\n\t * Description    :  Method to search value in global search field\n\t * @param         :  searchValue is the value we need to search \n\t * @return        :  searchValue is return the searched value\n\t */",
        "description": "This Java method, `clickOnSaveButton`, simulates a click on a button with the specified label. Here's a breakdown of what it does:\n\n1. It takes a `String` parameter `buttonLabel` which represents the text or title of the button to be clicked.\n2. It constructs an XPath expression to locate the button using the provided label and either the `text()` or `@title` attribute, depending on whether the button's text matches the label or not.\n3. It waits for the element to be present using the `waitForElement` method with a specified implicit wait time.\n4. If the element is displayed within 5 seconds, it scrolls to the element if necessary and performs a click action on it using the `Actions` class.\n5. After clicking the button, it takes a manual screenshot with a message indicating that the button was clicked.\n6. If the element is not present or cannot be clicked within the specified time, it fails the test step.\n\nThe method also catches any exceptions that may occur during its execution and reports them as failed test steps.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "globalSalesSearch",
        "code": "public String globalSalesSearch(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//input[contains(@title,'Search')]\";\n\t\t\tString searchResults = searchValue + \"#xpath=//ul/li/a/div/following-sibling::span[contains(text(),'\"\n\t\t\t\t\t+ searchValue + \"')]\";\n\t\twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchResults, 3)) {\n\t\t\t\t\tclickOn(searchResults);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchValue + \" is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in globalSalesSearch \" + e.getClass().getName());\n\t\t}\n\t\treturn searchValue;\n\t}\n\t\n\t\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  30/02/2022\n\t * Description    :  Method to click searched result\n\t * @param         :  customerName is the value to click\n\t */",
        "description": "Here is a brief description of the Java method:\n\n`globalSalesSearch(String searchValue)` is a method that searches for a specific value (`searchValue`) in a global sales search field and clicks on the result if found. The method uses WebdriverIO's `waitForElement`, `typeIn`, `clickOn`, and other methods to perform the search and click actions. If the search fails or the result is not displayed, it reports an error using the `testStepFailed` method. The method returns the original `searchValue`.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnGlobalSearchResult",
        "code": "public void clickOnGlobalSearchResult(String customerName) {\n\t\ttry {\n\t\t\tString link = customerName + \"#xpath=//div[contains(@class,'active')]//a[@title='\" + customerName + \"']\";\n\t\t\tpageScrollUp();\n\t\t\twaitForElement(link, 20);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tscrollbycordinates(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(5);\n\t\t\t\tmanualScreenshot(customerName+\" is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnGlobalSearchResult \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  01/03/2022\n\t * Description    :  Method to click drop down in global search\n\t * @param         :  dropDownValue is the option need to click\n\t */",
        "description": "This Java method, `clickOnGlobalSearchResult`, is used to click on a specific search result link in a web page. The method takes a `customerName` parameter and uses it to construct an XPath-based link string. It then performs the following actions:\n\n1. Scrolls up the page using the `pageScrollUp()` method.\n2. Waits for the constructed link to be present on the page using the `waitForElement(link, 20)` method with a timeout of 20 seconds.\n3. If the link is present, it scrolls to that element using the `scrollToElement(link)`, `scrollToWebElement(link)`, and `scrollbycordinates(link)` methods.\n4. It then clicks on the special element (likely an HTML anchor tag) associated with the link using the `clickOnSpecialElement(link)` method.\n5. Waits for 5 seconds using the `waitTime(5)` method.\n6. If the operation is successful, it takes a manual screenshot of the page with the text \"customerName+\" is present\".\n7. If the link is not present, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectValueInGlobalSearchDropDown",
        "code": "public void selectValueInGlobalSearchDropDown(String dropDownValue) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString inputField = \"Global search input#xpath=//div//input[contains(@class,'combobox__input')]\";\n\t\t\tString dropdownOption = \"Global Search dropdown#xpath=//ul[@aria-label='Suggested For You']//li//span[@title='\"\n\t\t\t\t\t+ dropDownValue + \"']\";\n\t\t\tWebElement element = findWebElement(inputField);\n\t\t\twaitForElement(inputField, 10);\n\t\t\tif (isElementDisplayed(inputField, 10)) {\n\t\t\t\tActions actions = new Actions(driver);\n\t\t\t\tactions.click(element).build().perform();\n\t\t\t\ttestStepPassed(\"Click On Global Search dropdown.\");\n\t\t\t\tif (isElementDisplayed(dropdownOption, 3)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownOption);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(dropDownValue + \" Option is not Present in Global Search Dropdown.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search dropdown field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Value In Global Search DropDown. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to click record from the list\n\t * @param         :  cardName is the record need to click\n\t */",
        "description": "This Java method, `selectValueInGlobalSearchDropDown`, is used to select a value from the global search dropdown menu. The method takes a string parameter `dropDownValue` which represents the desired value to be selected.\n\nThe method first waits for the page to load and then locates the input field and dropdown option using XPath expressions. It then performs an action on the input field by clicking it, which opens the dropdown menu.\n\nIf the desired value is present in the dropdown menu, the method clicks on that value and waits for the page to load again. If the value is not present, the method fails the test step with a message indicating that the option is not present.\n\nThe method also includes error handling using a try-catch block, where any exceptions thrown during the execution of the method are caught and the test step is failed with an appropriate error message.",
        "input": [
            "String dropDownValue"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnCardBoundary",
        "code": "public void clickOnCardBoundary(String cardName) {\n\t\ttry {\n\t\t\tString path = cardName + \" #xpath=(//h2//span[text()='\" + cardName + \"'])[last()]\";\n\t\t\twaitForElement(path, 10);\n\t\t\tscrollToElementTillPresent(path);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + cardName + \" card \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to click records in IR table\n\t * @param         :  labelname is the record need to click\n\t */",
        "description": "This Java method, named `clickOnCardBoundary`, attempts to click on a specific card boundary element with the given name. It uses Selenium WebDriver to interact with the web application.\n\nHere's what it does:\n\n1. Creates an XPath expression to locate the card boundary element based on its name.\n2. Waits for the element to be present using `waitForElement` method.\n3. Scrolls the element into view using `scrollToElementTillPresent` method.\n4. Checks if the element is still present using `isElementPresent` method.\n5. If the element is present, it scrolls to the element and clicks on a special element within it using `clickOnSpecialElement` method.\n6. If any of these steps fail, it reports a test step failure with an appropriate message.\n\nNote that this method catches any exceptions that occur during its execution and reports a test step failure if one occurs.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnIRTableLink",
        "code": "public String clickOnIRTableLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=//span//a[@title = '\" + labelname\n\t\t\t+ \"']//ancestor::td//..//a//span\";\t\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" response is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" IR are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnIRTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to click records in the table\n\t * @param         :  labelname is the record need to click\n\t */",
        "description": "This Java method, `clickOnIRTableLink`, is used to click on a specific link in an IR (Information Record) table. The method takes a `labelname` parameter which is the name of the record that needs to be clicked.\n\nThe method first refreshes the page and waits for it to load. It then constructs an XPath expression based on the provided labelname, which is used to locate the link. If the element is displayed within 4 seconds, the method highlights the element, gets its text, clicks on it, takes a manual screenshot, and waits again for the page to load.\n\nIf the element is not displayed or if any exception occurs during the process, the method reports a test step failure. The method returns the text of the clicked link as a string value.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTableLink",
        "code": "public String clickOnTableLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[last()]\";\n\t\t\tString ClickOnLink1 = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[last()]//slot//slot\";\t\n\t\t\t\t\t\t\t\t\t\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod1(ClickOnLink);\n\t\t\t\tmanualScreenshot(labelname);\n\t\t\t\tvalue = getText(ClickOnLink1);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(value+\" record got created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTableLink`, is used to perform a series of actions on a table link with the given label name. The method takes a `String` parameter `labelname` which is used to construct an XPath expression to locate the table link.\n\nHere's what the method does:\n\n1. It constructs two XPath expressions using the provided `labelname`. These expressions are used to find the table link and its child elements.\n2. It checks if the table link is displayed on the page using a separate method `isElementDisplayed`.\n3. If the link is displayed, it performs the following actions:\n\t* Highlights the link using `highLighterMethod1`.\n\t* Takes a manual screenshot of the page with the label name as the filename.\n\t* Gets the text content of the link's child element using `getText`.\n\t* Clicks on the link using `clickOnSpecialElement`.\n\t* Waits for the page to load completely using `waitForPageToLoad`.\n\t* Takes another manual screenshot with a filename that includes the text content of the link.\n4. If the link is not displayed, it marks the test step as failed and returns an empty string.\n\nThe method catches any exceptions that may occur during its execution and marks the test step as failed if one occurs.\n\nFinally, the method returns the text content of the link's child element.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTableLinkWithIndex",
        "code": "public String clickOnTableLinkWithIndex(String labelname,String index) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[\" + index\n\t\t\t\t\t+ \"]\";\n\t\t\tString ClickOnLink1 = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[\" + index\n\t\t\t\t\t+ \"]//slot//slot\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod1(ClickOnLink);\n\t\t\t\tmanualScreenshot(labelname);\n\t\t\t\tvalue = getText(ClickOnLink1);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(value+\" record got created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t/*\n\t * @author        :  Janaki S\n\t * @created Date  :  15/06/2022\n\t * Description    :  Method to verify whether checkbox is selected or not\n\t * @param         :  labelname is the checbox name\n\t */",
        "description": "This Java method, `clickOnTableLinkWithIndex`, simulates a click on a table link with a specified index and verifies that the expected record has been created. The method takes two parameters: `labelname` (the name of the table link) and `index` (the index of the table link).\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the table link using the provided label name.\n2. It checks if the element is displayed within a specified timeout (4 seconds).\n3. If the element is displayed, it highlights the element, takes a manual screenshot, and clicks on the element.\n4. It waits for the page to load again.\n5. It takes another manual screenshot with a message indicating that the expected record has been created.\n6. If the element is not displayed within the specified timeout, it fails the test step.\n\nThe method returns the text content of the element after clicking on it (i.e., the text content of the newly created record).",
        "input": [
            "String labelname",
            "String index"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyCheckBoxSelected",
        "code": "public void verifyCheckBoxSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input | //span[text()='\"\n\t\t\t\t\t+ labelName + \"']/..//..//following-sibling::dd//span//input\";\n\t\t\tString checkBox1 = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input/..//span[@part='indicator'] | //span[text()='\"\n\t\t\t\t\t+ labelName + \"']/..//..//following-sibling::dd//span//input/..//span[@part='indicator']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod1(checkBox1);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already checked as expected\");\n\t\t\t\t} else {\t\t\n\t\t\t\ttestStepFailed(labelName + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n\t/*\n\t * @author        :  Jeeva R\n\t * @created Date  :  22/06/2022\n\t * Description    :  method to get link text value\n\t * @param \t      :  labelName is field name\n\t * @return        :  value return retrieved value\t \n\t */",
        "description": "This Java method, `verifyCheckBoxSelected`, is used to verify if a checkbox with a specific label name is selected or not. It takes the label name as a parameter and uses XPath expressions to locate the checkbox element.\n\nHere's what the method does:\n\n1. It constructs two XPath expressions using the provided label name.\n2. It waits for the first XPath expression (checkBox) to be present on the page, with a timeout of 10 seconds.\n3. If the checkbox is present, it scrolls to the element and checks if the checkbox is selected using another method `isCheckBoxSelected`.\n4. If the checkbox is selected, it highlights the second XPath expression (checkBox1) using the `highLighterMethod1` method and takes a manual screenshot with the label name as the file name.\n5. If the checkbox is not selected or not present, it fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "getLinkTextFieldValue",
        "code": "public String getLinkTextFieldValue(String labelName) {\t\n\t\tString value = \"\";\n\t\ttry {\t\t\n\t\t\tString Element = labelName + \"#xpath=//span[text()='\"+ labelName + \"']//ancestor::div//following-sibling::dd//span//a//span\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod1(Element);\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tif (value.isEmpty()) {\n\t\t\t\t\ttestStepFailed(\"Value is not populated in \" + labelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(\"[ \" + value + \" ] is displayed in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLinkTextFieldValue\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getLinkTextFieldValue`, retrieves the text value of a link field with a specific label name. It uses Selenium WebDriver to interact with the web page.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `labelName`, which is used to identify the link field.\n2. It constructs an XPath expression to locate the desired element on the webpage.\n3. It waits for the element to be displayed using the `waitForElement` method.\n4. If the element is displayed, it scrolls to the element using `scrollToWebElement`.\n5. It highlights the element using a custom `highLighterMethod1`.\n6. It retrieves the text value of the element using `getText`.\n7. If the value is empty, it fails the test step with a message indicating that the value is not populated.\n8. It takes a manual screenshot to capture the result.\n9. If the element is not displayed, it fails the test step with a message indicating that the label name is not displayed.\n10. In case of any exception, it catches and logs the error, then fails the test step.\n\nThe method returns the text value of the link field as a `String`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyCheckBoxNotSelected",
        "code": "public void verifyCheckBoxNotSelected(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input | //span[text()='\"\n\t\t\t\t\t+ labelName + \"']/..//..//following-sibling::dd//span//input\";\n\t\t\tString checkBox1 = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelName + \"']/../following-sibling::div/span//input/..//span[@part='indicator'] | //span[text()='\"\n\t\t\t\t\t+ labelName + \"']/..//..//following-sibling::dd//span//input/..//span[@part='indicator']\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod1(checkBox1);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is not checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"verifyCheckBoxNotSelected failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxNotSelected`, is used to verify that a checkbox with the given label name is not selected (i.e., unchecked). It uses Selenium WebDriver and performs the following actions:\n\n1. Builds an XPath expression to locate the checkbox element.\n2. Waits for the checkbox element to be present on the page using `waitForElement`.\n3. Checks if the checkbox element is present using `isElementPresent`.\n4. If the checkbox is present, scrolls to it using `scrollToWebElement` and then checks if it's not selected (i.e., unchecked) using `isCheckBoxSelected`.\n5. If the checkbox is not selected, highlights it using `highLighterMethod1`, takes a manual screenshot with the label name as the filename, and marks the test step as passed.\n6. If the checkbox is selected or not present, marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and writes an error message to a log file if one occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "enterValueInTableSearchAndClick",
        "code": "public void enterValueInTableSearchAndClick(String value1,String value2) {\n\t\ttry {\n\t\t\tString Element1 = \"#xpath=//input[contains(@name,'search-input')]\";\n\t\t\tString Element2 = \"#xpath=//th//span//a[text()='\" + value2 + \"']\";\n\t\t\tif (isElementDisplayed(Element1, 5)) {\n\t\t\t\ttypeIn(Element1, value1);\n\t\t\t\tfindWebElement(Element1).sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(\"click on \" + value1);\n\t\t\t\tif (isElementDisplayed(Element2, 5)) {\n\t\t\t\t\tclickOn(Element2);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tmanualScreenshot(\"Clicked on \"+value2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value2 + \" is not present to click\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search Bar is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTableSearchAndClick\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, named `enterValueInTableSearchAndClick`, performs the following actions:\n\n1. Searches for an input element with a specific name (`search-input`) using XPath.\n2. Types in the value provided as `value1` into the searched input field and presses Enter.\n3. Waits for the page to load completely.\n4. Takes a manual screenshot of the current page (for debugging purposes).\n5. Searches for an element containing text matching the value provided as `value2`.\n6. If the element is displayed, clicks on it.\n7. Waits for the page to load again and takes another manual screenshot.\n8. If either the search bar or the target element is not present, fails the test step.\n\nThe method uses several helper methods (e.g., `isElementDisplayed`, `typeIn`, `findWebElement`, `waitForPageToLoad`, `manualScreenshot`) that are not shown in this snippet. It also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String value1",
            "String value2"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnChargesTableLink",
        "code": "public String clickOnChargesTableLink(String labelname) {\n\t\tString value =\"\";\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=//div/a[@title ='\" + labelname\n\t\t\t\t\t+ \"']//..//..//..//..//..//..//..//preceding-sibling::th//a//span\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(labelname + \" charges is created as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" charges are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnChargesTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnChargesTableLink`, is used to interact with a link on a web page that displays charges information. The method takes a string parameter `labelname` which is likely the label or title of the link.\n\nHere's what the method does:\n\n1. Refreshes the current page using the `refreshPage()` method.\n2. Waits for the page to load completely using the `waitForPageToLoad()` method.\n3. Constructs an XPath expression to locate the link with the specified `labelname` and clicks on it if it is displayed within a certain time limit (4 seconds).\n4. If the link is clicked successfully, highlights the element using the `highLighterMethod()` method, retrieves the text of the link using the `getText()` method, and then clicks on the special element using the `clickOnSpecialElement()` method.\n5. Waits again for the page to load completely.\n6. Takes a manual screenshot as expected with the label name as the filename.\n7. If any exception occurs during the process, it marks the test step as failed.\n\nThe method returns a string value which is likely the text of the link that was clicked or an error message if the link is not found or clickable.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectOptionfromSideArrowButton",
        "code": "public void selectOptionfromSideArrowButton(String optionValue) {\n\t\ttry {\n\t\t\tString menu = \"#xpath=//lightning-button-menu[contains(@class,'menu-button-item')]\";\n\t\t\twaitForElement(menu, 10);\n\t\t\tif (isElementPresent(menu)) {\n\t\t\t\tscrollToWebElement(menu);\n\t\t\t\tclickOn(menu);\n\t\t\t\tmanualScreenshot(\"Click on \"+optionValue);\n\t\t\t\tString option = optionValue + \"#xpath=//li//div//span[text()='\" + optionValue\n\t\t\t\t\t+ \"']\";\n\t\t\t\tif (isElementDisplayed(option, 10)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\tmanualScreenshot(\"Clicked on \"+optionValue);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Side arrow is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectOptionfromSideArrowButton failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOptionfromSideArrowButton`, is used to select an option from a side arrow button in a Lightning UI component (likely Salesforce). \n\nThe method takes a string parameter `optionValue` which represents the value of the option to be selected. It first waits for the presence of the menu element and then scrolls down to it, clicks on it, and verifies if the option is displayed. If the option is found, it clicks on it and waits for the page to load. \n\nIf any step fails (e.g., the menu or option is not present), the method will write an error message to a log file and mark the test as failed.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "classicGlobalSalesSearch",
        "code": "public String classicGlobalSalesSearch(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//div[@id='phSearchContainer']//input[contains(@title,'Search')]\";\n\t\t\tString searchResults = searchValue + \"#xpath=//a[text()='\" + searchValue + \"']\";\n\t\t\twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\tfindWebElement(search).sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchResults, 3)) {\n\t\t\t\t\tclickOn(searchResults);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchResults + \" is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Classic Global Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in classicGlobalSalesSearch \" + e.getClass().getName());\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `classicGlobalSalesSearch`, performs a search on a webpage using the Classic Global Sales Search feature. It takes a `searchValue` as input and attempts to:\n\n1. Construct two XPath expressions: one for searching and another for finding the search results.\n2. Wait for the search element to be displayed (up to 20 seconds).\n3. If the search element is displayed, type in the search value and submit the search.\n4. Wait for the page to load after submitting the search.\n5. Check if the search results are displayed (up to 3 seconds). If they are, click on them and wait for the page to load again.\n6. If any of these steps fail, it reports a test step failure.\n\nThe method returns the original `searchValue`.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnButtonInClassic",
        "code": "public void clickOnButtonInClassic(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//td[@id='topButtonRow']//input[@title='\" + buttonLabel + \"']\";\n\t\t\tString button1 = buttonLabel + \"#xpath=//td[@id='bottomButtonRow']//input[@title='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t\telse if (isElementDisplayed(button1, 5)) {\n\t\t\t\tscrollToWebElement(button1);\n\t\t\t\tclickOn(button1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInClassic. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInClassic`, attempts to click on a button with the specified label (`buttonLabel`) in a classic UI layout. It uses Selenium WebDriver's methods to:\n\n1. Construct an XPath locator for the button based on the label and two possible locations (top and bottom).\n2. Wait for the button to be displayed using `waitForElement`.\n3. If the button is displayed, scroll to it using `scrollToWebElement`, click on it using `clickOn`, and wait for the page to load using `waitForPageToLoad`.\n4. If the button is not displayed in the top location, try the bottom location.\n5. If the button is still not found after trying both locations, fail the test step with a message indicating that the button is not present.\n\nIf any exceptions occur during the process, it catches them and fails the test step with an error message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnDateFormatInclassic",
        "code": "public void clickOnDateFormatInclassic(String label) {\n\t\ttry {\n\t\t\tString button = label + \"#xpath=//label[text()='\" + label + \"']/..//..//span[@class='dateFormat']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \"  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnDateFormatInclassic. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDateFormatInClassic`, attempts to click on a date format element in the classic layout of a UI component. It takes a `label` parameter, which is used to construct an XPath expression to locate the element.\n\nHere's what the method does:\n\n1. Constructs an XPath expression by concatenating the provided label with a fixed path to the date format element.\n2. Waits for the element to be present using the `waitForElement` method (timeout: 10 seconds).\n3. Checks if the element is displayed using the `isElementDisplayed` method (timeout: 5 seconds). If it's not displayed, the test fails.\n4. Scrolls to the element using the `scrollToWebElement` method if necessary.\n5. Clicks on the element using the `clickOn` method.\n6. Waits for the page to load completely using the `waitForPageToLoad` method.\n\nIf any of these steps fail (e.g., the element is not present or cannot be scrolled to), the method catches the exception and reports a test failure with an error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnSetup",
        "code": "public void clickOnSetup() {\n\t\ttry {\n\t\t\tString ClickOnLink = \"#xpath=//div[@class='setupGear']//div[@class='uiMenu']\";\n\t\t\tString ClickOnOpt = \"#xpath=//ul[@role='presentation']//li[contains(@id,'setup')]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\tclickOn(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(ClickOnOpt, 4)) {\n\t\t\t\t\thighLighterMethod(ClickOnOpt);\n\t\t\t\t\tclickOn(ClickOnOpt);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Sales Setup is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Sales Setup is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnSetup. Exception :\" +e.getClass().getName());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnSetup()`, attempts to click on the \"Sales Setup\" option in a web application. It uses Selenium WebDriver methods such as `isElementDisplayed()` and `clickOn()` to perform the action. The method first checks if the \"Sales Setup\" link is displayed within 4 seconds. If it is, it clicks on the link, waits for the page to load, and then checks if the \"Sales Setup\" option is present in the dropdown menu. If both conditions are met, it highlights the option using `highLighterMethod()` and clicks on it again. If either condition fails (i.e., the link or option is not displayed), the method marks a test step as failed. Additionally, the method catches any exceptions that may occur during execution and also marks a test step as failed if an exception is thrown.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "searchAndClickMenuInSetup",
        "code": "public void searchAndClickMenuInSetup(String value) {\n\t\ttry {\n\t\t\tString waffle = \"App Launcher icon#xpath=//input[@placeholder='Quick Find']\";\n\t\t\tString search = \"App Launcher search field#xpath=//ul[@role='group']//mark[text()='\" + value + \"']\";\n\t\t\twaitForElement(waffle, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(waffle, 5)) {\n\t\t\t\tfindWebElement(waffle).sendKeys(value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(search, 5);\n\t\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\t\tclickOnSpecialElement(search);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Users option is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchAndClickUsersInSetup. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `searchAndClickMenuInSetup`, searches for a specific value in an App Launcher and clicks on the corresponding menu option if found. \n\nThe method takes a `String` parameter `value` that represents the search query.\n\nHere's what it does:\n\n1. It waits for the \"App Launcher icon\" to be displayed.\n2. If the icon is present, it enters the provided `value` in the search field.\n3. It then waits for the search results page to load and checks if the menu option with the matching `value` is displayed.\n4. If the menu option is found, it clicks on it. \n5. If any of these steps fail (i.e., the icon or search field is not present, or the menu option is not found), the method logs a failure message and stops.\n\nNote: The `waitForElement`, `isElementDisplayed`, `findWebElement`, `clickOnSpecialElement`, and `testStepFailed` methods are likely custom utility functions for handling Selenium WebDriver operations and test result reporting.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnButtonInSetup",
        "code": "public void clickOnButtonInSetup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@class='pbHeader']//td[contains(@class,'pb')]//input[@value='\" + buttonName + \"'] | //div[@class='pbHeader']//td[@class='pbButton']//input[@title='\" + buttonName + \"']\";\n\t\t\tString frame = buttonName + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 5);\n\t\t    switchToFrame(frame);\n\t\t\tif (isElementDisplayed(button,5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInSetup. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInSetup`, is used to simulate a click on a button with the given name (`buttonName`) within a Salesforce setup page. \n\nThe method first constructs an XPath expression to locate the button and then uses this expression to:\n\n1. Wait for the element to be displayed (up to 5 seconds).\n2. Switch to the frame containing the button.\n3. Click on the button.\n4. Wait for the page to load.\n\nIf the button is not present, it fails the test step with a message indicating that the button was not found. \n\nIn case of any exception during execution, it also fails the test step with an error message including the type of exception.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "enterValueInSetupFields",
        "code": "public void enterValueInSetupFields(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//label[text()='\" + labelName + \"']/..//..//td//input)[1]\";\n\t\t\tString frame = labelName + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSetupFields. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSetupFields`, is used to input a value into a specific field on a Salesforce setup page. The method takes two parameters: `labelName` and `value`. \n\nIt first constructs an XPath expression to locate the field based on its label name. It then switches to the frame that contains this field, waits for the element to be displayed, scrolls to it if necessary, types in the value, and finally switches back to the default frame.\n\nIf any of these steps fail (e.g., the field is not present), the method reports a test step failure. If an exception occurs during execution, the method also reports a test step failure with details about the exception.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectValueFromDropdownInSetup",
        "code": "public void selectValueFromDropdownInSetup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/..//..//select | //td[text()='\" + dropdownName + \"']/..//..//select[@id='\" + dropdownName\n\t\t\t\t\t+ \"'] | //label[text()='\" + dropdownName + \"']/..//..//select[@id='\" + dropdownName + \"']\";\n\t\t\tString frame = dropdownName + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(dropdown, 5);\n\t\t\tif (isElementPresent(dropdown)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\tselect.selectByVisibleText(value);\n\t\t\t\thighLighterMethodManualScreenShot(dropdown, dropdownName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInSetup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInSetup`, is used to select a value from a dropdown list in a Salesforce setup page. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression to locate the dropdown element based on its name.\n2. It then switches to the iframe where the dropdown is located, waits for the dropdown to appear, and selects the desired value from the dropdown using the `Select` class.\n3. If the dropdown is not present, it marks the test step as failed.\n4. After selecting the value, it takes a manual screenshot of the dropdown element using the `highLighterMethodManualScreenShot` method.\n5. Finally, it switches back to the default frame.\n\nThe method catches any exceptions that occur during the execution and marks the test step as failed if an exception is thrown.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectValueFromRoleDropdownInSetup",
        "code": "public void selectValueFromRoleDropdownInSetup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//td[text()='\" + dropdownName + \"']/..//..//select[@id='role']\";\n\t\t\tString frame = dropdownName + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(dropdown, 5);\n\t\t\tif (isElementPresent(dropdown)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\tselect.selectByVisibleText(value);\n\t\t\t\thighLighterMethodManualScreenShot(dropdown, dropdownName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromRoleDropdownInSetup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromRoleDropdownInSetup`, is used to select a value from a dropdown menu with the specified name and value within a Salesforce setup page. \n\nThe method first constructs an XPath expression for the dropdown menu based on the provided dropdown name. It then waits for the frame containing the dropdown to be present, switches to that frame, and waits for the dropdown itself. If the dropdown is found, it scrolls to the selected option, selects it using a `Select` object, and takes a manual screenshot of the selection. \n\nIf the dropdown is not found, the method fails the test step. In case of any exception during execution, the method also fails the test step with an error message indicating the type of exception that occurred.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyAndPrintErrorPopupMessageInSetup",
        "code": "public void verifyAndPrintErrorPopupMessageInSetup(String expectedErrorValidation) {\n\t\ttry {\n\t\t\tString error_Msg = \"#xpath=//div[@class='pbError']\";\n\t\t\tString frame =   \"#xpath=//iframe[@title='New User ~ Salesforce - Enterprise Edition']\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElementToDisplay(error_Msg, 3);\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\t\t\t\n\t\t\t\t\tString errorValidation = getText(error_Msg);\n\t\t\t\t\tif (errorValidation.contains(expectedErrorValidation)) {\n\t\t\t\t\t\thighLighterMethod1(error_Msg);\n\t\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - Got '\" + errorValidation + \"' instead of \"\n\t\t\t\t\t\t\t\t+ expectedErrorValidation);\n\t\t\t\t\t}\t\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorPopupMessageInSetup. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAndPrintErrorPopupMessageInSetup`, verifies if a specific error message is displayed in the setup process and prints it to the console or report if found. It takes one parameter, `expectedErrorValidation`, which is the expected error message.\n\nHere's what the method does:\n\n1. It waits for an iframe with the specified title to load and switches to that frame.\n2. It then waits for a specific error message (`error_Msg`) to be displayed within 3 seconds.\n3. If the error message is displayed, it extracts the text content of the element using `getText()` method.\n4. It checks if the extracted error message contains the expected error validation string.\n5. If the expected error validation is found in the error message, it highlights the error message using a highlighting method (`highLighterMethod1`) and takes a manual screenshot with a descriptive filename.\n6. If the expected error validation is not found, or if there's no error message displayed at all, the test step fails.\n\nIf any exception occurs during this process, the method catches it and marks the test step as failed with an error message indicating the type of exception that occurred.",
        "input": [
            "String expectedErrorValidation"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyFieldErrorMessageInSetup",
        "code": "public void verifyFieldErrorMessageInSetup(String labelName, String expectedErrorValidation) {\n\t\ttry {\n\t\t\tString error_Msg = \"#xpath=//label[text()='\" + labelName + \"']/..//..//div[@class='errorMsg']\";\n\t\t\tString frame = \"#xpath=//iframe[@title='New User ~ Salesforce - Enterprise Edition']\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElementToDisplay(error_Msg, 3);\n\t\t\tif (isElementDisplayed(error_Msg, 5)) {\n\t\t\t\tscrollToWebElement(error_Msg);\n\t\t\t\tString errorValidation = getText(error_Msg);\n\t\t\t\tif (errorValidation.contains(expectedErrorValidation)) {\n\t\t\t\t\thighLighterMethod1(error_Msg);\n\t\t\t\t\tmanualScreenshot(\"Succesfully captured the error Validation : \" + errorValidation+\" in \"+labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected validation is not fire - Got '\" + errorValidation + \"' instead of \"\n\t\t\t\t\t\t\t+ expectedErrorValidation);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error pop up is displayed\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldErrorMessageInSetup. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldErrorMessageInSetup`, verifies that a specific error message is displayed when a field is set up with an expected error validation. \n\nThe method takes two parameters: `labelName` and `expectedErrorValidation`. It uses XPath expressions to locate the label and the corresponding error message in an iframe. The method then waits for the error message to be displayed, checks if it contains the expected error validation, and takes a screenshot or reports a failure depending on the result. If the error message is not displayed, the test step fails.",
        "input": [
            "String labelName",
            "String expectedErrorValidation"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnDocInRDTable",
        "code": "public String clickOnDocInRDTable(String docname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\t/*String ClickOnLink = \"\" + docname\n\t\t\t\t\t+ \"#xpath=//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'Required Documents Name') and contains(@title,'Required Documents Name')]/ancestor::thead/following-sibling::tbody//th//span[text()='\"\n\t\t\t\t\t+ docname + \"']\";*/\n\t\t\tString ClickOnLink = \"\" + docname\n\t\t\t\t\t+ \"#xpath=//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'Required Document') and contains(@title,'Required Document')]/ancestor::thead/following-sibling::tbody//th//slot[text()='\"\n\t\t\t\t\t+ docname + \"']//..//..//..//..//..//a\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnDocInRDTable. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnDocInRDTable`, is used to interact with a table in a web page that contains required documents. The method takes a string parameter `docname` which represents the name of the document.\n\nThe method uses various Selenium WebDriver methods such as `isElementDisplayed`, `highLighterMethod`, `getText`, and `clickOnSpecialElement` to perform the following actions:\n\n1. Check if an element with the specified XPath is displayed within 4 seconds.\n2. Highlight the element if it's displayed.\n3. Get the text of the element.\n4. Click on the element.\n5. Wait for the page to load after clicking.\n\nIf the element is not displayed, the method will fail the test step. If any exception occurs during the execution of the method, the method will also fail the test step with an error message containing the type of exception that occurred.\n\nThe method returns a string value which represents the text of the clicked element.",
        "input": [
            "String docname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyFieldIsPresentInSetup",
        "code": "public void verifyFieldIsPresentInSetup(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']\";\n\t\t\tString frame = labelName + \"#xpath=//iframe[@title='New User ~ Salesforce - Enterprise Edition']\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\thighLighterMethod1(field);\n\t\t\t\tmanualScreenshot(labelName + \" field is present as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresentInSetup. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresentInSetup`, is used to verify the presence of a field with a specific label name on a Salesforce Enterprise Edition page. \n\nHere's what it does:\n\n1. It constructs an XPath expression for the field and frame using the provided label name.\n2. It waits for the frame to be present, switches to that frame, and then verifies if the field is displayed within 10 seconds.\n3. If the field is displayed, it scrolls to the field, waits for the page to load, highlights the field (using a `highLighterMethod1`), and takes a manual screenshot with the label name as the filename.\n4. If the field is not displayed, it marks the test step as failed.\n5. In case of any exception during the process, it also marks the test step as failed.\n\nThis method seems to be part of a larger testing framework for Salesforce, likely used in an automated acceptance test suite.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnIRTableLinkWithIndex",
        "code": "public String clickOnIRTableLinkWithIndex(String labelname,String index) {\n\t\tString value = \"\";\n\t\ttry {\t\t\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=(//span//a[@title = '\" + labelname\n\t\t\t\t\t+ \"']//ancestor::td//preceding-sibling::th//a)[\" + index\n\t\t\t\t\t+ \"]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" response is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" IR are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnIRTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnIRTableLinkWithIndex`, is used to click on a link with a specific index in an IR (Information Request) table. The method takes two parameters: `labelname` and `index`. \n\n- It first refreshes the page and waits for it to load.\n- Then, it constructs a XPath expression based on the `labelname` and `index` to locate the link.\n- If the element is displayed within 4 seconds, it highlights the element, gets its text, clicks on it, takes a manual screenshot, and then waits for the page to load again.\n- If the element is not displayed, it fails the test step.\n- In case of any exception during the process, it also fails the test step. \n- The method returns the text value of the clicked link.",
        "input": [
            "String labelname",
            "String index"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyIRRecordCount",
        "code": "public int verifyIRRecordCount(String labelname) {\n\t\tint recordCount = 0;\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=//span//a[@title = '\" + labelname\n\t\t\t\t\t+ \"']//ancestor::td//preceding-sibling::th//a\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tList<WebElement> findWebElements = findWebElements(ClickOnLink);\n\t\t\t\trecordCount = findWebElements.size();\n\t\t\t\tmanualScreenshot(\"Created \"+labelname + \" response is \" + recordCount);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" IR are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnIRTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn recordCount;\n\t}",
        "description": "This Java method, `verifyIRRecordCount`, is used to verify the count of records in an IR (Information Report) table on a webpage. The method takes a string parameter `labelname` which represents the label name of the IR table.\n\nHere's a step-by-step breakdown:\n\n1. It first refreshes the page and waits for it to load.\n2. It then constructs an XPath expression based on the provided `labelname` to locate the link related to that IR table.\n3. If the element is displayed within 4 seconds, it finds all web elements matching that XPath expression (i.e., the records in the IR table).\n4. The method returns the count of these found records.\n5. If the element is not displayed or an exception occurs during the process, the method fails the test step and logs an error message.\n\nThe method also takes manual screenshots at certain points to provide visual evidence of the results.",
        "input": [
            "String labelname"
        ],
        "output": "int"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTableFirstLink",
        "code": "public String clickOnTableFirstLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[1]\";\n\t\t\t\n\t\t\tString ClickOnLink1 = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[1]//slot//slot\";\n\t\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod1(ClickOnLink);\n\t\t\t\tmanualScreenshot(labelname);\n\t\t\t\tvalue = getText(ClickOnLink1);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(labelname+\" record got created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTableFirstLink`, is used to click on the first link in a table with a specified label name and verify that the link's contents match the given label name. The method uses Selenium WebDriver to perform the following actions:\n\n1. Construct an XPath expression to locate the link element based on its text content and title.\n2. Check if the link is displayed within a certain timeout period (4 seconds).\n3. If the link is displayed, highlight it using the `highLighterMethod1` method, take a manual screenshot, get the text of the link's contents, click on the link, wait for the page to load, and take another manual screenshot.\n4. If the link is not displayed, mark the test step as failed.\n\nThe method returns the text content of the link element. It also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnDedupeLinkWithIndex",
        "code": "public String clickOnDedupeLinkWithIndex(String labelname, String index) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = labelname\n\t\t\t\t\t+ \"#xpath=(//lst-formatted-text[text() ='\" + labelname + \"']//ancestor::tr//slot//span)[\" + index + \"]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" response is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" dedupe record are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnDedupeLinkWithIndex. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnDedupeLinkWithIndex`, simulates a click on an element with the given label name and index. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression to locate the element.\n2. Check if the element is displayed within a certain timeout (4 seconds).\n3. If the element is displayed, it highlights the element, gets its text, clicks on it, and captures a manual screenshot.\n4. Waits for the page to load after the action.\n\nIf the element is not displayed or an exception occurs during the process, the test step fails with an error message. The method returns the text value of the clicked element.",
        "input": [
            "String labelname",
            "String index"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTableFirstLeadLink",
        "code": "public String clickOnTableFirstLeadLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[1]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod1(ClickOnLink);\n\t\t\t\tmanualScreenshot(labelname);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(labelname+\" record got created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Values are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTableFirstLeadLink`, is used to interact with a web table in an application. It takes a string parameter `labelname` which represents the label of the link to be clicked.\n\nThe method attempts to click on the first link that matches the given label name and has the specified title. If the element is displayed within 4 seconds, it performs several actions:\n\n1. Highlights the link using the `highLighterMethod1` method.\n2. Takes a manual screenshot of the page with the label name as the file name.\n3. Retrieves the text content of the clicked link using the `getText` method.\n4. Clicks on the special element ( likely an HTML anchor tag) using the `clickOnSpecialElement` method.\n5. Waits for the page to load and takes another manual screenshot with the label name \"record got created as expected\".\n\nIf the element is not displayed within 4 seconds, it fails the test step. If any exception occurs during the execution of the method, it also fails the test step.\n\nThe method returns a string value which seems to be the text content of the clicked link.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectValueFromMoreDropdown",
        "code": "public void selectValueFromMoreDropdown(String value) {\n\t\ttry {\n\t\t\tString dropdown = value + \"#xpath=//div[@class='slds-context-bar']/descendant::span[text()='More']\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[@class='slds-context-bar']/descendant::span[text()='More']/../following-sibling::div/slot/descendant::span[text()='\"+value+\"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from global More dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the more dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global More dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromMoreDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromMoreDropdown`, is used to select a value from a dropdown menu labeled \"More\" within the Salesforce Lightning page. The method takes a string parameter `value` which represents the option to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the input `value` and navigates to the element with that text.\n2. It waits for the \"More\" dropdown menu to load and becomes visible.\n3. If the dropdown is displayed, it scrolls to the element, clicks on it, and then selects the option with the same text as the input `value`.\n4. If the selection is successful, it takes a manual screenshot with a message indicating that the value was successfully selected.\n5. If the selection fails or the \"More\" dropdown menu is not present, it reports a test step failure.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test step failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickAlphabetAndSelectRecordInSetup",
        "code": "public void clickAlphabetAndSelectRecordInSetup(String value) {\n\t\tString substring = value.substring(0, 1);\t\n\t\ttry {\n\t\t\tString alphabetSearch = \"alphabetSearchn#xpath=//div[@class='withFilter']//a//span[text()='\" + substring + \"']\";\n\t\t\tString searchedList = \"searchedList#xpath=//table[@class='list']//a[text()='\" + value + \"']\";\t\t\n\t\t\tString frame = value + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(alphabetSearch, implicitlyWaitTime);\t\t\t\t\n\t\t\tif (isElementDisplayed(alphabetSearch, 5)) {\n\t\t\t\tclickOn(alphabetSearch);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tswitchToFrame(frame);\n\t\t\t\twaitForElement(searchedList, 5);\n\t\t\t\tif (isElementDisplayed(searchedList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(searchedList);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value+\" option is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search option is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickAlphabetAndSelectRecordInSetup. Exception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickAlphabetAndSelectRecordInSetup`, is used to perform the following actions:\n\n1. It takes a string parameter `value` which represents an alphabet letter or record name.\n2. It extracts the first character of the input value as a substring.\n3. It searches for an element in the Salesforce application using XPATH, with two different types of searches:\n\t* An alphabetical search for elements starting with the extracted substring (`alphabetSearchn#xpath=//div[@class='withFilter']//a//span[text()='\" + substring + \"']`).\n\t* A search for a specific record or element matching the input value (`searchedList#xpath=//table[@class='list']//a[text()='\" + value + \"']`).\n4. If both searches are successful, it:\n\t* Switches to an iframe with a specific title containing \"Salesforce - Enterprise Edition\".\n\t* Waits for and clicks on the element found in the alphabetical search.\n\t* Waits for the page to load.\n\t* Switches back to the original frame.\n5. If either search fails or no matching elements are found, it reports a test step failure with an error message.\n\nThe method also includes some basic error handling using try-catch blocks and default frame switching at the end.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectOrDeselectCheckBoxInSetup",
        "code": "public void selectOrDeselectCheckBoxInSetup(String labelName, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelName\n\t\t\t\t\t+ \"#xpath=//label[text()='\" + labelName + \"']/..//..//input\";\n\t\t\tString frame = labelName + \"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\twaitForElement(frame, 10);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\t\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is successfully Unchecked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already Unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInSetup \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInSetup`, is used to select or deselect a checkbox element on a web page. The method takes two parameters: `labelName` and `status`. \n\n- `labelName`: This is the label associated with the checkbox that needs to be selected or deselected.\n- `status`: This can be either \"check\" (to check the box) or \"uncheck\" (to uncheck the box).\n\nThe method performs the following actions:\n1. It constructs an XPath expression to locate the checkbox element based on its label name.\n2. It switches to the frame that contains the checkbox, waits for the checkbox to be present, and then clicks it if the status is \"check\". If the checkbox is already checked, it simply highlights the checkbox.\n3. If the status is \"uncheck\", it does the opposite: it unchecks the checkbox if it's currently checked, or highlights the checkbox if it's already unchecked.\n4. If the checkbox is not present on the page, it fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String labelName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectValueFromPopupDropdown",
        "code": "public void selectValueFromPopupDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\t\t\t\t\t\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else{\n\t\t\t\t\t\ttestStepFailed(\"Failed to select \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromPopupDropdown \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromPopupDropdown`, selects a specific value from a popup dropdown menu. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nThe method first waits for the page to load, then locates the dropdown element and scrolls it into view if necessary. It then clicks on the dropdown to open the list of options. The method then repeatedly checks if the desired value is present in the list and selects it if found. If the value is not found or the dropdown is not present, the test step fails.\n\nThe method also includes logging and testing steps for each attempt to select the value, as well as a catch-all for any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "globalSalesUserNameSearch",
        "code": "public String globalSalesUserNameSearch(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//input[contains(@title,'Search')]\";\n\t\t\tString searchResults = searchValue + \"#xpath=//span[@title='\"+searchValue+\"']\";\n\t\t\twaitForElement(search, 10);\t\t\t\n\t\t\tif (isElementDisplayed(search, 10)) {\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(searchResults, 3)) {\n\t\t\t\t\tclickOn(searchResults);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchResults + \" is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in globalSalesUserNameSearch \" + e.getClass().getName());\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `globalSalesUserNameSearch`, searches for a specific value on a webpage using an XPath expression. It takes a `searchValue` as input and performs the following actions:\n\n1. Concatenates the `searchValue` with an XPath expression to locate the search input field.\n2. Waits for the search input field to be displayed.\n3. Types the `searchValue` into the search input field.\n4. Waits for the page to load.\n5. Checks if the search results are displayed, and if so, clicks on them.\n6. Waits again for the page to load.\n\nIf any of these steps fail (e.g., the search input field is not displayed), it reports a test step failure with an error message. The method returns the original `searchValue`.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnUnknownSearchResult",
        "code": "public String clickOnUnknownSearchResult(String label) {\n\t\tString text=\"\";\n\t\ttry {\n\t\t\tString link = label + \"#xpath=//a[text()='\" + label\n\t\t\t\t\t+ \"']//ancestor::div[contains(@class,'results')]//tbody//th//a\";\n\t\t\twaitForElement(link, 20);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\t text = getText(link);\n\t\t\t\thighLighterMethodManualScreenShot(link, label + \" Name : \" + text);\n\t\t\t\tclickOn(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnUnknownSearchResult \" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `clickOnUnknownSearchResult`, simulates a user clicking on an unknown search result link. It takes a `String` parameter `label` which is the label of the search result.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the link based on the provided `label`.\n2. It waits for the element to be present using the `waitForElement` method.\n3. If the element is present, it gets the text content of the link using the `getText` method.\n4. It takes a manual screenshot of the highlighted element using the `highLighterMethodManualScreenShot` method and annotates it with the label and the text content.\n5. It clicks on the link using the `clickOn` method.\n6. It waits for 3 seconds to allow any subsequent actions to complete.\n7. If the element is not present, it fails the test step.\n\nThe method returns the text content of the link as a `String`.\n\nNote that this method catches any exceptions that occur during its execution and reports them as test failures using the `testStepFailed` method.",
        "input": [
            "String label"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnUnknownSearchResultUsingIndex",
        "code": "public String clickOnUnknownSearchResultUsingIndex(String customerName,String index) {\n\t\tString text=\"\";\n\t\ttry {\n\t\t\tString link = customerName + \"#xpath=(//a[text()='\" + customerName\n\t\t\t\t\t+ \"']//ancestor::div[@class='resultsItem slds-col slds-no-flex slds-m-bottom_small']//tbody//th//a)[\" + index\n\t\t\t\t\t+ \"]\";\n\t\t\twaitForElement(link, 20);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\t text = getText(link);\n\t\t\t\thighLighterMethodManualScreenShot(link, customerName + \" Name : \" + text);\n\t\t\t\tclickOn(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnUnknownSearchResultUsingIndex \" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `clickOnUnknownSearchResultUsingIndex`, simulates a user clicking on an unknown search result by its index. It takes two parameters: `customerName` and `index`. \n\nThe method first constructs a link based on the customer name and the given index. It then waits for this element to be present, checks if it's present, and if so, gets the text of the element, highlights it with a screenshot, clicks on it, and waits for some time. If the element is not present, the method fails the test step. \n\nIn case an exception occurs during the execution of the method (e.g., due to network issues or element not being found), the method also fails the test step and returns the error message.",
        "input": [
            "String customerName",
            "String index"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnSearchResultLinkWithIndex",
        "code": "public void clickOnSearchResultLinkWithIndex(String value,String index) {\n\t\ttry {\n\t\t\tString ClickOnLink = value + \"#xpath=(//div[contains(@class,'active')]//a[@title='\" + value + \"'])[\" + index\n\t\t\t\t\t+ \"]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" record is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" link not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnSearchResultLinkWithIndex. Exception :\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSearchResultLinkWithIndex`, is used to click on a specific search result link with the given index from the search results. The method takes two parameters: `value` (which appears to be the text of the search result) and `index`. \n\nThe method first constructs an XPath expression to locate the desired link by combining the `value` with an XPath expression that selects the link based on its title and class. It then uses this expression to attempt to click on the link, provided it is displayed within a certain time frame (4 seconds). If the link is successfully clicked, the method takes a manual screenshot of the result, waits for the page to load, and continues with the test. \n\nIf the link is not present or cannot be clicked, the method fails the test step. In case of any exception during the execution of this method, it also fails the test step and logs the exception.",
        "input": [
            "String value",
            "String index"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyCheckBoxSelectedInSetup",
        "code": "public void verifyCheckBoxSelectedInSetup(String labelName) {\n\t\ttry {\n\t\t\tString checkBox = labelName\n\t\t\t\t\t+ \"#xpath=//td[text()='\" + labelName + \"']/..//..//img\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tif (isElementPresent(checkBox)) {\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tString value=findWebElement(checkBox).getAttribute(\"title\");\n\t\t\t\tif (value.equalsIgnoreCase(\"Checked\")) {\n\t\t\t\t\thighLighterMethod1(checkBox);\n\t\t\t\t\tmanualScreenshot(labelName + \" Check box is already checked as expected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"verifyCheckBoxSelectedInSetup failed. Exception: \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCheckBoxSelectedInSetup`, is used to verify if a checkbox with the given label name is selected in the setup page. It uses WebDriverWait and other utility methods to locate the checkbox element, check its selection status, and take manual screenshot or mark the test step as failed based on the result.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyTableLinkNotPresent",
        "code": "public String verifyTableLinkNotPresent(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and contains(@title,'\" + labelname + \"')]/ancestor::thead/following-sibling::tbody//th//a)[last()]\";\n\t\t\tif (!isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tmanualScreenshot(labelname+\" record not created as expected\");\t\t\n\t\t\t} else {\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\ttestStepFailed(labelname+\" record created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyTableLinkNotPresent. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyTableLinkNotPresent`, is used to verify that a table link with a specific label name does not exist in the UI. \n\nThe method takes a `labelname` as input and attempts to find an element matching the XPath expression. If the element is not displayed within 4 seconds (as specified by the `isElementDisplayed` method), it takes a manual screenshot indicating that the expected record was not created. \n\nIf the element is displayed, it retrieves the text of the link using the `getText` method and marks the test step as failed due to the unexpected creation of the record.\n\nThe method returns the value obtained from the link's text if the link exists, or an empty string if the link does not exist. It also catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyDropDownValue",
        "code": "public void verifyDropDownValue(String labelName, String values) {\n\t\tString[] dropDownValues = values.split(\"/\");\n\t\tList<String> value = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = labelName + \"#xpath=//lightning-tab[contains(@class,'show')]//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button | (//label[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::lightning-combobox//div//button)[2]\";\n\t\t\tString dropDownList = \"Xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::lightning-combobox/div/lightning-base-combobox/div/div[@role='listbox']/lightning-base-combobox-item/span[@class='slds-media__body']/span\";\n\t\t\tscrollToElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tif (isElementDisplayed(dropDownList, 10)) {\n\t\t\t\t\tList<WebElement> findWebElements = findWebElements(dropDownList);\n\t\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\t\tif (!text.equalsIgnoreCase(\"--None--\")) {\n\t\t\t\t\t\t\tvalue.add(text);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfor (int i = 0; i < dropDownValues.length; i++) {\n\t\t\t\t\t\tif (dropDownValues[i].equalsIgnoreCase(value.get(i))) {\n\t\t\t\t\t\t\tint j = i;\n\t\t\t\t\t\t\ttestStepPassed(dropDownValues[i] + \" is present in the list\");\n\t\t\t\t\t\t\tString value1 = \"#xpath=//span[text()='\" + dropDownValues[j++] + \"']\";\n\t\t\t\t\t\t\tscrollToElement(value1);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value.get(i) + \" new bank name added in list\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tmanualScreenshot(\"List of exepected bank names are present in \" + labelName);\n\t\t\t\t\tclickOn(dropdown);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Drop down values are not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" drop down is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDropDownValue \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDropDownValue`, verifies the values present in a dropdown list. \n\nThe method takes two parameters: `labelName` and `values`. It splits the `values` string into an array of strings using the `/` character as the delimiter.\n\nIt then uses Selenium WebDriver to interact with the UI:\n\n1. Scrolls to the dropdown element with the specified label name.\n2. Clicks on the dropdown element.\n3. Verifies that the dropdown list is displayed.\n4. If the list is displayed, it extracts the text values from the list and stores them in a list.\n5. It then iterates over the expected values array and checks if each value is present in the extracted list. \n   - If a value is found, it logs a test step as passed.\n   - If a value is not found, it logs a test step as failed.\n6. Finally, it takes a manual screenshot to capture the state of the dropdown list.\n\nIf any of these steps fail (i.e., the dropdown element is not present, or the values are not displayed), the method logs a test step failure and catches the exception if one occurs.",
        "input": [
            "String labelName",
            "String values"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "expandArrowsInCibilDetails",
        "code": "public void expandArrowsInCibilDetails(String fieldLabel) {\n\t\ttry {\n\t\t\tString arrow = fieldLabel + \"#xpath=//h3[text()='\" + fieldLabel + \"']/parent::div\";\n\t\t\tString frame = fieldLabel + \"#xpath=//iframe[contains(@title,'accessibility title')]\";\n\t\t\twaitForElement(frame, 5);\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(arrow, 10);\n\t\t\tif (isElementDisplayed(arrow, 10)) {\n\t\t\t\tscrollToElement(arrow);\n\t\t\t\tscrollToWebElement(arrow);\n\t\t\t\tString value = findWebElement(arrow).getAttribute(\"title\");\n\t\t\t\tif (value.equalsIgnoreCase(\"Show Section - Cibil Score\")) {\n\t\t\t\t\tclickOnSpecialElement(arrow);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" is not present.\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in expandArrows. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `expandArrowsInCibilDetails`, appears to be part of a web automation test script. It takes a `String` parameter `fieldLabel` and performs the following actions:\n\n1. Constructs two XPath expressions: one for an `<h3>` element with the given label as its text content, and another for an `<iframe>` with a specific title.\n2. Waits up to 5 seconds for the `<iframe>` to load using `waitForElement`.\n3. Switches to the `<iframe>` frame using `switchToFrame`.\n4. Waits up to 10 seconds for an element matching the first XPath expression (`arrow`) to be displayed using `waitForElement`.\n5. If the element is displayed, scrolls to it using `scrollToElement` and `scrollToWebElement`, then retrieves its title attribute value.\n6. If the title attribute value matches \"Show Section - Cibil Score\", clicks on the element using `clickOnSpecialElement` and waits for the page to load again.\n7. If any of these steps fail, records a test step failure with a message including the given `fieldLabel`.\n8. Finally, switches back to the default frame using `switchToDefaultFrame`.\n\nThe method catches any exceptions that occur during its execution and logs an informative message if one is thrown.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "getTextFromFieldandCompareInCibilDetails",
        "code": "public void getTextFromFieldandCompareInCibilDetails(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=((//div[@class='aSeparator']//parent::td//parent::tr)[3]//following-sibling::tr[1]//label[contains(text(),'\"+labelName+\"')])[1]//parent::th//following-sibling::td[1]\";\n\t\t\tString frame = labelName + \"#xpath=//iframe[contains(@title,'accessibility title')]\";\n\t\t\twaitForElement(frame, 5);\n\t\t    switchToFrame(frame);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString text = getText(field);\n\t\t\t\tif (text.equalsIgnoreCase(value)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(field, labelName + \" field value : \"+text +\" is same as expected Value : \"+value);\n\t\t\t\t}\t\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresentInSetup. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `getTextFromFieldandCompareInCibilDetails`, is used to retrieve the text from a specific field on a web page and compare it with an expected value. The method takes two parameters: `labelName` (the name of the label associated with the field) and `value` (the expected value).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the desired field based on its label name.\n2. It then constructs another XPath expression to locate an iframe element that contains the accessibility title.\n3. The method waits for the iframe element to be present, switches to it, and checks if the field is displayed within a certain time limit (10 seconds).\n4. If the field is present, the method scrolls to the field, retrieves its text, and compares it with the expected value using a case-insensitive comparison.\n5. If the text matches the expected value, the method takes a screenshot of the current screen with a highlight on the field and logs a success message.\n6. If the field is not present or if there's an exception during the process, the method logs a failure message.\n\nIn summary, this method is used to verify that a specific field on a web page has the expected text value, and it takes screenshots and logs messages accordingly.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyAvailableFieldInCibilDetails",
        "code": "public void verifyAvailableFieldInCibilDetails(String labelName) {\n\t\ttry {\n\t\t\tString cibilScore = labelName + \"#xpath=(//h3[text()='\"+labelName+\"']//ancestor::div[@id='j_id0:j_id2:CibilScore']//div[@class='aSeparator'])[1]//parent::td//parent::tr//following-sibling::tr//label\";\n\t\t\tString frame = labelName + \"#xpath=//iframe[contains(@title,'accessibility title')]\";\n\t\t\twaitForElement(frame, 5);\n\t\t    switchToFrame(frame);\n\t\t\tif (isElementDisplayed(cibilScore, 10)) {\n\t\t\t\tscrollToElement(cibilScore);\n\t\t\t\tList<WebElement> findWebElements = findWebElements(cibilScore);\n\t\t\t\tfor (WebElement webElement : findWebElements) {\n\t\t\t\t\tString text = webElement.getText();\n\t\t\t\t\ttestStepPassed(\"Available field in under Cibil Score : \"+text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAvailableFieldInCibilDetails. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAvailableFieldInCibilDetails`, is used to verify the presence of a specific field in a webpage's Cibil Score section. \n\nThe method takes a `labelName` as input and uses it to construct two XPath expressions: one for the Cibil Score element and another for an iframe that may contain the score. It then:\n\n1. Waits for the iframe to be present, switches to it, and verifies if the Cibil Score element is displayed.\n2. If the element is displayed, it scrolls to the element, finds all web elements with text content, and iterates over them to extract their text values.\n3. For each extracted text value, it logs a test step as passed, indicating that the available field was found under the Cibil Score section.\n\nIf the Cibil Score element is not displayed or if an exception occurs during execution, the method logs a test step as failed and reports the error message. Finally, it switches back to the default frame.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "getTextValueInSetup",
        "code": "public String getTextValueInSetup(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\t\t\n\t\t\tString Element = \"#xpath=//td[text()='\"+LabelName+\"']//following-sibling::td[1]\";\n\t\t\tString frame=\"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\ttext = getText(Element);\t\n\t\t\t\thighLighterMethodManualScreenShot(Element, \"Value populated : \"+text);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(\"Value is not populated in \"+LabelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getTextValueInSetup`, retrieves the text value of a specific element on a Salesforce Enterprise Edition page. The element is located using an XPath expression that matches the label name provided as input to the method.\n\nHere's a step-by-step breakdown:\n\n1. It initializes an empty string variable `text`.\n2. It attempts to perform the following steps:\n\t* Switches to a frame with the specified title \"Salesforce - Enterprise Edition\".\n\t* Waits for the element matching the XPath expression (`Element`) to be displayed within 10 seconds.\n\t* If the element is displayed, it scrolls to that element and retrieves its text value using `getText(Element)`.\n\t* It highlights the element on the screen (likely for debugging purposes).\n\t* Takes a manual screenshot with the text value as part of the file name.\n\t* Checks if the text value is empty. If so, logs a test step failure message indicating that the value is not populated.\n3. If any exception occurs during these steps, it catches and logs a test step failure message with the exception details.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "getLinkTextValueInSetup",
        "code": "public String getLinkTextValueInSetup(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\t\t\n\t\t\tString Element = \"#xpath=//td[text()='\"+LabelName+\"']//parent::tr//a\";\t\n\t\t\tString frame=\"#xpath=//iframe[contains(@title,'Salesforce - Enterprise Edition')]\";\n\t\t\tswitchToFrame(frame);\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\ttext = getText(Element);\t\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(\"Value is not populated in \"+LabelName);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(LabelName + \" field value populated as : \" + text);;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" field is not present\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getClass().getName());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getLinkTextValueInSetup`, retrieves the text value of a link element in a specific setup scenario. \n\nThe method takes a `LabelName` parameter and uses an XPath expression to locate the link element with the matching label name. It then switches to the frame containing the link, waits for the element to be displayed, scrolls to the element if necessary, and retrieves its text value. If the text value is empty, it logs a test step failure message. \n\nIf the element is not present or an exception occurs during the process, the method logs a test step failure message and returns an empty string.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnValueFromFlowsList",
        "code": "public void clickOnValueFromFlowsList(String labelname) {\n\t\ttry {\n\t\t\tString ClickOnLink = labelname + \"#xpath=//span//a[text()='\"+labelname+\"'] |//th//a[text()='\"+labelname+\"']\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tscrollToElement(ClickOnLink);\n\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" link not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnValueFromFlowsList. Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnValueFromFlowsList`, attempts to locate and click on a link or element with the given label name in an application's user interface. The method uses various web automation tools to perform the following actions:\n\n1. Construct an XPath expression based on the provided label name.\n2. Check if the element is displayed within a specified time limit (4 seconds).\n3. If the element is present, scroll into view and highlight it using a highlighting tool.\n4. Click on the special element using another automation tool.\n5. Wait for the page to load completely before considering the operation successful.\n\nIf any of these steps fail or the element is not found, the method will report a test step failure with an error message.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "verifyButtonIsPresent",
        "code": "public void verifyButtonIsPresent(String value) {\n\t\ttry {\n\t\t\tString link = value + \"#xpath=//button[text()='\" + value + \"'] | //input[@value[normalize-space()]='\" + value + \"']\";\n\t    \twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 10)) {\n\t\t\t\tscrollToElement(link);\n\t\t\t\tString attValue=getAttributeValue(link, \"title\");\n\t\t\t\tif (attValue.equalsIgnoreCase(\"Activate\")) {\n\t\t\t\t\thighLighterMethodManualScreenShot(link, \"Validation Value is Deactivaed as Expected\");\n\t\t\t\t}\t\t\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verifyButtonIsPresent \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `verifyButtonIsPresent`, verifies if a button or input field with the given text value is present on the web page. It uses Selenium WebDriver and waits for the element to be displayed before checking its title attribute. If the title attribute matches \"Activate\", it takes a manual screenshot using the highLighterMethod. If the element is not found, it fails the test step.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "deleteBankDetailsFromHomePage",
        "code": "public String deleteBankDetailsFromHomePage(String labelName, String funtion) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//a[text()='\"+labelName+\"']//..//parent::th//following-sibling::td//div\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOn(Element);\n\t\t\t\tString delete = funtion +\"#xpath=//div[text()='\"+funtion+\"']//parent::a\";\n\t\t\t\tif (isElementDisplayed(delete)) {\n\t\t\t\t\tclickOn(delete);\n\t\t\t\t}\n\t\t\t\tclickOnButton(funtion);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in deleteBankDetailsFromHomePage\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `deleteBankDetailsFromHomePage`, deletes bank details from the home page of a web application. It takes two parameters: `labelName` and `funtion`. \n\nThe method first constructs an XPath string based on the provided `labelName`. It then uses this XPath to locate the element, wait for it to be displayed, scroll to it if necessary, click on it, and verify that the delete button is present. If the delete button is found, it clicks on it as well.\n\nIf any of these steps fail (e.g., the element is not displayed), the method logs a test step failure with an error message. In case of any exception, it also logs a test step failure with the error message and type of exception.\n\nThe method returns an empty string (`value`).",
        "input": [
            "String labelName",
            "String funtion"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "closeCallCustomerPopup",
        "code": "public void closeCallCustomerPopup(String labelName) {\n\t\ttry {\n\t\t\tString selectValue = labelName + \"#xpath=//button[text()='\"+labelName+\"']//ancestor::div[@class='modal-container slds-modal__container']//lightning-primitive-icon\";\n\t\t\twaitForElement(selectValue);\n\t\t\tif (isElementDisplayed(selectValue,5)) {\n\t\t\t\tclickOn(selectValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" popup close button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInSetup. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `closeCallCustomerPopup`, attempts to close a customer popup by clicking on the corresponding close button. It takes a `labelName` parameter, which is used to locate the close button element.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression using the provided `labelName` and other HTML elements.\n2. It uses a `waitForElement` method (not shown) to wait for the constructed XPath expression to be present on the page.\n3. If the element is displayed within 5 seconds, it clicks on the close button using another method called `clickOn` (not shown).\n4. After clicking the close button, it waits for the page to load completely using a `waitForPageToLoad` method (not shown).\n5. If the close button is not present or the click operation fails, the method logs a test step failure with an error message containing the `labelName`.\n\nThe method catches any exceptions that occur during its execution and logs a test step failure with a generic error message if one occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTaskRedesignSearchResult",
        "code": "public void clickOnTaskRedesignSearchResult() {\n\t\ttry {\n\t\t\tString ClickOnLink = \"#xpath=(//div[contains(@class,'active')]//a[@data-refid='recordId'])[last()]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(\"Task Redesign record is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Task Redesign link not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTaskRedesignSearchResult. Exception :\" + e.getClass().getName());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnTaskRedesignSearchResult()`, is used to automate a test case that involves clicking on a specific link in the UI. \n\nThe method first tries to locate an element with the specified XPath (`#xpath=(//div[contains(@class,'active')]//a[@data-refid='recordId'])[last()]`). If the element is displayed within 4 seconds, it will perform three actions: highlight the element using `highLighterMethod()`, click on the element using `clickOnSpecialElement()`, and take a manual screenshot to verify that the expected result has been achieved. \n\nAfter these actions, it waits for the page to load completely before proceeding further. If the element is not displayed within 4 seconds or any exception occurs during the execution of this method, it will fail the test case with an appropriate error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTaskRedesignTableLink",
        "code": "public String clickOnTaskRedesignTableLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=\t(//span[text() ='\" + labelname\n\t\t\t\t\t+ \"']//ancestor::td//..//a[@data-refid='recordId'])[last()]\";\n\t\t\t/*String ClickOnLink = labelname + \"#xpath=\t(//span[contains(text() ,'\" + labelname\n\t\t\t\t\t+ \"')]//ancestor::td//..//a[@data-refid='recordId'])[last()]\";*/\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" task redesign is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTaskRedesignTableLink. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTaskRedesignTableLink`, is used to interact with a web page element that has a specific label name and performs the following actions:\n\n1. Refreshes the page\n2. Waits for the page to load\n3. Constructs an XPath expression based on the provided label name to locate the desired link\n4. Checks if the link is displayed within a specified time (4 seconds)\n5. If the link is displayed, highlights it, gets its text, clicks on it, and takes a manual screenshot as verification\n6. Waits for the page to load again after clicking the link\n\nIf the link is not displayed within the specified time, the method reports a test step failure.\n\nThe method returns the text value of the clicked link.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "clickOnTaskRedesignTableLinkWithIndex",
        "code": "public String clickOnTaskRedesignTableLinkWithIndex(String labelname,String index) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString ClickOnLink = labelname + \"#xpath=\t(//span[text() ='\" + labelname\n\t\t\t\t\t+ \"']//ancestor::td//..//a[@data-refid='recordId'])[\" + index\n\t\t\t\t\t+ \"]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(value + \" task redesign is created as expected\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOnTaskRedesignTableLinkWithIndex. Exception :\" + e.getClass().getName());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnTaskRedesignTableLinkWithIndex`, is used to interact with a web page by clicking on a specific link in a table. The method takes two parameters: `labelname` and `index`. \n\nThe method first refreshes the page, waits for it to load, and then constructs an XPath expression to locate the link based on the provided label name and index. It then checks if the element is displayed within 4 seconds. If it is, the method highlights the element, gets its text, clicks on it, takes a manual screenshot, and waits for the page to load again. \n\nIf the element is not displayed within the specified time, the method fails the test step. In case of any exception during the process, the method also fails the test step with an error message indicating the type of exception that occurred.\n\nThe method returns the text value of the clicked link.",
        "input": [
            "String labelname",
            "String index"
        ],
        "output": "String"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "deleteListFieldValue",
        "code": "public void deleteListFieldValue(String labelName) {\n\t\ttry {\n\t\t\tString clearBtn = labelName + \"#xpath=//label[text()='\"+labelName+\"']//parent::label//following-sibling::div//span[text()='Clear Selection']\";\n\t\t\twaitForElement(clearBtn, 10);\n\t\t\tif (isElementDisplayed(clearBtn, 10)) {\n\t\t\t\tscrollToElement(clearBtn);\n\t\t\t\tscrollToWebElement(clearBtn);\n\t\t\t\thighLighterMethod(clearBtn);\n\t\t\t\tclickOnSpecialElement(clearBtn);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is Empty\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + labelName +\" Clear button\");\n\t\t}\n\t}",
        "description": "This Java method, `deleteListFieldValue`, deletes a value from a list field in a web application. The method takes a string parameter `labelName` which is used to identify the specific list field to delete the value from.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the \"Clear Selection\" button associated with the specified label name.\n2. It waits for the element to be displayed and then scrolls to it.\n3. If the element is displayed, it highlights the element (likely for debugging purposes), clicks on it, and waits for 5 seconds.\n4. If the element is not displayed after waiting for 10 seconds, it reports that the field is empty.\n\nThe method catches any exceptions that occur during execution and reports a test step failure if an exception is thrown.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "calculateIncentiveCalculation",
        "code": "public double calculateIncentiveCalculation(double lanValue) {\n\t\tdouble n = 0;\n\t\ttry {\t\n\t\tif (1<=lanValue && lanValue<=5) {\n\t\t\t\t\tn=0;\n\t\t\t\t}else if (6<=lanValue && lanValue<=10) {\n\t\t\t\t\tn=150;\n\t\t\t\t}else if (11<=lanValue && lanValue<=15) {\n\t\t\t\t\tn=275;\n\t\t\t\t}else if (16<=lanValue && lanValue<=20) {\n\t\t\t\t\tn=350;\n\t\t\t\t}\n\t\t\t\telse if (21<=lanValue && lanValue<=25) {\n\t\t\t\t\tn=400;\n\t\t\t\t}\n\t\t\t\telse if (26<=lanValue && lanValue<=35) {\n\t\t\t\t\tn=400;\n\t\t\t\t}\n\t\t\t\telse if (36<=lanValue) {\n\t\t\t\t\tn=600;\n\t\t\t\t}else {\n\t\t\t\t\ttestStepInfo(lanValue +\" is not in the List\");\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully get value for Incentive Calculation: \"+n);\n//\t\t\t\t\treturn value;\n\t\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in calculateIncentiveCalculation. Exeception : \" + e.getClass().getName());\n\t\t}\n\t\treturn n;\n\t}",
        "description": "This Java method, `calculateIncentiveCalculation`, takes a double value `lanValue` as input and calculates an incentive value based on the range of `lanValue`. The calculation is done using a series of if-else conditions that map specific ranges of `lanValue` to corresponding incentive values. If the input `lanValue` falls outside these ranges, it returns a default value or throws an exception depending on the implementation. The method also includes some test step logic to record the outcome of the calculation.",
        "input": [
            "double lanValue"
        ],
        "output": "double"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "calculateFIRIncentive",
        "code": "public double calculateFIRIncentive(double lanValue) {\n\t\tdouble n = 0;\n\t\ttry {\n\t\t\tDecimalFormat dt=new DecimalFormat(\"0\");\n\t\t\tString format = dt.format(lanValue);\n\t\t\tdouble value=Double.parseDouble(format);\n\t\t\t\tif (70>value) {\n\t\t\t\t\tn=0;\n\t\t\t\t}else if (70<=value && value<80) {\n\t\t\t\t\tn=2;\n\t\t\t\t}else if (80<=value && value<95) {\n\t\t\t\t\tn=3;\n\t\t\t\t}else if (95<=value) {\n\t\t\t\t\tn=5;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttestStepInfo(lanValue +\" is not in the List\");\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully get value for Incentive Calculation: \"+n);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in calculateFIRIncentive. Exeception : \" + e.getClass().getName());\n\t\t}\n\t\treturn n;\n\n\t}",
        "description": "This Java method, `calculateFIRIncentive`, takes a double value as input and calculates an incentive value based on the given LAN value. The calculation is performed using if-else conditions to determine the incentive value based on the range of the LAN value.\n\nHere's a brief summary:\n\n* It formats the input LAN value into a string.\n* It then parses this string back into a double value.\n* Based on the value, it determines an incentive value (n) according to specific ranges:\n\t+ If the value is less than 70, n = 0\n\t+ If the value is between 70 and 79.99, n = 2\n\t+ If the value is between 80 and 94.99, n = 3\n\t+ If the value is 95 or higher, n = 5\n* It also logs a test step information to indicate whether the calculation was successful or not.\n* The method returns the calculated incentive value (n).\n\nNote that this method catches any exceptions that might occur during the calculation and logs an error message if one occurs.",
        "input": [
            "double lanValue"
        ],
        "output": "double"
    },
    {
        "class_name": "homePage_Admin",
        "function_name": "selectLoginUserSite",
        "code": "public void selectLoginUserSite(String userValue) {\n\t\ttry {\n\t\t\tString selectValue = userValue + \"#xpath=//span[text()='\"+userValue+\"']\";\n\t\t\twaitForElement(selectValue);\n\t\t\tif (isElementDisplayed(selectValue,5)) {\n\t\t\t\tclickOn(selectValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"In popup \"+userValue +\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButtonInSetup. Exeception : \" + e.getClass().getName());\n\t\t}\n\t}\n\t\n}",
        "description": "This Java method, `selectLoginUserSite`, appears to be a part of an automation test script. Its purpose is to select a user from a list of users and then perform some actions on the selected user.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It takes a `String` parameter called `userValue`, which represents the username or identifier of the user to be selected.\n2. It constructs a new string, `selectValue`, by concatenating the `userValue` with an XPath expression that targets a specific element (a span tag) containing the same text as the `userValue`.\n3. The method then calls another method, `waitForElement`, which waits for the element specified in `selectValue` to be present on the page.\n4. After waiting for the element, the method checks if it's displayed using the `isElementDisplayed` method with a timeout of 5 seconds. If the element is displayed, the method proceeds to click on it using the `clickOn` method.\n5. If the element is not displayed within the specified timeout (5 seconds), the method fails the test step with an error message indicating that the button is not present for the selected user.\n6. In case of any exception during the execution of the method, the method catches the exception and reports a failure in the test step with an error message containing the exception's class name.\n\nIn summary, this method appears to be responsible for selecting a user from a list and performing some actions on that user, such as clicking on a button or link associated with that user.",
        "input": [
            "String userValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BaseClass",
        "function_name": "setup",
        "code": "public void setup(String machineName, String host, String port, String browser, String os, String browserVersion,\n\t\t\tString osVersion, String sheetNo) {\n\t\ttestDataSheetNo = Integer.parseInt(sheetNo);\n\t\tsetEnvironmentTimeouts();\n\t\topenBrowser(machineName, host, port, browser, os, browserVersion, osVersion);\n\t\ttestResultsFolder(machineName.replace(\" \", \"\"), host, port, browser, os, browserVersion, osVersion);\n\t\tcurrentExecutionMachineName(machineName.replace(\" \", \"\"), os, osVersion, browserVersion);\n\t}",
        "description": "This is a Java method named `setup` that appears to be part of a test automation framework. The method takes eight parameters:\n\n1. `machineName`: the name of the machine being used for testing\n2. `host`: the host name or IP address\n3. `port`: the port number\n4. `browser`: the type of browser being used (e.g., Chrome, Firefox)\n5. `os`: the operating system (e.g., Windows, macOS)\n6. `browserVersion`: the version of the browser being used\n7. `osVersion`: the version of the operating system being used\n8. `sheetNo`: the number of the test data sheet to use\n\nThe method performs several setup tasks:\n\n1. It sets the `testDataSheetNo` variable to an integer value based on the `sheetNo` parameter.\n2. It calls another method named `setEnvironmentTimeouts()` to set timeout values for the testing environment.\n3. It opens a browser using the provided machine name, host, port, browser type, operating system, and browser version.\n4. It creates a test results folder with a unique name based on the machine name, host, port, browser type, operating system, and browser version.\n5. It sets the `currentExecutionMachineName` variable to a value that combines the machine name, operating system, and browser version.\n\nOverall, this method appears to be responsible for setting up the testing environment and preparing for test execution.",
        "input": [
            "String machineName",
            "String host",
            "String port",
            "String browser",
            "String os",
            "String browserVersion",
            "String osVersion",
            "String sheetNo"
        ],
        "output": "void"
    },
    {
        "class_name": "BaseClass",
        "function_name": "setEnvironmentTimeouts",
        "code": "public void setEnvironmentTimeouts() {\n\t\tsetTimeouts();\n\t}",
        "description": "This Java method, `setEnvironmentTimeouts`, sets environment timeouts. It calls another method named `setTimeouts()` to accomplish this task. The exact nature of these timeouts is not specified in the provided code snippet, but it likely refers to setting time limits or deadlines for certain environmental or system-related tasks.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "BaseClass",
        "function_name": "closeAllSessions",
        "code": "public void closeAllSessions() {\n\t\tdriver.quit();\n\t}\n\n}",
        "description": "This is a Java method named `closeAllSessions()` that closes all open sessions with a WebDriver instance. The method uses the `quit()` method of the WebDriver to terminate any active browser sessions, effectively closing all open tabs and windows. This can be useful when you're done testing or automating tasks and want to release system resources associated with those sessions.",
        "input": [],
        "output": "void"
    }
]
[
    {
        "Class Name": "BaseClass",
        "Method Name": "setup",
        "Code": "public void setup(String machineName, String host, String port, String browser, String os, String browserVersion,\n\t\t\tString osVersion, String sheetNo) {\n\t\ttestDataSheetNo = Integer.parseInt(sheetNo);\n\t\tsetEnvironmentTimeouts();\n\n\t\topenBrowser(machineName, host, port, browser, os, browserVersion, osVersion);\n\t\ttestResultsFolder(machineName.replace(\" \", \"\"), host, port, browser, os, browserVersion, osVersion);\n\t\tcurrentExecutionMachineName(machineName.replace(\" \",\"\"), os, osVersion, browserVersion);\n\n\n\t}",
        "Description": "This Java method is used to set up the environment for a test. It takes 9 parameters:\n\n* `machineName`: The name of the machine running the test\n* `host`, `port`, `browser`, `os`, and `browserVersion`: Information about the browser and operating system being tested\n* `osVersion` and `sheetNo`: The version of the operating system and the number of the test data sheet, respectively\n\nThe method performs the following tasks:\n\n1. It sets the test data sheet number based on the provided `sheetNo`.\n2. It calls a method named `setEnvironmentTimeouts()` to set some timeouts for the environment.\n3. It opens the specified browser using the provided information (machine name, host, port, browser, operating system, and browser version).\n4. It creates a test results folder with a name based on the machine name, host, port, browser, operating system, and browser version.\n5. It sets the current execution machine name based on the same information.\n\nIn summary, this method prepares the environment for a test by setting up the necessary parameters, opening the specified browser, creating a test results folder, and setting the current execution machine name.",
        "Input": [
            "String machineName",
            "String host",
            "String port",
            "String browser",
            "String os",
            "String browserVersion",
            "String osVersion",
            "String sheetNo"
        ],
        "Output": "void"
    },
    {
        "Class Name": "BaseClass",
        "Method Name": "setEnvironmentTimeouts",
        "Code": "public void setEnvironmentTimeouts() {\n\t\tsetTimeouts();\n\t}",
        "Description": "This Java method, `setEnvironmentTimeouts`, sets the environment timeouts. It does this by calling another method named `setTimeouts`. The exact nature of these timeouts is not specified in this code snippet, but it likely refers to setting time limits for certain environmental or system operations. For example, it might set a timeout for how long a program can take to complete a task before it's considered \"stuck\" or for how long a user has to wait for a response from the system.",
        "Input": [],
        "Output": "void"
    },
    {
        "Class Name": "BaseClass",
        "Method Name": "closeAllSessions",
        "Code": "public void closeAllSessions() {\n\t\tdriver.quit();\n\t}\n\n\t\n\t\n\t\n\t\n}",
        "Description": "This is a Java method named `closeAllSessions()` that belongs to a class (not shown in the code snippet). The method takes no arguments and returns no value (`void`).\n\nThe method's purpose is to close all open sessions or windows controlled by a WebDriver instance. It does this by calling the `quit()` method on the `driver` object, which presumably is an instance of a WebDriver class (e.g., ChromeDriver, FirefoxDriver, etc.).\n\nIn other words, when you call `closeAllSessions()`, it will shut down all open browser sessions managed by the driver, effectively ending any ongoing interactions with the web pages.",
        "Input": [],
        "Output": "void"
    },
    {
        "Class Name": "ShortRun",
        "Method Name": "main",
        "Code": "public static void main(String[] args) {\n\t\ttry {\n\t\t\tProcessBuilder pb = new ProcessBuilder(\"cmd.exe\", \"/C\", \"Start\", \"run.bat\");\n\t\t\tFile dir = new File(\".\\\\\");\n\t\t\tpb.directory(dir);\n\t\t\tProcess p = pb.start();\n\n\t\t\tSystem.exit(0);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}",
        "Description": "This Java method, `main`, starts a new process that runs the command \"Start run.bat\" in the current directory using the Windows Command Prompt (`cmd.exe`). The `ProcessBuilder` class is used to create and start the new process. If an I/O exception occurs during this process, it catches the exception and prints the error message to the console. Finally, the program exits with a status code of 0, indicating successful execution.",
        "Input": [
            "String args"
        ],
        "Output": "void"
    },
    {
        "Class Name": "TestDriver",
        "Method Name": "main",
        "Code": "public static void main(String[] args) {\n\t\ttry {\n\t\t\t\n\t\t\t\n\t\t\t\n\n\t\t\tCommon common = new Common();\n\t\t\tcommon.startup();\n\t\t\t\n\t\t\tTestNG testng = new TestNG();\n\t\t\tList<String> suites = new ArrayList<String>();\n\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Windows\\\\chromedriver.exe\");\n\t\t\tsuites.add(\"./config/testng.xml\");\n\t\t\ttestng.setOutputDirectory(outputDirectory + \"/testng\");\n\t\t\ttestng.setTestSuites(suites);\n\t\t\ttestng.run();\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tupdateExecutionTimeInJUnitXML();\n\t\t\t\tif (getConfigProperty(\"Azure_Execution\").equalsIgnoreCase(\"Yes\")) {\n\t\t\t\t\tAutoBugFromiSafeUIReport.main(args);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Bugs will not be create in Azure due to Azure_Execution flag is : \"\n\t\t\t\t\t\t\t+ getConfigProperty(\"Azure_Execution\"));\n\t\t\t\t}\n\n\t\t\t\tif (getConfigProperty(\"Run_Report_Pipeline\").equalsIgnoreCase(\"Yes\")) {\n\t\t\t\t\tcopyReportsForArtifactPipeline();\n\t\t\t\t\trunAzureReportPipeline();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} catch (Exception e) {\n\t\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t\t} finally {\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t\twriteToLogFile(\"INFO\", \"Script Execution Complete\");\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t}\n\t\t}\n\t}\n}",
        "Description": "This Java method, `main`, is the entry point of a Java program. Here's a brief description of what it does:\n\n1. It creates an instance of the `Common` class and calls its `startup()` method.\n2. It creates an instance of the `TestNG` class and sets up some properties:\n\t* Sets the output directory for TestNG reports.\n\t* Adds a test suite configuration file (`./config/testng.xml`) to run.\n\t* Runs the TestNG tests using the `run()` method.\n3. If any exceptions occur during these operations, it catches them and writes an error message to a log file using the `writeToLogFile` method.\n4. In the finally block (which is executed regardless of whether an exception was thrown or not):\n\t* Calls another method, `updateExecutionTimeInJUnitXML`, to update execution time information in JUnit XML files.\n\t* Checks if a specific configuration property (`Azure_Execution`) is set to \"Yes\". If so:\n\t\t+ Calls the `AutoBugFromiSafeUIReport.main` method to create bugs in Azure.\n\t* Checks if another configuration property (`Run_Report_Pipeline`) is set to \"Yes\". If so:\n\t\t+ Copies reports for an artifact pipeline using the `copyReportsForArtifactPipeline` method.\n\t\t+ Runs an Azure report pipeline using the `runAzureReportPipeline` method.\n5. Finally, it writes some log messages to indicate that the script execution has completed.\n\nOverall, this method appears to be part of a larger automation framework that runs TestNG tests and interacts with Azure.",
        "Input": [
            "String args"
        ],
        "Output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\n\t\tendURI = getConfigProperty(\"endURI\");\n\t\tbugEnvironment = getConfigProperty(\"Bug Environment\");\n\t\treportedBy = getConfigProperty(\"BugReportedBy\");\n\t\tassignedTo = getConfigProperty(\"UserName\");\n\t\tbugSeverity = \"Minor\";\n\t\tareaPath = getConfigProperty(\"AreaPath\");\n\t\tparentTaskID = getConfigProperty(\"ParentWorkitemId\");\n\n\t\tArrayList<File> summaryPages = getSummaryPageList();\n\n\t\tfor (File file : summaryPages) {\n\t\t\tcreateFailureList(file);\n\t\t}\n\n\t\tfor (Object key : stepsToRepoMap.keySet()) {\n\t\t\tSystem.out.println(key.toString() + \" - \" + stepsToRepoMap.get(key.toString()));\n\t\t\tSystem.out.println(key.toString() + \" - \" + screenshots.get(key.toString()));\n\t\t\tcreateBugAPI(key.toString(), stepsToRepoMap.get(key.toString()).toString());\n\t\t}\n\n\t\tfor (File file : summaryPages) {\n\t\t\tupdateReport(file);\n\t\t}\n\n\t\tSystem.out.println(failedMessage);\n\t}",
        "description": "This is the main method of a Java program, which appears to be responsible for generating bug reports. Here's a brief description of what the method does:\n\n1. It retrieves several configuration properties from an unknown source (likely a configuration file or database) and assigns them to local variables.\n2. It retrieves a list of summary pages (presumably XML files or similar) using a `getSummaryPageList()` method.\n3. For each summary page, it calls the `createFailureList()` method to generate a failure report.\n4. It iterates over a map called `stepsToRepoMap` and prints out key-value pairs for debugging purposes. It also retrieves screenshots associated with each step from another map called `screenshots`.\n5. For each step in the map, it creates a bug API report using the `createBugAPI()` method.\n6. Finally, it updates each summary page file using an `updateReport()` method and prints out a failed message.\n\nOverall, this method appears to be responsible for generating bug reports based on configuration properties and summary pages.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "getSummaryPageList",
        "code": "public static ArrayList<File> getSummaryPageList() {\n\t\tArrayList<File> summaryFileList = new ArrayList<File>();\n\t\ttry {\n\t\t\tFile dir = new File(reportPath);\n\n\t\t\tFile[] files = dir.listFiles();\n\t\t\tfor (File file : files) {\n\t\t\t\tif (file.isDirectory()) {\n\t\t\t\t\tif (new File(file + \"//SummaryPage.html\").exists())\n\t\t\t\t\t\tsummaryFileList.add(new File(file + \"//SummaryPage.html\"));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed while getting report summary page\");\n\t\t}\n\t\treturn summaryFileList;\n\t}",
        "description": "This Java method, `getSummaryPageList()`, returns an `ArrayList` of `File` objects representing HTML files named \"SummaryPage.html\" located in subdirectories within a specified directory (`reportPath`). It iterates through the directory and its subdirectories to find these specific files and adds them to the list. If any errors occur during this process, it prints an error message to the console and returns the list of files.",
        "input": [],
        "output": "ArrayList"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "createFailureList",
        "code": "public static void createFailureList(File file) {\n\t\ttry {\n\t\t\tDocument doc = Jsoup.parse(file, \"UTF-8\");\n\t\t\tArrayList<Element> testCases = doc.selectXpath(\"//div[@id='exectable'][1]//tbody//td[text()='Fail']/..//a\");\n\n\t\t\tfor (Element testCase : testCases) {\n\t\t\t\tArrayList<Element> failedDataSets = doc.selectXpath(\n\t\t\t\t\t\t\"//div[@id='exectable'][2]//tbody[@name='\" + testCase.text() + \"']//preceding-sibling::td/a\");\n\t\t\t\t// ArrayList<Element> failedDataSets =\n\t\t\t\t// doc.selectXpath(\"//div[@id='exectable'][2]//tbody[@name='\"\n\t\t\t\t// + testCase.text() + \"']//td[text()='Fail']//preceding-sibling::td/a\");\n\n\t\t\t\tfor (Element failedDataSet : failedDataSets) {\n\t\t\t\t\topenHyperlink(testCase.text(), failedDataSet, file);\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in createFailureList method\");\n\t\t}\n\t}",
        "description": "This Java method, `createFailureList`, takes a `File` object as input and creates a list of failed test cases from an HTML file. It uses the Jsoup library to parse the HTML file and then extracts information about failed test cases and their corresponding data sets.\n\nThe method iterates through each failed test case, finds its associated data sets (which are also represented by hyperlinks), and opens these hyperlinks in a browser using another method called `openHyperlink`. The method catches any exceptions that may occur during the parsing process and prints an error message to the console if anything goes wrong.",
        "input": [
            "File file"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "openHyperlink",
        "code": "public static void openHyperlink(String testcase, Element datasetElement, File file) {\n\t\ttry {\n\t\t\tString link = datasetElement.select(\"a[href]\").attr(\"href\");\n\t\t\tDocument testcaseReport = Jsoup.parse(new File(file.getParentFile() + link), \"UTF-8\");\n\n\t\t\tString valueToGetFromReport = \"//font[contains(text(),'$')]\";\n\n\t\t\tif (testcaseReport.selectXpath(valueToGetFromReport).size() > 0) {\n\t\t\t\tArrayList<Element> evidences = testcaseReport.selectXpath(valueToGetFromReport);\n\t\t\t\tfor (Element evidence : evidences) {\n\t\t\t\t\tstepsToRepoMap.put(testcase, \"Evidence - \" + evidence.text().replace(\"$\", \"\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tstepsToRepoMap.put(testcase, \"Steps To Reproduce the bug:\");\n\n\t\t\tif (testcaseReport.selectXpath(\"//font[@class='ReportFail']//following::img\").size() > 0) {\n\t\t\t\tString ssPath = testcaseReport.selectXpath(\"//font[@class='ReportFail']//following::img\").first()\n\t\t\t\t\t\t.attr(\"src\");\n\t\t\t\tscreenshots.put(testcase, file.getAbsolutePath() + ssPath);\n\t\t\t\tcreateStepToReproduce(testcaseReport, file, testcase);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in openHyperlink method for - \" + datasetElement.text());\n\t\t}\n\n\t}",
        "description": "This Java method, `openHyperlink`, opens a hyperlink contained within an XML element (`datasetElement`) and extracts relevant information from the linked report file. The method takes three parameters: `testcase` (a string), `datasetElement` (an XML element), and `file` (a file object).\n\nThe method attempts to:\n\n1. Extract the hyperlink URL from the dataset element.\n2. Parse the linked report file using Jsoup.\n3. Search for specific XPath expressions in the report file, such as font elements containing a certain text value (`\"$\"`). If found, it extracts the text values and stores them in a map called `stepsToRepoMap` under the given testcase key.\n4. Check if there are any images with a specific class name (`ReportFail`) in the report file. If found, it extracts the image source path and stores it in a map called `screenshots` under the given testcase key.\n5. Calls another method, `createStepToReproduce`, to create steps to reproduce the bug based on the parsed report file.\n\nIf any exceptions occur during this process, they are caught and an error message is printed to the console with the text of the dataset element.",
        "input": [
            "String testcase",
            "Element datasetElement",
            "File file"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "createStepToReproduce",
        "code": "public static void createStepToReproduce(Document testcaseReport, File file, String testCase) {\n\t\ttry {\n\n\t\t\tArrayList<Element> stepsWithHash = testcaseReport\n\t\t\t\t\t.selectXpath(\"//font[contains(text(),'#') and @class='ReportInfo']\");\n\n\t\t\tif (stepsWithHash.get(0).text().contains(\"DataSet\"))\n\t\t\t\tstepsWithHash.remove(0);\n\n\t\t\tfor (Element steps : stepsWithHash) {\n\t\t\t\tstepsToRepoMap.put(testCase, steps.text().replace(\"#\", \"\").trim());\n\t\t\t}\n\n\t\t\tElement lastIndexOfHash = stepsWithHash.get(stepsWithHash.size() - 1);\n\t\t\tArrayList<Element> subSteps = testcaseReport.selectXpath(\"//font[contains(text(),'\" + lastIndexOfHash.text()\n\t\t\t\t\t+ \"')]/following::font[@class='ReportInfo' or @class='ReportPass']\");\n\n\t\t\tString errorMessage = testcaseReport.selectXpath(\n\t\t\t\t\t\"//font[contains(text(),'\" + lastIndexOfHash.text() + \"')]/following::font[@class='ReportFail']\")\n\t\t\t\t\t.text();\n\n\t\t\tfailedMessage.put(testCase, errorMessage);\n\n\t\t\tfor (Element subStep : subSteps) {\n\t\t\t\tString step = subStep.text().trim();\n\t\t\t\tif (!step.contains(\"Total load time for current page is\") && !step.equals(\"\"))\n\t\t\t\t\tstepsToRepoMap.put(testCase, step);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Failed in createStepToReproduce Method\");\n\t\t}\n\t}",
        "description": "This Java method, `createStepToReproduce`, takes three parameters: a `Document` object (`testcaseReport`), a `File` object (`file`), and a `String` object (`testCase`). The method attempts to extract specific information from the `testcaseReport` document and store it in two maps: `stepsToRepoMap` and `failedMessage`.\n\nThe method first selects all elements in the report that contain the string `#` and have a class of `ReportInfo`. It then removes any elements with the text \"DataSet\" (presumably to filter out irrelevant data). For each remaining element, it extracts the text and stores it in the `stepsToRepoMap` under the key `testCase`.\n\nNext, the method finds the last element in this list that contains a hash symbol (`#`) and uses its text to select any subsequent elements with a class of either `ReportInfo` or `ReportPass`. These sub-steps are then iterated over, and their text is extracted. If the text does not contain a specific error message (related to total load time) and is not empty, it is stored in the `stepsToRepoMap` again.\n\nFinally, if any exceptions occur during this process, they are caught and an error message is printed to the console. The method returns no value (`void`) and does not have any return statements.",
        "input": [
            "Document testcaseReport",
            "File file",
            "String testCase"
        ],
        "output": "void"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "createBugAPI",
        "code": "public static String createBugAPI(String testcaseName, String failedDatasets) {\n\n\t\tString bug_id = null;\n\t\tHashMap<String, String> apiBody = new HashMap<>();\n\n\t\tString ReproSteps = \"\";\n\t\tint incrementalCount = 0;\n\t\tfor (String steps : failedDatasets.substring(1, failedDatasets.length() - 1).split(\",\")) {\n\n\t\t\tif (failedDatasets.indexOf(steps) > 2) {\n\t\t\t\tincrementalCount++;\n\t\t\t\tReproSteps += \"\\t\" + incrementalCount + \". \" + steps.trim() + \"\\n\";\n\t\t\t} else {\n\t\t\t\tReproSteps += steps.trim() + \"\\n\";\n\t\t\t}\n\n\t\t}\n\n\t\ttry {\n\t\t\tapiBody.put(\"Title\", \"Failure Detected || \" + testcaseName + \" || \" + failedMessage.get(testcaseName));\n\t\t\tapiBody.put(\"BugReportedBy\", reportedBy);\n\t\t\tapiBody.put(\"BugDetectedIn\", getConfigProperty(\"BugDetectedIn\"));\n\t\t\tapiBody.put(\"BugEnvironment\", bugEnvironment);\n\t\t\tapiBody.put(\"BugSeverity\", bugSeverity);\n\t\t\tapiBody.put(\"BuildNumber\", \"NA\");\n\t\t\tapiBody.put(\"Devices\", \"NA\");\n\t\t\tapiBody.put(\"OS\", \"NA\");\n\t\t\tapiBody.put(\"ReproSteps\", ReproSteps);\n\t\t\tapiBody.put(\"AreaPath\", areaPath);\n\t\t\tapiBody.put(\"AssignedTo\", assignedTo);\n\t\t\tapiBody.put(\"ParentWorkitemId\", parentTaskID);\n\n\t\t\tRequestSpecification request = RestAssured.given().auth().basic(UserName, PAT)\n\t\t\t\t\t.header(\"Content-Type\", \"multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW\")\n\t\t\t\t\t.formParams(apiBody).multiPart(\"file\", new File(reportPath + \"\\\\Logos\\\\client_logo.jpg\"));\n\n\t\t\tif (screenshots.containsKey(testcaseName)) {\n\t\t\t\tfor (String file : screenshots.get(testcaseName)) {\n\t\t\t\t\trequest.multiPart(new File(file));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tResponse response = request.when().post(endURI);\n\n\t\t\tint postStatusCode = response.statusCode();\n\t\t\tif (postStatusCode == 200) {\n\t\t\t\tString resp = response.getBody().asString();\n\t\t\t\tif (resp.contains(\"Workitem created\")) {\n\t\t\t\t\tString bugId = resp.split(\"=\")[1];\n\t\t\t\t\tbugIdMap.put(testcaseName, bugId);\n\t\t\t\t\tSystem.out.println(\"BugID for \" + testcaseName + \" : \" + bugId);\n\t\t\t\t} else {\n\t\t\t\t\tbugIdMap.put(testcaseName, \"Error\");\n\t\t\t\t\tSystem.out.println(\"BugID not Created \" + testcaseName);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Failed to create the auto bug and return the status code as: \" + postStatusCode);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn bug_id;\n\t}",
        "description": "This Java method, `createBugAPI`, creates a new bug in an external API system based on a given test case name and failed datasets. The method takes two input parameters: `testcaseName` and `failedDatasets`. It constructs a JSON payload with various details such as the bug title, reporter, environment, severity, and repro steps. The method then sends a POST request to an API endpoint using RestAssured, attaching any required files (screenshots) and logs. If the request is successful (200 status code), it extracts the created bug ID from the response body and stores it in a map for future reference. If the request fails or encounters an error, it prints an error message. The method returns `null` as there is no specific return value for this operation.",
        "input": [
            "String testcaseName",
            "String failedDatasets"
        ],
        "output": "String"
    },
    {
        "class_name": "AutoBugFromiSafeUIReport",
        "function_name": "updateReport",
        "code": "public static void updateReport(File summaryFile) {\n\t\tint testcaseIndex = 0;\n\t\ttry {\n\t\t\tBufferedReader fileReader = new BufferedReader(new FileReader(summaryFile));\n\t\t\tStringBuilder summaryPageContent = new StringBuilder();\n\t\t\tString line;\n\n\t\t\twhile ((line = fileReader.readLine()) != null) {\n\t\t\t\tsummaryPageContent.append(line).append(\"\\n\");\n\t\t\t}\n\t\t\tfileReader.close();\n\n\t\t\tDocument doc = Jsoup.parse(summaryFile, \"UTF-8\");\n\t\t\tArrayList<Element> testCases = doc.selectXpath(\"//div[@id='exectable'][1]//tbody//a\");\n\n\t\t\ttestcaseIndex = summaryPageContent.indexOf(\"<th>Test Case Name</th>\");\n\t\t\tString newTableContent = \"<th>Bug ID</th>\";\n\t\t\tsummaryPageContent.insert(testcaseIndex + 23, newTableContent);\n\n\t\t\tfor (Element testCase : testCases) {\n\t\t\t\tString testcaseName = testCase.text();\n\t\t\t\ttestcaseIndex = summaryPageContent.indexOf(testcaseName + \"</a></TD>\");\n\n\t\t\t\tif (bugIdMap.containsKey(testcaseName))\n\t\t\t\t\tnewTableContent = \"<TD> <a href=\\\"https://dev.azure.com/BFLDevOpsOrg/\" + areaPath\n\t\t\t\t\t\t\t+ \"/_workitems/edit/\" + bugIdMap.get(testcaseName) + \"\\\" target=\\\"_blank\\\">\"\n\t\t\t\t\t\t\t+ bugIdMap.get(testcaseName) + \"</a></TD>\\n\";\n\t\t\t\telse\n\t\t\t\t\tnewTableContent = \"<TD>-</TD>\\n\";\n\n\t\t\t\tsummaryPageContent.insert(testcaseIndex + testcaseName.length(), newTableContent);\n\n\t\t\t}\n\n\t\t\t// Write the updated HTML back to the file\n\t\t\tBufferedWriter writer = new BufferedWriter(new FileWriter(summaryFile));\n\t\t\twriter.write(summaryPageContent.toString());\n\t\t\twriter.close();\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Failed in the method - updateReport for Auto Bug\");\n\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `updateReport`, is designed to modify a HTML file named `summaryFile` by inserting new content into the file. The method takes a `File` object representing the summary file as its input parameter.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It reads the contents of the summary file line by line and stores them in a `StringBuilder` called `summaryPageContent`.\n2. It uses Jsoup to parse the HTML content of the file.\n3. It extracts all the `<a>` elements from the parsed HTML that are contained within a specific XPath expression (`//div[@id='exectable'][1]//tbody//a`). These elements represent test cases.\n4. It finds the index of a specific string (`\"<th>Test Case Name</th>\"`) in the `summaryPageContent` and inserts a new table header row (`\"<th>Bug ID</th>\"`) at that position.\n5. For each test case extracted earlier, it finds the corresponding test case name in the `summaryPageContent`, checks if there's an entry for that test case in a `bugIdMap`, and if so, constructs a new table cell containing the bug ID and inserts it into the `summaryPageContent` at the correct position.\n6. Finally, it writes the updated HTML content back to the original file using a `BufferedWriter`.\n\nIf any exceptions occur during this process, they are caught and printed to the console with an error message.",
        "input": [
            "File summaryFile"
        ],
        "output": "void"
    },
    {
        "class_name": "ShortRun",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\t\ttry {\n\t\t\tProcessBuilder pb = new ProcessBuilder(\"cmd.exe\", \"/C\", \"Start\", \"run.bat\");\n\t\t\tFile dir = new File(\".\\\\\");\n\t\t\tpb.directory(dir);\n\t\t\tProcess p = pb.start();\n\n\t\t\tSystem.exit(0);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\n}",
        "description": "This Java method, `main`, is the entry point of a Java program. It attempts to start a new process using the `ProcessBuilder` class, which runs a batch file named \"run.bat\" located in the current directory (`\".\\\\\"`). The batch file is run using the Windows command prompt (\"cmd.exe\"). If any errors occur during this process, they are caught by the `catch` block and printed to the console. Finally, the program exits with status code 0 using `System.exit(0)`.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "TestClass",
        "function_name": "main",
        "code": "public static void main(String args[]) throws IOException {\n\t\t\n\t\t//List<String> count =GenericKeywords.machineNames;\n\t\t//count.size();\n\t\t/*\tTestClass obj = new TestClass();\n\n\t\tString date = obj.getCurrentTime(\"HH:mm:ss\");\n\t\tSystem.out.println(date);\n\n\t\tString duration = obj.calculateDuration(\"16:50:30\", \"16:55:00\");\n\t\tSystem.out.println(duration);\n\n\t\tint column = obj.getColumnIndex(\"End time\");\n\t\tSystem.out.println(column);\n\t\t\n\t\tint row = obj.getRowIndex(\"iPad\");\n\t\tSystem.out.println(row);\n\n\t\tobj.writeToExcel(row, column, \"18:25:30\");\n\t\t\n\t\tobj.writeRowHeaderToExcel(\"guru1\");\n\t\t//obj.splitExcelName();\n\t\tobj.getFilePath();*/\n\t\t/*String dateAndTime=getCurrentDateAndTime();\n\t\tString date=dateAndTime.split(\" \")[0].trim();\n\t\tString time=dateAndTime.split(\" \")[1].trim();*/\n\n\t\t\n\t\t/*String value=\"123,456\";\n\t\tvalue=value.replace(\",\", \"\");\n\t\tchar[] arr=value.toCharArray();\n\t\tfor(int i=0;i<arr.length;i++) {\n\t\t\tString Str=String.valueOf(arr[i]);\n\t\t\tSystem.out.println(Str);\n\t\t\t\n\t\t}*/\n\t\t\n\t\tString str=\"{\\r\\n\" + \n\t\t\t\t\"    Double uniqueNbr = Math.Random()*system.now().gettime();\\r\\n\" + \n\t\t\t\t\"    List<Structured_OCR__e> events = new List<Structured_OCR__e>();\\r\\n\" + \n\t\t\t\t\"    events.add(new Structured_OCR__e\\r\\n\" + \n\t\t\t\t\"               (API_Channel__c = 'CIA',\\r\\n\" + \n\t\t\t\t\"                API_Application__c = 'ATOS',\\r\\n\" + \n\t\t\t\t\"                // API_Request_Reference_Number__c = uniqueNbr+'', API_Request_Datetime__c=Datetime.now(),\\r\\n\" + \n\t\t\t\t\"                \\r\\n\" + \n\t\t\t\t\"                Status__c = 'Completed',\\r\\n\" + \n\t\t\t\t\"                POI_Document_Waive_Status__c = 'Waived',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\" \t\t\tPOI_Type_colour_POI__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tPOI_Number_colour_POI__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tFather_Name_colour_POI__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tDOB_colour_POI__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t \t\tCust_Full_Name_colour_POI__c = 'G',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\tPOA_Document_Waive_Status__c = 'Received',\\r\\n\" + \n\t\t\t\t\"\t\t\t\\r\\n\" + \n\t\t\t\t\"\t\t\tPOA_Type_colour_POA__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tPOA_Number_colour_POA__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tPIN_Code_colour_POA__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tAddress_colour_POA__c = 'G', \\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\tApp_Form_Document_Waive_Status__c = 'Received',\\r\\n\" + \n\t\t\t\t\"\t\t\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\t\tPIN_Code_colour_App_Form__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tOpportunity_Name_colour_App_Form__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tAddress_colour_App_Form__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tDeal_Id_colour_App_Form__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tCust_Full_Name_colour_App_Form__c = 'R',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\tInvoice_Document_Waive_Status__c = 'Waived',\\r\\n\" + \n\t\t\t\t\"\t\t\t\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\t\tInvoice_Number_colour_Invoice__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tMake_colour_Invoice__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tFranchise_Name_colour_Invoice__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tInvoice_Date_colour_Invoice__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tInvoice_Amount_colour_Invoice__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tdealer_Name_colour_Invoice__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tIMEI_Serial_Number_colour_Invoice__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tCust_Full_Name_colour_Invoice__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tModel_colour_Invoice__c = 'G',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\tCancelled_Chq_Document_Waive_Status__c = 'Received',\\r\\n\" + \n\t\t\t\t\"\t\t\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\t\tAccount_Number_colour_CCHQ__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tCust_Full_Name_colour_CCHQ__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tMICR_Code_colour_CCHQ__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tIFSC_Code_colour_CCHQ__c ='G',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\tMandate_Document_Waive_Status__c = 'Received',\\r\\n\" + \n\t\t\t\t\"\\r\\n\" + \n\t\t\t\t\"\t\t\tDeal_Id_Colour_Emandate__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tCust_Full_Name_colour_Emandate__c = 'G',\\r\\n\" + \n\t\t\t\t\"\t\t\tECS_Barcode_colour_Emandate__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\\r\\n\" + \n\t\t\t\t\"\t\tLTS_Cross_Sell_Document_Waive_Status__c = 'Received',\\r\\n\" + \n\t\t\t\t\"\t\t\t\\r\\n\" + \n\t\t\t\t\"\t\t\tCard_Type_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tGCPP_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tGTL_CTL_CLC_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tLife_Age_Agnostic_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tMaxBupaInsurance_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tNominee_DOB_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tNominee_Name_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tOMC_Flag_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"\t\t\tPersonal_Accident_colour_LTS_Cross_Sell__c = 'R',\\r\\n\" + \n\t\t\t\t\"                \\r\\n\" + \n\t\t\t\t\"                API_Request_Reference_Number__c ='a2C0D00000163Df'));\\r\\n\" + \n\t\t\t\t\"    List<Database.SaveResult> results = EventBus.publish(events);\\r\\n\" + \n\t\t\t\t\"    for (Database.SaveResult sr : results) {\\r\\n\" + \n\t\t\t\t\"        if (sr.isSuccess()) {\\r\\n\" + \n\t\t\t\t\"            System.debug('Successfully published event.');\\r\\n\" + \n\t\t\t\t\"        } else {\\r\\n\" + \n\t\t\t\t\"            for(Database.Error err : sr.getErrors()) {\\r\\n\" + \n\t\t\t\t\"                System.debug('Error returned: ' +\\r\\n\" + \n\t\t\t\t\"                             err.getStatusCode() +\\r\\n\" + \n\t\t\t\t\"                             ' - ' +\\r\\n\" + \n\t\t\t\t\"                             err.getMessage());\\r\\n\" + \n\t\t\t\t\"            }\\r\\n\" + \n\t\t\t\t\"        }\\r\\n\" + \n\t\t\t\t\"        \\r\\n\" + \n\t\t\t\t\"        \\r\\n\" + \n\t\t\t\t\"    }\\r\\n\" + \n\t\t\t\t\"}\\r\\n\" + \n\t\t\t\t\"\";\n\t\t\n\t\t\n\t\tstr=str.replace(\"a2C0D00000163Df\", \"Gurumoorthy\");\n\t\tSystem.out.println(str);\n\t}",
        "description": "This is the main method of a Java program. It appears to be responsible for executing various operations, such as:\n\n1. Creating an instance of a `TestClass` object and calling its methods to get current time, calculate duration, and perform other tasks.\n2. Replacing a specific string value in another piece of code with a new value.\n3. Publishing events using the Salesforce EventBus API.\n\nThe method takes an array of Strings as input (represented by the `args[]` parameter) and throws an IOException if any errors occur during its execution.\n\nHere's a breakdown of what each section does:\n\n1. The first part creates an instance of `TestClass` and calls its methods to get current time, calculate duration, etc.\n2. The second part is replacing a specific string value in another piece of code with a new value.\n3. The third part publishes events using the Salesforce EventBus API.\n\nNote that this method does not return any values; it only prints some debug logs and replaces a specific string value.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "TestClass",
        "function_name": "getCurrentDateAndTime",
        "code": "public static String getCurrentDateAndTime() {\n\t\tString dateTime = null;\n\t\ttry {\n\n\t\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"d/M/yyyy-h:mm a\");\n\t\t\tLocalDateTime now = LocalDateTime.now();\n\t\t\tdateTime = dtf.format(now);\n\t\t\t\n\n\t\t} catch (Exception e) {\n\t\t\t////testStepFailed(\"Failed to get Current Date And Time\");\n\t\t\t//writeToLogFile(\"ERROR\", \"get Current Date And Time.ERROR:\" + e.getMessage());\n\n\t\t}\n\t\treturn dateTime;\n\t}",
        "description": "This Java method, `getCurrentDateAndTime()`, returns a string representation of the current date and time in the format \"d/M/yyyy-h:mm a\" (e.g. \"12/06/2022-14:30 PM\"). It uses the `LocalDateTime` class from the Java Time API to get the current date and time, and then formats it using a `DateTimeFormatter`. If any exception occurs during this process, it catches and logs the error, but still returns an empty string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "TestClass",
        "function_name": "writeRowHeaderToExcel",
        "code": "public void writeRowHeaderToExcel(String rowValue) throws IOException {\n\t\t\n\t\t\n\t\ttry {\n\t\t\tFileInputStream file = new FileInputStream(new File(\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"));\n\t\t\tXSSFWorkbook wb = new XSSFWorkbook(file);\n\t\t\tXSSFSheet sheet = wb.getSheetAt(0);\n\t\t\t\n\t\t\tint num = sheet.getPhysicalNumberOfRows();\n\t\t\n\t\t\tfor (int iterateCell = 0; iterateCell < num; iterateCell++) {\n\t\t\t\t\n\t\t\t\tString text = sheet.getRow(iterateCell).getCell(0).getStringCellValue();\n\t\t\t\t\n\t\t\t\tif (text.isEmpty()) {\n\n\t\t\t\t\tsheet.getRow(iterateCell).createCell(0).setCellValue(rowValue);\n\t\t\t\t\tfile.close();\n\t\t\t\t\t\n\t\t\t\t\tFileOutputStream out = new FileOutputStream(new File(\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"));\n\t\t\t\t\twb.write(out);\n\t\t\t\t\tout.close();\n\t\t\t\t\twb.close();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\t\t\n\t\t} catch (FileNotFoundException e) {\n\t\t\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t}",
        "description": "This Java method, `writeRowHeaderToExcel`, writes a given string value (`rowValue`) to the first row of an Excel file named \"Execution_Table.xlsx\" located at the specified path (\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"). \n\nThe method iterates through each row in the spreadsheet, checks if the first cell is empty, and if so, updates it with the provided `rowValue`. After updating the cell, it saves the changes to the Excel file. If an error occurs (e.g., the file not found), it prints the error message and stops execution.",
        "input": [
            "String rowValue"
        ],
        "output": "void"
    },
    {
        "class_name": "TestClass",
        "function_name": "getCurrentTime",
        "code": "public String getCurrentTime(String timeFormat) {\n\t\tString formatDateAndTime = null;\n\t\tif (timeFormat.equals(\"HH:mm:ss\")) {\n\t\t\tDateTimeFormatter dtf_date = DateTimeFormatter.ofPattern(timeFormat);\n\t\t\tLocalDateTime now = LocalDateTime.now();\n\n\t\t\tformatDateAndTime = dtf_date.format(now);\n\t\t} else {\n\t\t\tDateTimeFormatter dtf_date = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\n\t\t\tLocalDateTime now = LocalDateTime.now();\n\n\t\t\tformatDateAndTime = dtf_date.format(now);\n\t\t\t\n\t\t}\n\n\t\treturn formatDateAndTime;\n\n\t}",
        "description": "This Java method, `getCurrentTime`, takes a string parameter `timeFormat` and returns the current time in the specified format. If the format is \"HH:mm:ss\", it uses that format; otherwise, it defaults to \"HH:mm:ss\". The method uses the `java.time` package's classes (`DateTimeFormatter` and `LocalDateTime`) to format the current time according to the provided format or a default format if none is specified.",
        "input": [
            "String timeFormat"
        ],
        "output": "String"
    },
    {
        "class_name": "TestClass",
        "function_name": "calculateDuration",
        "code": "public String calculateDuration(String startTime, String endTime) {\n\n\t\tString timeDuration = null;\n\t\tBoolean flag=false;\n\t\t try {\n\t\t        LocalTime.parse(startTime);\n\t\t        LocalTime.parse(endTime);\n\t\t        flag=true;\n\t\t       \n\t\t    } catch (DateTimeParseException  e) {\n\t\t        System.out.println(\"Invalid time format.\"+e);\n\t\t      \n\t\t    }\n\n\t\t if(flag) {\n\t\t\t SimpleDateFormat format = new SimpleDateFormat(\"HH:mm:ss\");\n\t\t\t\tDate initialTime = null;\n\t\t\t\tDate EndTime = null;\n\n\t\t\t\ttry {\n\t\t\t\t\tinitialTime = format.parse(startTime);\n\t\t\t\t\tEndTime = format.parse(endTime);\n\n\t\t\t\t\tlong timeDifference = EndTime.getTime() - initialTime.getTime();\n\t\t\t\t\t\n\t\t\t\t\tlong diffSeconds = timeDifference / 1000 % 60;\n\t\t\t\t\tlong diffMinutes = timeDifference / (60 * 1000) % 60;\n\t\t\t\t\tlong diffHours = timeDifference / (60 * 60 * 1000) % 24;\n\t\t\t\t\t\n\n\t\t\t\t\ttimeDuration = \"\" + diffHours + \" Hours, \" + diffMinutes + \" Minutes, \" + diffSeconds + \" Seconds\";\n\n\t\t\t\t} catch (ParseException e) {\n\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t }\n\t\t\n\n\t\treturn timeDuration;\n\n\t}",
        "description": "This Java method calculates the duration between two given times in the format \"HH:mm:ss\" and returns it as a string. The method first attempts to parse the start and end times using `LocalTime.parse()`. If this is successful, it then uses `SimpleDateFormat` to convert these strings into `Date` objects, calculates the time difference between them, and converts this difference into hours, minutes, and seconds. The result is returned as a string in the format \"X Hours, Y Minutes, Z Seconds\". If the input times are not in the correct format, the method catches the `DateTimeParseException` or `ParseException` and prints an error message instead.",
        "input": [
            "String startTime",
            "String endTime"
        ],
        "output": "String"
    },
    {
        "class_name": "TestClass",
        "function_name": "getColumnIndex",
        "code": "public int getColumnIndex(String columnHeader) throws IOException {\n\t\tint columnPosition = 0;\n\n\t\ttry {\n\t\t\tFileInputStream file = new FileInputStream(new File(\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"));\n\t\t\tXSSFWorkbook wb = new XSSFWorkbook(file);\n\t\t\tXSSFSheet sheet = wb.getSheetAt(0);\n\t\t\t\n\t\t\t\n\t\t\tIterator<Row> it = sheet.iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tint column = 0;\n\t\t\t\tRow row = it.next();\n\t\t\t\tIterator<Cell> cellIter = row.cellIterator();\n\t\t\t\twhile (cellIter.hasNext()) {\n\t\t\t\t\tcolumn++;\n\t\t\t\t\tString field1 = cellIter.next().getStringCellValue();\n\t\t\t\t\tif (field1.equals(columnHeader)) {\n\t\t\t\t\t\tcolumnPosition = column;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\twb.close();\n\t\t} catch (FileNotFoundException e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn columnPosition;\n\t}",
        "description": "This Java method, `getColumnIndex`, takes a string parameter `columnHeader` and returns the index of that column in an Excel spreadsheet. The method attempts to open an Excel file named \"Execution_Table.xlsx\" located at the specified path, reads the first sheet, and then iterates through each row and cell to find the column with the matching header name. If the column is found, its index is returned; otherwise, -1 (default) is returned. The method also catches `FileNotFoundException` exceptions and prints the error message if the file cannot be found.",
        "input": [
            "String columnHeader"
        ],
        "output": "int"
    },
    {
        "class_name": "TestClass",
        "function_name": "getRowIndex",
        "code": "public int getRowIndex(String rowHeader) throws IOException {\n\t\tint rowPosition = 0;\n\n\t\ttry {\n\t\t\tFileInputStream file = new FileInputStream(new File(\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"));\n\t\t\tXSSFWorkbook wb = new XSSFWorkbook(file);\n\t\t\tXSSFSheet sheet = wb.getSheetAt(0);\n\t\t\tint num = sheet.getPhysicalNumberOfRows();\n\n\t\t\tint row = 0;\n\t\t\tfor (int iterateCell = 0; iterateCell < num; iterateCell++) {\n\t\t\t\trow++;\n\t\t\t\tString text = sheet.getRow(iterateCell).getCell(0).getStringCellValue();\n\t\t\t\tif (text.equals(rowHeader)) {\n\t\t\t\t\trowPosition = row;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twb.close();\n\n\t\t} catch (FileNotFoundException e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\treturn rowPosition;\n\n\t}",
        "description": "This Java method, `getRowIndex`, takes a string parameter `rowHeader` and returns the row index of the Excel sheet that matches the given header. It uses Apache POI library to read an Excel file (`Execution_Table.xlsx`) and iterate through each row to find the matching header.\n\nThe method opens the Excel file, gets the first sheet, counts the number of rows, then iterates through each row to check if the cell at column 0 (first column) contains the given `rowHeader`. When a match is found, it returns the corresponding row index. If the file is not found or an error occurs during execution, it catches and prints the exception using `printStackTrace()`.\n\nNote that this method throws an `IOException` if there's an issue reading the Excel file.",
        "input": [
            "String rowHeader"
        ],
        "output": "int"
    },
    {
        "class_name": "TestClass",
        "function_name": "writeToExcel",
        "code": "public void writeToExcel(int rowValue, int columnValue, String timeValue) throws IOException {\n\n\t\ttry {\n\t\t\tFileInputStream file = new FileInputStream(\"C:/Users/I2518/Downloads/Test.xls\");\n\t\t\tString fileText=\"C:/Users/I2518/Downloads/Test.xls\";\n\t\t\t\n\t\t\tString extension = fileText.split(\"\\\\.\")[1];\n\t\t\t\n\t\t\n\t\t\tif(extension.equals(\"xlsx\")) {\n\t\t\t\tXSSFWorkbook wb = new XSSFWorkbook(file);\n\t\t\t\tXSSFSheet sheet = wb.getSheetAt(0);\n\t\t\t\tRow row = sheet.getRow(rowValue - 1);\n\t\t\t\trow.createCell(columnValue - 1).setCellValue(timeValue);\n\t\t\t\tfile.close();\n\t\t\t\tFileOutputStream out = new FileOutputStream(new File(\"C:/Users/I2518/Downloads/Execution_Table.xlsx\"));\n\t\t\t\twb.write(out);\n\t\t\t\tout.close();\n\t\t\t\twb.close();\n\t\t\t}\n\t\t\telse if(extension.equals(\"xls\")){\n\t\t\t\tHSSFWorkbook myExcelBook = new HSSFWorkbook(new FileInputStream(\"C:/Users/I2518/Downloads/Test.xls\"));\n\t\t\t\tHSSFSheet myExcelSheet = myExcelBook.getSheetAt(0);\n\t\t\t\tRow row = myExcelSheet.getRow(rowValue - 1);\n\t\t\t\trow.createCell(columnValue - 1).setCellValue(timeValue);\n\t\t\t\tfile.close();\n\t\t\t\tFileOutputStream out = new FileOutputStream(new File(\"C:/Users/I2518/Downloads/Test.xls\"));\n\t\t\t\tmyExcelBook.write(out);\n\t\t\t\tout.close();\n\t\t\t\tmyExcelBook.close();\n\t\t\t}\n\t\t\t\n\t\t\t\n\n\t\t\t\n\n\t\t} catch (FileNotFoundException e) {\n\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n\t\n//\tpublic void splitExcelName() {\n//\t\t\n//\t\t\n//\t\tString fileText=\"C:/Users/I2518/Downloads/Test.xls\";\n//\t\t\n//\t\tString extension = fileText.split(\"\\\\/Test.xls\")[0];\n//\t}\n//",
        "description": "This Java method, `writeToExcel`, writes a value to an Excel spreadsheet at a specified row and column. It takes three parameters: the row value (1-based indexing), the column value (1-based indexing), and the time value to be written.\n\nThe method first checks the file extension of the input file. If it's an xlsx file, it uses Apache POI's XSSFWorkbook class to read and write the Excel file. If it's an xls file, it uses HSSFWorkbook class for the same purpose.\n\nThe method then creates a new row at the specified row value, creates a cell in that row at the specified column value, and sets the cell's value to the input time value.\n\nFinally, it writes the changes back to the original Excel file. If an error occurs while reading or writing the file (e.g., if the file is not found), the method catches the `FileNotFoundException` and prints the exception message.",
        "input": [
            "int rowValue",
            "int columnValue",
            "String timeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "TestClass",
        "function_name": "getFilePath",
        "code": "public void getFilePath() {\n\t\tSystem.out.println();\n\t\tString path=\"Execution_Table.xlsx\";\n\t\tFile file=new File(path);\n\t\tString dirpath =  file.getAbsolutePath();\n\t\tString initialPath=dirpath.split(\"Execution_Table\")[0];\n\t\tcurrentFilePath=initialPath+filepath;\n\t\tSystem.out.println(currentFilePath);\n\t}\n\t\n}",
        "description": "This Java method, `getFilePath()`, appears to retrieve the current working directory and construct a new file path by appending a specific file name (`\"Execution_Table.xlsx\"`). The method:\n\n1. Prints an empty line to the console using `System.out.println();`.\n2. Sets a string variable `path` to `\"Execution_Table.xlsx\"`.\n3. Creates a `File` object from the `path` string.\n4. Gets the absolute path of the file using `file.getAbsolutePath()`.\n5. Splits the absolute path into two parts at the first occurrence of the substring `\"Execution_Table\"` (using `dirpath.split(\"Execution_Table\")[0]`) to get the initial directory path.\n6. Concatenates the initial directory path with a file path (`filepath`, which is not defined in this method but presumably exists elsewhere) and assigns the result to a variable called `currentFilePath`.\n7. Prints the constructed `currentFilePath` to the console using `System.out.println(currentFilePath);`.\n\nIn summary, this method seems to generate a file path by combining the current working directory with a specific file name, and prints the resulting path to the console.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "TestDriver",
        "function_name": "main",
        "code": "public static void main(String[] args) {\n\t\ttry {\n\t\t\t\n\t\t\t// deleteTestResults()\n\t\t\t// System.err.println(utilities.GenerateMaskedData.getDecryptedData(\"8eobccL5AsDy0bet+AZyAQ==\"));\n\n\t\t\tCommon common = new Common();\n\t\t\tcommon.startup();\n\t\t\t\n\t\t\tTestNG testng = new TestNG();\n\t\t\tList<String> suites = new ArrayList<String>();\n\t\t\tSystem.setProperty(\"webdriver.chrome.driver\", \"C:\\\\Windows\\\\chromedriver.exe\");\n\t\t\tsuites.add(\"./config/testng.xml\");\n\t\t\ttestng.setOutputDirectory(outputDirectory + \"/testng\");\n\t\t\ttestng.setTestSuites(suites);\n\t\t\ttestng.run();\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tupdateExecutionTimeInJUnitXML();\n\t\t\t\tif (getConfigProperty(\"Azure_Execution\").equalsIgnoreCase(\"Yes\")) {\n\t\t\t\t\tAutoBugFromiSafeUIReport.main(args);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Bugs will not be create in Azure due to Azure_Execution flag is : \"\n\t\t\t\t\t\t\t+ getConfigProperty(\"Azure_Execution\"));\n\t\t\t\t}\n\n\t\t\t\tif (getConfigProperty(\"Run_Report_Pipeline\").equalsIgnoreCase(\"Yes\")) {\n\t\t\t\t\tcopyReportsForArtifactPipeline();\n\t\t\t\t\trunAzureReportPipeline();\n\t\t\t\t}\n\t\t\t\t// cleanup(); commented this line for generate Junit reports in Testresults.\n\t\t\t} catch (Exception e) {\n\t\t\t\twriteToLogFile(\"error\", e.toString());\n\t\t\t} finally {\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t\twriteToLogFile(\"INFO\", \"Script Execution Complete\");\n\t\t\t\twriteToLogFile(\"INFO\", \"###################################\");\n\t\t\t}\n\t\t}\n\t}\n}",
        "description": "This is the `main` method of a Java program, which is the entry point for any Java application. Here's a brief description of what the method does:\n\n1. It attempts to execute some code in a try block.\n2. In this block, it:\n\t* Creates instances of two classes: `Common` and `TestNG`.\n\t* Sets up some properties and configurations for the `TestNG` class.\n\t* Runs the `TestNG` class using its `run()` method.\n3. If any exception occurs during execution, it catches it in a catch block and writes an error message to a log file.\n4. In a finally block (which is always executed, regardless of whether an exception was thrown or not), it:\n\t* Calls another method `updateExecutionTimeInJUnitXML()` to update some JUnit XML report.\n\t* Checks if a certain configuration property is set to \"Yes\" and, if so, calls the `AutoBugFromiSafeUIReport` class's `main()` method. Otherwise, prints a message indicating that bugs won't be created in Azure due to this flag being set.\n\t* If another configuration property is set to \"Yes\", it calls two methods: `copyReportsForArtifactPipeline()` and `runAzureReportPipeline()`.\n5. Finally, it writes some log messages indicating script execution completion.\n\nIn summary, this method sets up and runs a test suite using the TestNG framework, handles any exceptions that occur during execution, and performs some additional tasks based on configuration properties.",
        "input": [
            "String args"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyElementVisibleCustomerPage",
        "code": "public void verifyElementVisibleCustomerPage(String labelName) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Customer Details#xpath=//div[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tmanualScreenshot(\"Successfully Displayed the \" + labelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  is not available\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyElementVisibleCustomerPage`, verifies if an element with a specific label name is visible on the customer page within 10 seconds. It uses Selenium WebDriver's `waitForElement` and `isElementPresent` methods to achieve this.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression by concatenating the given `labelName` with a static string and an XPath query.\n2. It waits for the element matching the constructed XPath expression to be present within 10 seconds using `waitForElement`.\n3. If the element is present, it takes a manual screenshot with a descriptive message indicating that the element was successfully displayed.\n4. If the element is not present, it fails the test step with an error message stating that the element is not available.\n5. The method catches any exceptions that may occur during execution and reports a failed test step with an error message containing the exception's message.\n\nIn summary, this method ensures that a specific element with a given label name is visible on the customer page and takes a screenshot if it is present or fails the test if it is not.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyElementVisibleCustomerPageAddressSection",
        "code": "public void verifyElementVisibleCustomerPageAddressSection(String labelName) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Address Details#xpath=//div/lightning-formatted-text[text()='\" + labelName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\thighLighterMethodManualScreenShot(button, labelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  is not available\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyElementVisibleCustomerPageAddressSection`, verifies the visibility of an element on a customer page address section. \n\nThe method takes a `String` parameter `labelName` which is used to construct an XPath expression for the element. It then uses a `try-catch` block to attempt to find and highlight the element using a custom highlighting method (`highLighterMethodManualScreenShot`). If the element is found, it successfully highlights it with a manual screenshot. \n\nIf the element is not found after a specified timeout (10 seconds in this case), the test step fails with an error message indicating that the element is not available. \n\nIn the event of any exception occurring during the execution of the method, the test step also fails with an error message including the exception's message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnMainTabAfterSearch",
        "code": "public void clickOnMainTabAfterSearch(String labelName) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Customer Details#xpath=//label//p[contains(text(),'\" + labelName + \"')]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tclickOn(button);\n\t\t\t\tmanualScreenshot(\"Successfully Displayed the \" + labelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  is not available\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnMainTabAfterSearch`, simulates a user clicking on a specific tab after performing a search. The method takes a string parameter `labelName` which is used to construct the XPath of the button to be clicked.\n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the provided `labelName` with a static part of the XPath.\n2. It waits for the element identified by this XPath to appear (up to 10 seconds).\n3. If the element is present, it scrolls the page to bring the button into view using `scrollbycordinates`.\n4. It checks if the button is still visible and clickable using `isElementPresent`. If it is, it simulates a click on the button using `clickOn`.\n5. After clicking the button, it takes a manual screenshot with a descriptive name indicating that the expected tab was successfully displayed.\n6. If any of these steps fail (e.g., the element doesn't appear or isn't clickable), it reports an error and marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures if they do.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyElementOnInsideTableContent",
        "code": "public void verifyElementOnInsideTableContent(String labelName) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Customer Details#xpath=//tr//div[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tmanualScreenshot(\"Successfully Displayed the \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  is not available\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyElementOnInsideTableContent`, verifies that a specific element (identified by the `labelName` parameter) is present within an inside table content. The method:\n\n1. Constructs an XPath expression to locate the element within the table.\n2. Waits for the element to be present using the `waitForElement` method.\n3. Checks if the element is actually present using the `isElementPresent` method.\n4. If the element is found, takes a manual screenshot as evidence of successful display.\n5. If the element is not found, marks the test step as failed with an error message.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyTableHeadingIsVisible",
        "code": "public void verifyTableHeadingIsVisible(String labelName) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Customer Details#xpath=//table/thead/tr/th/div[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tmanualScreenshot(\"Successfully Displayed the \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \"  is not available\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyTableHeadingIsVisible`, is used to verify if a specific table heading with the given label name is visible on the page.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression by concatenating the provided `labelName` with a predefined string.\n2. The method then waits for the element specified in the XPath expression using `waitForElement`.\n3. If the element is present, it takes a manual screenshot to capture the successful verification and logs a success message.\n4. If the element is not present, it logs a failure message indicating that the table heading with the given label name is not available.\n5. The method also catches any exceptions that may occur during execution and logs a failure message if an exception occurs.\n\nIn summary, this method helps in verifying the visibility of a specific table heading on a page and takes a screenshot to capture the result.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "getTextValueFormFieldOnFOS",
        "code": "public String getTextValueFormFieldOnFOS(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[@class='Customer-Data']/span\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tvalue = textField.getText();\n\t\t\ttestStepInfo(\"The '\" + labelName + \"'  value is \" + value);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextValueFormFieldOnFOS`, retrieves the text value of a form field on an FOS (Field Of Study) page based on the provided label name. It uses Selenium WebDriver to interact with the web element and perform various actions such as waiting for the element to be displayed, scrolling to the element if necessary, highlighting the element, taking a manual screenshot, and checking if the element is displayed. The method returns the text value of the form field.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "getTextValueFormFieldCustomerDetails",
        "code": "public String getTextValueFormFieldCustomerDetails(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='Customer-Type']/following-sibling::div[@class='Customer-Name-Value']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tvalue = textField.getText();\n\t\t\ttestStepInfo(\"The '\" + labelName + \"'  value is \" + value);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextValueFormFieldCustomerDetails`, retrieves the text value of a specific form field with the given label name from a web page. It uses Selenium WebDriver to interact with the web page and perform actions such as waiting for an element, scrolling to an element, taking a manual screenshot, and highlighting an element.\n\nThe method takes a `String` parameter `labelName`, which is used to construct the XPath of the form field to be retrieved. The method tries to retrieve the text value of the form field, and if successful, it logs the value as a test step information. If the form field is displayed, it also scrolls to the element, takes a manual screenshot, and highlights the element. If the form field is not populated with a value, it takes a manual screenshot with an error message.\n\nThe method returns the retrieved text value as a `String`. If any exception occurs during the execution of the method, it logs the failure as a test step failed and returns null.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "getTextValueFormFieldCustomerStatus",
        "code": "public String getTextValueFormFieldCustomerStatus(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName\n\t\t\t\t\t+ \"#xpath=//div[text()='Card Status :']/following-sibling::div[@class='Customer-Name-Value']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tvalue = textField.getText();\n\t\t\ttestStepInfo(\"The '\" + labelName + \"'  value is \" + value);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextValueFormFieldCustomerStatus`, retrieves the text value of a customer status field on a web page. It takes a string parameter `labelName` which is used to construct an XPath expression to locate the desired element.\n\nThe method attempts to find the element using the XPath expression and then retrieves its text value. If the element is displayed, it scrolls to the element, highlights it for manual verification, waits for 3 seconds, and then takes a screenshot. If the element is not displayed, it takes a screenshot with an error message indicating that the field is not populated.\n\nThe method returns the retrieved text value as a string. It also logs test steps and failures using `testStepInfo` and `testStepFailed` methods, respectively.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "getTextValueFormFieldCustomerDetails",
        "code": "public String getTextValueFormFieldCustomerDetails(String sectionName, String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()='\" + sectionName + \"']//../div[text()='\" + labelName\n\t\t\t\t\t+ \"']/span\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tvalue = textField.getText();\n\t\t\ttestStepInfo(\"The '\" + labelName + \"'  value is \" + value);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextValueFormFieldCustomerDetails`, retrieves the text value of a specific form field on a webpage. It takes two input parameters: `sectionName` and `labelName`. \n\nThe method uses Selenium WebDriver to find the element with the specified label name within the section named by `sectionName`. If the element is found, it waits for the element to be displayed, gets its text value, and logs the result as a test step. It also takes a manual screenshot of the element if it's displayed, or an error message if it's not.\n\nIf any exceptions occur during the process (e.g., the element cannot be found), the method catches the exception, logs an error message, and returns `null`.",
        "input": [
            "String sectionName",
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "getTextValueFormFieldCustomerName",
        "code": "public String getTextValueFormFieldCustomerName(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName\n\t\t\t\t\t+ \"#xpath=//div[text()='Opportunity Creation for : ']/following-sibling::div[@class='Customer-Name-Value']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tvalue = textField.getText();\n\t\t\ttestStepInfo(\"The '\" + labelName + \"'  value is \" + value);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getTextValueFormFieldCustomerName`, retrieves the text value of a specific form field named \"Customer Name\" on a web page. The method takes a string parameter `labelName` which is used to construct an XPath expression to locate the element.\n\nHere's a step-by-step breakdown:\n\n1. It tries to find the element using the constructed XPath expression.\n2. If the element is found, it waits for the element to be displayed and then retrieves its text value.\n3. It logs a test step with the retrieved value.\n4. If the element is displayed, it scrolls to the element, takes a manual screenshot, highlights the element, and waits for 3 seconds.\n5. If the element is not displayed, it takes a manual screenshot with an error message indicating that the value is not populated.\n6. The method returns the retrieved text value.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "selectValueFromDropdownPOSLayOutChange",
        "code": "public void selectValueFromDropdownPOSLayOutChange(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\t;\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[text()='\" + dropdownName + \"']//..//..//div//button//span\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownPOSLayOutChange`, is used to select a value from a dropdown list. It takes two parameters: the name of the dropdown and the value to be selected.\n\nThe method attempts to locate the dropdown element using an XPath expression, then scrolls down to the dropdown if it's not already visible. If the dropdown is present and its elements are displayed, it iterates through clicking on the dropdown and then the desired value until the selection is successful. \n\nIf the selection fails after two iterations or if the dropdown is not found, the method logs a failure message and ends. In case of any exception during the process, the method also logs an error message and ends.\n\nThe purpose of this method seems to be part of a UI test automation framework, possibly using Selenium WebDriver.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "selectValueFromDropdownPOSLayOutChangeForPanAvailable",
        "code": "public void selectValueFromDropdownPOSLayOutChangeForPanAvailable(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[text()='\" + dropdownName + \"']//..//..//div//button//span\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\t;\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=(//div//span[text()='\" + value + \"'])[2]\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownPOSLayOutChangeForPanAvailable`, is used to select a value from a dropdown menu. It takes two parameters: `dropdownName` and `value`. The method attempts to locate the dropdown menu by its name, wait for it to be displayed, and then click on the dropdown to reveal the list of options.\n\nThe method then iterates through the options until it finds the desired value, clicking on each option in turn. If the desired value is found, the method takes a manual screenshot as evidence of successful selection. If the desired value is not found after two iterations, or if the dropdown menu is not present at all, the test step fails.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyselectValueFromDropdownPOSLayOutChange",
        "code": "public void verifyselectValueFromDropdownPOSLayOutChange(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\t;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[text()='\" + dropdownName + \"']//..//..//div//button//span\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOn(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tmanualScreenshot(\"Successfully Displayed the dropdown option for \" + dropdownName);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyselectValueFromDropdownPOSLayOutChange`, is used to verify if a specific value is present and can be selected from a dropdown menu. The method takes two parameters: the name of the dropdown and the value to be verified.\n\nThe method performs the following actions:\n\n1. Waits for 3 seconds.\n2. Waits for the page to load.\n3. Scrolls to the dropdown menu.\n4. Verifies if the dropdown menu is displayed.\n5. If the dropdown menu is displayed, it clicks on the dropdown and then waits for the dropdown list to appear.\n6. It then iterates through the dropdown list, clicking on each option until it finds the specified value.\n7. Once the specified value is found, it clicks on that option and takes a manual screenshot as proof of successful selection.\n8. If the specified value is not found in the dropdown list after 2 iterations, the test step fails.\n\nIf any exceptions occur during the execution of this method, it catches them and marks the test step as failed with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enterValueInPOSLayoutPage",
        "code": "public void enterValueInPOSLayoutPage(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()= '\" + labelName + \"']//..//..//div/input\";\n\t\t\twaitTime(2);\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInPOSLayoutPage`, takes two string parameters: `labelName` and `value`. It enters the given `value` into a field on the page that has a label matching the provided `labelName`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the input field based on the `labelName`.\n2. It waits for 2 seconds, then searches for the element using the constructed XPath.\n3. If the element is found, it scrolls into view if necessary, highlights the element (to ensure it's visible), enters the provided `value` into the field, and takes a manual screenshot of the page with the highlighted element.\n4. If the element is not found after waiting for 10 seconds, the method fails the test step.\n\nIf any exception occurs during these steps, the method catches it and fails the test step with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enterValueInPOSLayoutPageForMiddleName",
        "code": "public void enterValueInPOSLayoutPageForMiddleName(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()= '\" + labelName\n\t\t\t\t\t+ \"']//..//..//div/input[@name='Middle_Name__c']\";\n\t\t\twaitTime(2);\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInPOSLayoutPageForMiddleName`, enters a given value into the middle name field on a page with a specific layout. \n\nThe method takes two parameters: `labelName` (the label for the middle name field) and `value` (the value to be entered). It uses Selenium WebDriver commands to:\n\n1. Wait for the specified field to be present.\n2. Scroll down to the field if necessary.\n3. Enter the given value into the field.\n4. Highlight the field and take a manual screenshot of the screen with the entered value.\n\nIf any step fails, it logs an error message and ends the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enterValueInPOSLayoutPageDebitCreditCardNo",
        "code": "public void enterValueInPOSLayoutPageDebitCreditCardNo(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=(//div[text()= '\" + labelName + \"']//..//..//div/input)[2]\";\n\t\t\twaitTime(2);\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInPOSLayoutPageDebitCreditCardNo`, is used to fill a debit/credit card number field on a POS layout page. It takes two parameters: `labelName` and `value`. \n\nThe method attempts to locate the field with the given `labelName`, wait for it to be displayed, scroll to it if necessary, and then enter the provided `value` into the field. If the field is not present, the test step fails. After entering the value, the method takes a manual screenshot of the highlighted field.\n\nIf any exception occurs during the execution of this method (e.g., the field is not found), the test step fails with an error message containing the exception's message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyFieldEnabledOrDisabled",
        "code": "public void verifyFieldEnabledOrDisabled(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=(//div[text()= '\" + LabelName\n\t\t\t\t\t+ \"']//..//lightning-input/lightning-datepicker//div/input)[2]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyFieldEnabledOrDisabled(String LabelName)`:\n\nThis method checks whether a field with the given label name is enabled or disabled in a Lightning page. It uses XPath to locate the field, waits for it to be displayed, and then checks its `disabled` attribute. If the field is disabled, it takes a manual screenshot indicating that the field is not editable. If the field is enabled (i.e., `disabled` attribute is `false`), it takes another manual screenshot indicating that the field is editable. If the method encounters any exceptions or errors, it takes yet another manual screenshot with a generic error message.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyFieldEnabledOrDisabledPOSLayOut",
        "code": "public void verifyFieldEnabledOrDisabledPOSLayOut(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=//div[text()= '\" + LabelName + \"']//..//div/input\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyFieldEnabledOrDisabledPOSLayOut(String LabelName)`:\nThis method verifies whether a field with the given `LabelName` is enabled or disabled on a webpage. It uses WebDriver to interact with the page, waiting for it to load and then searching for an input element with the specified label name. If found, it checks if the field is disabled (i.e., its \"disabled\" attribute is set to \"true\") or enabled (i.e., its \"disabled\" attribute is set to \"false\"). If the field is not found, it reports a failure. In case of any exception, it takes a manual screenshot with a default message indicating that the field is editable.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyFieldEnabledOrDisabledPOSLayOutCreditNum",
        "code": "public void verifyFieldEnabledOrDisabledPOSLayOutCreditNum(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=(//div[text()= '\" + LabelName + \"']//..//div/input)[2]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method verifies whether a specific field with the given label name is enabled or disabled on a POS layout credit number page. It uses Selenium WebDriver to interact with the webpage and performs the following actions:\n\n1. Waits for the page to load.\n2. Finds the target field using an XPath expression that matches the provided label name.\n3. Waits for the element to be displayed within 10 seconds.\n4. Checks if the element is displayed or not. If it's not, fails the test step.\n5. Gets the \"disabled\" attribute value of the element and checks its value:\n\t* If the value is \"true\", takes a manual screenshot with a message indicating that the field is not editable.\n\t* If the value is \"false\", takes a manual screenshot with a message indicating that the field is editable.\n\t* If the value is neither \"true\" nor \"false\", fails the test step with an error message.\n\nIf any exception occurs during the execution of this method, it will take a manual screenshot with the message \"the Field is Editable\".",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyFieldEnabledOrDisabledPOIExpiryDateAddress",
        "code": "public void verifyFieldEnabledOrDisabledPOIExpiryDateAddress(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\t;\n\t\t\tString targetField = \"#xpath=(//div/label[text()='\" + LabelName + \"']//..//div/input)[1]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldEnabledOrDisabledPOIExpiryDateAddress`, verifies whether a specific field with the given label name is enabled or disabled. It uses Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. Waits for the page to load.\n2. Finds the target field on the page using an XPath expression that matches the label text provided as input.\n3. Waits for the target field to be displayed and then checks if it is enabled or disabled by checking the `disabled` attribute of the field.\n4. If the field is disabled, takes a manual screenshot with a message indicating that the field is not editable.\n5. If the field is enabled, takes a manual screenshot with a message indicating that the field is editable.\n6. If the field is neither enabled nor disabled (i.e., it's not present), fails the test step and takes a manual screenshot.\n\nNote that there are some empty lines (`;`) in the method, which might be intended for future development or debugging purposes. Additionally, the `catch` block seems to be handling an exception differently than expected, as it takes a manual screenshot without any specific error message.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyFieldEnabledOrDisabledPOSLayOutForSourcingSurrorgate",
        "code": "public void verifyFieldEnabledOrDisabledPOSLayOutForSourcingSurrorgate(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=//div[text()= '\" + LabelName + \"']//..//div//..//..//div//button\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldEnabledOrDisabledPOSLayOutForSourcingSurrorgate`, verifies whether a specific field with the given label name is enabled or disabled in a web page. The method uses Selenium WebDriver to interact with the page and perform the following actions:\n\n1. Waits for the page to load.\n2. Finds the target field using an XPath expression that matches the provided label name.\n3. Waits for the target field to be displayed on the page.\n4. Checks if the field is disabled by getting its `disabled` attribute value. If it's \"true\", the method takes a manual screenshot with a message indicating that the field is not editable. If it's \"false\", it takes a manual screenshot with a message indicating that the field is editable.\n5. If the `disabled` attribute value is neither \"true\" nor \"false\", the method fails the test step with an error message.\n\nThe method also includes some exception handling, which takes a manual screenshot if any unexpected exception occurs during execution.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnRadioButtonOnPOSLayOutChange",
        "code": "public void clickOnRadioButtonOnPOSLayOutChange(String value) {\n\t\ttry {\n\t\t\tString button = \"Cart button#xpath=//div[text()='Gender']//..//..//div//span/input[@value='\" + value\n\t\t\t\t\t+ \"']//..\";\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no Cart button on Customer Page\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnRadioButtonOnPOSLayOutChange`, simulates a user clicking on a radio button with a specific value. The method takes a string parameter `value` which represents the value of the radio button to be clicked.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the radio button based on its value.\n2. It scrolls the element into view using the `scrollbycordinates` method.\n3. It checks if the element is displayed within a certain time limit (6 seconds) using the `isElementDisplayed` method.\n4. If the element is displayed, it highlights the element using the `highLighterMethod`, clicks on it using the `clickOn` method, and waits for 2 seconds using the `waitTime` method.\n5. If the element is not displayed, it logs a test step failure with the message \"There is no Cart button on Customer Page\".\n6. If any exception occurs during the execution of the method, it logs an info message with the error message.\n\nIn summary, this method automates the process of clicking on a radio button with a specific value on a customer page layout change event.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnRadioButtonOnPOSLayOutChangeForAdressSection",
        "code": "public void clickOnRadioButtonOnPOSLayOutChangeForAdressSection(String value) {\n\t\ttry {\n\t\t\tString button = \"Address Section#xpath=//span[text()='\" + value + \"']//..//input\";\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tmanualScreenshot(\"Successfully Selction this \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no Cart button on Customer Page\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnRadioButtonOnPOSLayOutChangeForAdressSection`, is used to select a radio button on the address section of a web page. It takes a string parameter `value` which represents the text value of the radio button.\n\nThe method first constructs an XPath expression to locate the radio button based on its text value. It then uses this expression to scroll to the element, verify if it is displayed, and if so, highlights the element and clicks on it. If the element is not displayed within a specified time limit (6 seconds), the test fails.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, it logs an informative message with the failure reason.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyOnRadioButtonOnPOSLayOutChangeForAdressSection",
        "code": "public void verifyOnRadioButtonOnPOSLayOutChangeForAdressSection(String value) {\n\t\ttry {\n\t\t\tString button = \"Address Section#xpath=//span[text()='\" + value + \"']//..//input\";\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\thighLighterMethodManualScreenShot(button, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no Cart button on Customer Page\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyOnRadioButtonOnPOSLayOutChangeForAdressSection`, appears to be a part of an automated testing framework. The method is designed to verify the presence of a radio button with a specific value on a webpage.\n\nHere's what it does:\n\n1. It takes a `String` parameter `value` which represents the text value of the radio button.\n2. It constructs an XPath expression to locate the radio button based on its text value.\n3. It uses this XPath expression to scroll to the element using the `scrollbycordinates` method (which is not a standard Java method, likely custom implementation).\n4. If the element is displayed within 6 seconds, it calls another custom method `highLighterMethodManualScreenShot` with the button and value as parameters.\n5. If the element is not displayed within the given time, it fails the test step with an error message \"There is no Cart button on Customer Page\".\n6. In case of any exception during execution, it logs a failure message with the error message.\n\nIn summary, this method is used to verify the presence of a radio button with a specific text value and take a manual screenshot if it's displayed, or fail the test step if not.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnButtonOnPageLayout",
        "code": "public void clickOnButtonOnPageLayout(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(4);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonOnPageLayout`, simulates a click on a button with the given name (`buttonName`) on a page layout. Here's a step-by-step breakdown:\n\n1. Waits for 2 seconds using the `waitTime` method.\n2. Constructs an XPath expression to locate the button by its name, using the provided `buttonName`.\n3. Waits up to 15 seconds for the button to be displayed using the `waitForElement` method.\n4. Checks if the button is displayed within 6 seconds using the `isElementDisplayed` method. If it's not displayed, the test step fails with a message indicating that the button is not present.\n5. If the button is displayed, scrolls to it using the `scrollToElement` and `scrollToWebElement` methods.\n6. Waits for 2 seconds before clicking on the button using the `clickOn` method.\n7. Waits for 4 seconds after clicking the button.\n\nIf any exceptions occur during these steps, the test step fails with a message indicating that the click operation failed, along with the exception message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "selectOrDeselectCheckBoxinPOSLayout",
        "code": "public void selectOrDeselectCheckBoxinPOSLayout(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=(//span/input[@name='POI_Changed__c'])[1]\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxinPOSLayout`, is used to select or deselect a checkbox in a POS (Point of Sale) layout. The method takes two parameters: `labelname` and `status`. \n\n- `labelname`: This parameter is used to identify the checkbox in logs and screenshots.\n- `status`: This parameter can be either \"check\" or \"uncheck\", depending on whether you want to select or deselect the checkbox.\n\nThe method first creates an XPath expression for the checkbox based on the provided label name. It then waits for the element to be visible, scrolls to it if necessary, and checks its current status.\n\nIf the `status` parameter is \"check\" and the checkbox is not already selected, the method selects it by clicking on it. If the `status` parameter is \"uncheck\" and the checkbox is currently selected, the method deselects it by clicking on it again.\n\nThe method also takes manual screenshots after each action to capture the result. If any exception occurs during the execution of this method, it logs the exception in a log file and marks the test as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "chooseValueFromSearchListPOSLayOut",
        "code": "public void chooseValueFromSearchListPOSLayOut(String labelName, String value) {\n\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=(//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input)[1]\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\n\t\t\t\twaitTime(3);\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tscrollbycordinates(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[contains(text(),'Show All Results')]\";\n\n\t\t\t\t\twaitForElement(search_icn, 2);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, elementLoadWaitTime)) {\n\t\t\t\t\t\thighLighterMethod(lnk_zipCity);\n\t\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchListPOSLayOut`, is used to select a value from a search list. It takes two parameters: `labelName` and `value`. \n\nThe method first checks if the provided `value` is not empty. If it's not empty, it performs the following actions:\n\n1. Waits for a specific element (search field) with an XPath locator that contains the provided `labelName`.\n2. Scrolls to the search field using the `scrollbycordinates` method.\n3. Checks if the search field is displayed and highlights it using the `highLighterMethod`.\n4. Types in the search field the provided `value` using the `typeIn` method.\n5. Waits for a specific element (search icon) with an XPath locator that contains the text \"Show All Results\".\n6. Highlights the search icon and clicks on it using the `clickOn` method.\n7. Waits for the page to load and then waits for another specific element (link) with an XPath locator that matches the provided `value`.\n8. If the link is displayed, highlights it and clicks on it.\n\nIf the value is empty, the method displays a test step info message asking the user to provide some value for this field. \n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, the method will display a test step failed message with the exception message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "verifyProceedButtonIsEnabledOrDisabled",
        "code": "public void verifyProceedButtonIsEnabledOrDisabled(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//button[text()='\" + LabelName + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"aria-disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Not Editable\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(getareaDisabledAttributeValue + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method verifies whether a button with a specific label is enabled or disabled. It uses Selenium WebDriver to locate the button, wait for it to be displayed, and then checks its aria-disabled attribute value. If the button is not editable (aria-disabled = \"true\"), it takes a manual screenshot with a message indicating that the field is not editable. If the button is editable (aria-disabled = \"false\"), it takes another manual screenshot with a message indicating that the field is editable. If an exception occurs during execution, it still takes a manual screenshot with a generic message.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnProceedButtonInAddressSection",
        "code": "public void clickOnProceedButtonInAddressSection(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=(//button[text()='\" + LabelName + \"'])[2]\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tclickOn(targetField);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnProceedButtonInAddressSection`, simulates a click on a button with a specific label name within an \"Address\" section. \n\nThe method first waits for the page to load and then searches for a button element using XPath that matches the provided label name. If the button is found and displayed, it clicks on the button and waits for 2 seconds before continuing. If the button is not found or displayed, it fails the test step with an error message.\n\nIf any exception occurs during the execution of this method, it takes a manual screenshot with the caption \"the Field is Editable\".",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnProceedButtonInAddressSectionCard",
        "code": "public void clickOnProceedButtonInAddressSectionCard(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = \"#xpath=//button[text()='\" + LabelName + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tclickOn(targetField);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tmanualScreenshot(\" the Field is Editable\");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnProceedButtonInAddressSectionCard`, simulates a click on a button with a specific label name within an \"Address Section Card\" page. It uses Selenium WebDriver to:\n\n1. Wait for the page to load\n2. Find the button with the specified label name using XPath\n3. Wait for the button to be displayed (up to 5 seconds)\n4. If the button is found and displayed, click on it and wait for 2 seconds\n5. If the button is not found or displayed, fail the test step\n\nIf an exception occurs during this process, it will take a manual screenshot with the caption \"the Field is Editable\".",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "selectValueFromDropdownAddressSection",
        "code": "public void selectValueFromDropdownAddressSection(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\t;\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//..//..//div//button//span)[1]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownAddressSection`, is used to select a specific value from a drop-down menu. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 3 seconds using the `waitTime` method.\n2. Creates an XPath expression to locate the dropdown element based on its name.\n3. Waits for the dropdown element to be displayed using the `waitForElement` method, with a timeout of 10 seconds.\n4. Scrolls down to the dropdown element using the `scrollbycordinates` method.\n5. Checks if the dropdown element is displayed using the `isElementDisplayed` method, with an additional wait time of `elementLoadWaitTime`.\n6. If the dropdown element is displayed:\n\t* Scrolls to the dropdown element using the `scrollToWebElement` method.\n\t* Locates the option value from the dropdown list using an XPath expression.\n\t* Iterates up to 2 times:\n\t\t+ Clicks on the dropdown element using the `clickOnSpecialElement` method.\n\t\t+ Waits for 1 second.\n\t\t+ Checks if the option value is displayed using the `waitForElement` method, with a timeout of 6 seconds.\n\t\t+ If the option value is displayed, clicks on it and sets a flag to `true`.\n7. If the flag is still `false` after iterating up to 2 times, it means the desired value was not found in the dropdown list, so the test step fails.\n8. Takes a manual screenshot if the selection was successful.\n\nIf the dropdown element is not displayed, the method fails the test step with an error message.\n\nThe method also includes exception handling, which catches any exceptions that occur during the execution of the method and fails the test step with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enterValueInTextFieldOnRevamp",
        "code": "public void enterValueInTextFieldOnRevamp(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//..//div//input\";\n\t\t\twaitTime(2);\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethodManualScreenShot(field, labelName);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextFieldOnRevamp`, enters a given value into a text field on the Revamp application. It takes two parameters: `labelName` (the label associated with the text field) and `value` (the value to be entered).\n\nThe method first constructs an XPath expression to locate the text field based on the provided label name. It then waits for the element to appear, scrolls into view if necessary, and checks if the element is displayed. If it is, the method enters the given value into the text field, highlights the field with a high lighter (presumably for debugging purposes), takes a manual screenshot of the screen, and waits for 2 seconds before continuing.\n\nIf the element is not present or an exception occurs during execution, the method fails the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enterValueInAddressSectionAddressEnrichment",
        "code": "public void enterValueInAddressSectionAddressEnrichment(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName + \"')]//..//..//div//input\";\n\t\t\twaitTime(2);\n\t\t\twaitForElement(field, 10);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tString lookupValue = value + \"#xpath=//ul//li//span//span/div/span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(lookupValue, 35)) {\n\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInAddressSectionAddressEnrichment`, enters a given value into a specific field with the provided label name in an address section. \n\nThe method first constructs an XPath expression to locate the input field based on the label name. It then waits for the element to be displayed, scrolls to it if necessary, and highlights the field using a highlighter tool (if available). If the field is displayed, the method enters the provided value into the field and checks if a lookup value matching the entered value exists. If the lookup value is found, it clicks on that value.\n\nIf any of these steps fail or the element is not present, the method logs a test step failure with an appropriate message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "clickOnButtonOnPageLayoutCheckApproval",
        "code": "public void clickOnButtonOnPageLayoutCheckApproval(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString button = buttonName + \"#xpath=(//button[normalize-space()='\" + buttonName + \"'])[1]\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(4);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonOnPageLayoutCheckApproval`, simulates a user clicking on a specific button on a web page. The method takes a `buttonName` parameter and attempts to locate the corresponding button using XPath.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 2 seconds using the `waitTime(2)` method.\n2. Creates an XPath expression to find the button with the given `buttonName`. The expression is constructed by concatenating the `buttonName` with a static XPath path that targets a button element containing the same text as the `buttonName`.\n3. Waits up to 15 seconds for the button to be present on the page using the `waitForElement(button, 15)` method.\n4. Checks if the button is displayed within 6 seconds using the `isElementDisplayed(button, 6)` method. If it's not displayed, the method fails with a test step failure message.\n5. If the button is displayed, scrolls to the element and then clicks on it using the `scrollToElement(button)` and `clickOn(button)` methods, respectively.\n6. Waits for 4 seconds after clicking the button using the `waitTime(4)` method.\n7. If any exceptions occur during the execution of these steps, the method catches them and fails the test step with a message indicating that the click operation failed.\n\nNote that this method uses several utility methods (e.g., `waitTime`, `waitForElement`, `isElementDisplayed`, `scrollToElement`, and `clickOn`) that are not shown in this code snippet. These utility methods are likely part of a larger automation framework or library.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "enableToggleButtonPOSLayout",
        "code": "public void enableToggleButtonPOSLayout(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\t;\n\t\t\tString chk_toggle = \"Toggle Button#xpath=(//span[text()='Address Change flag ']//..//..//span/span)[1]\";\n\t\t\twaitForElement(chk_toggle, 15);\n\t\t\tif (isElementDisplayed(chk_toggle, 6)) {\n\t\t\t\tclickOnSpecialElement(chk_toggle);\n\t\t\t\twaitTime(4);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" toggle button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `enableToggleButtonPOSLayout`, enables a toggle button with the given name using a specific XPath. It waits for the element to be displayed and then clicks on it if present. If the element is not found or clicking fails, it reports a test step failure.\n\nHere's a breakdown of what the method does:\n\n1. Waits for 2 seconds using `waitTime(2)`.\n2. Checks for the presence of a toggle button with the given name (`buttonName`) using XPath.\n3. If the element is found, waits for up to 15 seconds for it to be displayed using `waitForElement(chk_toggle, 15)`.\n4. If the element is displayed, clicks on it using `clickOnSpecialElement(chk_toggle)`. Waits for another 4 seconds after clicking.\n5. If the element is not found or clicking fails, reports a test step failure with an error message.\n\nThe method catches any exceptions that may occur during execution and reports a test step failure if one occurs.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "DealerReVampCustomerPage",
        "function_name": "expandOnChildComponentInDealerRevamp",
        "code": "public void expandOnChildComponentInDealerRevamp(String LabelName) {\n\t\ttry {\n\t\t\tString Element = \"LabelName#xpath=//*[contains(text(),'\" + LabelName + \"')]//../../input[@name='toggle']\";\n\t\t\twaitForElement(Element, 20);\n\t\t\tscrollToElement(Element);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tmanualScreenshot(LabelName + \"is in Expand Mode\");\n\n\t\t\t} else {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyComponentStatus\" + e.getMessage());\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `expandOnChildComponentInDealerRevamp`, appears to be a part of an automation test script. Its primary function is to expand a child component on the Dealer Revamp page based on a given label name.\n\nHere's a step-by-step breakdown:\n\n1. It attempts to locate an element on the page using XPath, which contains the provided `LabelName`. The element is expected to be an input field with the name \"toggle\".\n2. If the element is displayed within 20 seconds (as set by `waitForElement`), it will scroll to that element.\n3. If the element is displayed, it will manually take a screenshot (using `manualScreenshot`) with the label name as part of the filename, indicating that the component is in an expanded state.\n4. If the element is not displayed, it will still scroll to it and then click on a special element (likely another input field or button) using `clickOnSpecialElement`.\n5. If any exceptions occur during execution, it will catch them and mark the test step as failed using `testStepFailed`.\n\nIn summary, this method aims to expand a child component based on a given label name, taking screenshots along the way, and handling any exceptions that may arise.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = LabelName + \" button #xpath=//button[text()='\" + LabelName + \"']\";\n\t\t\twaitForElement(targetField, 20);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tclickOnSpecialElement(targetField);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton`, simulates a mouse click on a button with a specific label name. It first waits for the page to load and then searches for the button using XPath. If the button is found, it scrolls to the element if necessary and clicks on it. If the button is not found after a certain timeout, the test step fails. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInDigiLockerDOBField",
        "code": "public void enterValueInDigiLockerDOBField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=(//div[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//../parent::div//lightning-datepicker//input)[last()]\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\t\tele.clear();\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva\n\t * @since : Dec 5, 2023\n\t * @purpose : This method is used to click buttons in CustomerPage.\n\t * @param LabelName:Name of the field should be passed in String.\n\t */",
        "description": "This Java method, `enterValueInDigiLockerDOBField`, enters a given value into a date of birth (DOB) field in DigiLocker. \n\nThe method takes two parameters: `labelName` and `value`. The `labelName` is the name of the DOB field, and the `value` is the actual date of birth to be entered.\n\nHere's what the method does:\n\n1. It checks if the provided value is not empty.\n2. If the value is not empty, it constructs an XPath expression based on the label name to locate the DOB field in the UI.\n3. It waits for the element to be present and displayed using a wait function.\n4. If the element is displayed, it clears any existing text in the field and enters the provided value.\n5. If the element is not displayed, it reports a test failure.\n6. If the value is empty, it logs an info message indicating that no value was provided.\n\nThe method also catches any exceptions that may occur during execution and reports a test failure with the exception message if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnButtonForAddressProceedOnTab",
        "code": "public void clickOnButtonForAddressProceedOnTab(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = LabelName + \" button #xpath=//div[text()='Select Address']//..//div//button[text()='\"\n\t\t\t\t\t+ LabelName + \"']\";\n\t\t\twaitForElement(targetField, 20);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tclickOnSpecialElement(targetField);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To open the component in customer page\n\t * @param LabelName :\n\t */",
        "description": "This Java method is used to simulate a click on a button with a specific label name that appears after selecting an address. The method attempts to load the page, wait for the target element to appear, and then scroll and click on it if it's displayed within a certain time frame (5 seconds). If the element is not present or fails to be clicked, the test step will fail with an error message.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "OpenComponentSection",
        "code": "public void OpenComponentSection(String LabelName) {\n\t\ttry {\n\t\t\tString componentTab = LabelName +\"#xpath=//*[contains(text(),'\" + LabelName + \"')]\";\n\t\t\twaitForElement(componentTab, 20);\n\t\t\tif (isElementDisplayed(componentTab)) {\n\t\t\t\tscrollToWebElement(componentTab);\n\t\t\t\tclickOnSpecialElement(componentTab);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" Component is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in OpenComponentSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 3, 2023\n\t * @purpose : To open the component in customer page\n\t * @param LabelName :\n\t */",
        "description": "This Java method, `OpenComponentSection`, opens a specific component section on a customer page based on the provided label name. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression to locate the component tab with the given label name.\n2. Waits for the element to be displayed (up to 20 seconds).\n3. If the element is displayed, it scrolls to the element and clicks on a special element within that section.\n4. If the element is not displayed, it fails the test step.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "OpenAssetComponentSection",
        "code": "public void OpenAssetComponentSection(String LabelName) {\n\t\ttry {\n\t\t\tString componentTab = \"LabelName#xpath=//*[contains(text(),'Asset')]//../../input[@name='toggle']//..//../div[@class='accordion-tab']\";\n\t\t\t;\n\t\t\tif (isElementDisplayed(componentTab)) {\n\t\t\t\tscrollToWebElement(componentTab);\n\t\t\t\tclickOn(componentTab);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" Component is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in OpenComponentSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To Select the dropdown option in customer details.\n\t * @param dropdownName\n\t */",
        "description": "This Java method, `OpenAssetComponentSection`, is used to open a specific component section in an application. The method takes a `String` parameter `LabelName` which represents the label name of the component section.\n\nThe method first constructs a XPath expression to locate the desired component tab element. It then checks if the element is displayed using the `isElementDisplayed` method. If the element is displayed, it scrolls to the element, clicks on it, and waits for the page to load. If the element is not displayed, the method fails the test step with an error message.\n\nThe method also includes a catch block to handle any exceptions that may occur during its execution. In case of an exception, the method fails the test step with an error message containing the exception's message.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//following-sibling::div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepInfo(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, selects a specific value from a dropdown menu. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the dropdown element.\n2. It waits for the dropdown element to load (up to 10 seconds).\n3. If the dropdown is displayed, it scrolls to the element and then attempts to select the specified value from the dropdown menu.\n4. The method uses a loop to click on the dropdown and wait for the selected value to appear in the list up to two times.\n5. If the value is successfully selected, it logs a test step success message.\n6. If the value cannot be selected (e.g., because it's not present in the dropdown), it logs a test step failure message with an error message.\n7. If any exception occurs during the execution of the method, it catches the exception and logs a test step failure message with the error message.\n\nIn summary, this method helps automate the process of selecting a specific value from a dropdown menu in a web application.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInTextFieldOnOldAddressLineSection",
        "code": "public void enterValueInTextFieldOnOldAddressLineSection(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName\n\t\t\t\t\t+ \" textfield#xpath=//p[text()='Address Details']//..//..//div//slot//div//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//..//..//div//input|//p[text()='Address Details']//..//..//div//slot//div//label[text()='\"+ labelName + \"']//..//..//div//textarea\";\n\t\t\t\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 3, 2023\n\t * @purpose : To Select the dropdown option in customer details.\n\t * @param dropdownName\n\t */",
        "description": "This Java method is used to enter a value into a text field on an \"Old Address Line\" section of a web page. \n\nIt takes two parameters: `labelName` (the name of the label associated with the text field) and `value` (the value to be entered in the text field). \n\nThe method first constructs an XPath expression to locate the text field based on the provided `labelName`. It then waits for the element to be displayed, highlights it if it's found, and enters the provided `value` into the text field. If the element is not present or cannot be entered, the method fails the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectValueFromDropdownForBypassReason",
        "code": "public void selectValueFromDropdownForBypassReason(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[contains(text(),'\" + dropdownName + \"')]//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//following-sibling::div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepInfo(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To select the list option in Picklist option.\n\t * @param listBoxName : Name of the field should be passed.\n\t * @param searchValue : Value should be passed in String format.\n\t */",
        "description": "This Java method is used to select a value from a dropdown menu (also known as a picklist) for a bypass reason. It takes two parameters: `dropdownName` and `value`. \n\nThe method first tries to locate the dropdown element using an XPath expression. If the element is found, it scrolls to the dropdown, then locates the specific option in the list that matches the provided value. It then clicks on the option to select it.\n\nIf the selection is successful, the method logs a test step success message with the selected value and dropdown name. However, if the option is not present in the dropdown or the dropdown itself is not found, the method logs a test step failure message with an error message. \n\nIn case of any exception during the execution of this method, it also logs a test step failure message with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "chooseValueFromListboxInAsset",
        "code": "public void chooseValueFromListboxInAsset(String listBoxName, String searchValue) {\n\t\ttry {\n\t\t\tString inputField = listBoxName + \" listbox #xpath=//label[contains(text(),'\" + listBoxName\n\t\t\t\t\t+ \"')]//..//input\";;\n\t\t\twaitForElement(inputField, 10);\n\t\t\tif (isElementDisplayed(inputField, 6)) {\n\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t// WebElement input = findWebElement(inputField);\n\t\t\t\t// char ch[] = searchValue.toCharArray();\n\t\t\t\t// for (char c : ch) {\n\t\t\t\t// String textValue = String.valueOf(c);\n\t\t\t\t// input.sendKeys(textValue);\n\t\t\t\t// Thread.sleep(200);\n\t\t\t\t// }\n\t\t\t\ttypeIn(inputField, searchValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString listBox = listBoxName + \" listbox#xpath=//label[contains(text(),'\"+listBoxName+\"')]//..//input/parent::div/following-sibling::div//ul\";\n\t\t\t\tif (isElementDisplayed(listBox, 6)) {\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\tclickOn(listBox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(listBoxName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromListboxInAsset. Exception:  \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To enter the Invoice or Gross loan amount in Asset component.\n\t * @param labelName\n\t * @param value\n\t */",
        "description": "This Java method is used to select a value from a listbox (dropdown) in an asset component. The method takes two parameters: `listBoxName` and `searchValue`. \n\nIt first tries to find the input field associated with the listbox, waits for it to be displayed, and then enters the search value into the input field using the `typeIn` method. \n\nAfter entering the search value, it waits for the page to load and then checks if the listbox is displayed. If the listbox is displayed, it highlights the listbox and clicks on it. If the listbox is not displayed, it fails the test step. \n\nIf the input field is not found or the listbox is not displayed after entering the search value, the method also fails the test step. The method catches any exceptions that may occur during its execution and reports a failure if an exception is thrown.",
        "input": [
            "String listBoxName",
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInAssetTextField",
        "code": "public void enterValueInAssetTextField(String labelName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(field, 15);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAssetTextField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To Select the scheme value with specific record.\n\t * @param schemeValue\n\t */",
        "description": "This Java method is used to enter a specified value into an asset text field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first waits for the page to load, then searches for the label with the given name using XPath. If the element is found, it highlights the element (if highlighterMethod is implemented), enters the specified value into the field using typeIn method, and then checks if the entered value is displayed correctly. If the element is not found or any exception occurs during the process, the test step fails with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectSchemeWithValue",
        "code": "public void selectSchemeWithValue(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tdo {\n\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//p[text()='\" + schemeValue\n\t\t\t\t\t\t+ \"']/ancestor::div[@class='schemecontainer']/preceding-sibling::lightning-input//label//span[@part='indicator']\";\n\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 5);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\ttestStepPassed(schemeValue + \" scheme value is present.\");\n\t\t\t\t\tclickOn(scheme);\n\t\t\t\t\ttestStepPassed(\"Successfully \" + schemeValue + \" scheme value is selected.\"); // verifyErrorPopupMessage();\n\t\t\t\t\tconditionFlag = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (!conditionFlag);\n\n\t\t\tif (failFlag) {\n\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To capture the error message if popped up.\n\t * @return : It will return true, if error toast is appeared.\n\t */",
        "description": "This Java method is used to select a scheme with a specific value on a web page. The method takes a `String` parameter `schemeValue`, which represents the value of the scheme to be selected.\n\nThe method uses various Selenium WebDriver methods (such as `waitForPageToLoad()`, `waitForElement()`, `isElementDisplayed()`, `scrollToWebElement()`, and `clickOn()`) to navigate to the page, locate the scheme select button, and click on it. It also uses a `try-catch` block to handle any exceptions that may occur during the execution of the method.\n\nThe method has two flags: `conditionFlag` and `failFlag`. The `conditionFlag` is used to determine when the selection process is complete, while the `failFlag` is used to indicate whether the scheme value is not present on the page. If the `failFlag` is set to `true`, it means that the scheme value was not found, and an error message will be logged.\n\nThe method also uses a `do-while` loop to repeatedly select the scheme until the selection process is complete or an error occurs.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "verifyErrorPopupMessage",
        "code": "public boolean verifyErrorPopupMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(toastErrorTitleMsg, 8);\n\t\t\tif (isElementDisplayed(toastErrorTitleMsg, 8)) {\n\t\t\t\tif (getText(toastErrorTitleMsg).contains(\"Error!\")) {\n\t\t\t\t\tif (isElementDisplayed(toastErrorDescMsg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(toastErrorDescMsg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"There is no error popup is occurred.\");\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above error. we cant move further.\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error popup is occurred.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : This method is used to get the created Opportunity id value.\n\t * @return : It will return the Opportunity id value in string format.\n\t */",
        "description": "This Java method, `verifyErrorPopupMessage`, is used to verify an error popup message on a GUI application. The method waits for an element with the title \"Error!\" and checks if it's displayed. If the element is displayed, it takes a manual screenshot of the error description and sets a flag to true. If the flag is true, it marks the test step as failed due to the error. If no error popup is found, it also takes a manual screenshot indicating that there was no error. The method returns the value of the flag.\n\nThe purpose of this method appears to be to verify that an expected error has occurred and take screenshots for debugging purposes.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "getOppIdValue",
        "code": "public String getOppIdValue() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=(//th[text()='Opportunity Name']//ancestor::thead//following-sibling::tbody/tr/td/a)[1]\";\n\t\t\twaitForElement(oppurtunity, 35);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\thighLighterMethod(oppurtunity);\n\t\t\t\tmanualScreenshot(\"$Opportunity ID: \" + opportunityValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOppIdValue. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n\t/**\n\t * @author : Jeeva\n\t * @since : Dec 5, 2023\n\t * @purpose : This method is used to get the created Opportunity id value for\n\t *          ETB\n\t * @return : It will return the Opportunity id value in string format.\n\t */",
        "description": "This Java method, `getOppIdValue()`, retrieves the ID of a created opportunity and returns it as a String. The method uses Webdriver Wait and other UI automation tools to locate an element on the page with an XPath expression, waits for the element to be displayed, and then extracts its text content. If the element is not found or does not display within a certain time limit, the test step fails. The method also takes a screenshot of the highlighted element and logs the opportunity ID value.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "getOppIdValueForETB",
        "code": "public String getOppIdValueForETB() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=(//th[text()='Opportunity Name']//ancestor::thead//following-sibling::tbody/tr/td/a)[1]\";\n\t\t\twaitForElement(oppurtunity, 35);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\thighLighterMethod(oppurtunity);\n\t\t\t\tmanualScreenshot(\"$Opportunity ID: \" + opportunityValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getOppIdValue. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To enter the value in customer details fields.\n\t * @param labelName: Name of the element should be passed.\n\t * @param value      :\n\t */",
        "description": "This Java method, `getOppIdValueForETB`, retrieves the opportunity ID value from a web page and returns it as a string. It uses various Selenium WebDriver methods to locate an element on the page, wait for it to be displayed, retrieve its text content, highlight it, and take a screenshot. If the element is not found or any exception occurs during execution, the method will fail the test step.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInTextField",
        "code": "public void enterValueInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=//label[text()=\\\"\" + labelName + \"\\\"]//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To select the address type in address details section.\n\t * @param selectAddressCard : Label of the element.\n\t */",
        "description": "This Java method is used to enter a value into a text field with a specific label name. It uses an XPath expression to locate the text field based on the provided label name. The method first waits for the element to be displayed, then highlights it (if present), and finally enters the given value into the text field. If the element is not found or an exception occurs during execution, the test step fails with a corresponding error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "ChooseSelectAddressType",
        "code": "public void ChooseSelectAddressType(String selectAddressCard) {\n\t\ttry {\n\t\t\tString button = selectAddressCard + \"Select Address Section#xpath=//span[text()='\" + selectAddressCard\n\t\t\t\t\t+ \"']//..//input\";\n\t\t\twaitForElement(button, pageLoadWaitTime);\n\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(selectAddressCard + \" Address type is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in ChooseSelectAddressType. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `ChooseSelectAddressType`, appears to be a part of an automation script that interacts with a web application.\n\nThe method takes a string parameter `selectAddressCard` and uses it to construct a XPath expression for finding an HTML element on the page. The element is expected to have a specific text value matching the input `selectAddressCard`.\n\nThe method then:\n\n1. Waits for the element to be present on the page using the `waitForElement` method.\n2. Checks if the element is displayed using the `isElementDisplayed` method with a timeout of 10 seconds.\n3. If the element is displayed, it clicks on the element using the `clickOnSpecialElement` method.\n4. If the element is not displayed or an exception occurs during execution, the method logs an error message indicating that the address type is not present.\n\nThe method also catches any exceptions that may occur during its execution and logs a failure message with the exception's message.",
        "input": [
            "String selectAddressCard"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectOldAddressDetailsSection",
        "code": "public void selectOldAddressDetailsSection(String LabelName) {\n\t\ttry {\n\t\t\tString componentTab = LabelName + \" Component#xpath=//p[text()='\" + LabelName + \"']\";\n\t\t\twaitForElement(componentTab, 20);\n\t\t\tif (isElementDisplayed(componentTab)) {\n\t\t\t\tscrollToWebElement(componentTab);\n\t\t\t\tclickOnSpecialElement(componentTab);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" Component is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in OpenComponentSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To select a list option in list dropdown field.\n\t * @param labelName\n\t * @param value\n\t */",
        "description": "This Java method is used to select an old address details section on a web page. The method takes a `String` parameter `LabelName`, which represents the name of the component tab to be selected.\n\nHere's what the method does:\n\n1. It constructs a string `componentTab` by concatenating the `LabelName` with an XPath expression that targets the element with text equal to the `LabelName`.\n2. It waits for the element identified by `componentTab` to be present on the page using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods, respectively.\n4. If the element is not displayed, it fails the test step with an error message indicating that the component tab is not present.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step if an exception occurs.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "chooseValueInListOptionField",
        "code": "public void chooseValueInListOptionField(String labelName, String value) {\n\t\ttry {\n\t\t\t\tString field = labelName + \" textfield#xpath=//label[text()='\" + labelName + \"']//..//input\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\tString listOption = \"#xpath=//ul/li//span//lightning-base-combobox-formatted-text[@title='\" + value\n\t\t\t\t\t\t\t+ \"']|//ul/li[contains(text(),'\" + value + \"')] | //ul/li//span//span//div//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\t\twaitForElement(listOption, 10);\n\t\t\t\t\tif (isElementDisplayed(listOption, 3)) {\n\t\t\t\t\t\tclickOnSpecialElement(listOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \" option is not present.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueInListOptionField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\t\n\t\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To select a list option in list dropdown field.\n\t * @param labelName\n\t * @param value     :\n\t */",
        "description": "This Java method, `chooseValueInListOptionField`, is used to select a specific option from a list dropdown field in a web application. The method takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the text field with the given label name. It then waits for this element to be displayed, highlights it (if possible), types the given value into the field, and selects the option that matches the given value from the list dropdown.\n\nIf the option is not present in the list, or if the field is not present at all, the method reports a test failure. If any exception occurs during the execution of this method, it also reports a test failure with the exception message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "chooseValueInBranchListOptionField",
        "code": "public void chooseValueInBranchListOptionField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=//label[text()='\" + labelName + \"']//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tString listOption = value + \" option#xpath=//ul/li//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\twaitForElement(listOption, 5);\n\t\t\t\tif (isElementDisplayed(listOption, 3)) {\n\t\t\t\t\tclickOnSpecialElement(listOption);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueInListOptionField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To Select the dropdown option in customer details.\n\t * @param dropdownName\n\t */",
        "description": "Here is a brief description of the Java method:\n\n`chooseValueInBranchListOptionField`: This method selects a value from a dropdown list (list option) based on the provided `labelName` and `value`. It first waits for the field with the given label name to be displayed, then types in the specified value. If the value is present in the list options, it clicks on that option; otherwise, it fails the test step. The method catches any exceptions and reports a failure if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectValueFromDropdownInPersonalInfo",
        "code": "public void selectValueFromDropdownInPersonalInfo(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[text()='\" + dropdownName + \"']//..//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//..//following-sibling::div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepInfo(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdownInPersonalInfo. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To enter the value in customer details fields.\n\t * @param labelName: Name of the element should be passed.\n\t * @param value      :\n\t */",
        "description": "This Java method is used to select a specific value from a dropdown menu in the \"Personal Info\" section. \n\nThe method takes two parameters - `dropdownName` and `value`. It first tries to locate the dropdown menu by its name and waits for it to be displayed. If the dropdown is found, it scrolls down to the menu and then iterates through the options until it finds the specified value. Once the value is selected, it logs a success message in the test report. \n\nIf the value is not present in the dropdown or if the dropdown itself is not present, the method logs an error message in the test report.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInTextFieldPersonalInfo",
        "code": "public void enterValueInTextFieldPersonalInfo(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=//div[text()='\" + labelName\n\t\t\t\t\t+ \"']//..//following-sibling::*//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextFieldPersonalInfo. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : To select the radion button in customer page.\n\t * @param LabelName\n\t * @param value\n\t */",
        "description": "This Java method is used to enter a specified value into a text field with a given label name on a webpage. The method uses Selenium WebDriver to interact with the webpage. Here's a breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the text field based on the provided label name.\n2. It waits for the element to be loaded and displayed on the page.\n3. If the element is displayed, it highlights the element using a highlighter method (not shown in this code snippet).\n4. It then enters the specified value into the text field using Selenium's `typeIn` method.\n5. If the element is not displayed after waiting for a certain amount of time, the method fails the test step with an error message.\n\nThe method also includes exception handling to catch any errors that may occur during execution and report them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnRadioButton",
        "code": "public void clickOnRadioButton(String LabelName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = LabelName + \" radio button #xpath=//div[text()='\" + LabelName\n\t\t\t\t\t+ \"']//..//..//input[@type='radio' and @value='\" + value + \"']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tclickOnSpecialElement(targetField);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnRadioButton. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 5, 2023\n\t * @purpose : Search Opportunity In FOS\n\t * @param LabelName\n\t * @param value\n\t */",
        "description": "This Java method is used to click on a radio button in the user interface. It takes two parameters: `LabelName` and `value`. The method first waits for the page to load, then it constructs an XPath expression to locate the specific radio button based on its label name and value. It then waits for the element to be displayed and clicks on it if it's present within a certain time frame (5 seconds). If the element is not found or displayed within the given time, the method will fail the test step.",
        "input": [
            "String LabelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "globalSearchFOS",
        "code": "public void globalSearchFOS(String Searchvalue) {\n\t\twaitTime(10);\n\t\tString searchlist = \"#xpath=//div/input[@title='Search']\";\n\t\twaitForElement(searchlist, 10);\n\t\tif (isElementDisplayed(searchlist, 3)) {\n\n\t\t\tWebElement ele = findWebElement(searchlist);\n\t\t\ttypeIn(searchlist, Searchvalue);\n\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\twaitTime(7);\n\t\t} else {\n\t\t\ttestStepFailed(\"SearchBox is not Displayed\");\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 5, 2023\n\t * @purpose : Click On Opportunity Link in Asset Cart\n\t * @param LabelName\n\t * @param value\n\t */",
        "description": "This Java method performs a global search on a webpage using the specified `Searchvalue`. \n\nHere's what it does:\n\n1. Waits for 10 seconds.\n2. Identifies an XPath expression that points to a search input field with a title of \"Search\".\n3. Waits for the identified search input field to be displayed within 10 seconds.\n4. If the search input field is displayed, types in the specified `Searchvalue` and then presses Enter.\n5. Waits for another 7 seconds before continuing.\n\nIf the search input field is not displayed after waiting for 3 seconds, it fails the test step with a message \"SearchBox is not Displayed\".",
        "input": [
            "String Searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnLastOppurtunityNameLinkUAT",
        "code": "public String clickOnLastOppurtunityNameLinkUAT() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=(//span[text()='Opportunities']//ancestor::div//following-sibling::div/table/tbody/tr/td/a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOnSpecialElement(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 5, 2023\n\t * @purpose : Click On Opportunity Link After Global Search\n\t * @param LabelName\n\t * @param value\n\t */",
        "description": "This Java method, `clickOnLastOppurtunityNameLinkUAT`, is used to click on the last opportunity name link after a global search. It waits for the page to load, then uses an XPath expression to locate the opportunity link element. If the element is displayed within 5 seconds, it retrieves the text of the element, scrolls to the element, and clicks on it. If the element is not displayed or an exception occurs during the process, the method fails the test step with a descriptive error message. The method returns the value of the opportunity link if successful.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnCustomerLinkAfterGlobalSearchInFOS",
        "code": "public void clickOnCustomerLinkAfterGlobalSearchInFOS(String tableName, String clickableValue) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString link = tableName + \"#xpath=//table//thead//tr//th[@title='\" + tableName\n\t\t\t\t\t+ \"']//..//..//..//tbody//tr/td/a[@title='\" + clickableValue + \"']\";\n\t\t\twaitForElement(link, 20);\n\t\t\twaitTime(3);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(10);\n\t\t\t}\n\t\t\tString field = \"Error#xpath=//span[contains(text(),'unable to obtain exclusive access to this record')]\";\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(7);\n\t\t\t\tString Link = \"Assert Cart#xpath=//span[text()='Assert Cart']\";\n\t\t\t\tif (isElementDisplayed(Link, 5)) {\n\t\t\t\t\tclickOn(Link);\n\t\t\t\t\tclickOnLastOppurtunityNameLinkUAT();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(tableName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva R\n\t * @since : Dec 5, 2023\n\t * @purpose : Click On Opportunity Link After Global Search\n\t * @param LabelName\n\t * @param value\n\t */",
        "description": "This Java method is used to click on a customer link after performing a global search in FOS (Field Operations System). The method takes two parameters: `tableName` and `clickableValue`. \n\nHere's what the method does:\n\n1. Waits for 4 seconds.\n2. Creates an XPath expression based on the provided table name and clickable value to locate the customer link.\n3. Waits for the element to be present for 20 seconds.\n4. Waits for 3 seconds, then checks if the element is still present. If it is, clicks on the element.\n5. Waits for the page to load, then waits for 10 seconds.\n6. Checks if an error message indicating \"unable to obtain exclusive access to this record\" is displayed within 5 seconds. If it is:\n   - Refreshes the page.\n   - Waits for 7 seconds.\n   - Checks if the \"Assert Cart\" link is displayed within 5 seconds. If it is, clicks on it and then calls another method `clickOnLastOppurtunityNameLinkUAT()`.\n7. If any of these steps fail, the method logs a test step failure with an error message.\n\nIf an exception occurs during the execution of this method, it will log a test step failure with the error message.",
        "input": [
            "String tableName",
            "String clickableValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "searchOpportunity",
        "code": "public void searchOpportunity(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"Search Field in FOS#xpath=//input[@placeholder='Search']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tString close_popup = \"close popup#xpath=//button[@title='Close']\";\n\t\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t\twaitForElement(close_popup, 5);\n\t\t\t\tif (isElementDisplayed(close_popup, 5)) {\n\t\t\t\t\tclickOnSpecialElement(close_popup);\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(10);\n\t\t\t\t}\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForElement(link, elementLoadWaitTime);\n\t\t\t\tif (isElementDisplayed(link, elementLoadWaitTime)) {\n\t\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitTime(7);\n\t\t\t\t\tString value = searchvalue + \" record#xpath=//a[text()='\" + searchvalue + \"']\";\n\t\t\t\t\twaitForElement(value, 13);\n\t\t\t\t\tif (isElementDisplayed(value, 15)) {\n\t\t\t\t\t\tclickOn(value);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitTime(25);\n\t\t\t\t\t\tif (!(driver.getCurrentUrl().contains(\"customer\"))\n\t\t\t\t\t\t\t\t|| driver.getCurrentUrl().contains(\"opportunity\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(searchvalue + \" link is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(link + \" is not displayed\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchOpportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : This is a centralized method to perform the Opportunity creation\n\t *          functionality.\n\t */",
        "description": "This Java method `searchOpportunity(String searchvalue)` performs an opportunity creation functionality in a web application. \n\nThe method takes a `String` parameter `searchvalue`, which represents the value to be searched for in the application's search field.\n\nHere's what the method does:\n\n1. It waits for an element with the specified XPath (`\"Search Field in FOS#xpath=//input[@placeholder='Search']\"`).\n2. If the element is displayed, it types in the `searchvalue` and presses Enter.\n3. The method then waits for the search results to load.\n4. If the search result contains a link with the same text as the `searchvalue`, it clicks on that link.\n5. It waits for the page to load again and takes a manual screenshot (if the URL is not \"customer\" or \"opportunity\").\n6. The method repeats steps 1-5 up to two times, refreshing the page after each iteration if the search result is not displayed.\n\nIf any of these steps fail, it logs an error message using `testStepFailed()`.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "oppCreationOnCustomer",
        "code": "public void oppCreationOnCustomer(String modelNameValue, String invoiceAmountValue, String grossAmountValue,\n\t\t\tString schemeNameValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Opportunity Creation In Asset Section ######################\");\n\t\t\tOpenAssetComponentSection(Constants.assetSectionHeading);\n\t\t\tchooseValueFromListboxInAsset(Constants.productNameLabel, modelNameValue);\n\t\t\tenterValueInAssetTextField(Constants.invoicAmountLabel, invoiceAmountValue);\n\t\t\tenterValueInAssetTextField(Constants.grossAmountLabel, grossAmountValue);\n\t\t\tclickOnButton(Constants.generateSchemeLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tselectSchemeWithValue(schemeNameValue);\n\t\t\tclickOnButton(Constants.proceedButtonLabel);\n\t\t\tverifyErrorPopupMessage();\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in oppCreationOnCustomer. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : This is a centralized method to perform the Bypass KYC\n\t *          functionality.\n\t */",
        "description": "This Java method, named `oppCreationOnCustomer`, creates an opportunity in the asset section of a system. It takes four input parameters: `modelNameValue`, `invoiceAmountValue`, `grossAmountValue`, and `schemeNameValue`. \n\nThe method performs the following steps:\n\n1. Logs a test step information indicating that it is creating an opportunity.\n2. Opens the asset component section.\n3. Selects a product name from a list box with the given model name value.\n4. Enters invoice amount and gross amount values in respective text fields.\n5. Clicks on the \"Generate Scheme\" button.\n6. Waits until any spinners disappear.\n7. Selects a scheme with the given scheme name value.\n8. Clicks on the \"Proceed\" button.\n9. Verifies if there is an error popup message and waits until it disappears.\n\nIf any exception occurs during these steps, it logs a test step failure message with the exception message.",
        "input": [
            "String modelNameValue",
            "String invoiceAmountValue",
            "String grossAmountValue",
            "String schemeNameValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "bypassKYCSection",
        "code": "public void bypassKYCSection() {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Select 'Bypass Reason' In 'KYC Process' ######################\");\n\t\t\tOpenComponentSection(Constants.KYCProcessLabel);\n\t\t\tselectValueFromDropdownForBypassReason(Constants.bypassReasonDropdownLabel,\n\t\t\t\t\tConstants.bypassReasonDropdownValue);\n\t\t\tclickOnButton(Constants.saveBypassReasonButton);\n\t\t\twaitForPageToLoad();\n\t\t\t//clickOnButton(Constants.proceedButtonLabel);\n\t\t//\twaitForPageToLoad();\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in bypassKYCSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : This is a centralized method to Update the Address Details\n\t *          Section.\n\t */",
        "description": "This Java method, `bypassKYCSection()`, appears to be part of an automated testing framework. Its purpose is to bypass the KYC (Know Your Customer) section by selecting a reason and saving it.\n\nHere's a brief summary of what the method does:\n\n1. It logs a test step information message.\n2. It opens the \"KYC Process\" component section.\n3. It selects a value from a dropdown menu for the bypass reason.\n4. It clicks the \"Save Bypass Reason\" button.\n5. It waits for the page to load and then checks if any spinners (loading indicators) disappear.\n\nThe method catches any exceptions that may occur during execution and logs a test step failure message with the exception message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updateAddressDetailsSection",
        "code": "public void updateAddressDetailsSection(String aadharNoValue, String POATypeValue, String residenceTypeValue,\n\t\t\tString zipCodeValue, String BFLBranchValue, String addressLine1Value, String addressLine2Value,\n\t\t\tString addressLine3Value, String areaLocalityValue, String landmarkValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"[ Address Details Section ] \");\n\t\t\tOpenComponentSection(Constants.addressSectionHeading);\n\t\t\tChooseSelectAddressType(Constants.addAddressManuallyRadioBuuton);\n\t\t\tselectValueFromDropdown(Constants.poaTypeLabel, POATypeValue);\n\t\t\tenterValueInTextField(Constants.poaNoLabel, aadharNoValue);\n\t\t\tselectValueFromDropdown(Constants.residenceTypeLabel, residenceTypeValue);\n\t\t\tString url=driver.getCurrentUrl();\n\t\t\tif(url.contains(\"partial\")) {\n\t\t\tchooseValueInListOptionField(Constants.zipCodeLabel, zipCodeValue);\n\t\t\t}else {\n\t\t\t\tchooseValueInListOptionField(\"Pincode\", zipCodeValue);\n\t\t\t}\n\t\t\tchooseValueInBranchListOptionField(Constants.bflBrachLabel, BFLBranchValue);\n\t\t\tenterValueInTextField(Constants.AddressLine1Label, addressLine1Value);\n\t\t\tenterValueInTextField(Constants.AddressLine2Label, addressLine2Value);\n\t\t\tenterValueInTextField(Constants.AddressLine3Label, addressLine3Value);\n\t\t\tenterValueInTextField(Constants.AreaLocality, areaLocalityValue);\n\t\t\tenterValueInTextField(Constants.Landmark, landmarkValue);\n\t\t\tclickOnButtonForAddressProceedOnTab(Constants.proceedButtonLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAddressDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : This is a centralized method to Update the Personal Info Section.\n\t */",
        "description": "This Java method, named `updateAddressDetailsSection`, updates the address details section of an application. It takes nine input parameters: Aadhar No value, POA Type value, residence type value, zip code value, BFL Branch value, and five address-related values (address line 1, 2, 3, area locality, and landmark).\n\nThe method performs the following steps:\n\n1. Logs a test step info message indicating that it is updating the address details section.\n2. Opens the \"Address Details\" component section.\n3. Chooses the \"Add Address Manually\" option from a radio button group.\n4. Selects a POA type value from a dropdown list.\n5. Enters an Aadhar No value into a text field.\n6. Selects a residence type value from a dropdown list.\n7. If the current URL contains \"partial\", it selects a zip code value from a list option field; otherwise, it enters a pincode value into a text field.\n8. Chooses a BFL Branch value from a list option field.\n9. Enters values into address line 1, 2, and 3 text fields, area locality text field, and landmark text field.\n10. Clicks the \"Proceed\" button on the tab.\n11. Waits until any spinners disappear.\n\nThe method catches any exceptions that occur during execution and logs a test step failure message with the exception's message if an error occurs.",
        "input": [
            "String aadharNoValue",
            "String POATypeValue",
            "String residenceTypeValue",
            "String zipCodeValue",
            "String BFLBranchValue",
            "String addressLine1Value",
            "String addressLine2Value",
            "String addressLine3Value",
            "String areaLocalityValue",
            "String landmarkValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updatePersonalInfoSection",
        "code": "public void updatePersonalInfoSection(String POIOVDTypeValue, String aadharNoValue, String firstNameNCValue,\n\t\t\tString lastNameValue, String genderValue, String DOBValue, String employmentTypeValue,\n\t\t\tString creditProgramValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Personal Information Section ######################\");\n\t\t\tOpenComponentSection(Constants.personalSectionHeading);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.poiOvdLabel, POIOVDTypeValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.POIOVDNumberLabel, aadharNoValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.FirstName, firstNameNCValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.LastName, lastNameValue);\n\t\t\tclickOnRadioButton(Constants.Gender, genderValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.DateofBirthValue, DOBValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.EmploymentType, employmentTypeValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.PANAvailable, Constants.NO);\n\t\t\t\n\t\t\t// selectValueFromDropdownInPersonalInfo(Constants.CreditProgram,\n\t\t\t// creditProgramValue);\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\t// clickOnButton(Constants.checkApprovalButtonLabel);\n\t\t\t// waitTillSpinnerDisappear();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updatePersonalInfoSection. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `updatePersonalInfoSection`, updates the personal information section of a webpage or application. It takes nine input parameters:\n\n1. POIOVDTypeValue\n2. aadharNoValue\n3. firstNameNCValue\n4. lastNameValue\n5. genderValue\n6. DOBValue\n7. employmentTypeValue\n8. creditProgramValue\n\nThe method performs the following actions:\n\n1. Logs a test step message indicating that it is updating the personal information section.\n2. Opens the \"Personal Information\" component section (e.g., a tab or panel).\n3. Selects a value from a dropdown list for POIOVD type using the provided `POIOVDTypeValue`.\n4. Enters values in text fields for:\n\t* Aadhar number: `aadharNoValue`\n\t* First name: `firstNameNCValue`\n\t* Last name: `lastNameValue`\n5. Clicks on a radio button based on the provided `genderValue`.\n6. Enters a value in a text field for date of birth using `DOBValue`.\n7. Selects a value from a dropdown list for employment type using `employmentTypeValue`.\n8. Selects \"NO\" from a dropdown list for PAN availability (assuming this is a required step).\n9. Clicks the \"Save\" button to update the personal information.\n10. Waits until any spinners or loading indicators disappear, indicating that the update has completed.\n\nIf an exception occurs during these steps, the method catches it and logs a test failure message with the error message.",
        "input": [
            "String POIOVDTypeValue",
            "String aadharNoValue",
            "String firstNameNCValue",
            "String lastNameValue",
            "String genderValue",
            "String DOBValue",
            "String employmentTypeValue",
            "String creditProgramValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updatePersonalInfoSectionForPANAvailable",
        "code": "public void updatePersonalInfoSectionForPANAvailable(String POIOVDTypeValue, String aadharNoValue, String firstNameNCValue,\n\t\t\tString lastNameValue, String genderValue, String DOBValue, String employmentTypeValue,\n\t\t\tString creditProgramValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Personal Information Section ######################\");\n\t\t\tOpenComponentSection(Constants.personalSectionHeading);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.poiOvdLabel, POIOVDTypeValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.POIOVDNumberLabel, aadharNoValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.FirstName, firstNameNCValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.LastName, lastNameValue);\n\t\t\tclickOnRadioButton(Constants.Gender, genderValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.DateofBirthValue, DOBValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.EmploymentType, employmentTypeValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.PANAvailable, Constants.Yes);\n\t\t\tenterValueInTextFieldPersonalInfo(\"PAN Card Number\", generatePanNumber());\n\t\t\t\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\t// clickOnButton(Constants.checkApprovalButtonLabel);\n\t\t\t// waitTillSpinnerDisappear();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updatePersonalInfoSection. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `updatePersonalInfoSectionForPANAvailable`, updates the personal information section of a form when PAN available is selected. It takes nine input parameters:\n\n1. POIOVDTypeValue\n2. AadharNoValue\n3. firstNameNCValue\n4. lastNameValue\n5. genderValue\n6. DOBValue\n7. employmentTypeValue\n8. creditProgramValue\n\nThe method performs the following actions:\n\n* Displays a test step information message\n* Opens the personal section component\n* Fills in various fields with the provided values:\n\t+ POIOVD type and number\n\t+ First name, last name, and date of birth\n\t+ Employment type\n\t+ Gender (selects a radio button)\n* Selects \"Yes\" for PAN available\n* Generates a PAN card number and enters it into the form\n* Saves the changes and waits until the spinner disappears\n* Optionally, clicks the approval button and waits again\n\nIf any exceptions occur during the execution of this method, it catches them and reports a test step failure with an error message.",
        "input": [
            "String POIOVDTypeValue",
            "String aadharNoValue",
            "String firstNameNCValue",
            "String lastNameValue",
            "String genderValue",
            "String DOBValue",
            "String employmentTypeValue",
            "String creditProgramValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnButtonifPresent",
        "code": "public void clickOnButtonifPresent(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=(//button[text()='\" + buttonLabel + \"'])[last()]\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\tif (isElementDisplayed(button, 30)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\tmanualScreenshot(\"Click on : \" + buttonLabel);\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(optional_Btn)).build().perform();\n\t\t\t\tmanualScreenshot(\"Click on : \" + buttonLabel);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonifPresent`, attempts to click on a button with the specified label if it is present on the web page. It uses Selenium WebDriver and Actions classes to perform the click action.\n\nHere's what the method does:\n\n1. It constructs two XPath expressions: one for the main button and another for an optional button that may be nested within a specific section.\n2. It checks if the main button is displayed within 30 seconds using the `isElementDisplayed` method.\n3. If the main button is present, it scrolls to the element using `scrollToWebElement`, performs a click on the button using `Actions.click`, and takes a manual screenshot with the label \"Click on : <buttonLabel>\".\n4. If the main button is not present but the optional button is displayed within 10 seconds, it performs the same actions as above for the optional button.\n5. If neither button is present, it logs an error message indicating that the button is not present.\n\nThe method also catches any exceptions that may occur during execution and reports them using `testStepFailed`.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updateAdditionalDetailsSection",
        "code": "public void updateAdditionalDetailsSection(String fatherNameValue, String motherNameValue,\n\t\t\tString preferredLanguageValue, String maritalStatusValue, String qualificationValue,\n\t\t\tString nameofCompanyBusinessValue, String designationValue, String monthlyIncomeValue,\n\t\t\tString nameOnCardValue, String officePhoneNumberType, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Value, String officeAddressLine3Value, String areaValue,\n\t\t\tString officePincodeValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"[ Additional Details Section ]\");\n\t\t\tenterValueInTextField(Constants.fatherNameMotherNameLabel, fatherNameValue);\n\t\t\tenterValueInTextField(Constants.motherNameLabel, motherNameValue);\n\t\t\tenterValueInTextField(Constants.alternateNumberLable, generateMobileNumber());\n\t\t\tselectValueFromDropdown(Constants.preferredLanguageLabel, preferredLanguageValue);\n\t\t\tselectValueFromDropdown(\"Preferred Communication Language\", \"English\");\n\t\t\tselectValueFromDropdown(Constants.maritalStatusLable, maritalStatusValue);\n\t\t\tselectValueFromDropdown(Constants.qualificationLabel, qualificationValue);\n\t\t\tchooseValueInListOptionField(Constants.nameofCompanyBusinessLabel, nameofCompanyBusinessValue);\n\t\t\tselectValueFromDropdown(Constants.designationLabel, designationValue);\n\t\t\tselectValueFromDropdown(Constants.monthlyInconLabel, monthlyIncomeValue);\n\t\t\tenterValueInTextField(Constants.nameOnCardLabel, nameOnCardValue);\n\t\t\tselectValueFromDropdown(Constants.officePhoneNumberTypeLabel, \"Mobile\");\n\t\t\tenterValueInTextField(Constants.officePhoneNumberLabel, generateMobileNumber());\n\t\t\tenterValueInTextField(Constants.officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterValueInTextField(Constants.officeAreaLocalityLabel, areaValue);\n\t\t\tchooseValueInListOptionField(Constants.officePincodeLabel, officePincodeValue);\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAdditionalDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `updateAdditionalDetailsSection` that updates various fields and selects values from dropdown menus within an \"Additional Details Section\" of a web application or mobile app. The method takes 19 string parameters, each representing a different field or value to be updated.\n\nThe method performs the following actions:\n\n1. Logs a test step information message indicating that it is updating the Additional Details Section.\n2. Updates several text fields with the provided values:\n\t* Father's name\n\t* Mother's name\n\t* Preferred language (not actually used in this method)\n\t* Marital status\n\t* Qualification\n\t* Name of company/business\n\t* Designation\n\t* Monthly income\n\t* Name on card\n3. Selects values from dropdown menus:\n\t* Preferred communication language (hardcoded to \"English\")\n\t* Office phone number type (set to \"Mobile\")\n4. Updates several list option fields with the provided values:\n\t* Name of company/business\n\t* Office pincode\n5. Clicks on a \"Save\" button.\n6. Waits until any spinners or loaders disappear.\n\nThe method catches any exceptions that occur during its execution and reports them as test step failures.",
        "input": [
            "String fatherNameValue",
            "String motherNameValue",
            "String preferredLanguageValue",
            "String maritalStatusValue",
            "String qualificationValue",
            "String nameofCompanyBusinessValue",
            "String designationValue",
            "String monthlyIncomeValue",
            "String nameOnCardValue",
            "String officePhoneNumberType",
            "String officeAddressLine1Value",
            "String officeAddressLine2Value",
            "String officeAddressLine3Value",
            "String areaValue",
            "String officePincodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInTextFieldOnFOSRevampWithFatherNames",
        "code": "public void enterValueInTextFieldOnFOSRevampWithFatherNames(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=//label[contains(text(),'Father')]//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextFieldOnFOSRevampWithFatherNames`, enters a given value into a text field on a webpage with the label name containing the string \"Father\". \n\nThe method first constructs an XPath expression to locate the text field. It then waits for the element to be displayed and checks if it is actually visible. If the element is present, it highlights the field using a highlighter method (not shown) and enters the given value into the field. If the element is not present, the test step fails with an error message.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updateAdditionalDetailsSectionWithBFLBranch",
        "code": "public void updateAdditionalDetailsSectionWithBFLBranch(String fatherNameValue, String motherNameValue,\n\t\t\tString preferredLanguageValue, String maritalStatusValue, String qualificationValue,\n\t\t\tString nameofCompanyBusinessValue, String designationValue, String monthlyIncomeValue,\n\t\t\tString nameOnCardValue, String officePhoneNumberType, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Value, String officeAddressLine3Value, String areaValue,\n\t\t\tString officePincodeValue, String bflBranchValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Additional Details Section ######################\");\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tenterValueInTextFieldOnFOSRevampWithFatherNames(Constants.fatherNameMotherNameLabel, fatherNameValue);\n\t\t\tenterValueInTextFieldOnFOSRevampWithFatherNames(Constants.motherNameLabel, motherNameValue);\n\t\t\tenterValueInTextField(Constants.alternateNumberLable, generateMobileNumber());\n\t\t\tselectValueFromDropdown(Constants.preferredLanguageLabel, preferredLanguageValue);\n\t\t\tselectValueFromDropdown(Constants.maritalStatusLable, maritalStatusValue);\n\t\t\tselectValueFromDropdown(Constants.qualificationLabel, qualificationValue);\n\t\t\tchooseValueInBranchListOptionField(Constants.bflBrachLabel, bflBranchValue);\n\t\t\tchooseValueInListOptionField(Constants.nameofCompanyBusinessLabel, nameofCompanyBusinessValue);\n\t\t\tselectValueFromDropdown(Constants.designationLabel, designationValue);\n\t\t\tselectValueFromDropdown(Constants.monthlyInconLabel, monthlyIncomeValue);\n\t\t\tenterValueInTextField(Constants.nameOnCardLabel, nameOnCardValue);\n\t\t\tselectValueFromDropdown(Constants.officePhoneNumberTypeLabel, officePhoneNumberType);\n\t\t\tenterValueInTextField(Constants.officePhoneNumberLabel, generateMobileNumber());\n\t\t\tenterValueInTextField(Constants.officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterValueInTextField(Constants.officeAreaLocalityLabel, areaValue);\n\t\t\tchooseValueInListOptionField(Constants.officePincodeLabel, officePincodeValue);\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\t\n\t\t\tverifyErrorPopupMessage();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAdditionalDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\t\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : To click the created opp record.\n\t */",
        "description": "This Java method is used to update the Additional Details section of a record in a system. The method takes several string parameters representing different fields such as father's name, mother's name, preferred language, marital status, qualification, and more.\n\nThe method performs the following actions:\n\n1. It logs a test step information message indicating that it is updating the Additional Details section.\n2. It waits until a spinner disappears (likely indicating the completion of a previous operation).\n3. It enters values into various text fields on the screen using methods like `enterValueInTextFieldOnFOSRevampWithFatherNames` and `enterValueInTextField`.\n4. It selects values from dropdown menus using methods like `selectValueFromDropdown`.\n5. It chooses values from list option fields using methods like `chooseValueInBranchListOptionField` and `chooseValueInListOptionField`.\n6. It enters a value into a text field labeled \"Name on Card\".\n7. It selects a value from a dropdown menu labeled \"Office Phone Number Type\".\n8. It enters a value into a text field labeled \"Office Phone Number\".\n9. It enters values into various text fields labeled with office address information (line 1, line 2, line 3, and area).\n10. It chooses a value from a list option field labeled \"Office Pincode\".\n11. It clicks the \"Save\" button.\n12. It waits until a spinner disappears again to ensure the operation is complete.\n\nFinally, if any exceptions occur during the execution of this method, it logs an error message indicating that the update failed and provides the exception message.",
        "input": [
            "String fatherNameValue",
            "String motherNameValue",
            "String preferredLanguageValue",
            "String maritalStatusValue",
            "String qualificationValue",
            "String nameofCompanyBusinessValue",
            "String designationValue",
            "String monthlyIncomeValue",
            "String nameOnCardValue",
            "String officePhoneNumberType",
            "String officeAddressLine1Value",
            "String officeAddressLine2Value",
            "String officeAddressLine3Value",
            "String areaValue",
            "String officePincodeValue",
            "String bflBranchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnRecentOppurtunityName",
        "code": "public String clickOnRecentOppurtunityName() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//th[text()='Opportunity Name']//ancestor::thead//following-sibling::tbody/tr/td/a)[1]\";\n\t\t\twaitForElement(oppurtunity, 20);\n\t\t\tif (isElementPresent(oppurtunity)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOnSpecialElement(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnRecentOppurtunityName. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : To get the number of created opportunity record for the customer.\n\t */\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : To get the number of created opportunity record for the customer.\n\t */",
        "description": "This Java method, `clickOnRecentOppurtunityName()`, is used to interact with a web element on a webpage that contains an opportunity name link. The method attempts to find and click on the most recent opportunity name link within a specified time limit (20 seconds). If the link is found, it retrieves its text value, scrolls to the element, and then clicks on it. If the link is not present, the method fails the test step with an error message. The method returns the text value of the clicked opportunity name link.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "NumberOfOppurtunityNameLink",
        "code": "public void NumberOfOppurtunityNameLink(String CustomerName) {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//th[text()='Opportunity Name']/ancestor::table/parent::div//tbody//a\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 8)) {\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tList<WebElement> oppurtunities = findWebElements(oppurtunity);\n\t\t\t\tint opportunityCount = oppurtunities.size();\n\t\t\t\tmanualScreenshot(CustomerName + \" has \" + opportunityCount + \" number of opportunities\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in NumberOfOppurtunityNameLink.Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `NumberOfOppurtunityNameLink`, takes a `String` parameter `CustomerName`. It attempts to:\n\n1. Wait for an element with the XPath locator `\"//th[text()='Opportunity Name']/ancestor::table/parent::div//tbody//a\"` (the \"Oppurtunity Name link\") and wait up to 10 seconds.\n2. Check if the element is displayed within 8 seconds. If it is:\n\t* Scroll to the element.\n\t* Find all web elements matching the same XPath locator.\n\t* Get the size of the list of web elements, which represents the number of opportunities.\n\t* Take a manual screenshot with a filename indicating the customer name and the number of opportunities.\n3. If the Oppurtunity Name link is not displayed, mark the test step as failed.\n\nIf any exception occurs during the execution of this method, it will be caught and the test step will be marked as failed with an error message including the exception's message.",
        "input": [
            "String CustomerName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "clickOnButtonInSurrogateDetails",
        "code": "public void clickOnButtonInSurrogateDetails(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString targetField = LabelName + \" button #xpath=(//button[text()='\" + LabelName + \"'])[2]\";\n\t\t\twaitForElement(targetField, 20);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tscrollToWebElement(targetField);\n\t\t\t\tclickOnSpecialElement(targetField);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Jeeva\n\t * @since : Jan 17, 2024\n\t * @purpose : This is a centralized method to Update the Address Details\n\t *          Section.\n\t */",
        "description": "This Java method, `clickOnButtonInSurrogateDetails`, is used to click on a specific button with a given label name within the \"Surrogate Details\" section. It takes in a `String` parameter `LabelName` which is used to identify the button.\n\nThe method first waits for the page to load using the `waitForPageToLoad()` method, then constructs an XPath expression to locate the button based on its text and label name. It then waits for the element to be displayed within 20 seconds using the `waitForElement()` method, and checks if the element is actually displayed after 5 seconds.\n\nIf the element is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement()` and `clickOnSpecialElement()` methods respectively. If the element is not present, it fails the test step with a message indicating that the button is not present.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step if an exception occurs.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "surrogateDetailsSection",
        "code": "public void surrogateDetailsSection(String processTypeValue, String creditProgramValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\" [ Address Details Section ]\");\n\t\t\tOpenComponentSection(Constants.surrogateDetails);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.processTypeLabel, processTypeValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.creditProgramLabel, creditProgramValue);\n//\t\t\tString url=driver.getCurrentUrl();\n//\t\t\tif (url.contains(\"partial\")) {\n//\t\t\t\tselectValueFromDropdownInPersonalInfo(Constants.SourcingSurrogateInfo3Label,\n//\t\t\t\t\t\tConstants.SourcingSurrogateInfo3Value);\n//\t\t\t}\n\n\t\t\tclickOnButtonInSurrogateDetails(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tclickOnButton(Constants.checkApprovalButtonLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAddressDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\t\n\n\t/**\n\t * @author : Saranya\n\t * @since : Mar 01, 2024\n\t * @purpose : To verify the message in spinner.\n\t */",
        "description": "This Java method is used to update the Surrogate Details section of a form. It takes two string parameters: `processTypeValue` and `creditProgramValue`. \n\nThe method performs the following steps:\n\n1. It records a test step information with the label \" [ Address Details Section ]\".\n2. It opens the Surrogate Details component.\n3. It selects the specified values from dropdown menus for Process Type and Credit Program.\n4. It clicks the Save button in the Surrogate Details section.\n5. It waits until the spinner disappears.\n6. It clicks the Check Approval button.\n7. Again, it waits until the spinner disappears.\n\nIf any exception occurs during these steps, it records a test step failure with the error message.",
        "input": [
            "String processTypeValue",
            "String creditProgramValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "verifyNotificationMessageIsDisplayedInSpinner",
        "code": "public void verifyNotificationMessageIsDisplayedInSpinner() {\n\t\ttry {\n\t\t\tString field = \"Message #xpath=//lightning-spinner[@data-text='Hold on! Underwriting is in Progress']//div//span\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\"'Hold on! Underwriting is in Progress' message is displayed and FOS not allowed to change anything on the page\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\"'Hold on! Underwriting is in Progress' message is not displayed and FOS is allowed to change the data on the page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyNotificationMesaageInSpinner. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Saranya\n\t * @since : Mar 01, 2024\n\t * @purpose : To verify the message in spinner.\n\t */",
        "description": "This Java method is used to verify that a specific notification message (\"Hold on! Underwriting is in Progress\") is displayed in a spinner element. The method uses various Selenium WebDriver methods such as `waitForElement`, `isElementPresent`, and `scrollToWebElement` to interact with the UI element. If the message is displayed, it takes a manual screenshot as evidence; otherwise, it fails the test step. The method also handles any exceptions that may occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "verifyNotificationMessageIsNotDisplayedInSpinner",
        "code": "public void verifyNotificationMessageIsNotDisplayedInSpinner() {\n\t\ttry {\n\t\t\tString field = \"Message #xpath=//lightning-spinner[@data-text='Hold on! Underwriting is in Progress']//div//span\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\"'Hold on! Underwriting is in Progress' message is displayed and FOS not allowed to change anything on the page\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\"'Hold on! Underwriting is in Progress' message is not displayed and FOS is allowed to change the data on the page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyNotificationMesaageInSpinner. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Saranya\n\t * @since : Mar 01, 2024\n\t * @purpose : To verify the message in spinner.\n\t */",
        "description": "This Java method is used to verify that a specific notification message (\"Hold on! Underwriting is in Progress\") is not displayed in a spinner component. The method uses various Selenium WebDriver methods such as `waitForElement`, `isElementPresent`, `scrollToWebElement`, and `highLighterMethod` to interact with the UI element.\n\nHere's a breakdown of what the method does:\n\n1. It waits for an element matching the specified XPath (field) to be present on the page.\n2. If the element is found, it scrolls to that element and highlights it using the `highLighterMethod`.\n3. If the element is not displayed, it takes a manual screenshot with a message indicating that the message is not displayed and FOS (Full Online Service) is allowed to change data on the page.\n4. If any exception occurs during the execution of this method, it fails the test step with an error message.\n\nThe purpose of this method is to verify that the notification message is not displayed in the spinner component, which indicates that the system is functioning as expected and FOS can proceed with changes.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "getTextValueFromNonEditableField",
        "code": "public String getTextValueFromNonEditableField(String label, String ExpectedValue) {\n\t\tString Value = null;\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//label[text()='\" + label + \"']/following-sibling::div//textarea\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tValue = getText(field);\n\t\t\t\tif (Value.equals(ExpectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] is stamped in \" + label);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"[ \" + Value + \" ] is stamped in \" + label + \" field instead of \" + ExpectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValueFromNonEditableField. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}\n\n\t/**\n\t * @author : Saranya\n\t * @since : Mar 01, 2024\n\t * @purpose : To verify the message in spinner.\n\t */",
        "description": "This Java method, `getTextValueFromNonEditableField`, is used to retrieve the text value from a non-editable field (specifically, a textarea) on a webpage. It takes two input parameters: `label` and `ExpectedValue`. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label.\n2. It waits for the element to be present and then scrolls to it if necessary.\n3. If the element is present, it highlights the element (presumably for visual debugging purposes).\n4. It retrieves the text value from the textarea using the `getText` method.\n5. It compares the retrieved text value with the expected value provided as an input parameter.\n6. Based on the comparison result, it either takes a manual screenshot or reports a test failure.\n7. If the element is not present, it reports a test failure.\n\nThe method returns the retrieved text value.",
        "input": [
            "String label",
            "String ExpectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "verifyBannerMessageOnCustomerPage",
        "code": "public void verifyBannerMessageOnCustomerPage(boolean flag) {\n\t\ttry {\n\t\t\tString field = \"Message #xpath=//div[contains(@class,'banner-container')]//lightning-formatted-rich-text//span\";\n\t\t\tif (flag == true) {\n\t\t\t\twaitForElement(field, 20);\n\t\t\t\tif (isElementPresent(field)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tmanualScreenshot(\"[ \" + getText(field) + \" ] banner message is displayed on customer page\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Banner message is not displayed on customer page\");\n\t\t\t\t}\n\t\t\t} else if (flag == false) {\n\t\t\t\tif (isElementPresent(field)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttestStepFailed(\"[ \" + getText(field) + \" ] banner message is displayed on customer page\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Banner message is not displayed on customer page\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyBannerMessageOnCustomerPage. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Saranya\n\t * @since : Mar 01, 2024\n\t * @purpose : To verify Bajaj Finserv App Status On CustomerPage.\n\t */",
        "description": "This Java method, `verifyBannerMessageOnCustomerPage`, verifies the presence and content of a banner message on a customer page. The method takes a boolean flag as input, which determines whether to expect the banner message to be present or not.\n\nHere's what the method does:\n\n1. It tries to locate an element with the specified XPath (using the `field` variable) that contains the banner message.\n2. If the flag is set to true, it waits for the element to appear, then checks if the element is actually present on the page. If it is, it scrolls to the element and takes a manual screenshot of the banner message content. If not, it fails the test step.\n3. If the flag is set to false, it checks if the element is already present on the page. If it is, it fails the test step with an error message indicating that the banner message should not be displayed. If not, it takes a manual screenshot of the page without any issues.\n\nThe method also includes exception handling to catch and report any errors that may occur during its execution.",
        "input": [
            "boolean flag"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "verifyBajajFinservAppStatusOnCustomerPage",
        "code": "public void verifyBajajFinservAppStatusOnCustomerPage(boolean flag) {\n\t\ttry {\n\t\t\tString frame = \"iframe #xpath=//iframe[@title='3in1']\";\n\t\t\tString field = \"Bajaj Finserv App Status #xpath=//h2[text()='Bajaj Finserv App Status']\";\n\t\t\tif (flag == true) {\n\t\t\t\tif (isElementDisplayed(frame, 5)) {\n\t\t\t\t\tswitchToFrame(frame);\n\t\t\t\t\twaitForElement(field, 20);\n\t\t\t\t\tif (isElementPresent(field)) {\n\t\t\t\t\t\tscrollToElement(field);\n\t\t\t\t\t\tmanualScreenshot(\"Bajaj Finserv App Status is Visible on Customer Details Page \");\n\t\t\t\t\t\tswitchToDefaultFrame();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Bajaj Finserv App Status is not Visible on Customer Details Page.\");\n\t\t\t\t}\n\t\t\t} else if (flag == false) {\n\t\t\t\tif (isElementDisplayed(frame, 5)) {\n\t\t\t\t\tswitchToFrame(frame);\n\t\t\t\t\tif (isElementPresent(field)) {\n\t\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\t\ttestStepFailed(\"Bajaj Finserv App Status is Visible on Customer Details Page \");\n\t\t\t\t\t\tswitchToDefaultFrame();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Bajaj Finserv App Status is not Visible on Customer Details Page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyBajajFinservAppStatusOnCustomerPage. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyBajajFinservAppStatusOnCustomerPage`, verifies the visibility of the Bajaj Finserv App Status on a customer details page in an application. The method takes a boolean parameter `flag` which seems to indicate whether the test is expected to pass or fail.\n\nThe method uses various Selenium WebDriver methods, such as `isElementDisplayed`, `switchToFrame`, `waitForElement`, and `scrollToElement`, to interact with the web page and verify the visibility of the Bajaj Finserv App Status. If the status is visible, it takes a manual screenshot with a specific message. If the status is not visible or an exception occurs, it reports a test failure.\n\nThe method has two main branches depending on the value of `flag`. If `flag` is true, the method expects the Bajaj Finserv App Status to be visible and will report a test failure if it's not. If `flag` is false, the method expects the status to be invisible and will report a test failure if it's visible.\n\nOverall, this method appears to be part of an automated testing framework for a web application, likely used to verify specific functionality or UI elements.",
        "input": [
            "boolean flag"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updatePersonalInfoSectionForPartial",
        "code": "public void updatePersonalInfoSectionForPartial(String POIOVDTypeValue, String aadharNoValue,\n\t\t\tString firstNameNCValue, String lastNameValue, String genderValue, String DOBValue,\n\t\t\tString employmentTypeValue, String creditProgramValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Personal Information Section ######################\");\n\t\t\tOpenComponentSection(Constants.personalSectionHeading);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.poiOvdLabel, POIOVDTypeValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.POIOVDNumberLabel, aadharNoValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.FirstName, firstNameNCValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.LastName, lastNameValue);\n\t\t\tclickOnRadioButton(Constants.Gender, genderValue);\n\t\t\tenterValueInTextFieldPersonalInfo(Constants.DateofBirthValue, DOBValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.EmploymentType, employmentTypeValue);\n\t\t\tselectValueFromDropdownInPersonalInfo(Constants.PANAvailable, Constants.NO);\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tverifyErrorPopupMessage();\n\t\t\t// clickOnButton(Constants.checkApprovalButtonLabel);\n\t\t\t// waitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updatePersonalInfoSection. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method updates the Personal Information Section of a partial application form. It takes 9 parameters that represent various fields to be filled, such as POIOVD Type, Aadhar Number, First Name, Last Name, Gender, Date of Birth, Employment Type, and PAN Availability.\n\nThe method performs the following actions:\n\n1. Logs a test step information message.\n2. Opens the Personal Information Section component.\n3. Selects a value from a dropdown list for POIOVD Type.\n4. Enters values into text fields for Aadhar Number, First Name, Last Name, Date of Birth, and Employment Type.\n5. Clicks on a radio button based on the provided gender value.\n6. Selects \"No\" as the PAN Availability option.\n7. Clicks the Save button.\n8. Waits until any spinner or loading icon disappears.\n9. Verifies that an error popup message is not displayed (if there are no errors).\n10. If there are errors, logs a test step failure message and stops.\n\nThe method catches any exceptions that occur during execution and logs a test step failure message with the exception message.",
        "input": [
            "String POIOVDTypeValue",
            "String aadharNoValue",
            "String firstNameNCValue",
            "String lastNameValue",
            "String genderValue",
            "String DOBValue",
            "String employmentTypeValue",
            "String creditProgramValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "selectToggleFromAddresDetailsSectionUnderPostDoTab",
        "code": "public void selectToggleFromAddresDetailsSectionUnderPostDoTab() {\n\t\ttry {\n\t\t\twaitTime(10);\n\t\t\tString doProcessTab = \"#xpath=//a[contains(@title,'Do Process And Cross Sell')]\";\n\t\t\tif (isElementDisplayed(doProcessTab, 35)) {\n\t\t\t\tclickOnSpecialElement(doProcessTab);\n\t\t\t\tString chk_toggle = \"Toggle Button#xpath=(//span[contains(@id,'toggle')])[1]\";\n\t\t\t\tif (isElementDisplayed(chk_toggle, 20)) {\n\t\t\t\t\tif (!findWebElement(chk_toggle).isSelected()) {\n\t\t\t\t\t\tclickOnSpecialElement(chk_toggle);\n\t\t\t\t\t\twaitTillSpinnerDisappear();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(\"Toogle is already selected\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Toogle is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Do Process And Cross Sell tab is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"select Toggle Under Post Do Tab failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectToggleFromAddresDetailsSectionUnderPostDoTab`, is used to select a toggle button under the \"Do Process And Cross Sell\" tab in an application. The method first waits for 10 seconds using the `waitTime` method. It then checks if the \"Do Process And Cross Sell\" tab is displayed within 35 seconds. If it is, the method clicks on that tab and then searches for a toggle button with the specified XPath. If the toggle button is found and not selected, the method selects it by clicking on it. The method also takes manual screenshots at various points to capture the state of the application. If any exceptions occur during the execution of this method, they are logged and the test step fails.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updateAddressDetailsSectionForPartialRevampITUAT",
        "code": "public void updateAddressDetailsSectionForPartialRevampITUAT(String aadharNoValue, String POATypeValue, String residenceTypeValue,\n\t\t\tString zipCodeValue, String BFLBranchValue, String addressLine1Value, String addressLine2Value,\n\t\t\tString addressLine3Value, String areaLocalityValue, String landmarkValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"[ Address Details Section ]\");\n\t\t\tselectOldAddressDetailsSection(Constants.addressSectionHeading);\n\t\t\tChooseSelectAddressType(Constants.addAddressManuallyRadioBuuton);\n\t\t\tselectToggleFromAddresDetailsSectionUnderPostDoTab();\n\t\t\tselectValueFromDropdown(Constants.poaTypeLabel, POATypeValue);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.poaNoLabel, aadharNoValue);\n\t\t\tselectValueFromDropdown(Constants.residenceTypeLabel, residenceTypeValue);\n\t\t\tchooseValueInListOptionField(Constants.zipCodeLabel, zipCodeValue);\n\t\t\tchooseValueInListOptionField(Constants.bflBrachLabel, BFLBranchValue);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.AddressLine1Label, addressLine1Value);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.AddressLine2Label, addressLine2Value);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.AddressLine3Label, addressLine3Value);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.AreaLocality, areaLocalityValue);\n\t\t\tenterValueInTextFieldOnOldAddressLineSection(Constants.Landmark, landmarkValue);\n\t\t\tclickOnButtonForAddressProceedOnTab(Constants.proceedButtonLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAddressDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`updateAddressDetailsSectionForPartialRevampITUAT`: This method updates the Address Details Section for partial revamp ITUAT (Indian Telecommunications Union Area Terminal) process.\n\nIt takes 11 input parameters: AADHAR No, POA Type, Residence Type, Zip Code, BFL Branch, and five address line values. The method performs the following actions:\n\n1. Logs a test step information.\n2. Selects the old Address Details Section.\n3. Chooses to add an address manually.\n4. Toggles the Addres Details Section under the Post Do Tab.\n5. Enters or selects values for various fields, including POA Type, AADHAR No, Residence Type, Zip Code, BFL Branch, and three address line values.\n6. Clicks on the Proceed button to complete the process.\n7. Waits until the spinner disappears.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the error message.",
        "input": [
            "String aadharNoValue",
            "String POATypeValue",
            "String residenceTypeValue",
            "String zipCodeValue",
            "String BFLBranchValue",
            "String addressLine1Value",
            "String addressLine2Value",
            "String addressLine3Value",
            "String areaLocalityValue",
            "String landmarkValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "enterValueInTextFieldOnFOSRevampWithMotherNames",
        "code": "public void enterValueInTextFieldOnFOSRevampWithMotherNames(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=//label[contains(text(),'Mother')]//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextFieldOnFOSRevampWithMotherNames`, enters a given value into a text field on the FOS Revamp page with a label containing the string \"Mother\". The method uses Selenium WebDriver to interact with the UI element. It first tries to locate the text field by its XPath and waits for it to be displayed. If the field is found, it highlights the field using a highlighting mechanism (likely a Selenium extension), enters the given value into the field, and then checks if the operation was successful. If any exceptions occur during this process, the method catches them and marks the test step as failed with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "chooseValueInListOptionFieldPArtialForNameOfComplayBusinness",
        "code": "public void chooseValueInListOptionFieldPArtialForNameOfComplayBusinness(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=(//label[text()='\"+labelName+\"']//..//..//div//input)[1]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tString spliceValue = value.substring(0, 5);\n\t\t\t\ttypeIn(field, spliceValue);\n\t\t\t\tString listOption = \"#xpath=//ul//li[text()='\"+value+\"']\";\n\t\t\t\twaitForElement(listOption, 10);\n\t\t\t\tif (isElementDisplayed(listOption, 3)) {\n\t\t\t\t\tclickOnSpecialElement(listOption);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueInListOptionField. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueInListOptionFieldPArtialForNameOfComplayBusinness`, is used to select a value from a list option field in a partial automation framework for a business application. \n\nThe method takes two string parameters: `labelName` and `value`. It uses these values to construct an XPath expression that locates the text field with the given label name, then waits for this element to be displayed before attempting to interact with it.\n\nIf the element is found, the method types in a substring of the provided value (up to 5 characters) into the text field. It then constructs another XPath expression to locate the list option that matches the full value and waits for this element to be displayed.\n\nIf both elements are found, the method clicks on the matching list option. If either element is not found, it fails the test step with a descriptive error message. \n\nThe method also includes try-catch logic to handle any exceptions that may occur during execution, and will fail the test step if an exception is thrown.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "chooseValueInListOptionFieldPArtialForOfficePincode",
        "code": "public void chooseValueInListOptionFieldPArtialForOfficePincode(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \" textfield#xpath=(//div/label[text()='\"+labelName+\"']//..//div//input)[1]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString spliceValue = value.substring(0, 6);\n\t\t\t\ttypeIn(field, spliceValue);\n\t\t\t\tclearEditBox(field);\n\t\t\t\ttypeIn(field, spliceValue);\n\t\t\t\tString listOption = \"#xpath=//ul//li[text()='\"+value+\"']\";\n\t\t\t\twaitForElement(listOption, 10);\n\t\t\t\tif (isElementDisplayed(listOption, 3)) {\n\t\t\t\t\tclickOn(listOption);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueInListOptionField. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueInListOptionFieldPArtialForOfficePincode`, is used to select a value from a list option field with partial matching for an office pincode. \n\nThe method takes two parameters: `labelName` and `value`. It first constructs the XPath of the text field based on the label name, then waits for the element to be displayed. If the element is present, it highlights the field, enters the first 6 characters of the value into the field, clears the edit box, re-enters the same value, and selects the corresponding option from the list. \n\nIf the element is not present or if the selected option is not found, the method fails the test step with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRCustomerPage",
        "function_name": "updateAdditionalDetailsSectionForITUAT",
        "code": "public void updateAdditionalDetailsSectionForITUAT(String fatherNameValue, String motherNameValue,\n\t\t\tString preferredLanguageValue, String maritalStatusValue, String qualificationValue,\n\t\t\tString nameofCompanyBusinessValue, String designationValue, String monthlyIncomeValue,\n\t\t\tString nameOnCardValue, String officePhoneNumberType, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Value, String officeAddressLine3Value, String areaValue,\n\t\t\tString officePincodeValue, String bflBranchValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"###################### Additional Details Section ######################\");\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tenterValueInTextFieldOnFOSRevampWithFatherNames(Constants.fatherNameMotherNameLabel, fatherNameValue);\n\t\t\tenterValueInTextFieldOnFOSRevampWithMotherNames(Constants.motherNameLabel, motherNameValue);\n\t\t\tenterValueInTextField(Constants.alternateNumberLable, generateMobileNumber());\n\t\t\tselectValueFromDropdown(Constants.preferredLanguageLabel, preferredLanguageValue);\n\t\t\tselectValueFromDropdown(\"Preferred Communication Language\", \"English\");\n\t\t\tselectValueFromDropdown(Constants.maritalStatusLable, maritalStatusValue);\n\t\t\tselectValueFromDropdown(Constants.qualificationLabel, qualificationValue);\n\t\t\tchooseValueInListOptionFieldPArtialForNameOfComplayBusinness(Constants.nameofCompanyBusinessLabel, nameofCompanyBusinessValue);\n\t\t\tselectValueFromDropdown(Constants.designationLabel, designationValue);\n\t\t\tselectValueFromDropdown(Constants.monthlyInconLabel, monthlyIncomeValue);\n\t\t\tenterValueInTextField(Constants.nameOnCardLabel, nameOnCardValue);\n\t\t\tselectValueFromDropdown(Constants.officePhoneNumberTypeLabel, officePhoneNumberType);\n\t\t\tenterValueInTextField(Constants.officePhoneNumberLabel, generateMobileNumber());\n\t\t\tenterValueInTextField(Constants.officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInTextField(Constants.officeAddressLine3Label, officeAddressLine3Value);\n\t\t\tenterValueInTextField(Constants.officeAreaLocalityLabel, areaValue);\n\t\t\tchooseValueInListOptionFieldPArtialForOfficePincode(Constants.officePincodeLabel, officePincodeValue);\n\t\t\tclickOnButton(Constants.Save);\n\t\t\twaitTillSpinnerDisappear();\n\n\t\t\tverifyErrorPopupMessage();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateAdditionalDetailsSection. Exception: \" + e.getMessage());\n\t\t}\n\t}\n}",
        "description": "This is a Java method named `updateAdditionalDetailsSectionForITUAT` that updates the Additional Details section for an ITUAT (International Telecommunication Union for Asia and the Pacific) application.\n\nThe method takes 19 string parameters, each representing a specific field or value to be updated in the Additional Details section. These fields include:\n\n1. Father's name\n2. Mother's name\n3. Preferred language\n4. Marital status\n5. Qualification\n6. Name of company/business\n7. Designation\n8. Monthly income\n9. Name on card\n10. Office phone number type\n11-13. Office address (lines 1, 2, and 3)\n14. Area (office location)\n15. Office pincode\n\nThe method performs the following actions:\n\n1. Prints a test step information message indicating that it is updating the Additional Details section.\n2. Waits until a spinner disappears (presumably to ensure that the application has finished loading).\n3. Enters values into various text fields, including:\n\t* Father's name\n\t* Mother's name\n\t* Alternate phone number\n\t* Preferred language\n\t* Marital status\n\t* Qualification\n\t* Name of company/business\n\t* Designation\n\t* Monthly income\n\t* Name on card\n4. Selects values from dropdown lists for:\n\t* Preferred communication language\n\t* Office pincode\n5. Enters values into various text fields related to office address (lines 1, 2, and 3) and area.\n6. Clicks the \"Save\" button to save the updated information.\n7. Verifies that an error popup message is not displayed.\n\nIf any exceptions occur during the execution of this method, it catches them and reports a test step failure with the exception message.",
        "input": [
            "String fatherNameValue",
            "String motherNameValue",
            "String preferredLanguageValue",
            "String maritalStatusValue",
            "String qualificationValue",
            "String nameofCompanyBusinessValue",
            "String designationValue",
            "String monthlyIncomeValue",
            "String nameOnCardValue",
            "String officePhoneNumberType",
            "String officeAddressLine1Value",
            "String officeAddressLine2Value",
            "String officeAddressLine3Value",
            "String areaValue",
            "String officePincodeValue",
            "String bflBranchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRSearchPage",
        "function_name": "selectValueInDealerDropdown",
        "code": "public void selectValueInDealerDropdown(String dealerName) {\n\t\tString dealerNameDesc = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']//ancestor::div//div//button[contains(@aria-label,'Select Dealer')]\";\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerName + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 4)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueInDealerDropdown. Exception:  \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * <strong> This method is used to enter the value in textfield. </strong>\n\t * \n\t * @author : Gurumoorthy M\n\t * @since : Dec 3, 2023\n\t * @purpose : This method is used to enter the value in textfield.\n\t * @param labelName:Name\n\t *            of the field should be passed in String.\n\t * @param value:Value\n\t *            for the field should be passed in String.\n\t */",
        "description": "This Java method, `selectValueInDealerDropdown`, is used to select a value from a dropdown menu labeled \"Select Dealer\" on a web page. The method takes a string parameter `dealerName` which represents the name of the dealer to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the `dealerName` parameter is empty or not.\n2. If the `dealerName` is not empty, it checks if the name contains a \"#\" character. If it does, it replaces the \"#\" with a space to convert the dealer name into a human-readable format.\n3. It defines two strings: `dealer` and `dealerOption`. The `dealer` string is used to locate the dropdown menu labeled \"Select Dealer\", while the `dealerOption` string is used to locate the specific option in the dropdown menu that matches the `dealerName`.\n4. It uses a `waitForElementUntilVisible` method to wait for the dropdown menu to be visible.\n5. If the dropdown menu is displayed, it scrolls to the menu and clicks on it using the `scrollToWebElement` and `clickOn` methods, respectively.\n6. It checks if the selected option is displayed within 4 seconds using the `isElementDisplayed` method. If it is, it clicks on the option using the `clickOn` method.\n7. If the selected option is not displayed, it logs a test step failure message indicating that the value is not present in the dropdown menu.\n8. If the dropdown menu is not displayed within 7 seconds, it logs a test step failure message indicating that the \"Select Dealer\" dropdown menu is not present.\n\nIf the `dealerName` parameter is empty, it logs a test step information message asking the user to provide some value for the field.\n\nThe method also catches any exceptions that may occur during its execution and logs a test step failure message with the exception details.",
        "input": [
            "String dealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRSearchPage",
        "function_name": "enterValueInTextField",
        "code": "public void enterValueInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(field, 15);\n\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextField. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @since - Dec 03, 2023\n\t * @purpose - To click the button in search page.\n\t */",
        "description": "This Java method is used to enter a value into a text field on a webpage. The method takes two parameters: `labelName` and `value`. \n\n- It first waits for the page to load using the `waitForPageToLoad()` method.\n- Then it constructs an XPath expression to locate the text field based on the provided `labelName`.\n- It then waits for the element to be displayed using the `waitForElement()` method, with a timeout of 15 seconds.\n- If the element is displayed, it highlights the element using the `highLighterMethod()` and enters the provided `value` into the text field using the `typeIn()` method.\n- If the element is not displayed, it marks the test as failed using the `testStepFailed()` method.\n- In case of any exception during execution, it also marks the test as failed with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "DRSearchPage",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 16, 2023\n\t * @purpose : This is centralized method to perform the search customer\n\t *          functionality.\n\t */",
        "description": "This Java method, `clickOnButton`, simulates a click on a button with the given name. It uses Selenium WebDriver and Webdriver Actions to move the mouse cursor to the button and then click it. The method takes a `String` parameter `buttonName` which is used to construct an XPath expression to locate the button element.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `buttonName` with a fixed string and an XPath query that searches for a button element with the same text as the `buttonName`.\n2. It uses the `waitForElement` method to wait for the button element to be present on the page, with a timeout of 10 seconds.\n3. If the button is displayed within 6 seconds, it simulates a click on the button using WebDriver Actions.\n4. If the button is not displayed, it fails the test step with an error message indicating that the button is not present.\n\nThe method also handles any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "DRSearchPage",
        "function_name": "searchCustomerWithMobNo",
        "code": "public void searchCustomerWithMobNo(String selectDealerValue, String mobileNumberNCValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"$Configure Mobile number Value $: \" + mobileNumberNCValue);\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"[ Search the Customer with dealer and Mobile number ]\");\n\t\t\tclickOnNavigationmenu(Constants.Search);\n\t\t\tselectValueInDealerDropdown(selectDealerValue);\n\t\t\tenterValueInTextField(Constants.mobileNumberNCLabel, mobileNumberNCValue);\n\t\t\tclickOnButton(Constants.Search);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\twaitForPageToLoad();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchCustomerWithMobNo. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchCustomerWithMobNo`, searches for a customer based on the dealer and mobile number values provided as input parameters. The method attempts to:\n\n1. Configure the mobile number value.\n2. Navigate to the search page.\n3. Select the desired dealer from the dropdown list.\n4. Enter the mobile number in the text field.\n5. Click the \"Search\" button.\n6. Wait for the spinner to disappear and the page to load.\n\nIf any exception occurs during this process, it is caught and a test step failure message is logged with the exception's message.",
        "input": [
            "String selectDealerValue",
            "String mobileNumberNCValue"
        ],
        "output": "void"
    },
    {
        "class_name": "DRSearchPage",
        "function_name": "searchCustomerWithCardNo",
        "code": "public void searchCustomerWithCardNo(String selectDealerValue, String mobileNumberNCValue) {\n\t\ttry {\n\t\t\ttestStepInfo(\"$Configure Mobile number Value $: \" + mobileNumberNCValue);\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"###################### Search the Customer with dealer and Mobile number ######################\");\n\t\t\tclickOnNavigationmenu(Constants.Search);\n\t\t\tselectValueInDealerDropdown(selectDealerValue);\n\t\t\tenterValueInTextField(Constants.CardNumberLabel, mobileNumberNCValue);\n\t\t\tclickOnButton(Constants.Search);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\twaitForPageToLoad();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchCustomerWithMobNo. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `searchCustomerWithCardNo`, searches for a customer by their mobile number and dealer value using a web application. It takes two string parameters: `selectDealerValue` and `mobileNumberNCValue`.\n\nThe method performs the following steps:\n\n1. Configures the mobile number value.\n2. Searches for the customer with the specified dealer value and mobile number.\n3. Clicks on the navigation menu to access the search page.\n4. Selects the dealer value from a dropdown list using the provided `selectDealerValue`.\n5. Enters the mobile number in a text field labeled \"Card Number\".\n6. Clicks the \"Search\" button.\n7. Waits for the spinner to disappear and the page to load.\n\nIf any exception occurs during these steps, the method catches it and reports a failure with an error message.",
        "input": [
            "String selectDealerValue",
            "String mobileNumberNCValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCases",
        "code": "public String clickOnCases(String opportunityName) {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\tString caseNumber = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(oppurtunity, 30);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tfor (int iterator = 0; iterator < 5; iterator++) {\n\t\t\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\t\t\ttestStepPassed(caseNo + \" is Successfully created\");\n\t\t\t\t\t\thighLighterMethod(caseNumber);\n\t\t\t\t\t\tclickOn(oppurtunity);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// refreshPage();\n\t\t\t\t\t\t// enterValueInSearchField(opportunityName);\n\t\t\t\t\t\t// waitForElement(caseNumber, 30);\n\t\t\t\t\t\t// caseNo = getText(caseNumber);\n\t\t\t\t\t\t// clickOn(oppurtunity);\n\t\t\t\t\t\ttestStepFailed(opportunityName + \" is not displayed\");\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(opportunityName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, `clickOnCases`, appears to be a part of an automation test script. Its primary function is to click on a specific opportunity link and retrieve the corresponding case number.\n\nThe method takes one input parameter, `opportunityName`, which seems to be used for logging purposes (e.g., in error messages).\n\nHere's a high-level overview of what the method does:\n\n1. It waits for the page to load.\n2. It waits for an element with the XPath specified by `oppurtunity` to appear within 30 seconds.\n3. If the element is displayed, it iterates up to 5 times:\n\t* Within each iteration, it checks if the element is still displayed (up to 5 seconds).\n\t* If the element is displayed, it retrieves the case number using the XPath specified by `caseNumber`, logs a success message, highlights the case number, clicks on the opportunity link, and breaks out of the loop.\n4. If the element is not displayed within the iteration limit, it logs an error message indicating that the opportunity name is not displayed.\n5. If the method completes without finding the opportunity link, it logs an error message.\n\nThe method returns the retrieved case number as a string.",
        "input": [
            "String opportunityName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyTextIsAutoPopulatedInQCScreen",
        "code": "public void verifyTextIsAutoPopulatedInQCScreen(String LabelName, String ExpectedValue) {\n\t\tString Text = \"\";\n\t\ttry {\n\t\t\tString Element = LabelName + \"#xpath=//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div//span/span\";\n\t\t\tString scrollToElement = \"#xpath=//span[text()='PAN NSDL Validation']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tscrollToElement(scrollToElement);\n\t\t\t\tText = getText(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tif (Text.equalsIgnoreCase(ExpectedValue)) {\n\t\t\t\t\tmanualScreenshot(Text + \" Value is Auto-Populated in \" + LabelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\tExpectedValue + \" is not displayed in \" + LabelName + \" Instead of We have Got \" + Text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextIsAutoPopulatedInQCScreen \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTextIsAutoPopulatedInQCScreen`, verifies that the text is auto-populated in a specific screen (QC Screen) as expected. \n\nThe method takes two parameters: `LabelName` and `ExpectedValue`. It first constructs an XPath expression to locate the element with the given label name. Then, it waits for the element to be displayed, scrolls to the element if necessary, and gets the text of the element. If the obtained text matches the expected value, it takes a manual screenshot as verification; otherwise, it fails the test step. If the element is not displayed, it also fails the test step. In case of any exception, it fails the test step with an error message.",
        "input": [
            "String LabelName",
            "String ExpectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedValueInMaster",
        "code": "public String verifyAutoPopulatedValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\n//\t\t\tString moveToElement = Label\n//\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n//\t\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\t\t\n\t\t\tString moveToElement1 = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::records-record-layout-item\";\n\t\t\tString labelElement = moveToElement + \"//slot/lightning-formatted-text\";\n\t\t\tString labelElement1 = moveToElement + \"//slot/lightning-formatted-number\";\n\t\t\tString labelElement2 = moveToElement + \"//slot/lightning-formatted-location\";\n\t\t\tString labelElement3 = moveToElement + \"//force-lookup/following-sibling::lightning-formatted-text\";\n\t\t\t\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement3, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement3);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(moveToElement1, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement1);\n\t\t\t\t// text = getText(moveToElement1);\n\t\t\t\thighLighterMethod(moveToElement1);\n\t\t\t\tmanualScreenshot(Label + \" has [ null ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInMaster`, is used to verify the auto-populated value of a field with a given label in a Salesforce Lightning application. \n\nThe method uses Selenium WebDriver and performs the following actions:\n\n1. It constructs an XPath expression based on the provided label.\n2. It checks if the element at the constructed XPath is displayed within a certain time limit (5 seconds).\n3. If the element is displayed, it scrolls to that element, retrieves its text value, highlights the element using a high lighter method, and takes a manual screenshot with the label and the retrieved text value.\n4. The method continues this process for different types of elements (lightning-formatted-text, lightning-formatted-number, lightning-formatted-location) until it finds one or determines that none are displayed.\n5. If no element is displayed, it reports a test step failure.\n\nThe method returns the verified text value.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickEditOptionWithLabelInMasterPage",
        "code": "public void clickEditOptionWithLabelInMasterPage(String fieldLabel) {\n\t\ttry {\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']/parent::div/../..//div/button\";\n\t\t\twaitForElement(editOption, 20);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPage`, simulates a click on an edit button with a specific label in the Master Page. The method takes a `String` parameter `fieldLabel` that represents the label of the edit button.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the edit button based on the provided `fieldLabel`.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods respectively.\n4. If the element is not displayed within a certain timeout (20 seconds), it fails the test step with an error message.\n5. If any exception occurs during the execution of this method, it logs an informative message indicating that the method failed due to an exception.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "checkQCStatusOnRequiredDocs",
        "code": "public void checkQCStatusOnRequiredDocs() {\n\t\ttry {\n\t\t\tString ClickOnLink = \"Required Documents Name#xpath=//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'Required Documents Name') and @title='Required Documents Name']/ancestor::thead/following-sibling::tbody//th//a\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tList<WebElement> listOfDocuments = findWebElements(ClickOnLink);\n\t\t\t\tfor (int i = 0; i < listOfDocuments.size(); i++) {\n\t\t\t\t\tint countOfDocument = listOfDocuments.size() - i;\n\t\t\t\t\tClickOnLink = \"Required Documents Name#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'Required Documents Name') and @title='Required Documents Name']/ancestor::thead/following-sibling::tbody//th//a)[\"\n\t\t\t\t\t\t\t+ countOfDocument + \"]\";\n\t\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\t\tverifyAutoPopulatedValueInMaster(\"Type\");\n\t\t\t\t\t;\n\t\t\t\t\tverifyAutoPopulatedValueInMaster(\"QC Status\");\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Documents are not present.\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Delete All Documents In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `checkQCStatusOnRequiredDocs()`, is used to check the QC status of required documents on a web page. Here's a brief overview:\n\n1. It attempts to locate an element with a specific XPath expression (`ClickOnLink`) and verifies if it is displayed.\n2. If the element is displayed, it retrieves a list of web elements matching that XPath expression (`listOfDocuments`).\n3. The method then iterates through each document in the list, performing the following actions:\n\t* Scrolls to the document using `scrollToWebElement`.\n\t* Clicks on the document using `clickOnSpecialElement`.\n\t* Verifies the auto-populated value for \"Type\" and \"QC Status\" using `verifyAutoPopulatedValueInMaster`.\n\t* Waits for 3 seconds.\n\t* Navigates back to the previous page using `driver.navigate().back()`.\n\t* Waits again for 5 seconds.\n4. If the element is not displayed, it takes a manual screenshot with the message \"Documents are not present.\"\n5. The method also catches any exceptions that may occur during execution and logs an error message if one does occur.\n\nIn summary, this method checks the QC status of required documents on a web page by iterating through each document, verifying its details, and performing some additional actions.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedTimeStampValueInMaster",
        "code": "public String verifyAutoPopulatedTimeStampValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\tString date =\"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\t\t\tString labelElement = moveToElement + \"//slot//a//span\";;\n\t\t\tif (isElementPresent(labelElement)) {\n\t\t\t\tWebElement element = findWebElement(labelElement);\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = element.getText();\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tString Date = Label\n\t\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//lightning-formatted-text\";\n\t\t\t\tif (isElementDisplayed(Date, 5)) {\n\t\t\t\t\tdate = getText(Date);\n\t\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" \" + date + \" ] value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn date;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedTimeStampValueInMaster`, is used to verify the auto-populated timestamp value in a master record. The method takes a label as input and performs the following actions:\n\n1. It constructs an XPath expression to locate an element based on the provided label.\n2. If the element is present, it scrolls to that element, retrieves its text content, highlights the element, and captures a manual screenshot.\n3. It then checks if another element with a specific XPath expression (containing the same label) is displayed within 5 seconds. If it is, it retrieves the text content of this element and returns it along with the original text content from step 2.\n4. If the elements are not present or the second element is not displayed, it fails the test step.\n\nThe method catches any exceptions that may occur during its execution and reports a failure if an exception is thrown. The returned value is the auto-populated timestamp value (if found) or an empty string (if not found).",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedLinkValueInMaster",
        "code": "public String verifyAutoPopulatedLinkValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\t\t\tString labelElement = moveToElement + \"//slot/span//slot\";\n\t\t\tString labelElement1 = moveToElement + \"/slot//slot\";\n\t\t\tString labelElement2 = moveToElement + \"//a//slot//span\";\n\t\t\tif (isElementDisplayed(labelElement, 40)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t\tString Date = Label\n\t\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//lightning-formatted-text\";\n\t\t\t\tif (isElementDisplayed(Date, 5)) {\n\t\t\t\t\tString date = getText(Date);\n\t\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" \" + date + \" ] value\");\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t} else if (isElementDisplayed(labelElement2, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedLinkValueInMaster`, is used to verify the value of an auto-populated link field in a master record. The method takes a string parameter `Label` which represents the label of the field being verified.\n\nThe method uses various XPath expressions to locate different elements related to the field and performs actions such as scrolling, getting the text value, highlighting the element, taking manual screenshots, and verifying if the date associated with the field is present. If any of these operations fail, it logs a test step failure message.\n\nThe method returns the verified text value of the auto-populated link field.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedValueInMasterInQCUAT",
        "code": "public String verifyAutoPopulatedValueInMasterInQCUAT(String Label) {\n\t\tString text = \"\";\n\t\tString moveToElement = Label + \"#xpath=//div[contains(@class,'active')]//span[text()='\" + Label\n\t\t\t\t+ \"']/parent::div/following-sibling::div/span\";\n\t\tString labelElement = moveToElement + \"/slot/slot//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 30);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInMasterInQCUAT`, verifies the auto-populated value in a master field for a given label in QCUAT (Quality Control Unified Application Technology). \n\nThe method takes a String parameter `Label` which represents the label of the master field. It uses this label to construct an XPath expression that navigates to the element containing the auto-populated value. The method then:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not already visible.\n3. Retrieves the text value of the element and stores it in a variable `text`.\n4. Highlights the element using a separate method (`highLighterMethod`).\n5. Logs test step information with the label and retrieved value.\n6. Takes a manual screenshot with the label and retrieved value.\n\nIf any exceptions occur during this process, the method catches them and reports a test failure with an error message. The method returns the retrieved text value.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "selectOrDeselectCheckbox",
        "code": "public void selectOrDeselectCheckbox(String checkboxLabel, String status) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//div[text()='\" + checkboxLabel + \"']/input\";\n\t\t\tscrollToWebElement(checkbox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckbox`, selects or deselects a checkbox based on the provided label and status. \n\nThe method takes two parameters: `checkboxLabel` (the label of the checkbox) and `status` (either \"check\" to select the checkbox or \"uncheck\" to deselect it). \n\nIt uses XPath to locate the checkbox element, scrolls to it if necessary, and then checks or unchecks the box based on the provided status. If the operation is successful, it logs a test step as passed; otherwise, it logs an error message.",
        "input": [
            "String checkboxLabel",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInFieldForOTPProcess",
        "code": "public void enterValueInFieldForOTPProcess(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/following-sibling::input\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given value into a field with a specific label name for an OTP process. It uses XPath to locate the input field following the sibling of the label with the matching text. If the field is displayed, it highlights the field and types in the provided value. If the field is not present, or if any exception occurs during the process, it fails the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedValueInMasterTask",
        "code": "public String verifyAutoPopulatedValueInMasterTask(String Label) {\n\t\tString text = \"\";\n\t\tString moveToElement = Label + \"#xpath=//span[text()='\" + Label + \"']/parent::div/following-sibling::div/span\";\n\t\ttry {\n\t\t\twaitForElement(moveToElement, 10);\n\t\t\tif (isElementDisplayed(moveToElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(moveToElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `verifyAutoPopulatedValueInMasterTask`, is used to verify the auto-populated value in a master task. It takes a string parameter `Label` which represents the label of the field to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `Label` and uses it to move to the corresponding element.\n2. It waits for the element to be displayed, then scrolls to it if necessary.\n3. It retrieves the text value of the element using the `getText` method.\n4. It highlights the element using a highlighting method (not shown in this code snippet).\n5. It logs the test step information with the label and the retrieved text value.\n6. It takes a manual screenshot with the label and the text value as part of the file name.\n7. If any exception occurs during these steps, it fails the test step and logs an error message.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "getCasesValue",
        "code": "public String getCasesValue(String labelName) {\n\t\tString Value = \"\";\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\twaitTime(12);\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']//..//following-sibling::div/span/span\";\n\t\t\tString Element1 = \"#xpath=//span[text()='\" + labelName + \"']/parent::label//following-sibling::input\";\n\t\t\tString Element2 = \"#xpath=//span[text()='\" + labelName + \"']//..//following-sibling::div//input\";\n\t\t\tString Element3 = \"#xpath=//span[text()='\" + labelName + \"']//..//following-sibling::div//a\";\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\twaitForElement(Element, 30);\n\n\t\t\t\twaitTime(5);\n\t\t\t\tscrollToElement(Element);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getText(Element);\n\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\t\t\t} else if (isElementDisplayed(Element1, 10)) {\n\t\t\t\twaitForElement(Element1, 30);\n\n\t\t\t\twaitTime(5);\n\t\t\t\tWebElement element1 = findWebElement(Element1);\n\t\t\t\tscrollToElement(Element1);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element1);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element1);\n\t\t\t\tValue = element1.getAttribute(\"value\");\n\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t} else if (isElementDisplayed(Element2, 10)) {\n\t\t\t\twaitForElement(Element2, 30);\n\n\t\t\t\twaitTime(5);\n\t\t\t\tWebElement element1 = findWebElement(Element2);\n\t\t\t\tscrollToElement(Element2);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element2);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element2);\n\t\t\t\tValue = element1.getAttribute(\"value\");\n\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t} else if (isElementDisplayed(Element, 10)) {\n\n\t\t\t\twaitTime(5);\n\t\t\t\tscrollToElement(Element3);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element3);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element3);\n\t\t\t\tValue = getText(Element3);\n\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t}\n\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in getCasesValue\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getCasesValue`, retrieves the value of a specific element on a web page based on the provided label name. The method uses XPath expressions to locate the element and then performs various actions such as waiting for the element to be displayed, scrolling to it, highlighting it, and retrieving its text or attribute value.\n\nThe method takes a `String` parameter `labelName`, which is used to construct XPath expressions to find the corresponding element on the page. It then attempts to locate each of three possible elements (identified by `Element`, `Element1`, and `Element2`) using these XPath expressions.\n\nIf any of the elements are displayed, the method performs the following actions:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element.\n3. Highlights the element.\n4. Retrieves the text or attribute value of the element (depending on the type of element).\n5. Takes a manual screenshot with the retrieved value and label name.\n\nIf none of the elements are displayed, the method fails the test step with an error message indicating that the label is not displayed.\n\nThe method returns the retrieved value as a `String`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "enterTextValueInQCScreen",
        "code": "public void enterTextValueInQCScreen(String Labelname, String Value) {\n\t\ttry {\n\t\t\tString textLabelName = \"#xpath=//span[text()='\" + Labelname + \"']/parent::label//..//input\";\n\n\t\t\twaitForElement(textLabelName, 10);\n\t\t\tif (isElementDisplayed(textLabelName, 10)) {\n\t\t\t\t// scrollToWebElement(textLabelName);\n\t\t\t\t// scrollToElement(textLabelName);\n\t\t\t\ttypeIn(textLabelName, Value);\n\t\t\t\ttestStepPassed(Value + \" is entered in \" + Labelname);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \" is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInQCScreen\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterTextValueInQCScreen`, enters a specified value into an input field on a QCScreen (likely a Quality Center Screen). It takes two parameters: the label name of the input field and the value to be entered. The method attempts to find the input field with the given label name using XPath, waits for it to be displayed, and then enters the provided value. If the element is not displayed or an exception occurs during the process, the test step fails.",
        "input": [
            "String Labelname",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonQC1",
        "code": "public void clickOnButtonQC1(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString button = buttonLabel + \"#xpath=//button[normalize-space()='\" + buttonLabel + \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\twaitTime(8);\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t\twaitTime(8);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQC1`, simulates a click on a button with the specified label (`buttonLabel`) on a webpage. It uses Selenium WebDriver to perform the action.\n\nHere's what it does:\n\n1. Waits for 4 seconds using the `waitTime` method.\n2. Constructs two possible XPath expressions: one for the main button and another for an optional button within a specific section (if present).\n3. Waits up to 30 seconds for the button(s) to be displayed using the `waitForElement` method.\n4. If the main button is displayed, it simulates a click on the button using Selenium's `Actions` class.\n5. If the optional button is displayed instead, it scrolls to that button and clicks on it using the `clickOnSpecialElement` method.\n6. If neither button is present after 5 seconds (for the main button) or 10 seconds (for the optional button), it fails the test step with an error message.\n7. In case of any exception during execution, it also fails the test step with a descriptive error message.\n\nThe method returns void and takes a `String` parameter (`buttonLabel`) to specify the label of the button to click.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCasesDocumentsField",
        "code": "public void selectValueFromDropdownInCasesDocumentsField(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')]//parent::label//parent::div//div//div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method selects a value from a drop-down menu in the Cases Documents field. It takes two parameters: `dropdownName` and `value`. \n\nHere's what it does:\n\n1. Creates an XPath expression to locate the dropdown element based on its name.\n2. Waits for the dropdown to be present (up to 10 seconds).\n3. If the dropdown is displayed, scrolls to it, clicks on it, and selects the specified value from the drop-down list.\n4. If the dropdown is not displayed within a certain timeframe (5 seconds), fails the test step with an error message.\n5. If any exception occurs during these steps, also fails the test step with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "getCasesValue",
        "code": "public String getCasesValue(String labelName, String expectedvalue) {\n\t\tString Value = \"\";\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelName + \"']//..//following-sibling::div/span/span\";\n\t\t\tString Element1 = \"#xpath=//span[text()='\" + labelName + \"']/parent::label//following-sibling::input\";\n\t\t\tString Element2 = \"#xpath=//span[text()='\" + labelName + \"']//..//following-sibling::div//a\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\twaitTime(5);\n\t\t\t\tWebElement element = findWebElement(Element);\n\t\t\t\t// scrollToElement(\"#xpath=//span[contains(text(),'Customer Mob No')]\");\n\t\t\t\tscrollToElement(Element);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getText(Element);\n\t\t\t\tif (Value.equalsIgnoreCase(expectedvalue)) {\n\t\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\texpectedvalue + \" is not displayed in \" + labelName + \" Instead of We have Got \" + Value);\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(Element1, 5)) {\n\t\t\t\tWebElement element1 = findWebElement(Element1);\n\t\t\t\tscrollToElement(Element1);\n\n\t\t\t\t// scrollToElement(\"#xpath=//span[contains(text(),'Customer Mob No')]\");\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element1);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element1);\n\t\t\t\t// Value1 = getText(Element1);\n\t\t\t\tValue = element1.getAttribute(\"value\");\n\t\t\t\tif (Value.equalsIgnoreCase(expectedvalue)) {\n\t\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\texpectedvalue + \" is not displayed in \" + labelName + \" Instead of We have Got \" + Value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse if (isElementDisplayed(Element2, 5)) {\n\t\t\t\twaitTime(5);\n\t\t\t\tscrollToElement(Element2);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element2);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element2);\n\t\t\t\tValue = getText(Element2);\n\t\t\t\tif (Value.equalsIgnoreCase(expectedvalue)) {\n\t\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\texpectedvalue + \" is not displayed in \" + labelName + \" Instead of We have Got \" + Value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCasesValue\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getCasesValue`, is used to retrieve the value of a specified label from a web page. It takes two parameters: `labelName` and `expectedvalue`. \n\nThe method first waits for 5 seconds using the `waitTime(5)` method. Then it attempts to find three different XPath elements based on the provided `labelName`: `Element`, `Element1`, and `Element2`. If any of these elements are displayed, it will scroll to that element, highlight it using the `highLighterMethod` (not shown in this code), and retrieve its text value. \n\nIf the expected value matches the retrieved value, it takes a manual screenshot with the message \"[ <value> ] Value is Auto-Populated in <labelName>\". If the values do not match, it fails the test step with an error message. \n\nIf none of the elements are displayed after 5 seconds, it will fail the test step with the message \"<labelName> is not displayed\". \n\nThe method returns the retrieved value as a string.",
        "input": [
            "String labelName",
            "String expectedvalue"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "getCustomerPhotoValidationValue",
        "code": "public String getCustomerPhotoValidationValue(String labelName, String expectedvalue) {\n\t\tString Value = \"\";\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//span[text()='Customer Photo Validation']/parent::label/following-sibling::div\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\twaitTime(5);\n\t\t\t\tscrollToElement(Element);\n\t\t\t\twaitTime(2);\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\twaitTime(4);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getText(Element);\n\t\t\t\tif (Value.contains(expectedvalue)) {\n\t\t\t\t\tmanualScreenshot(\"[ \" + expectedvalue + \" ] Value is Auto-Populated in \" + labelName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\texpectedvalue + \" is not displayed in \" + labelName + \" Instead of We have Got \" + Value);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCasesValue\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getCustomerPhotoValidationValue`, is used to validate the value of a specific element on a web page. The method takes two parameters: `labelName` and `expectedvalue`. \n\nThe method first waits for a certain amount of time (`waitTime(5)`) before attempting to find an element using XPath (`\"#xpath=//span[text()='Customer Photo Validation']/parent::label/following-sibling::div\"`). If the element is displayed, it scrolls to the element, highlights it with `highLighterMethod`, and retrieves its text value. \n\nThe method then checks if the retrieved value contains the expected value. If it does, a manual screenshot is taken with the message indicating that the expected value was auto-populated in the specified label name. If not, a test step fails with an error message indicating that the expected value was not displayed and instead, the actual value was found.\n\nIf the element is not displayed, or if any exceptions occur during the execution of the method, the test step fails with an error message. The method returns the retrieved value.",
        "input": [
            "String labelName",
            "String expectedvalue"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "searchUntilRecordAvailable",
        "code": "public void searchUntilRecordAvailable(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[contains(@class,'noResultsTitle')]\";\n\t\t\twaitForElement(search, 10);\n\t\t\tenterValueInSearchField(value);\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (isElementDisplayed(search)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForElement(search, 10);\n\t\t\t\t\tenterValueInSearchField(value);\n\t\t\t\t\ttestStepInfo(\"Record is not available so search until get the customer\");\n\t\t\t\t\tcontinue;\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"Successfully got the customer \");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\" Failed to get text from alert box \" + e);\n\t\t}\n\t}",
        "description": "This Java method, `searchUntilRecordAvailable`, is designed to search for a specific value until the desired record becomes available. It uses an XPath expression to locate an element with a specific class name (`noResultsTitle`) and repeatedly searches for the given value until the element is displayed. If the element is displayed after 5 attempts, it means that the desired record is not available yet. The method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnFinnOne",
        "code": "public String clickOnFinnOne(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname + \"#xpath=//th[@scope='row']//a[contains(@title,'Fin')]\";\n\t\t\twaitForElement(ClickOnLink, 10);\n\t\t\tList<WebElement> list = findWebElements(ClickOnLink);\n\t\t\tif (list.size() != 0) {\n\t\t\t\tfor (int iterator = 1; iterator <= list.size(); iterator++) {\n\t\t\t\t\tString currentPath = labelname + \"#xpath=(//th[@scope='row']//a[contains(@title,'Fin')])[\"\n\t\t\t\t\t\t\t+ iterator + \"]\";\n\t\t\t\t\tscrollToWebElement(currentPath);\n\t\t\t\t\tif (isElementDisplayed(currentPath)) {\n\t\t\t\t\t\tclickOnSpecialElement(currentPath);\n\t\t\t\t\t\twaitTime(8);\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(8);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, named `clickOnFinnOne`, takes a string parameter `labelname` and attempts to click on an element with the specified label name that contains the title \"Fin\" within a table row (identified by the XPath expression `//th[@scope='row']//a[contains(@title,'Fin')]`). \n\nThe method uses various Selenium WebDriver methods, such as `waitForElement`, `findWebElements`, `scrollToWebElement`, and `clickOnSpecialElement` to interact with the web page. It also includes some error handling using a try-catch block.\n\nIf the element is found and displayed, it will click on it, wait for 8 seconds, refresh the page, and then wait again for 8 seconds before returning an empty string (`value`). If any exceptions occur during this process, it will record the failure as a test step failure.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnFinnoneInterfaceLink1",
        "code": "public void clickOnFinnoneInterfaceLink1(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName + \" Value#xpath=(//span[text()='\" + headerName\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFinnoneInterfaceLink1`, simulates a click on an interface link with the given header name. It uses XPath to locate the link and performs the following actions:\n\n1. Waits for the page to load.\n2. Retrieves the text of the link using the provided XPath path.\n3. Waits for the element to be present on the page (with a timeout of 24 seconds).\n4. Scrolls to the element if it's present, then clicks on it.\n5. If the element is not present, fails the test step.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and reporting them as test failures.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "VerifyStatusofCase",
        "code": "public String VerifyStatusofCase(String expectedStatus) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"Status #xpath=//a[text()='Status']/ancestor::thead/following-sibling::tbody//span\";\n\t\t\twaitForElement(ClickOnLink, 10);\n\t\t\tList<WebElement> list = findWebElements(ClickOnLink);\n\t\t\tif (list.size() != 0) {\n\t\t\t\tfor (int iterator = 1; iterator <= list.size(); iterator++) {\n\t\t\t\t\tString currentPath = \"#xpath=(//a[text()='Status']/ancestor::thead/following-sibling::tbody//span)[\"\n\t\t\t\t\t\t\t+ iterator + \"]\";\n\t\t\t\t\tscrollToWebElement(currentPath);\n\t\t\t\t\thighLighterMethod(currentPath);\n\t\t\t\t\tcurrentPath = getText(currentPath);\n\t\t\t\t\tif (currentPath.equals(expectedStatus)) {\n\t\t\t\t\t\tmanualScreenshot(\"Expected Status : \" + currentPath);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get expected Status of case record\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to VerifyStatusofCase Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, named `VerifyStatusofCase`, is used to verify the status of a case record. It takes a string parameter `expectedStatus` which represents the expected status of the case.\n\nThe method first tries to locate an element with the XPath `//a[text()='Status']/ancestor::thead/following-sibling::tbody//span`. If this element is found, it then loops through each occurrence of this element and checks if its text matches the `expectedStatus` parameter. If a match is found, it takes a manual screenshot.\n\nIf the element is not found or an exception occurs during the process, the method will fail the test step with an appropriate error message. The method returns an empty string (`value`).",
        "input": [
            "String expectedStatus"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCases_1",
        "code": "public String clickOnCases_1(String opportunityName) {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString caseNumber = \"Case Number #xpath=(//a[text()='Case Number']/parent::th/following::tbody//td//a)[last()]\";\n\t\t\twaitForElement(caseNumber, 30);\n\t\t\tif (isElementDisplayed(caseNumber, elementLoadWaitTime)) {\n\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\tclickOn(caseNumber);\n\t\t\t\tmanualScreenshot(caseNo + \"is not displayed\");\n\n\t\t\t} else if (!isElementDisplayed(caseNumber, 5)) {\n\t\t\t\trefreshPage();\n\t\t\t\twaitForElement(caseNumber, 10);\n\t\t\t\tenterValueInSearchField(opportunityName);\n\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\tclickOn(caseNumber);\n\t\t\t\tmanualScreenshot(caseNo + \"is not displayed\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(opportunityName + \"is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, `clickOnCases_1`, is used to interact with a web page element that has the text \"Case Number\" and retrieve its associated case number. The method takes a `String` parameter `opportunityName`. \n\nThe method attempts to locate the element using an XPath expression, wait for it to be displayed, and then click on it. If the element is not displayed after a certain time, it refreshes the page, re-enters the search criteria, waits again, clicks on the element, and takes a manual screenshot. \n\nIf the element still cannot be found or interacted with, it takes another manual screenshot. The method returns the retrieved case number as a `String`. If any exceptions occur during this process, it logs an error message using `testStepFailed`.",
        "input": [
            "String opportunityName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCase",
        "code": "public String clickOnCase(String opportunityName) {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString caseNumber = \"Case Number #xpath=(//a[text()='Case Number']/ancestor::thead/following-sibling::tbody//a[contains(@class,'textUnderline outputLookupLink slds-truncate')]/ancestor::td)[1]/preceding-sibling::td//a\";\n\t\t\twaitForElement(caseNumber, 30);\n\t\t\tif (isElementDisplayed(caseNumber, elementLoadWaitTime)) {\n\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\tclickOn(caseNumber);\n\t\t\t\tmanualScreenshot(caseNo + \"is not displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(opportunityName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, `clickOnCase`, is used to interact with a web page element that represents a case number. The method takes an opportunity name as input and attempts to:\n\n1. Find the case number element using an XPath expression.\n2. Wait for the element to be displayed (up to 30 seconds).\n3. If the element is displayed, retrieve its text content (the case number), click on it, and take a manual screenshot with the case number as part of the file name.\n4. If the element is not displayed, mark the test step as failed.\n\nThe method returns the retrieved case number as a string. If an exception occurs during execution, the method catches it and marks the test step as failed with a message indicating the failure reason.",
        "input": [
            "String opportunityName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "selectToggleFromAssetValidationUnderPostDoTab",
        "code": "public void selectToggleFromAssetValidationUnderPostDoTab(String labelName) {\n\t\ttry {\n\t\t\tString chk_toggle = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/../following::div/label//span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(chk_toggle, 10);\n\t\t\tif (isElementDisplayed(chk_toggle, 5)) {\n\t\t\t\tif (!findWebElement(chk_toggle).isSelected()) {\n\t\t\t\t\tclickOnSpecialElement(chk_toggle);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelName + \" is already selected\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"select Toggle Under Post Do Tab failed. Exception: \" + e.toString());\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Sundarrajan\n\t * @Description - This method is used to 1. labelName : IMEI/Serial 2. enter\n\t *              value in the text field and click on Validation button\n\t */",
        "description": "This Java method, `selectToggleFromAssetValidationUnderPostDoTab`, is used to select a toggle button (checkbox) with a specific label name under the \"Post Do Tab\" section. \n\nThe method takes a string parameter `labelName` which represents the text of the checkbox's label. It uses an XPath expression to locate the checkbox element, waits for it to be displayed, and then checks if the checkbox is selected or not.\n\nIf the checkbox is not selected, it clicks on the checkbox to select it. If the checkbox is already selected, it takes a manual screenshot with the label name as the file name.\n\nIn case of any exceptions, it writes an error message to the log file and marks the test step as failed.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInTextFieldFromAssetValidationUnderPostDo",
        "code": "public void enterValueInTextFieldFromAssetValidationUnderPostDo(String labelName, String labelValue) {\n\t\ttry {\n\n\t\t\tString assetTextField = \"#xpath=//label[contains(text(),'\" + labelName + \"')]/following-sibling::div/input\";\n\t\t\tString btn_validate = \"#xpath=//button[text()='Validate']\";\n\t\t\twaitForElement(assetTextField, 10);\n\t\t\tif (isElementDisplayed(assetTextField, 5)) {\n\t\t\t\ttypeIn(assetTextField, labelValue);\n\t\t\t\thighLighterMethod(assetTextField);\n\t\t\t\twaitForElement(btn_validate, 10);\n\t\t\t\tif (isElementDisplayed(btn_validate, 5)) {\n\t\t\t\t\tscrollToWebElement(btn_validate);\n\t\t\t\t\tclickOn(btn_validate);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(btn_validate + \" is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"enter Value In Text Field From Asset Validation Under Post Do failed. Exception: \" + e.toString());\n\t\t}\n\n\t}",
        "description": "This Java method, named `enterValueInTextFieldFromAssetValidationUnderPostDo`, is used to enter a value in a text field that is located under an asset validation post-do step. The method takes two string parameters: `labelName` and `labelValue`. \n\nThe method attempts to locate the text field by its label name using XPath, waits for the element to be displayed, and then enters the provided `labelValue` into the text field. After entering the value, it highlights the text field using a highLighterMethod (not shown in this snippet). The method also waits for a \"Validate\" button to be displayed and clicks on it if present.\n\nIf any of these steps fail, the method reports an error by writing to a log file or test report.",
        "input": [
            "String labelName",
            "String labelValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clikconclosedOpportunity",
        "code": "public void clikconclosedOpportunity(String oppid) {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a)[1]\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 4)) {\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t\tmanualScreenshot(\"Click On\" + oppid);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(oppid + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clikconclosedOpportunity`, appears to be part of a web automation test. Its primary function is to click on an opportunity link with the given opportunity ID (`oppid`). \n\nHere's a step-by-step breakdown:\n\n1. It tries to execute the code within the try block.\n2. Within this block, it defines a string `oppurtunity` that contains an XPath expression to locate the opportunity link in the web page.\n3. The method then uses a wait function (`waitForElement`) to ensure the opportunity link is present on the page for 10 seconds.\n4. If the link is displayed (checked using `isElementDisplayed`), it clicks on the link using another function (`clickOn`).\n5. After clicking, it takes a manual screenshot with the name \"Click On\" followed by the `oppid`.\n6. If the opportunity link is not displayed after 4 seconds (checked again using `isElementDisplayed`), the method marks the test step as failed.\n7. If any exception occurs during the execution of this code, it catches the exception and marks the test step as failed with an error message.\n\nIn summary, this method simulates a user clicking on an opportunity link in a web page, taking a screenshot after the click, and handling any exceptions that may occur during the process.",
        "input": [
            "String oppid"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//span[text()='Save']//parent::button[@title='Save']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\tmanualScreenshot(\"Click on Save Button \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton()`, attempts to click on a Save button element on the webpage. It uses Selenium WebDriver's `waitForElement()` and `isElementDisplayed()` methods to ensure the button is present and visible before clicking on it. If the button is not found or not displayed within the specified time limits (10 seconds), the method fails the test step. Additionally, if any exception occurs during the execution of this method, the test step will also fail with an error message containing the exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, selects a value from a dropdown list by its name and the desired value. It uses Selenium WebDriver to interact with the UI elements.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element by its name.\n2. It waits for the dropdown element to be displayed (up to 10 seconds).\n3. If the dropdown is present, it clicks on the dropdown element to open the list.\n4. It waits for the page to load completely.\n5. It constructs an XPath expression to locate the specific value option in the dropdown list by its name.\n6. It waits for the value option to be displayed (up to 10 seconds).\n7. If the value option is present, it clicks on the option to select it.\n8. If any of the above steps fail, it reports a test step failure with an appropriate message.\n\nThe method also includes some basic error handling using a `try-catch` block, which catches any exceptions that occur during execution and reports a test step failure with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCase",
        "code": "public void selectValueFromDropdownInCase(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//div[contains(@class,'slds-select_container')]//option[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCase`, is used to select a specific value from a drop-down list on a web page. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nThe method first constructs an XPath expression to locate the dropdown element using Selenium WebDriver. It then waits for the element to be displayed, clicks on it, and waits for the page to load.\n\nNext, it constructs another XPath expression to locate the option with the specified value in the dropdown's list. It waits for this element to be displayed, clicks on it, and verifies that the selection was successful by calling a test step passed method.\n\nIf any of these steps fail (e.g., the dropdown is not present or the desired value is not found), the method catches the exception and calls a test step failed method with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDob`, is used to enter a value into a specific field on a web page. The method takes two string parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression by concatenating the `labelName` with a fixed string. This XPath expression is then used to locate the input field related to the given label name.\n\nThe method then waits for the element to be displayed, checks if it's displayed within a certain time limit (5 seconds), and enters the provided value into the field using the `typeIn` method. If the field is not present, the method fails the test step with an error message. \n\nIf any exception occurs during this process, the method catches it and fails the test step with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "generateRandomBarcode",
        "code": "public String generateRandomBarcode() {\n\n\t\tRandom generator = new Random();\n\n\t\tArrayList<String> numberlist = new ArrayList<>();\n\t\tArrayList<String> Alphabeticlist = new ArrayList<>();\n\t\tArrayList<String> specialCharList = new ArrayList<>(Arrays.asList(\"!\", \"@\", \"#\", \"$\", \"/\", \"^\", \"%\"));\n\t\tArrayList<String> mainlist = new ArrayList<>();\n\n\t\tfor (int i = 1; i <= 9; i++) {\n\t\t\tnumberlist.add(String.valueOf(i));\n\t\t}\n\n\t\tfor (char i = 'A'; i <= 'Z'; i++) {\n\t\t\tAlphabeticlist.add(Character.toString(i));\n\t\t}\n\t\tmainlist.addAll(numberlist);\n\t\tmainlist.addAll(Alphabeticlist);\n\t\tmainlist.addAll(specialCharList);\n\t\tmainlist.addAll(mainlist);\n\n\t\tint initialDigit = 2;\n\t\tint set1 = generator.nextInt(738) + 100;\n\t\tint set2 = generator.nextInt(836) + 100;\n\t\tint set3 = generator.nextInt(69) + 10;\n\t\tString number = initialDigit + \"\" + set2 + set1 + set3;\n\n\t\tint num = Integer.parseInt(number);\n\t\tint count = 0;\n\t\twhile (num != 0) {\n\t\t\tcount = count + num % 10;\n\t\t\tnum = num / 10;\n\t\t}\n\t\tString lastCharacter = mainlist.get(count - 1);\n\t\tString BarCodenumber = initialDigit + \"\" + set3 + set1 + set2 + \"\" + lastCharacter;\n\n\t\treturn BarCodenumber;\n\t}",
        "description": "This Java method generates a random barcode string. It creates three lists of characters: one for numbers (0-9), one for uppercase letters, and one for special characters (\"!\", \"@\", \"#\", \"$\", \"/\", \"^\", \"%\"). The method then combines these lists into a single list called `mainlist`. \n\nIt then uses the `Random` class to generate three random numbers (`set1`, `set2`, and `set3`) and concatenates them with an initial digit (2) to form a number string. This number is then converted to an integer, and its digits are summed up until the result is 0. The last digit of this sum is used to select a character from `mainlist` as the final character of the barcode.\n\nThe method returns a string that represents the generated barcode, which combines the initial digit, the three random numbers, and the final character.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "highLighterMethod",
        "code": "public void highLighterMethod(String element) {\n\t\ttry {\n\t\t\tWebElement e = findWebElement(element);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", e);\n\t\t\tThread.sleep(1000);\n\t\t\tSystem.out.println(\"Highlighted\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, named `highLighterMethod`, takes a string parameter `element` and uses it to highlight a specific element on a web page. \n\nHere's what the method does:\n\n1. It tries to find a web element with the given name using the `findWebElement` method (not shown in this code snippet).\n\n2. If the element is found, it uses a `JavascriptExecutor` to execute a JavaScript script that sets the style of the element to have a yellow background and a red border.\n\n3. The method then waits for 1 second using `Thread.sleep(1000)`.\n\n4. After the waiting period, it prints \"Highlighted\" to the console.\n\n5. If any exceptions occur during this process (for example, if the element is not found or the JavaScript execution fails), the method catches them and prints the error message to the console.",
        "input": [
            "String element"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickonbankpopbutton",
        "code": "public void clickonbankpopbutton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@class='c-container']/following::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `clickonbankpopbutton`, attempts to click on a specific bank pop-up button with the given name (`buttonName`). The method uses Selenium WebDriver to:\n\n1. Create an XPath expression for the button using the provided button name and CSS class.\n2. Wait for the element to be displayed within a specified time limit (10 seconds).\n3. If the element is displayed, scroll to it and click on it using `clickOnSpecialElement`.\n4. If the element is not displayed, take a manual screenshot with a descriptive title.\n\nThe method catches any exceptions that may occur during execution and logs an error message if something goes wrong.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInFieldIMPSBankNumber",
        "code": "public void enterValueInFieldIMPSBankNumber(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tString ele = value\n\t\t\t\t\t\t+ \"#xpath=//span[@class='slds-listbox__option-meta slds-listbox__option-meta_entity'][last()]\";\n\t\t\t\twaitForElement(ele, 10);\n\t\t\t\tif (isElementDisplayed(ele, 3)) {\n\t\t\t\t\tdoubleClick(ele);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldIMPSBankNumber`, is used to input a value into an IMPS Bank Number field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided `labelName` to locate the corresponding field. It then waits for the element to be displayed, scrolls to it if necessary, highlights it, types in the given `value`, and finally double-clicks on the value to ensure it is selected.\n\nIf the field is not present or any other exception occurs during execution, the method will fail the test step with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonOnCase",
        "code": "public void clickOnButtonOnCase(String linkName) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\tString link = linkName + \"#xpath=//a[@title='\" + linkName + \"']\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 30);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t// manualScreenshot(\"Click on:\"+linkName);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonOnCase`, simulates a user clicking on a button or link with the specified name (`linkName`) on a web page. The method uses various Selenium WebDriver methods to:\n\n1. Wait for 6 seconds\n2. Construct an XPath expression to locate the link element based on its title matching the provided `linkName`\n3. Wait for 1 second\n4. Wait for the link element to be present and visible within 30 seconds\n5. Scroll to the link element using coordinates (presumably by clicking or hovering over it)\n6. Check if the link is present and visible; if so, click on it using `clickOnSpecialElement(link)`\n7. If the link is not present, fail the test step with an error message\n\nThe method also catches any exceptions that may occur during execution and reports them as a failed test step.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnLink",
        "code": "public String clickOnLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//table[@data-aura-class='uiVirtualDataTable']/following::tr//td/following-sibling::th//span//a[text()='\"\n\t\t\t\t\t+ labelname + \"'])[last()]\";\n\n\t\t\tString ClickOnLink1 = \"\" + labelname + \"#xpath=(//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::a/ancestor::thead/following-sibling::tbody//th//a)[last()]\";\n\n\t\t\tif (isElementDisplayed(ClickOnLink, 10)) {\n\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else if (isElementDisplayed(ClickOnLink1, 10)) {\n\t\t\t\tscrollToWebElement(ClickOnLink1);\n\t\t\t\thighLighterMethod(ClickOnLink1);\n\t\t\t\tvalue = getText(ClickOnLink1);\n\t\t\t\tclickOnSpecialElement(ClickOnLink1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\trefreshPage();\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnLink`, is designed to simulate a click on a web element with the given label name. It uses XPath expressions to locate the element and then performs various actions such as scrolling, highlighting, getting the text content, clicking on the element, waiting for page load, and refreshing the page.\n\nThe method takes a `String` parameter `labelname`, which is used to construct two different XPath expressions to find the element. It tries to find the element using both expressions and performs the actions if the element is displayed within a certain time limit (10 seconds).\n\nIf the element is not found, it catches the exception and logs a failure message. The method returns the text content of the clicked element as a `String` value.\n\nIn summary, this method automates the process of clicking on a web link with a specific label name and performs additional actions to verify the click was successful.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCustomerLinkAdmin",
        "code": "public void clickOnCustomerLinkAdmin(String customerName) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString link = customerName + \"#xpath=//div[contains(@class,'active')]//span[@title='\" + customerName + \"']\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerLinkAdmin`, simulates a user clicking on a customer link with the given name (`customerName`) on an administrative page. The method performs the following steps:\n\n1. Refreshes the current page.\n2. Waits for the page to load completely.\n3. Creates an XPath expression to locate the customer link based on the provided `customerName`.\n4. Waits for the linked element to be displayed within a specified time limit (30 seconds).\n5. If the element is displayed, it scrolls to the element and clicks on it using the `clickOnSpecialElement` method.\n6. Waits for 2 seconds after clicking the link.\n7. If the element is not displayed or any other exception occurs during the process, it marks the test step as failed with an appropriate error message.\n\nThe method uses several helper methods (`refreshPage`, `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `clickOnSpecialElement`, and `waitTime`) to perform these steps.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "getValuefromCibilReport",
        "code": "public String getValuefromCibilReport(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString label = \"\" + labelname + \"#xpath=//label[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"')]/parent::th/following-sibling::td\";\n\t\t\twaitForElement(label, 20);\n\t\t\tif (isElementDisplayed(label, 4)) {\n\t\t\t\thighLighterMethod(label);\n\t\t\t\tvalue = getText(label);\n\t\t\t\tmanualScreenshot(labelname + \" : \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getValuefromCibilReport`, retrieves the value of a field with the given label name from a Cibil report. It uses an XPath expression to locate the element and then checks if it is displayed within a certain time frame (20 seconds). If the element is found, it highlights the element using a separate method (`highLighterMethod`), retrieves its text content, and takes a manual screenshot with the label name and value as the filename. If the element is not found or an exception occurs during the process, the test step fails.\n\nThe method returns the retrieved value as a string.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnLastLink",
        "code": "public String clickOnLastLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and @title='\" + labelname + \"']/ancestor::thead/following-sibling::tbody//th//a)[last()]\";\n\t\t\twaitForElement(ClickOnLink, 10);\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(\"Successfully clicked :\" + value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnLastLink`, is designed to click on the last link with a specific label name in an HTML table. The method takes a `String` parameter `labelname`, which represents the text content of the links.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression that selects the link with the given `labelname`.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it highlights the link using the `highLighterMethod`, gets the text content of the link using `getText`, and then clicks on the link using `clickOnSpecialElement`.\n4. After clicking the link, it takes a manual screenshot with a message indicating that the link was successfully clicked.\n5. If any exception occurs during these steps, it logs an error message using `testStepFailed`.\n\nThe method returns the text content of the clicked link as a `String`.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCustomerLinkInClassic",
        "code": "public String clickOnCustomerLinkInClassic(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname + \"#xpath=//*[@id='Customer__c']//tr//th//a[contains(text(),'\"\n\t\t\t\t\t+ labelname + \"')]\";\n\t\t\twaitForElement(ClickOnLink, 20);\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(\"Successfully clicked :\" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" click is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnCustomerLinkInClassic`, is used to simulate a click on a customer link in a classic UI component. It takes a string parameter `labelname` which represents the text of the link to be clicked.\n\nThe method first constructs an XPath expression based on the provided label name and waits for the element to be displayed using the `waitForElement` method. If the element is found, it highlights the element using the `highLighterMethod`, gets the text of the element using the `getText` method, clicks on the element using the `clickOnSpecialElement` method, and takes a manual screenshot using the `manualScreenshot` method.\n\nIf the element is not displayed after a certain timeout (20 seconds), or if an exception occurs during the execution of the method, it marks the test step as failed. The method returns the text value of the clicked link.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "loginToFOSApplication",
        "code": "public boolean loginToFOSApplication(String appURL_Fos, String userName, String password) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_Fos);\n\t\t\t\twaitTime(4);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(appURL_Fos)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttestStepInfo(\"FOS Application Login Page\");\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\ttypeIn(txt_userName, userName);\n\t\t\ttypeIn(txt_passWord, password);\n\t\t\tclickOn(btn_login);\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepInfo(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"login To FOS Application. failed.Error\" + e.getClass());\n\t\t}\n\t\treturn flag;\n\t}\n\n\t/*\n\t * Desription - enter the value in searchfield in Salesforce page\n\t * \n\t */",
        "description": "This Java method is used to login to a FOS (Field Operations System) application using the provided app URL, username, and password. It attempts to navigate to the application's login page up to 3 times if it doesn't find the correct URL initially. Once on the login page, it enters the username and password, clicks the login button, and checks for any error messages. If an error message is found, it sets a flag to true indicating that the login failed. The method returns this flag value.",
        "input": [
            "String appURL_Fos",
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnBlindData",
        "code": "public void clickOnBlindData() {\n\t\ttry {\n\t\t\twaitTime(10);\n\t\t\twaitForPageToLoad();\n\t\t\tString blindLink = \"Blind Data#xpath=//div[text()='Blind Data']\";\n\t\t\twaitForElement(blindLink, 40);\n\t\t\tif (isElementDisplayed(blindLink, 5)) {\n\t\t\t\tscrollToWebElement(blindLink);\n\t\t\t\tclickOnSpecialElement(blindLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Blind Data link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnBlindData \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnBlindData()`, attempts to click on a specific element on the page labeled \"Blind Data\". The method waits for 10 seconds, then waits for the page to load. It then searches for an element with the specified XPath and waits up to 40 seconds for it to appear. If the element is displayed within 5 seconds, the method scrolls to the element and clicks on it. If the element is not present or takes too long to appear, the test fails.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInFieldInBlindData",
        "code": "public void enterValueInFieldInBlindData(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to enter a value into a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\nIt first constructs an XPath expression based on the provided `labelName`, which is assumed to be the label text of the field. The XPath expression points to the input field that is a sibling of the element with the specified label text.\n\nThe method then waits for the field to be displayed, and if it's present, enters the provided `value` into the field using a type-in action. If the field is not present within the specified timeout (5 seconds), the test step fails.\n\nIf any exception occurs during this process, the method catches it and marks the test step as failed with an error message that includes the exception message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonInPopup",
        "code": "public void clickOnButtonInPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button\";\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopup`, simulates a click on a specific button within a popup window. The method takes a `String` parameter `buttonName` which is used to construct the XPath of the button. \n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the `buttonName` with the rest of the path.\n2. It waits for the element (the button) to be displayed using `waitForElement`.\n3. If the element is displayed, it takes a manual screenshot and simulates a click on the element using `clickOnSpecialElement`. \n4. If the element is not displayed within the specified time, it fails the test step.\n5. If any exception occurs during the execution of these steps, it also fails the test step with an error message.\n\nThis method appears to be part of a larger automated testing framework, likely for web applications.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButton1",
        "code": "public void clickOnButton1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\twaitForElement(button, 8);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\ttestStepPassed(\"Click On :\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton1`, simulates a click on a specific button with the given name. It uses Selenium WebDriver to find and interact with the button element.\n\nHere's a brief summary of what the method does:\n\n1. It takes a `String` parameter `buttonName` which is used to construct an XPath expression to locate the button element.\n2. It uses the `findWebElement` method to find the button element using the constructed XPath expression.\n3. It waits for the button element to be displayed using the `waitForElement` method.\n4. If the button is displayed, it simulates a click on the button using Selenium's `Actions` class.\n5. It logs a test step as passed if the button was successfully clicked.\n6. If the button is not present or cannot be interacted with, it logs a test step failure and provides an error message.\n\nThe method catches any exceptions that may occur during execution and logs a test step failure with the error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "msgInSubmittoCaptureErrorwithFail",
        "code": "public String msgInSubmittoCaptureErrorwithFail() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\twaitForElement(msg, 10);\n\t\t\tif (isElementDisplayed(msg, 5)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\ttestStepFailed(\"While saving we got [ \" + message + \" ]\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, named `msgInSubmittoCaptureErrorwithFail`, is designed to capture an error message when a specific condition fails during a submission process. \n\nHere's what it does:\n\n1. It waits for an element (identified by the XPath) to be displayed within a certain time limit (10 seconds).\n2. If the element is displayed, it checks if the element is visible on the screen after another 5-second wait.\n3. If the element is both present and visible, it retrieves the text content of that element and stores it in the `message` variable.\n4. It then logs a test step failure with the captured error message.\n\nIf any exception occurs during this process (like if the element doesn't exist or can't be found), the method catches it and logs another test step failure with the exception's message.\n\nFinally, the method returns the captured error message as a `String`.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "BlindDataEntryPersonaldetail",
        "code": "public void BlindDataEntryPersonaldetail(String qcDOBLabel, String dobValue, String qcMandateBarcodeLabel,\n\t\t\tString ECSBarcodeValue, String qcAccHolderNameLabel, String firstNameNCValue, String lastNameNCValue,\n\t\t\tString qcAccNumberLabel, String bankAccountValue, String bankingIMPSFlag, String qcIfscCodeLabel,\n\t\t\tString qcIfscCodeValue, String bankNameWithoutIMPSValue, String mobileNumberNCValue, String saveValue,\n\t\t\tString submitValue, String onlySavelabel) {\n\t\ttry {\n\n\t\t\twaitTime(7);\n\n\t\t\trefreshPage();\n\t\t\twaitTime(7);\n\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnBlindData();\n\t\t\tfor (int j = 1; j <= 5; j++) {\n\t\t\t\tString field = \"#xpath=//span[text()='QC Deal Id']//../following-sibling::input[@disabled]\";\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tclickOnBlindData();\n\t\t\t\t\twaitTime(10);\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\t\t\twaitTime(10);\n\t\t\tmanualScreenshot(\"Verifying the Blind data entry is eligible for this case.\");\n\t\t\tenterValueInFieldInBlindData(qcDOBLabel, dobValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ECSBarcodeValue);\n\t\t\tenterValueInField(qcAccHolderNameLabel, firstNameNCValue + \" \" + lastNameNCValue);\n\t\t\tenterValueInField(qcAccNumberLabel, bankAccountValue);\n\t\t\tif (bankingIMPSFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, qcIfscCodeValue);\n\t\t\t} else {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, bankNameWithoutIMPSValue.split(\" \")[0]);\n\t\t\t}\n\t\t\tenterValueInFieldInBlindData(\"QC ECS End Date\", ECSEndDate);\n\t\t\tenterValueInField(\"QC Deal Id\", dealId);\n\t\t\tenterValueInField(\"QC Mobile Number\", mobileNumberNCValue);\n\t\t\tenterValueInField(\"QC POI No\", poiNumber);\n\t\t\twaitTime(5);\n\t\t\tclickOnButton1(saveValue);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButtonOnCase(submitValue);\n\t\t\tclickOnButtonInPopup(onlySavelabel);\n\t\t\twaitTime(7);\n\t\t\tmsgInSubmit();\n\t\t\twaitTime(6);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `BlindDataEntryPersonaldetail`, is used to perform a blind data entry for personal details. It takes 19 string parameters that represent the labels and values for various fields such as date of birth, mandate barcode, account holder name, etc.\n\nThe method first waits for a certain amount of time (7 seconds) before refreshing the page, waiting for it to load, and clicking on the \"Blind Data\" link. It then enters values into various fields using the `enterValueInField` and `enterValueInFieldInBlindData` methods.\n\nAfter entering all the required information, the method clicks the \"Save\" button, waits for the page to load again, and then submits the form by clicking on the submit button in a popup. Finally, it takes a manual screenshot and logs any errors that may have occurred during the execution of the method.",
        "input": [
            "String qcDOBLabel",
            "String dobValue",
            "String qcMandateBarcodeLabel",
            "String ECSBarcodeValue",
            "String qcAccHolderNameLabel",
            "String firstNameNCValue",
            "String lastNameNCValue",
            "String qcAccNumberLabel",
            "String bankAccountValue",
            "String bankingIMPSFlag",
            "String qcIfscCodeLabel",
            "String qcIfscCodeValue",
            "String bankNameWithoutIMPSValue",
            "String mobileNumberNCValue",
            "String saveValue",
            "String submitValue",
            "String onlySavelabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAndPrintErrorMessageInQC",
        "code": "public boolean verifyAndPrintErrorMessageInQC() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInQC`, attempts to verify the presence of error messages on a web page and print them along with screenshots. \n\nHere's what it does:\n\n1. Waits for 3 seconds using the `waitTime(3)` method.\n2. Retrieves a list of web elements that match the XPath expression \"//ul[contains(@class,'error')]\" which likely targets an unordered list containing error messages.\n3. Iterates through the list and takes manual screenshots for each error message, along with its text content.\n4. If any exception occurs during this process, it catches the exception and marks the test step as failed using `testStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage())`.\n5. Returns a boolean value indicating whether the method execution was successful or not (in this case, always returning `false`).",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "BlindDataEntryPersonaldetailETB",
        "code": "public void BlindDataEntryPersonaldetailETB(String qcDOBLabel, String dobValue, String qcMandateBarcodeLabel,\n\t\t\tString ECSBarcodeValue, String qcAccHolderNameLabel, String firstNameNCValue, String qcAccNumberLabel,\n\t\t\tString bankAccountValue, String bankingIMPSFlag, String qcIfscCodeLabel, String qcIfscCodeValue,\n\t\t\tString bankNameWithoutIMPSValue, String saveValue, String submitValue, String onlySavelabel,\n\t\t\tString ECSEndDateValue, String DealIdValue) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(10);\n\t\t\tclickOnBlindData();\n\t\t\tmanualScreenshot(\"Verifying the Blind data entry is eligible for this case.\");\n\t\t\t// enterValueInFieldInBlindData(qcDOBLabel, dobValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ECSBarcodeValue);\n\t\t\tenterValueInField(qcAccHolderNameLabel, firstNameNCValue);\n\t\t\tenterValueInField(qcAccNumberLabel, bankAccountValue);\n\t\t\tenterValueInFieldInBlindData(\"QC ECS End Date\", ECSEndDateValue);\n\t\t\tenterValueInField(\"QC Deal Id\", DealIdValue);\n\t\t\t// enterValueInField(\"QC Mobile Number\",mobileNumberNCValue);\n\t\t\t// enterValueInField(\"QC POI No\",poiNumber);\n\n\t\t\tif (bankingIMPSFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, qcIfscCodeValue);\n\t\t\t} else {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, bankNameWithoutIMPSValue.split(\" \")[0]);\n\t\t\t}\n\t\t\t// waitTime(5);\n\t\t\tclickOnButton1(saveValue);\n\t\t\twaitForPageToLoad();\n\t\t\tverifyAndPrintErrorMessageInQC();\n\t\t\tclickOnLink(submitValue);\n\t\t\tclickOnButtonInPopup(onlySavelabel);\n\t\t\twaitTime(3);\n\t\t\tmsgInSubmit();\n\t\t\twaitTime(5);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `BlindDataEntryPersonaldetailETB` that performs the following actions:\n\n1. Waits for 5 seconds, refreshes the page, waits for the page to load, and then waits again for 10 seconds.\n2. Clicks on the \"Blind Data\" link.\n3. Takes a manual screenshot with the comment \"Verifying the Blind data entry is eligible for this case.\"\n4. Enters values in various fields:\n\t* `qcMandateBarcodeLabel` with `ECSBarcodeValue`\n\t* `qcAccHolderNameLabel` with `firstNameNCValue`\n\t* `qcAccNumberLabel` with `bankAccountValue`\n\t* \"QC ECS End Date\" with `ECSEndDateValue`\n\t* \"QC Deal Id\" with `DealIdValue`\n5. If the `bankingIMPSFlag` is \"Yes\", enters the value in the `qcIfscCodeLabel` field; otherwise, enters a split value from `bankNameWithoutIMPSValue`.\n6. Clicks on the \"Save\" button.\n7. Waits for the page to load and verifies any error messages using `verifyAndPrintErrorMessageInQC()`.\n8. Clicks on the \"Submit\" link.\n9. Clicks on the \"Only Save\" button in a popup window.\n10. Waits for 3 seconds, prints a message with `msgInSubmit()`, and then waits again for 5 seconds.\n\nThe method catches any exceptions that occur during execution and reports them as test step failures using `testStepFailed()`.",
        "input": [
            "String qcDOBLabel",
            "String dobValue",
            "String qcMandateBarcodeLabel",
            "String ECSBarcodeValue",
            "String qcAccHolderNameLabel",
            "String firstNameNCValue",
            "String qcAccNumberLabel",
            "String bankAccountValue",
            "String bankingIMPSFlag",
            "String qcIfscCodeLabel",
            "String qcIfscCodeValue",
            "String bankNameWithoutIMPSValue",
            "String saveValue",
            "String submitValue",
            "String onlySavelabel",
            "String ECSEndDateValue",
            "String DealIdValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "msgInSubmit",
        "code": "public String msgInSubmit() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\twaitForElement(msg, 10);\n\t\t\tif (isElementDisplayed(msg, 5)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\tmanualScreenshot(message);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `msgInSubmit`, retrieves an error message from a web element with the specified XPath and returns it as a string. Here's a brief summary of what the method does:\n\n1. It defines a variable `message` and sets it to `null`.\n2. It attempts to locate a web element using the provided XPath (`#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']`) and waits for up to 10 seconds for the element to be displayed.\n3. If the element is displayed, it retrieves the text content of the element and stores it in the `message` variable.\n4. If the element is not displayed (i.e., there's no error message), it takes a manual screenshot with a default message indicating that there was no error message.\n5. In case an exception occurs during the process, it logs a test step failure with the error message and returns the original `message` value.\n\nThe method returns the retrieved error message as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "withoutclickOnBlindData",
        "code": "public void withoutclickOnBlindData() {\n\t\ttry {\n\t\t\tString blindLink = \"Blind Data#xpath=//div[text()='Blind Data']\";\n\t\t\twaitForElement(blindLink, 10);\n\t\t\tif (isElementDisplayed(blindLink, 5)) {\n\t\t\t\ttestStepFailed(blindLink);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Successfully Blind Data link is not present as expected\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnBlindData \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `withoutclickOnBlindData`, appears to be a test step that verifies the presence or absence of an element on a web page. \n\nThe method attempts to find an element with the XPath locator `\"//div[text()='Blind Data']\"` and waits for up to 10 seconds for it to appear. If the element is displayed within 5 seconds, the method considers the test step as failed. However, if the element is not present after waiting for 10 seconds, the method takes a manual screenshot with the caption \"Successfully Blind Data link is not present as expected\". \n\nIf any exception occurs during the execution of this method, it will be caught and considered as a test failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInGlobalSearchField",
        "code": "public void enterValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(8);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInGlobalSearchField`, enters a given value into the global search field on a webpage and then clicks on the \"Show more results\" option if it is displayed. The method attempts to locate and interact with specific elements (search button, search field, and show more results option) using XPath expressions. It uses various wait times and checks to ensure that the elements are present before attempting to interact with them. If any of these interactions fail or the expected elements are not found, the test step fails.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "SearchValueInGlobalSearchFieldLongListDirectSelect",
        "code": "public void SearchValueInGlobalSearchFieldLongListDirectSelect(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[@title='\" + value + \"']//parent::div\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tscrollToWebElement(showMoreOption);\n\t\t\t\t\t\tclickOn(showMoreOption);\n\t\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `SearchValueInGlobalSearchFieldLongListDirectSelect`, searches for a specific value in a global search field and selects the corresponding long list item. Here's a step-by-step breakdown:\n\n1. Waits for the page to load.\n2. Locates three elements:\n\t* A \"Search\" button with an XPath locator (`//button[@aria-label='Search']`).\n\t* The global search field with an XPath locator (`//input[@type='search' and @autocomplete='off']`).\n\t* An element that shows more results, identified by its title matching the input value.\n3. Waits for the \"Search\" button to be displayed (up to 25 seconds).\n4. If the \"Search\" button is present, clicks on it.\n5. If the search field is present and displays the input value, types the value into the field and waits for 3 seconds.\n6. Scrolls down to the element showing more results and clicks on it.\n7. Takes a manual screenshot (optional).\n8. If any of these steps fail, reports an error and marks the test step as failed.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "SearchValueInGlobalSearchField",
        "code": "public void SearchValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//lightning-formatted-rich-text//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(8);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`SearchValueInGlobalSearchField(String value)` searches for a given `value` in a global search field on a web page. The method attempts to load the page, locate the search button, and then enter the provided `value` into the search field. If the \"Show more results\" option is present, it will click on that as well. If any of these steps fail or if the expected elements are not found, the method will report a test step failure with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnDocumentInRequiredDocumentsInQCUAT",
        "code": "public void clickOnDocumentInRequiredDocumentsInQCUAT(String Value) {\n\t\ttry {\n\t\t\tString document = Value + \"#xpath=//span[text()='Required Document Name']/following::span[text()='\" + Value\n\t\t\t\t\t+ \"']|//span[text()='Required Documents Name']/following::span[text()='\" + Value + \"']\";\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\tclickOnSpecialElement(document);\n\t\t\t\ttestStepPassed(\"Successfully clicked \" + Value + \" in Required Documents\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + Value + \" in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to find waiver Reason :\" + e);\n\t\t}\n\t}",
        "description": "This Java method is used to simulate a click on a specific document within the \"Required Documents\" section of an application. The method takes a string parameter `Value` which represents the name of the document to be clicked.\n\nHere's what the method does:\n\n1. It constructs a XPath expression based on the provided `Value`, which searches for a specific span element containing the given value.\n2. It checks if the constructed XPath expression is displayed using the `isElementDisplayed` method with a timeout of 4 seconds.\n3. If the element is displayed, it calls two other methods: `highLighterMethodWithForLoop` to highlight the element and `clickOnSpecialElement` to simulate the click on the element.\n4. It logs a success message indicating that the test step passed.\n5. If the element is not displayed, it logs a failure message indicating that the test step failed.\n6. In case of any exception during the execution of the method, it logs a failure message with the error details.\n\nIn summary, this method automates the process of clicking on a specific document within the \"Required Documents\" section in an application.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "SearchAccountValueInGlobalSearchField",
        "code": "public void SearchAccountValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//mark[contains(text(),'accounts')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SearchAccountValueInGlobalSearchField`, searches for a specific value (`value`) in the global search field of an application. It first waits for the page to load and then searches for specific elements such as the search button, search field, and \"Show more results\" option using XPath locators.\n\nThe method attempts to perform the following steps:\n\n1. Waits for the page to load.\n2. Clicks on the search button if it's displayed within a certain time limit (25 seconds).\n3. Types the given `value` into the search field if it's displayed within a certain time limit (9 seconds).\n4. Waits for 3 seconds before proceeding.\n5. If the \"Show more results\" option is displayed, clicks on it.\n\nIf any of these steps fail or times out, the method reports a test step failure with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 45);\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\t\tclickOn(searchValue);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchField`, enters a given value into a search field on a web page. It uses various Selenium WebDriver methods to:\n\n1. Wait for the page to load\n2. Find and wait for the search input field to be displayed\n3. Enter the provided value into the search field using the `typeIn` method\n4. Click on the first option that matches the entered value (assuming it's an autocomplete list)\n\nIf the search field is not present or any other exception occurs, the test step fails with a corresponding error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectQueueListInDropdown",
        "code": "public void selectQueueListInDropdown(String DigitalValue) {\n\t\ttry {\n\t\t\tString Label = \"Queue list view#xpath=//button[contains(@title,'Select a List View')]\";\n\t\t\tString Value = \"#xpath=//div[@class='uiInput uiAutocomplete uiInput--default uiInput--picklist']//input[@role='combobox']\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tif (isElementDisplayed(Label, 5)) {\n\t\t\t\tclickOn(Label);\n\t\t\t\twaitTime(6);\n\t\t\t\twaitForElement(Value, 10);\n\t\t\t\tif (isElementDisplayed(Value, 5)) {\n\t\t\t\t\thighLighterMethod(Value);\n\t\t\t\t\tWebElement input = findWebElement(Value);\n\t\t\t\t\tchar ch[] = DigitalValue.toCharArray();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + DigitalValue + \"' in  'Case Queue' input field\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString listBox = \" Case Queue listbox#xpath=(//ul[@class= 'slds-dropdown__list slds-show']//li/a/lightning-icon//following-sibling::span[@class=' virtualAutocompleteOptionText'])[2]\";\n\t\t\t\t\tString listOptions = DigitalValue\n\t\t\t\t\t\t\t+ \" list Option #xpath=//ul[@class= 'slds-dropdown__list slds-show']//li/a/lightning-icon//following-sibling::span[@class=' virtualAutocompleteOptionText']/mark[text()='\"\n\t\t\t\t\t\t\t+ DigitalValue + \"']\";\n\t\t\t\t\tif (isElementDisplayed(listBox, 10)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else if (isElementDisplayed(listOptions, 10)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOnSpecialElement(listOptions);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(DigitalValue + \" value is not present in the Case Queue listbox\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectvaluefromdownarror\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectQueueListInDropdown`, is used to select a value from a dropdown list in a Salesforce application. It takes a string parameter `DigitalValue` which represents the value to be selected.\n\nThe method first waits for an element with the specified label and then checks if it's displayed. If the element is displayed, it clicks on it and waits for another element to appear. It then selects the input field and types in the `DigitalValue` character by character, followed by a delay.\n\nAfter typing in the value, it waits for the page to load and then checks if an element with the specified label (the listbox) is displayed. If it's not displayed, it checks another element with the specified label (list options). If either of these elements are displayed, it highlights them using the `highLighterMethod` and clicks on them.\n\nIf none of these elements are displayed, or if there's an exception during the process, the method fails the test step.",
        "input": [
            "String DigitalValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectQueueListInLeadsDropdown",
        "code": "public void selectQueueListInLeadsDropdown(String DigitalValue) {\n\t\ttry {\n\t\t\tString Label = \"Queue list view#xpath=//span[text()='Leads']/following-sibling::span\";\n\t\t\tString Value = \"#xpath=//div[@class='uiInput uiAutocomplete uiInput--default uiInput--picklist']//input[@role='combobox']\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tif (isElementDisplayed(Label, 5)) {\n\t\t\t\tclickOn(Label);\n\t\t\t\twaitTime(6);\n\t\t\t\twaitForElement(Value, 10);\n\t\t\t\tif (isElementDisplayed(Value, 5)) {\n\t\t\t\t\thighLighterMethod(Value);\n\t\t\t\t\tWebElement input = findWebElement(Value);\n\t\t\t\t\tchar ch[] = DigitalValue.toCharArray();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + DigitalValue + \"' in  'Case Queue' input field\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString listBox = \" Case Queue listbox#xpath=(//ul[@class= 'slds-dropdown__list slds-show']//li/a/lightning-icon//following-sibling::span[@class=' virtualAutocompleteOptionText'])\";\n\t\t\t\t\tString listOptions = DigitalValue\n\t\t\t\t\t\t\t+ \" list Option #xpath=//ul[@class= 'slds-dropdown__list slds-show']//li/a/lightning-icon//following-sibling::span[@class=' virtualAutocompleteOptionText']/mark[text()='\"\n\t\t\t\t\t\t\t+ DigitalValue + \"']\";\n\t\t\t\t\twaitForElement(listBox, 10);\n\t\t\t\t\tif (isElementDisplayed(listBox, 6)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else if (isElementDisplayed(listOptions, 10)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(DigitalValue + \" value is not present in the Case Queue listbox\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectvaluefromdownarror\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectQueueListInLeadsDropdown`, is used to interact with a dropdown list in the \"Case Queue\" section of an application. The method takes a string parameter `DigitalValue` which represents the value to be selected from the dropdown list.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element labeled \"Queue list view\" to be displayed, then clicks on it.\n2. It enters the `DigitalValue` into the \"Case Queue\" input field using the `sendKeys` method.\n3. It waits for the dropdown list box to load and then selects the option that matches the `DigitalValue`.\n\nThe method also includes some error handling using a try-catch block. If an exception occurs during the execution of the method, it will catch the exception and report a test step failure with the message \"Failed in selectvaluefromdownarror\" followed by the exception's message.\n\nOverall, this method is used to automate the process of selecting a value from a dropdown list in the \"Case Queue\" section of an application.",
        "input": [
            "String DigitalValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "toClickTheToolTipIcon",
        "code": "public void toClickTheToolTipIcon() {\n\t\ttry {\n\t\t\tString toolTipIcon = \"#xpath=//button[@title='Pin this list view']\";\n\t\t\t;\n\n\t\t\twaitForElement(toolTipIcon, 10);\n\t\t\tif (isElementDisplayed(toolTipIcon, 10)) {\n\t\t\t\tclickOn(toolTipIcon);\n\t\t\t\tmanualScreenshot(\"Successfully Tooltip icon is pinned.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Already Tooltip icon is pinned.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in To Click The Tool Tip Icon. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toClickTheToolTipIcon()`, attempts to click on a tooltip icon with the title \"Pin this list view\" after waiting for the element to be displayed. If the element is not displayed within 10 seconds, it will take a manual screenshot indicating that the tooltip icon was already pinned. If an exception occurs during execution, the method will catch it and report a test step failure.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "getCaseID",
        "code": "public String getCaseID() {\n\t\tString caseID = null;\n\t\ttry {\n\t\t\tString caseIdPath = \"Case ID#xpath=//div[text()='Case']/..//div/span\";\n\t\t\twaitForElement(caseIdPath, 10);\n\t\t\tif (isElementDisplayed(caseIdPath, 5)) {\n\t\t\t\tcaseID = getText(caseIdPath);\n\t\t\t\thighLighterMethod(caseIdPath);\n\t\t\t\tmanualScreenshot(\"Case ID number : \" + caseID);\n\t\t\t} else {\n\t\t\t\t// testStepFailed(\"Case id is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get Case id number. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn caseID;\n\n\t}",
        "description": "This Java method, named `getCaseID`, attempts to retrieve the Case ID from a web page and return it as a string. It uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, and `getText` to locate and extract the Case ID. If the Case ID is found, it also highlights the element using a custom method (`highLighterMethod`) and takes a manual screenshot with the Case ID number as the file name. If any exceptions occur during the process, it logs a test step failure with the error message. The method returns the retrieved Case ID or `null` if an exception occurs.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "passAllQCDocuments",
        "code": "public void passAllQCDocuments(String invoiceRadioOptionLabel, String eCSRadioOptionLabel) {\n\n\t\ttry {\n\t\t\tString documentStatusTab = \"#xpath=//a[@data-label='Initiated']\";\n\n\t\t\tif (isElementDisplayed(documentStatusTab, 3)) {\n\t\t\t\tList<WebElement> listOfActiveTabs = findWebElements(documentStatusTab);\n\t\t\t\t;\n\n\t\t\t\tfor (int iterate = 0; iterate < listOfActiveTabs.size(); iterate++) {\n\t\t\t\t\t/*\n\t\t\t\t\t * refreshPage();\n\t\t\t\t\t */\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tList<WebElement> listOfCurrentActiveTabs = findWebElements(documentStatusTab);\n\t\t\t\t\tString currentTabStatus = null;\n\t\t\t\t\tString currentTabLabel = null;\n\t\t\t\t\tint attempts = 0;\n\t\t\t\t\twhile (attempts < 10) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\twaitTime(6);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tcurrentTabStatus = listOfCurrentActiveTabs.get(0).getAttribute(\"data-label\");\n\t\t\t\t\t\t\tcurrentTabLabel = listOfCurrentActiveTabs.get(0).getText();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} catch (StaleElementReferenceException e) {\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattempts++;\n\t\t\t\t\t}\n\t\t\t\t\tif (iterate == listOfActiveTabs.size() - 1) {\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tselectValueFromDropdownInCases(\"Customer Mob No Available On Invoice\", \"N\");\n\t\t\t\t\t\tclickOnButton(\"Save\");\n\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t}\n\t\t\t\t\tif (currentTabStatus.equalsIgnoreCase(\"Initiated\")) {\n\t\t\t\t\t\tif (currentTabLabel.equalsIgnoreCase(\"Invoice\")) {\n\t\t\t\t\t\t\tclickRadioButton(invoiceRadioOptionLabel);\n\t\t\t\t\t\t} else if (currentTabLabel.equalsIgnoreCase(\"ECS Mandate\")) {\n\t\t\t\t\t\t\tclickRadioButton(eCSRadioOptionLabel);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclickOnButton(\"Passed\");\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"Good\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"All documents are passed.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, named `passAllQCDocuments`, appears to be part of an automation test for a web application. The method takes two string parameters, `invoiceRadioOptionLabel` and `eCSRadioOptionLabel`, which are likely used to select radio buttons on the webpage.\n\nThe method attempts to locate elements with the XPath expression `//a[@data-label='Initiated']`. If these elements are displayed (i.e., the tab is open), it iterates through them, refreshing the page, waiting for the page to load, and then checks the status and label of each tab. It then takes one of two actions depending on the tab's status and label:\n\n1. If the tab is labeled \"Invoice\", it selects a radio button with the specified `invoiceRadioOptionLabel`. If the tab is labeled \"ECS Mandate\", it selects a radio button with the specified `eCSRadioOptionLabel`. In either case, it then clicks the \"Passed\" button.\n2. If the tab is not labeled \"Invoice\" or \"ECS Mandate\", it does nothing.\n\nIf no elements matching the XPath expression are displayed (i.e., the tab is not open), the method takes a manual screenshot with the message \"All documents are passed.\" Finally, if any exceptions occur during execution, the method prints the stack trace to the console.",
        "input": [
            "String invoiceRadioOptionLabel",
            "String eCSRadioOptionLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyNavigateToPinnedQueuePage",
        "code": "public boolean verifyNavigateToPinnedQueuePage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString toolTipElement = \"#xpath=//lightning-helptext[contains(@class,'pinnedListTooltipButton')]\";\n\t\t\twaitForElement(toolTipElement, 10);\n\t\t\tif (isElementDisplayed(toolTipElement, 5)) {\n\t\t\t\tmanualScreenshot(\"Successfully navigate to Pinned Queue list.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to navigate to Pinned queue list.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Navigate To Pinned Queue Page\" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyNavigateToPinnedQueuePage`, is used to verify that the user has successfully navigated to the Pinned Queue page. \n\nIt attempts to locate an element with a specific XPath (`#xpath=//lightning-helptext[contains(@class,'pinnedListTooltipButton')]`) and waits for it to be displayed within a certain time limit (10 seconds). If the element is displayed, it takes a manual screenshot as evidence of successful navigation. \n\nIf the element is not displayed or if an exception occurs during the process, the method fails the test step with an appropriate error message. The method returns a boolean value indicating whether the verification was successful or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyBlindDataEntryIsPresent",
        "code": "public boolean verifyBlindDataEntryIsPresent() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString blindDataEntry = \"Blind Data entry#xpath=//div[text()='Blind Data']\";\n\t\t\t;\n\n\t\t\tif (isElementDisplayed(blindDataEntry, 4)) {\n\t\t\t\tscrollToWebElement(blindDataEntry);\n\t\t\t\tmanualScreenshot(\"Blind data entry is mandatory.\");\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Blind data entry is not mandatory.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Blind Data Entry Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyBlindDataEntryIsPresent`, checks if a specific element with the XPath `\"//div[text()='Blind Data']\"` is present on the page and verifies if it's displayed. It also attempts to scroll to this element and takes a manual screenshot upon successful verification. The method returns a boolean value indicating whether the element was found or not. If an exception occurs during the execution of the method, it logs the failure with the exception message.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "getOpportunityID",
        "code": "public String getOpportunityID() {\n\t\tString oppID = null;\n\t\ttry {\n\t\t\tString caseOppID = \"#xpath=//span[text()='Case Details']//..//div/span\";\n\t\t\twaitForElement(caseOppID, 10);\n\t\t\tif (isElementDisplayed(caseOppID, 4)) {\n\t\t\t\tString splitValue = null;\n\t\t\t\tsplitValue = getText(caseOppID);\n\t\t\t\tsplitValue = splitValue.split(\"\\n\")[0];\n\t\t\t\toppID = splitValue.split(\":\")[1].trim();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\" opp ID is not present in Case page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Get Opportunity ID. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn oppID;\n\t}",
        "description": "This Java method, `getOpportunityID`, attempts to retrieve the opportunity ID from a web page. It uses an XPath expression to locate the element containing the opportunity ID, waits for the element to be displayed, and then extracts the ID value from the element's text content. If the element is not displayed or an exception occurs during the process, the method fails the test step. The method returns the extracted opportunity ID as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnAllocateButton",
        "code": "public void clickOnAllocateButton() {\n\t\ttry {\n\t\t\tString allocate_Btn = \"Allocate button#xpath=//button/span[text()='Allocate']\";\n\n\t\t\twaitForElement(allocate_Btn, 10);\n\t\t\tif (isElementDisplayed(allocate_Btn, 4)) {\n\t\t\t\tclickOn(allocate_Btn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Allocate or Process buttion is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Allocate Button. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnAllocateButton`, attempts to click on an \"Allocate\" button on a web page. It uses Selenium WebDriver to interact with the browser.\n\nHere's what it does:\n\n1. Defines a string variable `allocate_Btn` that contains the XPath locator for the \"Allocate\" button.\n2. Waits up to 10 seconds for the element to be displayed using the `waitForElement` method.\n3. Checks if the element is displayed within 4 seconds using the `isElementDisplayed` method.\n4. If the element is displayed, it clicks on it using the `clickOn` method.\n5. If the element is not displayed (or the waiting time expires), it logs a test step failure with an error message indicating that the \"Allocate\" button was not found.\n6. Catches any exceptions that occur during execution and logs a test step failure with the exception message.\n\nIn summary, this method attempts to click on the \"Allocate\" button after verifying its presence on the page.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnLink1",
        "code": "public void clickOnLink1(String linkName) {\n\t\ttry {\n\t\t\t// waitForElement(linkName);\n\t\t\twaitTime(6);\n\t\t\tString link = linkName + \"#xpath=//a[@title='\" + linkName + \"']\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 30);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t// manualScreenshot(\"Click on:\"+linkName);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLink1`, attempts to click on a specific link with the given name (`linkName`) on a web page. The method uses various tools from Selenium WebDriver:\n\n1. Waits for an element (either by its text or using XPath) and then performs actions:\n\t* Waits 6 seconds before attempting to find the element.\n\t* Scrolls to the element using `scrollbycordinates`.\n\t* Checks if the element is present, and if so, clicks on it using `clickOnSpecialElement`. \n2. If the link is not found, the method fails the test step with a message indicating that the link was not present.\n\nNote: The `waitForElement`, `waitTime`, `scrollbycordinates`, `isElementPresent`, `clickOnSpecialElement` and `testStepFailed` methods are likely custom implementations or wrappers around Selenium WebDriver's built-in methods.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 25);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tmanualScreenshot(\"Click on:\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton`, simulates a mouse click on a web element with the specified name. It uses Selenium WebDriver to perform the following actions:\n\n1. Builds an XPath expression to locate the button with the given name.\n2. Waits for the button to be present and visible (up to 25 seconds).\n3. Scrolls to the button if it's not already visible.\n4. Clicks on the button using `clickOnSpecialElement`.\n5. Takes a manual screenshot of the current page, indicating that the button was clicked.\n\nIf any of these steps fail or the button is not present after waiting, the method reports a test step failure and logs an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonInSalesHelpline",
        "code": "public void clickOnButtonInSalesHelpline(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//slot[@name='tabs']//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tmanualScreenshot(\"Click on \" + buttonName);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInSalesHelpline`, simulates a click on a specific button within the Sales Helpline page. The method takes a `String` parameter `buttonName` which is used to construct an XPath expression to locate the button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `buttonName` with the rest of the XPath path.\n2. It waits for the element to be present using the `waitForElement` method.\n3. If the element is displayed, it highlights the button using the `highLighterMethod`, waits for 2 seconds, takes a manual screenshot, and then simulates a click on the button using the `Actions` class.\n4. If the element is not displayed, it marks the test step as failed with an error message indicating that the button is not present.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]\";\n\t\t\twaitForElement(successPopup, 10);\n\t\t\tif (isElementDisplayed(successPopup, 4)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Unable to capture the success popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessage`, is used to verify if a specific success message appears on the screen. \n\nHere's what it does:\n\n1. It defines a string variable `successPopup` that contains an XPath expression to locate the success message element.\n2. It uses a `waitForElement` method (not shown in this code snippet) to wait for the specified amount of time (10 seconds in this case) until the success message is displayed.\n3. If the success message is displayed, it checks if the element is still displayed after a certain amount of time (4 seconds in this case).\n4. If the success message is displayed and remains visible, it takes a manual screenshot with the comment \"Success Popup appeared.\".\n5. If the success message is not displayed or disappears before the specified time, it takes a manual screenshot with the comment \"Unable to capture the success popup\".\n6. The method also catches any exceptions that may occur during its execution, and if an exception occurs, it reports the failure by calling `testStepFailed` method with the error message.\n\nIn summary, this method is used to verify the appearance of a specific success message on the screen and take screenshots as evidence of its presence or absence.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonQC",
        "code": "public void clickOnButtonQC(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\n\t\t\tpageScrollUp();\n\t\t\twaitTime(1);\n\t\t\tpageScrollDown();\n\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQC`, is used to perform a click action on a specific button with the given label (`buttonLabel`) on a web page. It uses various WebDriver methods and utility functions to:\n\n1. Wait for a certain time period (4 seconds).\n2. Construct an XPath expression to locate the button element.\n3. Scroll up, wait for 1 second, and then scroll down to ensure the button is in view.\n4. Wait for the button to be displayed within a specified time limit (30 seconds).\n5. If the button is displayed, perform a click action using `Actions` class.\n6. Log a test step as passed if the click action is successful.\n7. If the button is not displayed, log a test step as failed with an error message.\n\nThe method also handles an optional scenario where the button may be located within a specific section of the page. If this is the case, it uses a different XPath expression and performs a click on that element instead.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyPreviewButton",
        "code": "public void verifyPreviewButton(String label, String doc) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString button = label + \"#xpath=//a[text()='Preview']\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tmanualScreenshot(label + \" button is present under the \" + doc + \" document.\");\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" button is not present under the \" + doc + \" document.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyPreviewButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyPreviewButton`, is used to verify the presence of a specific button labeled with the provided `label` under a specified `doc` document. The method performs the following actions:\n\n1. Waits for the page to load.\n2. Creates an XPath expression by combining the `label` and the string \"#xpath=//a[text()='Preview']\".\n3. Waits for the element matching the created XPath expression to be displayed within a timeout of 5 seconds.\n4. If the button is present, it:\n\t* Scrolls to the button.\n\t* Highlights the button using the `highLighterMethod`.\n\t* Captures a manual screenshot with a message indicating that the button is present under the specified document.\n\t* Clicks on the button using the `clickOnSpecialElement` method.\n5. Waits for the page to load again after clicking the button.\n6. If the button is not present, it marks the test step as failed and reports an error.\n\nThe method also includes a catch block to handle any exceptions that may occur during its execution, and if an exception occurs, it marks the test step as failed with a message containing the exception's message.",
        "input": [
            "String label",
            "String doc"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyImgInQC",
        "code": "public void verifyImgInQC(String doc, boolean check) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString img = \"#xpath=//img[contains(@src,'/Operations/sfc/servlet.shepherd/version/download')]\";\n\t\t\tString frame = \"Message#xpath=//div//iframe\";\n\t\t\tString button = \"#xpath=//a[text()='Preview']\";\n\t\t\tif (!check) {\n\t\t\t\tswitchToFrame(frame);\n\t\t\t\twaitForElement(img, 5);\n\t\t\t\tif (isElementDisplayed(img, 5)) {\n\t\t\t\t\tscrollToElement(img);\n\t\t\t\t\tswitchToDefaultFrame();\n\t\t\t\t\tscrollToWebElement(button);\n\t\t\t\t\tswitchToFrame(frame);\n\t\t\t\t\thighLighterMethod(img);\n\t\t\t\t\tmanualScreenshot(\"Image is present under the \" + doc + \" document.\");\n\t\t\t\t\tswitchToDefaultFrame();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Image is not present under the \" + doc + \" document.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (check) {\n\t\t\t\tif (isElementDisplayed(img, 5)) {\n\t\t\t\t\tscrollToElement(img);\n\t\t\t\t\thighLighterMethod(img);\n\t\t\t\t\tmanualScreenshot(\"Same \" + doc + \" document image is present in preview window.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Same \" + doc + \" document image is not present in preview window.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyImgInQC. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyImgInQC`, verifies the presence of an image under a specific document (`doc`) in a Quality Control (QC) page. The method takes two parameters: `doc` (a string representing the document name) and `check` (a boolean indicating whether to check for the image's presence or not).\n\nThe method uses various WebDriver methods, such as `switchToFrame`, `waitForElement`, `isElementDisplayed`, `scrollToElement`, and `highLighterMethod`, to interact with the QC page. If the `check` parameter is `false`, it attempts to verify the image's presence under the specified document by:\n\n1. Switching to a specific frame (`frame`) using `switchToFrame`.\n2. Waiting for the image element (`img`) to load using `waitForElement`.\n3. Verifying if the image is displayed using `isElementDisplayed`.\n4. Scrolling to the image using `scrollToElement` and highlighting it using `highLighterMethod`.\n5. Taking a manual screenshot of the verified image.\n\nIf the image is not present, it fails the test step with an error message.\n\nIf the `check` parameter is `true`, it verifies if the same image is present in the preview window by scrolling to the image and highlighting it using the same methods as above. If the image is not present, it also fails the test step with an error message.\n\nThe method catches any exceptions that may occur during execution and reports a failure with an error message if one occurs.",
        "input": [
            "String doc",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "casesPage",
        "code": "public void casesPage(String opportunityName, String acceptValue, String poiLabel, String passedValue,\n\t\t\tString saveValue) {\n\n\t\ttry {\n\t\t\tenterValueInSearchField(opportunityName);\n\t\t\twaitTime(2);\n\t\t\tclickOnCases(opportunityName);\n\t\t\tclickOnLink1(acceptValue);\n\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(7);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\n\t\t\tdealId = getCasesValue(\"Deal Id\");\n\t\t\tECSEndDate = getCasesValue(\"ECS End Date\");\n\t\t\tpoiNumber = getCasesValue(\"POI No\");\n\t\t\tclickOnLink1(poiLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitTime(1);\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"POA\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"Application Form\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"PAN/Form60\");\n\t\t\twaitTime(5);\n\t\t\tselectFromDropdown(GOR.QCPANValidation, \"Complete Form 60 Available\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"LTS / Cross Sell\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"Customer Photo\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"Invoice\");\n\t\t\twaitForPageToLoad();\n\t\t\t// add radio button\n\t\t\tclickRadioButton(\"System\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"ECS Mandate\");\n\t\t\twaitForPageToLoad();\n\t\t\t// add radio button\n\t\t\tclickRadioButton(\"Filled\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\trefreshPage();\n\t\t\twaitTime(7);\n\t\t\tselectValueFromDropdownInCases(\"Customer Mob No Available On Invoice\", \"N\");\n\t\t\tclickOnButtonQC(saveValue);\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink1(\"Cancelled cheque\");\n\t\t\twaitTime(5);\n\t\t\tselectFromDropdown(GOR.QCIMPSValidation, \"Customer Name Match with Chq & A/C Holder Name\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `casesPage`, appears to automate a series of actions on a web page related to cases. The method takes five string parameters: `opportunityName`, `acceptValue`, `poiLabel`, `passedValue`, and `saveValue`. \n\nThe method performs the following steps:\n\n1. Enters a value in a search field using the `enterValueInSearchField` method.\n2. Waits for some time using the `waitTime` method.\n3. Clicks on a link related to cases using the `clickOnCases` method.\n4. Clicks on another link based on an acceptance value using the `clickOnLink1` method.\n5. Waits for the page to load and then refreshes it using the `refreshPage` method.\n6. Retrieves values from the page using the `getCasesValue` method and stores them in variables.\n7. Clicks on various links, including \"POA\", \"Application Form\", \"PAN/Form60\", \"LTS / Cross Sell\", \"Customer Photo\", \"Invoice\", \"ECS Mandate\", and \"Cancelled cheque\" using the `clickOnLink1` method.\n8. Performs actions related to each link, such as selecting options from dropdown menus or clicking radio buttons.\n9. Verifies success messages after each action using the `verifySuccessMessage` method.\n10. If an exception occurs during the execution of the method, it catches and reports the error using the `testStepFailed` method.\n\nThe purpose of this method appears to be to automate a series of tests for cases on a web page.",
        "input": [
            "String opportunityName",
            "String acceptValue",
            "String poiLabel",
            "String passedValue",
            "String saveValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyErrorPopup",
        "code": "public void verifyErrorPopup() {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Success message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/following-sibling::span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tmanualScreenshot(\"Successfully got the Error popup [ \" + getText(ErrorPopup) + \" ] message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorPopup`, is designed to verify the presence of an error popup message on a webpage. Here's what it does:\n\n1. It attempts to wait for up to 15 seconds for an element with the specified XPath (`//div[@class='toastTitle slds-text-heading--small' and text()='Error']/following-sibling::span`) to be displayed.\n2. If the element is displayed, it checks if the popup message is still visible after a short delay (4 seconds).\n3. If the popup is still visible, it takes a manual screenshot with the error message as part of the file name.\n4. If the popup is not visible or there's an issue during the verification process, the method fails the test step.\n\nThe method uses try-catch blocks to handle any exceptions that might occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyErrorPopupInQC",
        "code": "public void verifyErrorPopupInQC(String expectedError) {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Success message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/parent::div//div[contains(@id,'toastDescription')]//span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tString actualError_Msg = getText(error_Msg).trim();\n\t\t\t\tif (actualError_Msg.equalsIgnoreCase(expectedError) || actualError_Msg.contains(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorPopupInQC`, is used to verify if an expected error message is displayed in a Quality Control (QC) scenario. \n\nThe method attempts to locate and display the error popup with a specified XPath, waits for it to appear, then checks if it's actually visible on the screen. If the error popup is found and its text matches or contains the expected error message, the test passes. However, if the error popup doesn't match the expected error message or isn't displayed at all, the test fails.\n\nAdditionally, this method also takes a screenshot manually when the expected validation message is fired, which can be helpful for debugging purposes. If any exceptions occur during the execution of this method, it will also fail the test and provide an error message.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "casesPageVerifyImageEnlargement",
        "code": "public void casesPageVerifyImageEnlargement(String opportunityName, String acceptValue, String poiLabel,\n\t\t\tString passedValue, String saveValue) {\n\n\t\ttry {\n\n\t\t\tenterValueInSearchField(opportunityName);\n\t\t\twaitTime(2);\n\t\t\tclickOnCases(opportunityName);\n\t\t\tclickOnLink1(acceptValue);\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!url.contains(\"preprod\")) {\n\t\t\t\tclickOnCaesesSaveButton();\n\t\t\t}\n\t\t\twaitForPageToLoad();\n\n\t\t\twaitTime(7);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\n\t\t\tdealId = getCasesValue(\"Deal Id\");\n\t\t\tECSEndDate = getCasesValue(\"ECS End Date\");\n\t\t\tpoiNumber = getCasesValue(\"POI No\");\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'POI' document tab and same image is present in Preview window\");\n\n\t\t\tclickOnLink1(poiLabel);\n\t\t\tverifyImgInQC(poiLabel, false);\n\t\t\tverifyPreviewButton(\"Preview\", poiLabel);\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(poiLabel, true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(poiLabel);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitTime(1);\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'POA' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"POA\");\n\t\t\tverifyImgInQC(\"POA\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"POA\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"POA\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"POA\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'Application Form' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"Application Form\");\n\t\t\tverifyImgInQC(\"Application Form\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"Application Form\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"Application Form\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"Application Form\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'PAN/Form60' document tab and same image is present in Preview window\");\n\n\t\t\tclickOnLink1(\"PAN/Form60\");\n\t\t\twaitTime(5);\n\t\t\tverifyImgInQC(\"PAN/Form60\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"PAN/Form60\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"PAN/Form60\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"PAN/Form60\");\n\t\t\twaitTime(5);\n\t\t\tselectFromDropdown(GOR.QCPANValidation, \"Complete Form 60 Available\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'LTS / Cross Sell' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"LTS / Cross Sell\");\n\t\t\tverifyImgInQC(\"LTS / Cross Sell\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"LTS / Cross Sell\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"LTS / Cross Sell\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"LTS / Cross Sell\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'Customer Photo' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"Customer Photo\");\n\t\t\tverifyImgInQC(\"Customer Photo\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"Customer Photo\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"Customer Photo\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"Customer Photo\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'Invoice' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"Invoice\");\n\t\t\tverifyImgInQC(\"Invoice\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"Invoice\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"Invoice\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"Invoice\");\n\t\t\twaitForPageToLoad();\n\t\t\t// add radio button\n\t\t\tclickRadioButton(\"System\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'ECS Mandate' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"ECS Mandate\");\n\t\t\ttestStepInfo(\"Validate Blank radio button is removed from ECS Mandate\");\n\t\t\tverifyRadioButton(\"Blank\");\n\t\t\tverifyImgInQC(\"ECS Mandate\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"ECS Mandate\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"ECS Mandate\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"ECS Mandate\");\n\t\t\twaitForPageToLoad();\n\t\t\t// add radio button\n\t\t\tclickRadioButton(\"Filled\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"*********** Verify without saving the user not able to pass last document, validation should be fired ***********\");\n\n\t\t\trefreshPage();\n\t\t\tclickOnLink1(\"Cancelled cheque\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifyErrorPopupInQC(\"Please select value in Qc IMPS Validation field\");\n\t\t\trefreshPage();\n\t\t\twaitTime(7);\n\t\t\tselectValueFromDropdownInCases(\"Customer Mob No Available On Invoice\", \"N\");\n\t\t\tclickOnButtonQC(saveValue);\n\n\t\t\twaitForPageToLoad();\n\t\t\tpageScrollUp();\n\n\t\t\ttestStepInfo(\n\t\t\t\t\t\"Verify Preview button and image is present under 'Cancelled cheque' document tab and same image is present in Preview window\");\n\t\t\tclickOnLink1(\"Cancelled cheque\");\n\t\t\tverifyImgInQC(\"Cancelled cheque\", false);\n\t\t\tverifyPreviewButton(\"Preview\", \"Cancelled cheque\");\n\t\t\twaitForPageToLoad();\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(2);\n\t\t\tverifyImgInQC(\"Cancelled cheque\", true);\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnLink1(\"Cancelled cheque\");\n\t\t\twaitTime(5);\n\t\t\tselectFromDropdown(GOR.QCIMPSValidation, \"Customer Name Match with Chq & A/C Holder Name\");\n\t\t\tclickOnButton(passedValue);\n\t\t\tverifySuccessMessage();\n\t\t\twaitForPageToLoad();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `casesPageVerifyImageEnlargement`, is a test case for verifying the image enlargement feature on various document tabs in a cases page. The method takes five parameters: `opportunityName`, `acceptValue`, `poiLabel`, `passedValue`, and `saveValue`.\n\nThe method performs the following steps:\n\n1. Enters an opportunity name in the search field, waits for 2 seconds, clicks on the \"Cases\" link, and then clicks on a specific accept value.\n2. Verifies that the preview button and image are present under various document tabs (POI, POA, Application Form, PAN/Form60, LTS/Cross Sell, Customer Photo, Invoice, ECS Mandate, and Cancelled cheque).\n3. For each document tab, it verifies that the same image is present in the preview window.\n4. It also tests the image enlargement feature by clicking on the preview button, waiting for 2 seconds, verifying the image in the preview window, and then returning to the main page.\n5. In some cases, it selects a value from a dropdown list or clicks a radio button before passing the last document.\n6. If the user does not save the changes, it verifies that an error message is displayed when trying to pass the last document.\n\nThe method catches any exceptions and reports test failures if they occur.",
        "input": [
            "String opportunityName",
            "String acceptValue",
            "String poiLabel",
            "String passedValue",
            "String saveValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInSearchField1",
        "code": "public boolean enterValueInSearchField1(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\t\tclickOn(searchValue);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn loadFailure;\n\t}",
        "description": "This Java method, `enterValueInSearchField1`, attempts to enter a given value into a search field on a webpage. It uses Selenium WebDriver and an XPath expression to locate the search input field. The method:\n\n1. Checks if the search field is displayed using the `isElementDisplayed` method.\n2. If the field is present, it enters the provided value using the `typeIn` method.\n3. Waits for the page to load using the `waitForPageToLoad` method.\n4. Clicks on the first option related to the entered value using an XPath expression and the `clickOn` method.\n5. Waits for 2 seconds using the `waitTime` method.\n\nIf any of these steps fail, it reports a test step failure with an error message. The method returns a boolean indicating whether the load was successful or not.",
        "input": [
            "String value"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCaesesSaveButton",
        "code": "public void clickOnCaesesSaveButton() {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString button = \"Save button#xpath=//button[@data-aura-class='uiButton']//span[text()='Save']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnCaesesSaveButton()`, attempts to click on a specific button with the text \"Save\" on the webpage. The button is located using an XPath expression that searches for a `<button>` element with a specific attribute (`data-aura-class='uiButton'`) and then a child `<span>` element with the text \"Save\".\n\nThe method first waits for the element to be present on the page (up to 10 seconds) and then checks if it is displayed within 5 seconds. If the button is not found or not displayed, the test fails.\n\nIf any exceptions occur during the execution of this method, they are caught and the test is marked as failed with an error message containing the exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInAddressField",
        "code": "public void enterValueInAddressField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//../..////../..//input[@class=' input']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAddressField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInAddressField`, enters a given value into an input field with a specific label name. It uses XPath to locate the input field and then attempts to type the provided value into it. If the field is not present or there's an issue during the typing process, it reports a test step failure.\n\nHere's a breakdown of what the method does:\n\n1. Creates an XPath expression to locate the input field based on the given `labelName`.\n2. Waits for the element to be displayed using the `waitForElement` method.\n3. Checks if the element is actually displayed using the `isElementDisplayed` method with a timeout of 5 seconds.\n4. If the element is present, it types the provided `value` into the field using the `typeIn` method.\n5. If the element is not present or there's an issue during typing, it reports a test step failure.\n\nThe method also catches any exceptions that may occur during execution and reports another test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, is used to enter a specified value into an input field on a web page. The method takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression by concatenating the provided label name with an XPath query that targets the input field associated with that label. It then uses this XPath expression to locate the field, waits for it to be displayed (up to 10 seconds), and checks if the field is actually displayed (up to 5 seconds). \n\nIf the field is found and displayed, the method enters the provided `value` into the field using a `typeIn` method. If the field is not found or displayed, the method fails the test step with an error message indicating that the label name's field is not present.\n\nThe method also includes exception handling to catch any unexpected errors that might occur during execution and report them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForElement(profileLink, 10);\n\t\t\tif (isElementDisplayed(profileLink, 3)) {\n\t\t\t\tclickOn(profileLink);\n\t\t\t\tif (isElementDisplayed(btn_logout, 3)) {\n\t\t\t\t\tclickOn(btn_logout);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `logout()`, performs a logout operation in an application. Here's a brief summary of what it does:\n\n1. It refreshes the current page using the `refreshPage()` method.\n2. It waits for 10 seconds for an element with the id `profileLink` to be displayed using the `waitForElement()` method.\n3. If the profile link is displayed, it checks if it's still visible after 3 seconds using the `isElementDisplayed()` method.\n4. If the profile link is present, it clicks on it using the `clickOn()` method.\n5. It then waits for 3 seconds to see if an element with the id `btn_logout` is displayed using the `isElementDisplayed()` method again.\n6. If the logout button is displayed, it clicks on it using the `clickOn()` method and waits for 5 seconds using the `waitTime()` method.\n7. Finally, it logs a test step as passed if the logout operation was successful. If not, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during execution and writes them to a log file.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyOpportunityIsNotDispalyed",
        "code": "public void verifyOpportunityIsNotDispalyed(String value) {\n\t\ttry {\n\t\t\tString txt_label = \"More Buttton#xpath=//span[text()=',\" + value + \"']\";\n\t\t\twaitForElement(txt_label, 10);\n\t\t\tif (!isElementDisplayed(txt_label, 4)) {\n\t\t\t\tmanualScreenshot(\"Created Opportunity is not dispalyed as expected\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Created Opportunity is displayed as expected :\" + value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Created Opportunity \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOpportunityIsNotDispalyed`, verifies that a specific created opportunity is not displayed on the screen. It takes a string value as input, which represents the name of the opportunity to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the element containing the opportunity name.\n2. It uses the `waitForElement` method to wait for the element to be present on the screen (up to 10 seconds).\n3. If the element is displayed, it takes a manual screenshot with a descriptive message indicating that the created opportunity was not displayed as expected.\n4. If the element is not displayed, it marks the test step as failed and provides an error message.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed if one occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOn_moreBtn_Options",
        "code": "public void clickOn_moreBtn_Options(String labelName) {\n\t\ttry {\n\t\t\tString more_btn = \"More Buttton#xpath=//button[text()='More']\";\n\t\t\tString field = labelName + \"#xpath=//button[text()='More']/following-sibling::ul//a/span[text()='\"\n\t\t\t\t\t+ labelName + \"']\";\n\t\t\twaitForElement(more_btn, 25);\n\t\t\tif (isElementDisplayed(more_btn, 5)) {\n\t\t\t\tclickOnSpecialElement(more_btn);\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tclickOnSpecialElement(field);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to clickon More button\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate More button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `clickOn_moreBtn_Options` that simulates clicking on the \"More\" button and then clicks on an element with the same label name as the input parameter. Here's a brief summary of what the method does:\n\n1. It waits for the \"More\" button to be displayed (up to 25 seconds).\n2. If the button is displayed, it clicks on the button using `clickOnSpecialElement`.\n3. It then waits for an element with the label name input parameter to be displayed (up to 10 seconds).\n4. If the element is displayed, it clicks on that element using `clickOnSpecialElement` and waits for the page to load.\n5. If the element is not displayed, it fails the test step and highlights the element using `highLighterMethod`.\n6. If the \"More\" button is not displayed after 25 seconds, or if any other exception occurs during the execution of the method, it fails the test step with an error message.\n\nThe method takes a `String` parameter named `labelName`, which is used to construct the XPath expression for the element that should be clicked on.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOn_moreBtn_OptionsInAdmin",
        "code": "public void clickOn_moreBtn_OptionsInAdmin(String labelName) {\n\t\ttry {\n\t\t\tString more_btn = \"More Buttton#xpath=//span[text()='More']\";\n\t\t\tString field = labelName + \"#xpath=//span[text()='More']/parent::a//following::a//span[text()='\" + labelName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(more_btn, 25);\n\t\t\tif (isElementDisplayed(more_btn, 5)) {\n\t\t\t\tclickOnSpecialElement(more_btn);\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\t\tclickOnSpecialElement(field);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to clickon More button\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate More button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOn_moreBtn_OptionsInAdmin`, is used to click on the \"More\" button and then click on a specific field with the given label name. The method takes a `String` parameter `labelName`.\n\nHere's what it does:\n\n1. It waits for an element with the XPath locator `\"//span[text()='More']\"` (the More button) to be displayed within 25 seconds.\n2. If the element is displayed, it clicks on the More button using the `clickOnSpecialElement` method.\n3. It then waits for another element with a dynamic XPath locator that combines the label name and the XPath `\"//span[text()='More']/parent::a//following::a//span[text()='\" + labelName + \"']\"` to be displayed within 10 seconds.\n4. If the element is displayed, it clicks on it using the `clickOnSpecialElement` method and waits for the page to load.\n5. If the element is not displayed, it fails the test step with a message indicating that the field is not present.\n6. If any exception occurs during the execution of these steps, it fails the test step with an error message.\n\nThe method uses several helper methods, such as `waitForElement`, `isElementDisplayed`, `clickOnSpecialElement`, `testStepFailed`, and `highLighterMethod`, which are not shown in this code snippet.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInSearchFMS",
        "code": "public void enterValueInSearchFMS(String value) {\n\t\ttry {\n\n\t\t\twaitTime(5);\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(10);\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.clear();\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitTime(1);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitTime(3);\n\t\t\t\tmanualScreenshot(\"Entered \" + value + \" value in search field.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `enterValueInSearchFMS`, enters a given value into a search field on a web page. It performs the following actions:\n\n1. Waits for 5 seconds.\n2. Refreshes the page.\n3. Waits for the page to load.\n4. Waits for 10 seconds.\n5. Searches for an element with the XPath `//div/input[@type='search']` and waits for it to be displayed within 20 seconds.\n6. If the search field is found, clears the existing value and enters the given `value`.\n7. Presses Enter twice to submit the search query.\n8. Waits for 1 second and then takes a manual screenshot with a message indicating that the value was entered.\n9. If any exceptions occur during these actions, it fails the test step.\n\nNote: The method uses various utility methods like `waitTime`, `refreshPage`, `waitForPageToLoad`, `findWebElement`, `isElementDisplayed`, and `manualScreenshot` which are not shown in this code snippet.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "changeStageInFMS",
        "code": "public void changeStageInFMS(String stageOption) {\n\t\ttry {\n\t\t\tString readyForDispatch_btn = \"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\";\n\n\t\t\tString field = stageOption + \"#xpath=//div[@class='select-options']//li/a[contains(text(),'\" + stageOption\n\t\t\t\t\t+ \"')]\";\n\t\t\twaitForElement(readyForDispatch_btn, 10);\n\t\t\tif (isElementDisplayed(readyForDispatch_btn, 5)) {\n\t\t\t\tWebElement button = findWebElement(readyForDispatch_btn);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(button).doubleClick().perform();\n\t\t\t\tif (isElementDisplayed(readyForDispatch_btn, 3)) {\n\t\t\t\t\tclickOnSpecialElement(readyForDispatch_btn);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tclickOn(field);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(stageOption + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on Ready For Dispatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate Ready For Dispatch \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `changeStageInFMS`, is used to change the stage option in a system. The method takes a string parameter `stageOption` which represents the new stage option to be selected.\n\nThe method first waits for an element with the specified XPath (`readyForDispatch_btn`) and then checks if it's displayed. If it is, it performs a double click action on the button using Selenium's Actions class.\n\nIf the button is displayed, the method then checks if another element (specified by the `field` variable) is displayed within 3 seconds. If it is, it clicks on that element. If not, it fails the test step and highlights the missing element.\n\nIf any of these steps fail, the method catches the exception and reports a failure with an error message.",
        "input": [
            "String stageOption"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "getAcHolderFullName",
        "code": "public String getAcHolderFullName(String FirstName, String LastName) {\n\t\tString fullName = FirstName + \" \" + LastName;\n\t\treturn fullName;\n\t}",
        "description": "This Java method, `getAcHolderFullName`, takes two `String` parameters, `FirstName` and `LastName`, and returns a new `String` that concatenates the first name and last name with a space in between. The resulting string represents the full name of an individual.",
        "input": [
            "String FirstName",
            "String LastName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyErrorInBlindDataEntry",
        "code": "public boolean verifyErrorInBlindDataEntry() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error_Msg = \"Error Message#xpath=//ul[contains(@class,'error')]//li\";\n\t\t\twaitForElement(error_Msg, 10);\n\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tmanualScreenshot(\"\" + getText(error_Msg) + \" is occurs while save the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Error In Blind Data Entry. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorInBlindDataEntry`, is used to verify if an error message appears while performing a blind data entry operation. \n\nThe method attempts to find the error message element on the page using XPath and waits for it to be displayed within a certain time frame (10 seconds). If the error message is found and displayed, the method sets a flag to `true` and takes a manual screenshot of the error message. \n\nIf any exceptions occur during this process, the method catches them and marks the test step as failed with an error message including the exception's message. The method returns the value of the flag indicating whether the error was found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownField",
        "code": "public void selectValueFromDropdownField(String dropdownLabel, String dropdownValue) {\n\t\ttry {\n\t\t\tString dropdown = dropdownLabel + \"#xpath=//span[text()='\" + dropdownLabel\n\t\t\t\t\t+ \"']//../following-sibling::div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tselectFromDropdown(dropdown, dropdownValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownLabel + \" dropdown is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Value From Dropdown. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownField`, selects a value from a drop-down field based on the given label and value. It uses Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. Creates an XPath expression to locate the dropdown element by its label.\n2. Waits for the dropdown element to be present and visible (up to 10 seconds).\n3. Checks if the dropdown is displayed (up to 4 seconds). If not, it fails the test step with a message indicating that the dropdown is not present.\n4. If the dropdown is displayed, selects the specified value from the drop-down list using another method `selectFromDropdown`.\n5. Catches any exceptions that occur during the process and fails the test step with an error message.\n\nThe method takes two parameters: `dropdownLabel` (the label of the dropdown) and `dropdownValue` (the value to be selected).",
        "input": [
            "String dropdownLabel",
            "String dropdownValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonInFileBatch",
        "code": "public void clickOnButtonInFileBatch(String label) {\n\t\ttry {\n\t\t\tString button = label + \" #xpath=//div[text()='\" + label\n\t\t\t\t\t+ \"'] | //button[contains(@class,'forceActionButton')]//span[text()='\" + label + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInFileBatch`, attempts to click a button with the given label in an automation test. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be present and displayed before attempting to click it. If the element is not found or is not displayed within a certain time limit, the method will fail the test step. The method also catches any exceptions that may occur during execution and fails the test step if an exception occurs.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnFileBatchTab",
        "code": "public void clickOnFileBatchTab(String label) {\n\t\ttry {\n\t\t\tString button = label + \" #xpath=//span[text()='\" + label + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" teb is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on tab \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFileBatchTab`, simulates a click on a file batch tab with the given label. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression to locate the element with the matching label.\n2. Wait for the element to be displayed using the `waitForElement` method (with a timeout of 10 seconds).\n3. Check if the element is displayed within 5 seconds.\n4. If the element is displayed, simulate a click on it using the `clickOn` method.\n5. If the element is not displayed or an exception occurs during the process, record a test step failure with a message indicating the issue.\n\nThe method catches any exceptions that may occur and records a test step failure with a descriptive message if an error occurs.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "captureFileBatchNumber",
        "code": "public String captureFileBatchNumber() {\n\t\tString fileBatch = null;\n\t\ttry {\n\t\t\tString FileBatch = \"FileBatch #xpath=//div[text()='File Batch']/following-sibling::div//span\";\n\t\t\twaitForElement(FileBatch, 10);\n\t\t\tif (isElementDisplayed(FileBatch, 5)) {\n\t\t\t\tfileBatch = getText(FileBatch);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"File Batch number is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in capture File batch number \" + e.getMessage());\n\t\t}\n\t\treturn fileBatch;\n\t}",
        "description": "This Java method, `captureFileBatchNumber()`, captures the file batch number from a web page using Selenium WebDriver. It uses XPath to locate the element containing the file batch number and waits for it to be displayed before attempting to read its text content. If the element is not found or the text cannot be obtained within a specified time limit, the method will fail with an error message. The captured file batch number is then returned as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnSaveButtonInPopup",
        "code": "public void clickOnSaveButtonInPopup() {\n\t\ttry {\n\t\t\tString button = \"#xpath=//span[text()='Save & New']//..//following-sibling::button/span\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInPopup`, attempts to click on a specific \"Save & New\" button within a popup. It uses WebDriverWait and Selenium's isElementDisplayed methods to ensure the element is present before attempting to click it. If the element is not found or displayed, the test step fails. The method also catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInTextField",
        "code": "public void enterValueInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tWebElement textbox = findWebElement(field);\n\t\t\t\ttextbox.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAddressField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextField`, enters a given value into a text field on a web page. The method takes two parameters: `labelName` and `value`. \n\n- It first constructs an XPath expression to locate the text field based on the provided label name.\n- It then waits for the element to be present and visible before attempting to interact with it.\n- If the element is displayed, the method enters the given value into the text field using the `typeIn` method. After entering the value, it simulates pressing the Enter key by sending a Keys.ENTER event to the text box.\n- If the element is not present or visible within the specified time limit, the method fails the test step with an error message indicating that the label name's corresponding text field is missing.\n\nThe method also includes exception handling. If any exception occurs during the execution of this method (e.g., if the element cannot be found or interacted with), it will fail the test step with a descriptive error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnNextButton",
        "code": "public void clickOnNextButton(String buttonLabel) {\n\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//span[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tclickOn(button);\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnNextButton`, attempts to click on a specific button with the given label. It uses Selenium WebDriver to locate and interact with the element.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression by concatenating the provided button label with a fixed XPath syntax.\n2. It waits for the element to be present using `waitForElement`.\n3. If the element is displayed within 5 seconds, it scrolls to the element and clicks on it using `scrollToElement` and `clickOn`, respectively.\n4. If the element is not displayed or takes too long to appear (after waiting 10 seconds), it takes a manual screenshot with the label \"button is not present\" as the filename.\n\nThe method also catches any exceptions that may occur during execution and reports the failure using `testStepFailed`.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyValueInFileOutwardTable",
        "code": "public void verifyValueInFileOutwardTable(String tableColumnHeaderLabel, String tableColumnValue) {\n\n\t\ttry {\n\t\t\tString tablerow = \"Table row#xpath=//thead//tr/th/a/span\";\n\t\t\tString table = \"table#xpath=//div[@class='container cFMS']\";\n\t\t\tint count = 0;\n\t\t\tif (isElementDisplayed(table, 3)) {\n\t\t\t\tList<WebElement> listOfElements = findWebElements(tablerow);\n\t\t\t\tfor (int i = 0; i < listOfElements.size(); i++) {\n\t\t\t\t\tString textvalue = listOfElements.get(i).getText().trim();\n\t\t\t\t\tif (textvalue.equalsIgnoreCase(tableColumnHeaderLabel)) {\n\t\t\t\t\t\tcount = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tString tableCellValue = \"Table cell value#xpath=(//tbody//td//span)[\" + count + \"+\" + 1 + \"]\";\n\t\t\t\tif (isElementDisplayed(tableCellValue, 2)) {\n\n\t\t\t\t\tif (getText(tableCellValue).equals(tableColumnValue)) {\n\n\t\t\t\t\t\tmanualScreenshot(\"Verified successfully \" + tableColumnValue + \" value is present under the '\"\n\t\t\t\t\t\t\t\t+ tableColumnHeaderLabel + \" ' header.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(tableCellValue + \"Value is not auto populate under the ' \"\n\t\t\t\t\t\t\t\t+ tableColumnHeaderLabel + \" '\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the File outward Table.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in Verify Value In File Outward Table. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This is a Java method named `verifyValueInFileOutwardTable` that verifies the value of a specific column header in a table and checks if it matches with the given expected value.\n\nThe method takes two string parameters: `tableColumnHeaderLabel` (the expected header label) and `tableColumnValue` (the expected value).\n\nHere's what the method does:\n\n1. It checks if the File Outward Table is displayed.\n2. If the table is displayed, it finds the row that contains the given column header label.\n3. It then checks if a cell in the corresponding column has the expected value.\n4. If the values match, it takes a manual screenshot and marks the test as passed. Otherwise, it fails the test step with an error message.\n\nIf any exception occurs during the execution of the method, it catches the exception and marks the test as failed with an error message.",
        "input": [
            "String tableColumnHeaderLabel",
            "String tableColumnValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickAndGetFileBarCodeinFMS",
        "code": "public String clickAndGetFileBarCodeinFMS(String oppertuinity) {\n\t\tString barcodevalue = \"\";\n\t\ttry {\n\t\t\tString filebarcode = \"filebarcode #xpath=//span[text()='\" + oppertuinity\n\t\t\t\t\t+ \"']//ancestor::th/following-sibling::td[1]//a\";\n\t\t\twaitForElement(filebarcode, 10);\n\t\t\tif (isElementDisplayed(filebarcode, 5)) {\n\t\t\t\tbarcodevalue = findWebElement(filebarcode).getText();\n\t\t\t\tclickOn(filebarcode);\n\t\t\t\ttestStepPassed(barcodevalue + \" value is clicked successfully.\");\n\t\t\t\treturn barcodevalue;\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"filebarcode field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in filebarcode. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn barcodevalue;\n\t}",
        "description": "This Java method, `clickAndGetFileBarCodeinFMS`, is used to interact with an HTML element that contains a bar code value related to the given `oppertuinity` string. The method:\n\n1. Constructs an XPath expression to locate the element containing the barcode value.\n2. Waits for the element to be displayed and clickable using the `waitForElement` and `isElementDisplayed` methods.\n3. If the element is present, it extracts the barcode value by calling `findWebElement` and getting its text content.\n4. Clicks on the element using the `clickOn` method.\n5. Logs a test step pass message with the extracted barcode value if the operation succeeds.\n6. Returns the extracted barcode value.\n\nIf the element is not present or an exception occurs during execution, the method logs a test step failure message and returns an empty string (`barcodevalue`).",
        "input": [
            "String oppertuinity"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "validatecheckbox",
        "code": "public void validatecheckbox(String checkBox_Label) {\n\t\ttry {\n\t\t\tString check = checkBox_Label + \" checkBox #xpath=//span[text()='\" + checkBox_Label\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div//img[@alt='True']\";\n\t\t\tString uncheck = \"Search #xpath=//span[text()='\" + checkBox_Label\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div//img[@alt='False']\";\n\t\t\twaitForElement(check, 10);\n\t\t\tif (isElementDisplayed(check, 5)) {\n\t\t\t\tmanualScreenshot(checkBox_Label + \" check box is in checked condition\");\n\t\t\t\twaitForElement(uncheck, 10);\n\t\t\t} else if (isElementDisplayed(uncheck, 5)) {\n\t\t\t\ttestStepInfo(checkBox_Label + \" check box is in unchecked condition\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(checkBox_Label + \" check box is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in validate\" + checkBox_Label + \" checkbox. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `validatecheckbox`, is used to verify the checked or unchecked state of a checkbox on a web page. It takes a string parameter `checkBox_Label` which represents the label of the checkbox.\n\nThe method uses Selenium WebDriver and XPath expressions to locate the checkbox element on the page. It then uses a combination of `waitForElement` and `isElementDisplayed` methods to check if the checkbox is displayed and in a specific state (checked or unchecked).\n\nIf the checkbox is found to be checked, it takes a manual screenshot with a log message indicating that the checkbox is in the checked condition. If the checkbox is found to be unchecked, it logs a test step information message indicating that the checkbox is in the unchecked condition.\n\nIf the checkbox is not found on the page at all, the method fails the test step with an error message. If any other exception occurs during the execution of the method, it also fails the test step with an error message.",
        "input": [
            "String checkBox_Label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnEditInFinnone",
        "code": "public void clickOnEditInFinnone() {\n\t\ttry {\n\t\t\tString button = \"Finnone reflow Edit button #xpath=//button[@title='Edit Finnone Reflow']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnEditInFinnone`, attempts to click on an edit button with the title \"Edit Finnone Reflow\" within a specified time limit (10 seconds). \n\nHere's how it works:\n\n1. It defines a string variable `button` that contains the XPath locator for the edit button.\n2. It waits up to 10 seconds for the element to be present on the page using the `waitForElement` method.\n3. If the element is displayed within 5 seconds, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOn` methods respectively.\n4. If the element is not displayed within the specified time or does not exist at all, it takes a manual screenshot with the message \"Edit button is not present.\"\n5. If any exception occurs during the execution of this method, it fails the test step with an error message that includes the exception's message.\n\nIn summary, this method tries to click on the edit button and handles both successful and unsuccessful attempts by taking screenshots or reporting failures accordingly.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyStatusOfFileBatch",
        "code": "public String verifyStatusOfFileBatch(String expectedValue) {\n\t\tString status = null;\n\t\ttry {\n\t\t\tString fileBatchStatus = \"Status #xpath=//tr//span[text()='Status']/../following-sibling::td//span[text()]\";\n\t\t\twaitForElement(fileBatchStatus, 10);\n\t\t\tif (isElementDisplayed(fileBatchStatus, 5)) {\n\t\t\t\tList<WebElement> fileBatchstatus = findWebElements(fileBatchStatus);\n\t\t\t\tfor (WebElement temp : fileBatchstatus) {\n\t\t\t\t\tif ((temp.getText()).equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\t\ttestStepPassed(\"New Status Value :\" + temp.getText());\n\t\t\t\t\t\ttestStepPassed(\"File Batch is Dispatched\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"File Batch number is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in capture File batch number \" + e.getMessage());\n\t\t}\n\t\treturn status;\n\t}",
        "description": "This Java method, `verifyStatusOfFileBatch`, verifies the status of a file batch against an expected value. It uses Selenium WebDriver to interact with a web page and perform the following actions:\n\n1. Waits for an element with the specified XPath (fileBatchStatus) to be displayed.\n2. Checks if the element is displayed within a certain time limit (5 seconds).\n3. If the element is displayed, it retrieves all elements matching the XPath and iterates through them.\n4. For each element, it checks if the text matches the expected value passed as an argument. If it does, it logs two test steps: one for the new status value and another indicating that the file batch is dispatched.\n5. If none of the elements match the expected value, it continues to the next iteration.\n6. If the element is not displayed after waiting for a certain time limit (10 seconds), it fails the test with an error message.\n7. If any exception occurs during the execution of the method, it logs a failure and returns the status as null.\n\nThe method does not return the actual status value, but rather a null value indicating that the verification was successful or failed.",
        "input": [
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "getFinnoneReflow",
        "code": "public String getFinnoneReflow() {\n\t\tString finnoneReflow = \"\";\n\t\ttry {\n\t\t\tString dateAndTime = \"Date and time #xpath=//span[text()='Finnone Reflow']/../following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(dateAndTime, 10);\n\t\t\tif (isElementDisplayed(dateAndTime, 5)) {\n\t\t\t\tWebElement ownerCase = findWebElement(dateAndTime);\n\t\t\t\tfinnoneReflow = ownerCase.getText();\n\t\t\t\ttestStepPassed(\"Finnone Reflow Date and Time : \" + finnoneReflow);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Finnone Reflow Date and Time is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to capture Finnone Reflow Date and Time \" + e.getMessage());\n\t\t}\n\t\treturn finnoneReflow;\n\t}",
        "description": "This Java method, `getFinnoneReflow()`, is used to retrieve the text value of a specific element on a web page that contains the date and time for a Finnone Reflow. The method uses Selenium WebDriver's `waitForElement()` and `findWebElement()` methods to wait for the element to be present and visible, respectively. If the element is found, it retrieves its text content and logs a test step as passed. If the element is not found or an exception occurs during execution, the test step is logged as failed with an error message. The method returns the retrieved text value as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyLBObypassCheckbox",
        "code": "public boolean verifyLBObypassCheckbox() {\n\t\tboolean status = false;\n\t\ttry {\n\t\t\tString checkbox = \"Case Owner #xpath=//span[text()='ByPassLBO']/../following-sibling::div//input\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (isElementDisplayed(checkbox, 5)) {\n\t\t\t\tWebElement checkBox = findWebElement(checkbox);\n\t\t\t\tif (checkBox.isSelected()) {\n\t\t\t\t\tstatus = true;\n\t\t\t\t\ttestStepPassed(\"LBO Bypass check box is selected\");\n\t\t\t\t} else {\n\t\t\t\t\tstatus = false;\n\t\t\t\t\ttestStepPassed(\"LBO Bypass check box is not selected\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"LBO Bypass checkBox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed validate LBO bypass checkbox \" + e.getMessage());\n\t\t}\n\t\treturn status;\n\t}",
        "description": "This Java method, `verifyLBObypassCheckbox()`, checks the status of a specific checkbox on a web page. The checkbox is identified by its XPath locator and has the text \"ByPassLBO\" followed by an input element.\n\nThe method:\n\n1. Waits for the checkbox to be displayed (up to 10 seconds).\n2. If the checkbox is displayed, it checks if the checkbox is selected.\n3. If the checkbox is selected, it sets the `status` variable to `true` and logs a test step passed message.\n4. If the checkbox is not selected, it sets the `status` variable to `false` and logs a test step passed message.\n5. If the checkbox is not displayed (i.e., the element is not found), it logs a test step failed message indicating that the checkbox is not present.\n6. If any exception occurs during the execution of the method, it logs a test step failed message with the error message.\n\nThe method returns a `boolean` value representing the status of the checkbox (selected or not selected).",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCase1",
        "code": "public void clickOnCase1() {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//span[text()='Case Number']/ancestor::thead/following-sibling::tbody//th[@scope='row']//a\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCase1`, attempts to click on a specific HTML element (\"Opputunity Name link\") using an XPath expression. The method waits for the element to be displayed and then clicks on it if it is present. If the element is not present after a certain timeout, the test step fails. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "captureOwnerInMaster",
        "code": "public String captureOwnerInMaster() {\n\t\tString caseOwner = \"\";\n\t\ttry {\n\t\t\tString owner = \"Case Owner #xpath=//span[text()='Case Owner']/../following-sibling::div//a\";\n\t\t\twaitForElement(owner, 10);\n\t\t\tif (isElementDisplayed(owner, 5)) {\n\t\t\t\tWebElement ownerCase = findWebElement(owner);\n\t\t\t\tcaseOwner = ownerCase.getText();\n\t\t\t\ttestStepPassed(\"Case Owner : \" + caseOwner);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseOwner;\n\t}",
        "description": "This Java method, `captureOwnerInMaster`, captures the text of an element identified by a specific XPath expression. The method:\n\n1. Initializes a variable `caseOwner` to an empty string.\n2. Attempts to find an element with the specified XPath expression (`owner`) and waits for it to be displayed (up to 10 seconds).\n3. If the element is displayed, extracts its text using `findWebElement` and assigns it to `caseOwner`.\n4. Logs a test step as passed if the element is found and its text is captured.\n5. If the element is not found or an exception occurs, logs a test step as failed with an error message.\n\nThe method returns the captured `caseOwner` value as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnHoldButton",
        "code": "public void clickOnHoldButton() {\n\t\ttry {\n\t\t\tString button = \"OnHold Button#xpath=//button[@id='hold_Record']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\tmanualScreenshot(\"Click On Hold Button\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnHoldButton`, attempts to click on a specific button with the ID \"hold_Record\" using Selenium WebDriver. \n\nHere's what it does:\n\n1. It defines a string variable `button` that contains the XPath of the button.\n2. It waits for 10 seconds for the element to be present and visible using `waitForElement`.\n3. If the element is found, it moves the mouse cursor to the element and clicks on it using `Actions`.\n4. After clicking, it takes a manual screenshot with the name \"Click On Hold Button\".\n5. If the button is not found or is not displayed within 5 seconds, it fails the test step.\n6. If any exception occurs during the execution of this method, it fails the test step and logs the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueForHoldType",
        "code": "public void selectValueForHoldType(String Label, String value) {\n\t\ttry {\n\t\t\tString dropDown = Label + \"#xpath=//label/span[text()='\" + Label\n\t\t\t\t\t+ \"']/parent::label/following-sibling::div//select\";\n\t\t\twaitForElement(dropDown, 10);\n\t\t\tif (isElementDisplayed(dropDown)) {\n\t\t\t\tscrollToWebElement(dropDown);\n\t\t\t\tselectFromDropdown(dropDown, value);\n\t\t\t\tmanualScreenshot(\"Selected\" + value + \"in the\" + Label);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + value + \" in \" + Label + \" DropDown.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValue in \" + Label + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueForHoldType`, is used to select a value from a dropdown menu based on the provided label and value. Here's a brief description of what it does:\n\n1. It constructs an XPath expression for the dropdown menu by combining the provided label with a specific XPath syntax.\n2. It waits for the dropdown menu to be visible using the `waitForElement` method, and then checks if the element is displayed using the `isElementDisplayed` method.\n3. If the dropdown menu is displayed, it scrolls to the element using the `scrollToWebElement` method and selects the specified value from the dropdown using the `selectFromDropdown` method.\n4. After selecting the value, it takes a manual screenshot with a descriptive name indicating that the value has been selected.\n5. If any of these steps fail (e.g., the dropdown menu is not displayed), it reports a test step failure and provides an error message.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that might occur during execution.",
        "input": [
            "String Label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "customerSearchTextField",
        "code": "public String customerSearchTextField(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//input[contains(@title,'Search')]\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 3)) {\n\t\t\t\tWebElement element = findWebElement(search);\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Customer Search \" + e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `customerSearchTextField`, performs a customer search using a text field input. It takes a `searchValue` as an input parameter and attempts to:\n\n1. Construct a search query by appending the provided `searchValue` with a specific XPath expression that targets the \"Search\" input field.\n2. Wait for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it types in the provided `searchValue` and presses the Enter key.\n4. If the element is not displayed within the specified time limit (3 seconds), it marks the test step as failed.\n\nThe method returns the original `searchValue`. It also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCustomerLink",
        "code": "public void clickOnCustomerLink(String customerName) {\n\t\ttry {\n\t\t\tString link = customerName + \"#xpath=//a[text()='\" + customerName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerLink`, attempts to click on a specific customer link in a web page. The method takes a `String` parameter `customerName`, which is used to construct the link URL.\n\nHere's what the method does:\n\n1. It constructs a link URL by concatenating the `customerName` with an XPath expression that targets an `<a>` element with text equal to the `customerName`.\n2. It waits for the constructed link to be present on the page using the `waitForElement` method.\n3. If the link is displayed within a certain timeout (5 seconds), it attempts to click on the link using the `clickOnSpecialElement` method.\n4. If the link is not displayed, or if there's an error while clicking, it fails the test step with an error message.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyValueInCasesTable",
        "code": "public void verifyValueInCasesTable(String tableColumnHeaderLabel, String tableColumnHeaderValue) {\n\n\t\ttry {\n\t\t\tString tablerow = \"Table row#xpath=//table[contains(@class,'-table')]//thead//tr//th//a\";\n\t\t\tString table = \"table#xpath=//div[@class='resultsWrapper']/div//table\";\n\t\t\twaitForElement(table, 10);\n\t\t\tint count = 0;\n\t\t\tif (isElementDisplayed(table, 5)) {\n\t\t\t\tList<WebElement> listOfElements = findWebElements(tablerow);\n\t\t\t\tfor (int i = 0; i < listOfElements.size(); i++) {\n\t\t\t\t\tString textvalue = listOfElements.get(i).getText().trim();\n\t\t\t\t\tif (textvalue.contains(tableColumnHeaderLabel.toUpperCase())) {\n\t\t\t\t\t\tcount = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString tableCellValue = \"Table cell value#xpath=(//table[contains(@class,'-table')]//tbody//tr//td)[\"\n\t\t\t\t\t\t+ count + \"]\";\n\t\t\t\twaitForElement(tableCellValue, 10);\n\t\t\t\tif (isElementDisplayed(tableCellValue, 2)) {\n\t\t\t\t\tif (getText(tableCellValue).equalsIgnoreCase(tableColumnHeaderValue)) {\n\t\t\t\t\t\tmanualScreenshot(\"Verified successfully \" + tableColumnHeaderValue\n\t\t\t\t\t\t\t\t+ \" value is present under the '\" + tableColumnHeaderLabel + \" ' header.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected Value is not present. Instead of we got : \" + getText(tableCellValue));\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"No such value is auto populated under \" + tableColumnHeaderLabel + \" header\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the Cases Table.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in Verify Value In File Outward Table. Exception :\" + e.getMessage());\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created Date - 24/04/2020\n\t * \n\t *          Description - this method is used for verify the case id is present\n\t *          or not in QC case page.\n\t * \n\t */",
        "description": "This Java method, `verifyValueInCasesTable`, is used to verify if a specific value is present under a certain header in a table on a web page. The method takes two parameters: `tableColumnHeaderLabel` and `tableColumnHeaderValue`. \n\nHere's what the method does:\n\n1. It waits for an element with the specified XPath (`table`) to be displayed.\n2. If the element is displayed, it then tries to find the row in the table that contains the header label passed as a parameter.\n3. Once the correct row is found, it checks if the value in the cell corresponding to the header label matches the expected value passed as another parameter (`tableColumnHeaderValue`).\n4. If the values match, it takes a manual screenshot and considers the test step as successful. \n5. If the values do not match or the element is not displayed, it fails the test step with an appropriate error message.\n\nThe method also includes error handling to catch any exceptions that might occur during its execution.",
        "input": [
            "String tableColumnHeaderLabel",
            "String tableColumnHeaderValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyCaseIdIsPresent",
        "code": "public void verifyCaseIdIsPresent() {\n\n\t\ttry {\n\t\t\tString element = \"Case number#xpath=//table/tbody/tr/td/a\";\n\t\t\twaitForElement(element, 10);\n\t\t\tif (isElementDisplayed(element, 5)) {\n\t\t\t\tmanualScreenshot(\"Successfully case id \" + getText(element) + \" is created.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case id is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Id Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created Date - 24/04/2020\n\t * \n\t *          Description - This method is used for verify the text is auto\n\t *          populated.\n\t * \n\t * @param label - Provide the label of the field.\n\t */",
        "description": "This Java method, `verifyCaseIdIsPresent()`, verifies if a case ID is present on the page. It uses Selenium WebDriver to:\n\n1. Wait for an element with the specified XPath (`//table/tbody/tr/td/a`) to be displayed within 10 seconds.\n2. Check if the element is actually displayed after waiting for 5 seconds.\n3. If the element is displayed, take a manual screenshot with the text \"Successfully case id [text of the element] is created.\"\n4. If the element is not displayed, mark the test step as failed with the message \"Case id is not created.\"\n\nIf any exception occurs during the execution of this method, it will be caught and the test step will be marked as failed with the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyTextIsPresent",
        "code": "public void verifyTextIsPresent(String label, String value) {\n\t\ttry {\n\t\t\tString textElement = label + \"#xpath=//span[text()='\" + label\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/span/span\";\n\t\t\tString labelElement = label + \"#xpath=//span[text()='\" + label + \"']\";\n\t\t\twaitForElement(textElement, 10);\n\t\t\tif (isElementDisplayed(textElement, 5)) {\n\t\t\t\tscrollToElement(labelElement);\n\t\t\t\twaitTime(1);\n\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\tString text = getText(textElement);\n\t\t\t\tif (text.equalsIgnoreCase(value)) {\n\t\t\t\t\thighLighterMethod(textElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + getText(textElement) + \" value is reflected under ' \" + label\n\t\t\t\t\t\t\t+ \" ' Field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"No value is present in \" + label + \" field\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyTextIsPresent`, verifies if a given text value is present under a specific label on a web page. It uses XPath expressions to locate the elements and performs various actions such as scrolling, highlighting, and taking screenshots. The method takes two parameters: `label` (the text to be verified) and `value` (the expected text value). It checks if the element is displayed, scrolls to it, highlights it, and then compares the actual text with the expected value. If the values match, it takes a manual screenshot; otherwise, it fails the test step.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "getStageValueInFms",
        "code": "public String getStageValueInFms() {\n\t\tString stageValue = \"\";\n\t\ttry {\n\t\t\tString stage = \"Stage#xpath=(//span[text()='Stage']/../following-sibling::div//span[text()])[1]\";\n\t\t\twaitForElement(stage, 10);\n\t\t\tif (isElementDisplayed(stage, 5)) {\n\t\t\t\tWebElement ownerCase = findWebElement(stage);\n\t\t\t\tscrollToWebElement(stage);\n\t\t\t\thighLighterMethod(stage);\n\t\t\t\tstageValue = ownerCase.getText();\n\t\t\t\tmanualScreenshot(\"Stage value : \" + stageValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Stage value not dispalyed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to get stage value \" + e.getMessage());\n\t\t}\n\t\treturn stageValue;\n\t}",
        "description": "This Java method, `getStageValueInFms()`, is used to retrieve the text value of a specific element with an XPath locator in a web application. The method attempts to locate the element using the provided XPath expression, wait for it to be displayed, and then extract its text content. If the element is not displayed or if any exceptions occur during the process, the method will record a failure and return an empty string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "changeStageInFMSAsCo",
        "code": "public void changeStageInFMSAsCo(String stageOption) {\n\t\ttry {\n\t\t\tString readyForDispatch_btn = \"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\";\n\n\t\t\tString field = stageOption + \"#xpath=//div[@class='select-options']//li/a[contains(text(),'\" + stageOption\n\t\t\t\t\t+ \"')]\";\n\t\t\twaitTime(6);\n\t\t\twaitForElement(readyForDispatch_btn, 15);\n\t\t\tif (isElementDisplayed(readyForDispatch_btn, 5)) {\n\t\t\t\tWebElement button = findWebElement(readyForDispatch_btn);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(button).doubleClick().perform();\n\t\t\t\tif (isElementDisplayed(readyForDispatch_btn, 3)) {\n\t\t\t\t\taction.moveToElement(button).click().perform();\n\t\t\t\t\tclickOn(field);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(stageOption + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on Ready For Dispatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate Ready For Dispatch \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `changeStageInFMSAsCo`, appears to be part of a functional testing framework for a web application. The method takes a string parameter `stageOption` and attempts to perform the following actions:\n\n1. Waits for 6 seconds using the `waitTime` method.\n2. Waits up to 15 seconds for an element with the XPath locator `\"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\"` to be displayed using the `waitForElement` method.\n3. If the element is displayed, it moves the mouse cursor to the element and performs a double-click action using the `Actions` class from Selenium WebDriver.\n4. It then checks if the same element is still displayed after 3 seconds. If it is, it clicks on the element again.\n5. If the field with the XPath locator constructed by concatenating `stageOption` with `\"#xpath=//div[@class='select-options']//li/a[contains(text(),'\" + stageOption + \"')]\"` is displayed, it clicks on that field using the `clickOn` method.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the code, the method will fail the test step and report an error message.",
        "input": [
            "String stageOption"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCases1",
        "code": "public String clickOnCases1(String opportunityName) {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a)[1]\";\n\t\t\tString caseNumber = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(oppurtunity, 30);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\ttestStepPassed(caseNo + \" case is Succeefully created\");\n\t\t\t\thighLighterMethod(caseNumber);\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t} else if (!isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\trefreshPage();\n\t\t\t\tenterValueInSearchField(opportunityName);\n\t\t\t\twaitForElement(caseNumber, 20);\n\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\tclickOn(oppurtunity);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(opportunityName + \"is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, `clickOnCases1`, is used to interact with a web page and perform the following actions:\n\n1. Waits for the page to load.\n2. Waits for an element (oppurtunity) to be displayed within 30 seconds.\n3. If the element is displayed, extracts the case number from another element (caseNumber), highlights it using `highLighterMethod`, and clicks on the oppurtunity link.\n4. If the element is not displayed after 5 seconds, refreshes the page, enters a value in the search field (opportunityName), waits for the case number element to appear, extracts the case number, and then clicks on the oppurtunity link.\n\nThe method returns the extracted case number as a string. It also includes error handling using try-catch blocks to handle any exceptions that may occur during execution.",
        "input": [
            "String opportunityName"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnCases",
        "code": "public void clickOnCases() {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a)[1]\";\n\t\t\trefreshPage();\n\t\t\twaitTime(6);\n\t\t\twaitForElement(oppurtunity, 30);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCases`, attempts to click on the first opportunity name link on a webpage. It uses Selenium WebDriver and TestNG framework.\n\nHere's what it does:\n\n1. It defines the XPath of the opportunity name link using the `oppurtunity` variable.\n2. It refreshes the page using the `refreshPage()` method.\n3. It waits for 6 seconds before attempting to locate the opportunity name link.\n4. It then waits up to 30 seconds for the element to be displayed on the page.\n5. If the element is displayed, it clicks on it using the `clickOn()` method.\n6. If the element is not displayed after waiting for 5 seconds, it marks the test step as failed with a message indicating that the opportunity name link was not present.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyDocumentStatus",
        "code": "public boolean verifyDocumentStatus(String documentLabel, String expectedDocumentStatus) {\n\t\tboolean isExpected = false;\n\t\ttry {\n\t\t\tString documentField = documentLabel + \" field#xpath=//a[@title='\" + documentLabel + \"']\";\n\t\t\twaitForElement(documentField, 9);\n\t\t\tif (isElementDisplayed(documentField, 9)) {\n\t\t\t\tscrollToWebElement(documentField);\n\t\t\t\tString currentStatus = getAttributeValue(documentField, \"data-label\");\n\t\t\t\tif (currentStatus.equals(expectedDocumentStatus)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + documentLabel + \" document status is \" + currentStatus + \".\");\n\t\t\t\t\tisExpected = true;\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(documentLabel + \" document is not having expected status. Instead of its updated as \"\n\t\t\t\t\t\t\t+ currentStatus);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(documentLabel + \" document is not present in Document tab.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Document Status. Exception : \" + e.getMessage());\n\t\t}\n\n\t\treturn isExpected;\n\t}",
        "description": "This Java method, `verifyDocumentStatus`, verifies the status of a document on a web page and checks if it matches the expected status. It takes two parameters: `documentLabel` (the name of the document) and `expectedDocumentStatus`. The method:\n\n1. Creates an XPath expression to locate the document field on the page.\n2. Waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n4. Retrieves the current status of the document using the `getAttributeValue` method and checks if it matches the expected status.\n5. If the statuses match, it takes a manual screenshot with a success message. Otherwise, it fails the test step with an error message.\n6. If the element is not displayed, it fails the test step with an error message.\n7. Returns a boolean indicating whether the expected document status was found or not.\n\nThe method also includes exception handling to catch any errors that may occur during execution and report them as test failures.",
        "input": [
            "String documentLabel",
            "String expectedDocumentStatus"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "verifySerialNoIsPresent",
        "code": "public void verifySerialNoIsPresent(String label, String value) {\n\t\ttry {\n\t\t\tString textElement = \"Serial No #xpath=//span[text()='\" + label + \"']/..//..//lightning-formatted-text\";\n\t\t\twaitForElement(textElement, 10);\n\t\t\tif (isElementDisplayed(textElement, 5)) {\n\t\t\t\tscrollToElement(textElement);\n\t\t\t\tscrollToWebElement(textElement);\n\t\t\t\tString text = getText(textElement);\n\t\t\t\tif (!text.equalsIgnoreCase(value)) {\n\t\t\t\t\tString serialNo = value.substring(0, 25);\n\t\t\t\t\tif (text.equalsIgnoreCase(serialNo)) {\n\t\t\t\t\t\ttestStepInfo(\"Actual IMEI Value Is \" + value + \" greater than 25 digit\");\n\t\t\t\t\t\tmanualScreenshot(label + \" Value Is \" + serialNo + \" trim to 25 digit\");\n\t\t\t\t\t}\n\t\t\t\t} else if (text.equalsIgnoreCase(value)) {\n\t\t\t\t\ttestStepInfo(\"Actual IMEI Value Is \" + value + \" less than 25 digit\");\n\t\t\t\t\tmanualScreenshot(label + \" Value Is \" + text + \" equals to actual IMEI Value\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Serial No Field Is Not Present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySerialNoIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifySerialNoIsPresent`, is used to verify if a serial number label and its corresponding value are present on a web page. It takes two parameters: the label of the serial number and its expected value.\n\nThe method uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToElement`, and `getText` to interact with the web page. If the element is displayed, it checks if the actual text matches the expected value. If the actual text is longer than 25 characters, it takes a manual screenshot and adds a test step information. If the actual text is equal to the expected value, it also takes a manual screenshot and adds a test step information.\n\nIf the element is not displayed (i.e., the serial number field is not present), or if an exception occurs during execution, the method fails the test step with an appropriate error message.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCases",
        "code": "public void selectValueFromDropdownInCases(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 55);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 30);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCases`, is used to select a specific value from a dropdown menu. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression for the dropdown element based on its name.\n2. It waits for the dropdown element to appear (up to 55 seconds).\n3. If the dropdown is displayed, it scrolls to the element and clicks on it.\n4. It then constructs another XPath expression for the list of options within the dropdown.\n5. It waits for the option list to appear (up to 30 seconds).\n6. If the desired value is present in the option list, it clicks on that value and takes a manual screenshot.\n7. The method logs a test step as passed if the selection was successful.\n8. If the desired value is not present or the dropdown is not displayed, it logs a test step failure with an appropriate message.\n\nThe method also catches any exceptions that may occur during its execution and logs a test step failure with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCasesDocumentsField1",
        "code": "public void selectValueFromDropdownInCasesDocumentsField1(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')]//parent::label//parent::div//div//div//select\";\n\t\t\twaitForElement(dropdown, 40);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t\tmanualScreenshot(\"\");\n\n\t\t\t\t// String dropdownList = value + \"\n\t\t\t\t// value#xpath=//select//option[text()='\"+value+\"']\";\n\t\t\t\t// waitForElement(dropdownList, 10);\n\t\t\t\t// if (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t// clickOnSpecialElement(dropdownList);\n\t\t\t\t// manualScreenshot(\"\");\n\t\t\t\t// testStepPassed(\"Successfully selected \" + value + \" value from \" +\n\t\t\t\t// dropdownName + \" dropdown\");\n\t\t\t\t// } else {\n\t\t\t\t// testStepFailed(value + \" option is not present in the \" + dropdownName + \"\n\t\t\t\t// dropdown\");\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCasesDocumentsField1`, selects a value from a dropdown list in a web page. It takes two parameters: `dropdownName` and `value`. \n\nHere's what the method does:\n\n1. Creates an XPath expression to locate the dropdown element based on the provided `dropdownName`.\n\n2. Waits for the dropdown element to be displayed.\n\n3. If the dropdown is displayed, it scrolls to the dropdown, clicks on the dropdown to expand its list of options, selects the specified `value` from the dropdown's options, and takes a manual screenshot.\n\n4. Verifies that the selected value is present in the dropdown by checking if an XPath expression (not implemented) matches the expected value. If the value is not found, it fails the test step with an error message.\n\n5. If the dropdown element is not displayed within the specified time limit, it fails the test step with an error message.\n\n6. If any exception occurs during the execution of these steps, it catches the exception and fails the test step with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyAutoPopulatedValueInMaster",
        "code": "public void verifyAutoPopulatedValueInMaster(String Label, String ExpectedValue) {\n\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\n\t\tString labelElement = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span/slot/slot\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 5);\n\t\t\tif (isElementPresent(labelElement)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.equalsIgnoreCase(ExpectedValue)) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"[\" + text + \"]\" + \" is autopopulated in \" + Label);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(Label + \" value is \" + text + \" instead of \" + ExpectedValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInMaster`, verifies whether an auto-populated value is present and matches the expected value for a given label on the master page.\n\nThe method takes two parameters: `Label` (the name of the field) and `ExpectedValue` (the expected value to be autopopulated). It uses XPath expressions to locate the element, scrolls to it if necessary, and then checks if the text matches the expected value. If the values match, it highlights the element and takes a manual screenshot. If they don't match or the field is not present, it marks the test step as failed.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String Label",
            "String ExpectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "VerifyFieldisEnabledOrNot",
        "code": "public void VerifyFieldisEnabledOrNot(String buttonName) {\n\t\ttry {\n\t\t\tString field = buttonName + \"#xpath=//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']/parent::label/following-sibling::div//select[@disabled='true']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 4)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tmanualScreenshot(buttonName + \" Field is disabled\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" Field is enabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldisEnabledOrNot \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyFieldisEnabledOrNot`, verifies whether a specific field (represented by a given button name) is enabled or disabled. The method uses Selenium WebDriver to:\n\n1. Construct an XPath expression based on the button name and checks if the resulting element is displayed.\n2. If the element is displayed, it scrolls to that element and takes a manual screenshot with a comment indicating that the field is disabled.\n3. If the element is not displayed (i.e., the field is enabled), it marks the test step as failed.\n\nThe method also includes error handling using a `try-catch` block, which captures any exceptions that may occur during the execution of the method and reports them as test failures.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnLinkInCaseTab",
        "code": "public void clickOnLinkInCaseTab(String linkName) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(6);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkInCaseTab`, attempts to click on a specific link within the Case tab of an application. The method takes one parameter, `linkName`, which is used to construct the XPath of the link.\n\nHere's a step-by-step breakdown:\n\n1. Waits for 6 seconds using the `waitTime` method.\n2. Constructs the XPath of the link by concatenating the provided `linkName` with an XPath expression that targets the last `<a>` element containing text matching the `linkName`.\n3. Waits again for 1 second using the `waitTime` method.\n4. Uses the `waitForElement` method to wait up to 40 seconds for the link to be present.\n5. Scrolls to the link using the `scrollbycordinates` method.\n6. Checks if the link is present using the `isElementPresent` method. If it is, clicks on the link using the `clickOnSpecialElement` method and waits again for 6 seconds.\n7. If the link is not present, fails the test step with a message indicating that the link was not found.\n8. Catches any exceptions that occur during execution and fails the test step with an error message.\n\nIn summary, this method attempts to interact with a specific link within the Case tab of an application, waiting for the link to be present and scrolling to it if necessary.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyElementDetailsIsPresent",
        "code": "public void verifyElementDetailsIsPresent(String ElementName) {\n\t\ttry {\n\t\t\tString element = \"Case number#xpath=//button//span[text()='\" + ElementName + \"']\";\n\t\t\twaitForElement(element, 30);\n\t\t\tif (isElementDisplayed(element, 5)) {\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\tmanualScreenshot(element + \" is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case id is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Id Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyElementDetailsIsPresent`, verifies if an element with a specific name is present on the webpage. It takes a string parameter `ElementName` which represents the name of the element to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the element based on its name.\n2. It waits for the element to appear (up to 30 seconds).\n3. If the element is displayed, it scrolls to the element and takes a manual screenshot as proof of presence.\n4. If the element is not present or fails to appear within the given time, it marks the test step as failed with an error message.\n\nThe method catches any exceptions that may occur during its execution and reports them as failures if they do.",
        "input": [
            "String ElementName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "ClickOnLinkQCUAT",
        "code": "public void ClickOnLinkQCUAT(String ElementName) {\n\t\ttry {\n\t\t\tString element = ElementName + \"#xpath=//button//span[text()='\" + ElementName + \"']\";\n\t\t\twaitForElement(element, 30);\n\t\t\tif (isElementDisplayed(element, 5)) {\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\tclickOn(element);\n\t\t\t\tmanualScreenshot(element + \" is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case id is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Id Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `ClickOnLinkQCUAT`, attempts to click on a link with the specified name (`ElementName`) within a certain time frame (30 seconds). Here's what it does:\n\n1. Constructs an XPath expression by concatenating the provided element name with an XPath query that searches for a button with a specific text content matching the element name.\n2. Waits up to 30 seconds for the element to be displayed using `waitForElement`.\n3. Checks if the element is actually displayed within 5 seconds using `isElementDisplayed`. If it's not, the method fails.\n4. Scrolls to the element using `scrollToWebElement` and then clicks on it using `clickOn`.\n5. Takes a manual screenshot with a filename including the element name to verify that the action was successful.\n\nIf any of these steps fail (e.g., the element is not found or cannot be clicked), the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String ElementName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickRadioButtoninNewcaseLayout",
        "code": "public void clickRadioButtoninNewcaseLayout(String label) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString button = label + \"#xpath=//span[contains(text(),'\" + label + \"')]//parent::label//span[1]\";\n\t\t\twaitForElement(button, 45);\n\t\t\tif (isElementDisplayed(button, 14)) {\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" radio button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickRadioButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickRadioButtoninNewcaseLayout`, is used to click a radio button with the specified label in a new case layout. It takes one parameter, `label`, which represents the text of the radio button.\n\nThe method first waits for 2 seconds using the `waitTime` method, then constructs an XPath expression to locate the radio button element based on its label. It then waits for up to 45 seconds for the element to be displayed using the `waitForElement` method.\n\nIf the element is displayed, it uses the `Actions` class to move the mouse cursor to the element and click it. If the element is not displayed after waiting for 14 seconds, the test step fails with an error message.\n\nIf any exception occurs during the execution of the method, it catches the exception and reports a failure in the test step with the corresponding error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectOrDeselectCheckBoxInCasePage",
        "code": "public void selectOrDeselectCheckBoxInCasePage(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//label[text()='\" + labelname\n\t\t\t\t\t+ \"']//parent::div//parent::div//label//span[1]\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInCasePage`, is used to select or deselect a checkbox on a webpage based on the provided label name and status (either \"check\" or \"uncheck\"). \n\nThe method uses XPath to locate the checkbox element, waits for it to be visible, scrolls to it if necessary, and then checks or unchecks the box depending on the specified status. If the operation is successful, it takes a manual screenshot as proof. If there's an exception during execution, it logs the error and marks the test step as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCasesNewTab",
        "code": "public void selectValueFromDropdownInCasesNewTab(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCasesNewTab`, selects a value from a dropdown menu and opens it in a new tab. The method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected). Here's a step-by-step breakdown:\n\n1. It constructs an XPath expression for the dropdown element based on the provided `dropdownName`.\n2. It waits for the dropdown element to appear within 30 seconds.\n3. If the dropdown is displayed, it scrolls to the element and clicks on it.\n4. It then constructs an XPath expression for the specific value to be selected from the dropdown menu.\n5. It waits for the value element to appear within 10 seconds.\n6. If the value element is displayed, it clicks on it, takes a manual screenshot (likely for testing purposes), and logs a successful test step.\n7. If the value element is not displayed, it logs a failed test step indicating that the value is not present in the dropdown.\n8. If the dropdown itself is not displayed, it logs a failed test step indicating that the dropdown is not present.\n9. In case of any exceptions (e.g., timeout or element not found), it logs a failed test step with an error message.\n\nIn summary, this method attempts to select a value from a dropdown menu and verify its presence in a new tab, with various logging mechanisms to track its progress.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCasesTab",
        "code": "public void selectValueFromDropdownInCasesTab(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]/parent::div//..//div/button)[last()]\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `selectValueFromDropdownInCasesTab`, selects a value from a dropdown menu in a specific tab. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression for the dropdown element based on its name.\n2. It waits for the dropdown element to be displayed within a specified time limit (30 seconds).\n3. If the dropdown is displayed, it scrolls to the dropdown, clicks on it, and then selects the desired value from the dropdown list.\n4. It checks if the selected value is displayed correctly by waiting for the corresponding XPath expression to be displayed (10 seconds).\n5. If the selected value is displayed, it takes a manual screenshot and marks the test step as passed.\n6. If the selected value is not present in the dropdown or the dropdown is not displayed, it marks the test step as failed with an appropriate error message.\n\nThe method also includes a try-catch block to handle any exceptions that may occur during its execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "ClickonTabsinCaseObject",
        "code": "public void ClickonTabsinCaseObject(String ElementName) {\n\t\ttry {\n\t\t\tString element = ElementName+\"#xpath=//button//span[text()='\" + ElementName + \"']\";\n\t\t\twaitForElement(element, 30);\n\t\t\tif (isElementDisplayed(element, 5)) {\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\tclickOnSpecialElement(element);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case id is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Id Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `ClickonTabsinCaseObject`, is used to click on a tab with a specific name (`ElementName`) in a case object. The method attempts to locate the element using an XPath expression and then performs the following steps:\n\n1. Waits for the element to be displayed (up to 30 seconds).\n2. If the element is displayed, scrolls to it and clicks on it.\n3. If the element is not displayed after 5 seconds, the test step fails with a message indicating that the case id was not created.\n\nIf any exception occurs during the execution of this method, it will catch the exception and fail the test step with an error message including the exception's message.",
        "input": [
            "String ElementName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnLinkInCaseTabWithOutWaitTime",
        "code": "public void clickOnLinkInCaseTabWithOutWaitTime(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkInCaseTabWithOutWaitTime`, attempts to click on a specific link within a Case tab. The method takes a `String` parameter `linkName` which is the name of the link to be clicked.\n\nHere's what it does:\n\n1. Waits for the page to load using the `waitForPageToLoad()` method.\n2. Builds an XPath expression to locate the link with the given `linkName`.\n3. Waits for 1 second using the `waitTime(1)` method.\n4. Uses the `waitForElement(link, 40)` method to wait up to 40 seconds for the link to be present.\n5. Scrolls the link into view using the `scrollbycordinates(link)` method.\n6. Checks if the link is present using the `isElementPresent(link)` method. If it is, the method clicks on the link using `clickOnSpecialElement(link)`.\n7. If the link is not present, the method reports a failure with the message \"linkName + \" link is not present\".\n\nIf any exception occurs during these steps, the method catches it and reports a failure with the message \"Failed in clickOnLink \" followed by the exception's message.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyExpectedPopupMessage",
        "code": "public boolean verifyExpectedPopupMessage(String ExpectedValidation) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error popup Title#xpath=//span[contains(@class,'toastMessage')]\";\n\t\t\twaitForElement(error, 15);\n\t\t\tif (isElementDisplayed(error)) {\n\t\t\t\tList<WebElement> listOfError_Msg = findWebElements(error);\n\t\t\t\tArrayList<String> error_Msg = new ArrayList<>();\n\t\t\t\tfor (int i = 0; i < listOfError_Msg.size(); i++) {\n\t\t\t\t\terror_Msg.add(listOfError_Msg.get(i).getText());\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < listOfError_Msg.size(); i++) {\n\t\t\t\t\tString ActualValidation = error_Msg.get(i);\n\t\t\t\t\tif (ActualValidation.contains(ExpectedValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Successfully got expected validation message : \" + ActualValidation);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(\"Expected Validation message is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Validation message is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedPopupMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyExpectedPopupMessage`, verifies if a specific expected validation message is displayed in a popup error message. \n\nThe method takes one parameter, `ExpectedValidation`, which is the expected text to be found in the error message.\n\nIt uses a try-catch block to attempt to find the error message and verify its contents. If the error message is present and contains the expected validation message, it sets a flag to true and takes a manual screenshot. \n\nIf the error message is not present or does not contain the expected validation message, it fails the test step with an appropriate error message.\n\nThe method returns the value of the flag, indicating whether the expected validation message was found or not.",
        "input": [
            "String ExpectedValidation"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInFieldCaseBlindData",
        "code": "public void enterValueInFieldCaseBlindData(String labelName, String value, String labelName2) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[normalize-space(text())='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input[@name='\" + labelName2 + \"']\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldCaseBlindData`, is used to enter a value into a specific field on a web page. The method takes three parameters: the label name of the field, the value to be entered, and another label name (presumably for another field).\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided label name and the corresponding input field.\n2. It waits for the element identified by the XPath expression to be displayed within a certain time limit (25 seconds).\n3. If the value is not empty, it checks if the element is actually displayed within 5 seconds. \n4. If the element is displayed, it scrolls to the element and enters the provided value into the field.\n5. If the element is not displayed or any other exception occurs during execution, it fails the test step with an error message.\n\nThe method uses try-catch block to handle any exceptions that may occur during its execution.",
        "input": [
            "String labelName",
            "String value",
            "String labelName2"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInFieldCaseBlindData",
        "code": "public void enterValueInFieldCaseBlindData(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[normalize-space(text())='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldCaseBlindData`, is used to enter a given value into a specific field on a web page. The field is identified by its label name and an XPath expression. \n\nThe method first constructs the XPath expression for the field based on the provided label name. It then waits for the element to be displayed, scrolls to it if necessary, and enters the specified value into the field.\n\nIf the field is not present or the value is empty, the method will fail the test step with an appropriate message. If any exceptions occur during the execution of this method, the test step will also fail with a message indicating that the entry failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectValueFromDropdownInCasesNewTabHoldDocument",
        "code": "public void selectValueFromDropdownInCasesNewTabHoldDocument(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t;\n\t\t\t\t\t// manualScreenshot(\"\");\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCasesNewTabHoldDocument`, selects a value from a dropdown list on a webpage. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element based on its name.\n2. It waits for the dropdown element to be displayed (up to 30 seconds).\n3. If the dropdown is displayed, it scrolls to the dropdown and clicks on it.\n4. It then constructs another XPath expression to locate the specific value option in the dropdown list.\n5. It waits for the value option to be displayed (up to 10 seconds).\n6. If the value option is displayed, it clicks on it.\n7. If any of these steps fail or timeout, it logs a failure message and marks the test step as failed.\n\nThe method also includes some additional logging and testing functionality, such as taking manual screenshots and updating the test status based on the outcome of each step.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyButtonFieldEnabledOrDisabled",
        "code": "public void verifyButtonFieldEnabledOrDisabled(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=//div//button[text()='\" + LabelName + \"']\";\n\t\t\tpageScrollDown();\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Freeze, Could Not Able to Click\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextAndverifyField\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyButtonFieldEnabledOrDisabled`, is used to verify the enabled or disabled state of a button field on a web page. The method takes a string parameter `LabelName` which represents the label text of the button field.\n\nHere's what the method does:\n\n1. It waits for the page to load.\n2. It uses an XPath expression to locate the button field with the specified label text (`LabelName`).\n3. It scrolls down the page to ensure the button is visible.\n4. It waits for the button to be displayed and then checks its disabled attribute value.\n5. If the button is disabled, it takes a manual screenshot with a message indicating that the field is frozen (cannot be clicked). \n6. If the button is not disabled, it takes another manual screenshot with a message indicating that the field is editable.\n7. If the button is not found or the disabled attribute value is neither \"true\" nor \"false\", it fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnButtonInPopupNewCaseLayout",
        "code": "public void clickOnButtonInPopupNewCaseLayout(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//parent::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopupNewCaseLayout`, is used to interact with a specific button within a popup layout. It takes a string parameter `buttonName` which represents the name of the button to be clicked.\n\nThe method attempts to locate the button using an XPath expression that combines the provided `buttonName` with an additional condition to find the button within a specific HTML structure (i.e., a div element with a certain style attribute). It then waits for the element to be displayed and takes a manual screenshot before clicking on it. If the button is not present, the method marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "enterValueInGlobalSearchFieldInFOS",
        "code": "public void enterValueInGlobalSearchFieldInFOS(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[contains(@placeholder,'Search')]\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" is not displayed\");\n\t\t\t}\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInGlobalSearchFieldInFOS`, enters a given search value into the global search field in an application. It uses Selenium WebDriver to interact with the application.\n\nHere's a breakdown of what the method does:\n\n1. It tries to locate an input element with a placeholder text containing \"Search\" using an XPath expression.\n2. If the element is displayed, it waits for 10 seconds and then enters the given search value into the field using the `typeIn` method.\n3. After entering the search value, it simulates pressing the Enter key to submit the search query.\n4. The method also includes a wait time of 6 seconds after submitting the search query.\n\nIf any exceptions occur during this process (e.g., the element is not displayed), the method catches the exception and marks the test step as failed with an appropriate error message.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyFieldIsPresentUnderBlindDataEntry",
        "code": "public void verifyFieldIsPresentUnderBlindDataEntry(String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname\n\t\t\t\t\t+ \" #xpath=//span[text()='BLIND DATA ENTRY']/ancestor::div/following-sibling::div//label[text()='\"\n\t\t\t\t\t+ labelname + \"']\";\n\t\t\tif (isElementDisplayed(searchField, 10)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\thighLighterMethod(searchField);\n\t\t\t\ttestStepFailed(labelname + \" field is present under blind data entry section\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelname + \" field is not present under blind data entry section\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsPresentUnderBlindDataEntry\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresentUnderBlindDataEntry`, is used to verify if a specific field with the given label name is present under the \"BLIND DATA ENTRY\" section. \n\nThe method first constructs an XPath string by combining the provided label name with a predefined path that navigates through the DOM structure to find the element. It then uses this XPath string to search for the element and checks if it's displayed within a certain time limit (10 seconds). If the field is found, the method scrolls to the element, highlights it using a highlighting tool (not shown in the code), and marks the test step as failed because the field should not be present under the \"BLIND DATA ENTRY\" section. \n\nIf the field is not found within the specified time limit, the method takes a manual screenshot with a descriptive filename indicating that the field was not present. In either case, if an exception occurs during execution, the method also marks the test step as failed and provides the error message.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyFieldIsFreezedOrNot",
        "code": "public void verifyFieldIsFreezedOrNot(String header, String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\tString searchField1 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::lightning-input//input[@disabled]\";\n\t\t\tString searchField2 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname + \"']\"\n\t\t\t\t\t+ \"/parent::div/following::button[@disabled]\";\n\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else if (isElementDisplayed(searchField1, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField1);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else if (isElementDisplayed(searchField2, 15)) {\n\t\t\t\tscrollToWebElement(searchField2);\n\t\t\t\tscrollToElement(searchField2);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is editable in \" + header);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsFreezedOrNot\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsFreezedOrNot`, verifies whether a specific field is frozen or not. It takes two parameters: `header` and `labelname`. The method uses XPath expressions to search for the field in three different locations on the page. \n\nIf the field is found in any of these locations (and it's not editable), it takes a screenshot as proof. If the field is not found or it's editable, the test fails.\n\nThe method handles exceptions that may occur during its execution and logs an error message if an exception occurs.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "GetTextFromFreezedFieldInQC",
        "code": "public String GetTextFromFreezedFieldInQC(String header, String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tWebElement element = findWebElement(searchField);\n\t\t\t\tvalue = getAttributeValue(searchField, \"value\");\n\t\t\t\t\t\tmanualScreenshot(labelname + \" has [ \" + value + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in GetTextFromFreezedFieldInQC\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `GetTextFromFreezedFieldInQC`, retrieves the text value from a frozen field in a Quality Control (QC) application. It takes two input parameters: `header` and `labelname`. \n\nThe method first constructs an XPath expression to locate the specific frozen field based on the provided `header` and `labelname`. It then checks if the element is displayed within 15 seconds. If it is, it scrolls to the element, retrieves its value attribute, and captures a manual screenshot with the label name and the retrieved value. \n\nIf the element is not displayed or an exception occurs during the process, the method fails the test step. The method returns the retrieved text value.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "VerifyFieldIsFreezedInQC",
        "code": "public String VerifyFieldIsFreezedInQC(String header, String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\t\n\t\t\tString searchField1 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::select[@disabled]\";\n\t\t\t\n\t\t\tString searchField2 = labelname + \" #xpath=//input[@name='KYC_POI_Expiry_Date__c' and @disabled]\";\n\t\t\t\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tmanualScreenshot(labelname + \"  field is freeze\");\n\t\t\t} else if (isElementDisplayed(searchField1, 15)) {\n\t\t\t\tscrollToWebElement(searchField1);\n\t\t\t\tmanualScreenshot(labelname + \"  field is freeze\");\n\t\t\t} else if (isElementDisplayed(searchField2, 15)) {\n\t\t\t\tscrollToWebElement(searchField2);\n\t\t\t\tmanualScreenshot(labelname + \"  field is freeze\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is editable\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsFreezedInQC\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `VerifyFieldIsFreezedInQC`, checks if a specific field is frozen (i.e., disabled) on a webpage. It takes two string parameters: `header` and `labelname`. \n\nThe method uses XPath expressions to locate the field elements with the given label name. It then attempts to find each of these elements using the `isElementDisplayed` method, which likely checks if the element is visible on the page.\n\nIf an element is found and displayed within a certain time limit (15 seconds), the method scrolls to that element and takes a manual screenshot to confirm the field is frozen. \n\nIf none of the elements are found or displayed within the time limit, the method marks the test step as failed, indicating that the field is editable instead of frozen.\n\nThe method returns an empty string (`value`) but does not appear to use this return value for anything.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "VerifyFieldIsNotFreezedInQC",
        "code": "public String VerifyFieldIsNotFreezedInQC(String header, String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\ttestStepFailed(labelname + \" field is freeze\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelname + \" field is editable\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsFreezedIsNotInQC\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `VerifyFieldIsNotFreezedInQC`, verifies if a specific field is not frozen or disabled in a Quality Control (QC) scenario. \n\nThe method takes two parameters: `header` and `labelname`. It constructs an XPath expression to locate the field based on these parameters and checks if the field is displayed within 15 seconds. If the field is displayed, it attempts to scroll to the field and verifies that it is not frozen by checking for a disabled input element. If the field is found to be frozen, the method marks the test step as failed. \n\nIf the field is not found or an exception occurs during the verification process, the method also marks the test step as failed and takes a manual screenshot with a descriptive message. The method returns an empty string (`value`) indicating that no specific value was returned from this method.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "GetTextFromFreezedDropdownFieldInQC",
        "code": "public String GetTextFromFreezedDropdownFieldInQC(String header, String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::lightning-combobox//button[@disabled]\";\n\n\t\t\tString searchField1 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\thighLighterMethod(searchField);\n\t\t\t\tvalue = getAttributeValue(searchField, \"data-value\");\n\t\t\t\tmanualScreenshot(labelname + \" has [ \" + value + \" ] value\");\n\t\t\t} else if (isElementDisplayed(searchField1, 15)) {\n\t\t\t\tscrollToWebElement(searchField1);\n\t\t\t\tscrollToElement(searchField1);\n\t\t\t\thighLighterMethod(searchField1);\n\t\t\t\t// String labelElement = searchField1 + \"/following-sibling::span\";\n\t\t\t\tvalue = getText(searchField1);\n\t\t\t\tmanualScreenshot(labelname + \" has [ \" + value + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in GetTextFromFreezedDropdownFieldInQC\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `GetTextFromFreezedDropdownFieldInQC`, is used to retrieve the text value from a frozen dropdown field in Quality Central (QC). The method takes two input parameters: `header` and `labelname`. \n\nIt first constructs two XPath expressions (`searchField` and `searchField1`) based on the provided `header` and `labelname`. These expressions are used to locate the frozen dropdown field.\n\nThe method then checks if the field is displayed using a timeout of 15 seconds. If it's displayed, it scrolls to the field, highlights it, retrieves its value (either from the \"data-value\" attribute or as plain text), and takes a manual screenshot with the retrieved value.\n\nIf the field is not displayed, the method fails the test step. In case of any exceptions, it also fails the test step. The method returns the retrieved value as a string.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyCaseStatus",
        "code": "public void verifyCaseStatus(String label, String expectedStatusValue) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//span[@title='\" + label + \"']//following-sibling::div//span\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString actualStatusValue = getText(field).trim();\n\t\t\t\tif (actualStatusValue.contains(expectedStatusValue)) {\n\t\t\t\t\tmanualScreenshot(label + \" is \" + actualStatusValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected case status is not getting updated. Actual Case status : [ \"\n\t\t\t\t\t\t\t+ actualStatusValue + \" ]\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case status field is not available in Case page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Status. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCaseStatus`, verifies the case status of a specific label against an expected value. Here's a breakdown of what it does:\n\n1. It constructs an XPath expression based on the provided `label` and checks if the element is displayed using `waitForElement` and `isElementDisplayed`.\n2. If the element is displayed, it scrolls to that element, highlights it (using `highLighterMethod`), and retrieves its text content.\n3. It then compares the actual status value with the expected status value provided as a parameter (`expectedStatusValue`). If they match, it takes a manual screenshot for verification purposes.\n4. If the actual status value does not contain the expected status value, it marks the test step as failed with an error message indicating that the case status is not getting updated correctly.\n5. If the element is not displayed or any exception occurs during the process, it also marks the test step as failed and provides a descriptive error message.\n\nIn summary, this method verifies the case status of a specific label against an expected value and reports any discrepancies or failures.",
        "input": [
            "String label",
            "String expectedStatusValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyCaseIsCreatedOrNot",
        "code": "public void verifyCaseIsCreatedOrNot(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//h1[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::div[@class='slds-grid']/following-sibling::div//span[@class='countSortedByFilteredBy']\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tString value = getText(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tif (value.contains(\"0 items\")) {\n\t\t\t\t\tmanualScreenshot(label + \" record is not created\");\n\t\t\t\t} else if (value.contains(\"1 item\")) {\n\t\t\t\t\tmanualScreenshot(label + \" record is created\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(value + \" are created\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" record is created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Status. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCaseIsCreatedOrNot`, verifies whether a case with the given label has been created or not. It uses Selenium WebDriver to wait for an element and check if it's displayed. If the element is found, it retrieves its text content and checks if it contains specific strings indicating the number of items (0, 1, or more). Based on this information, it takes a manual screenshot with a descriptive title. If the element is not found, it fails the test step. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyRecordIsNotCreated",
        "code": "public void verifyRecordIsNotCreated(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//h1[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::div[@class='slds-grid']/following-sibling::div//span[@class='countSortedByFilteredBy']\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tString value = getText(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tif (value.contains(\"0 items\")) {\n\t\t\t\t\tmanualScreenshot(\"[0 items] found.\" + label + \" record is not created\");\n\t\t\t\t} else if (value.contains(\"1 item\")) {\n\t\t\t\t\ttestStepFailed(\"[1 item] found.\" + label + \" record is not created\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" record is created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Status. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyRecordIsNotCreated`, is used to verify that a specific record has not been created based on the provided label. \n\nHere's how it works:\n\n1. It constructs an XPath expression using the given label and some predefined HTML elements.\n2. The method then uses this XPath expression to wait for the element to be loaded (using `waitForElement`) and checks if the element is displayed (using `isElementDisplayed`).\n3. If the element is displayed, it retrieves the text content of the element (using `getText`), highlights the element (using `highLighterMethod`), and then checks if the text contains specific strings indicating that 0 or 1 item was found.\n4. If the expected condition is met, it takes a manual screenshot with a message indicating that the record has not been created. \n5. If the expected condition is not met (i.e., the element is not displayed), or an exception occurs during execution, it fails the test step with an appropriate error message.\n\nIn summary, this method is used to verify that a specific record has not been created based on some predefined conditions and takes screenshots as needed.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyRecordIsCreatedInAdmin",
        "code": "public void verifyRecordIsCreatedInAdmin(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//h1[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::div[@class='slds-grid']/following-sibling::div//span[@class='countSortedByFilteredBy']\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tString value = getText(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tif (value.equals(\"0 items\")) {\n\t\t\t\t\tmanualScreenshot(\"[0 items] found.\" + label + \" record is not created\");\n\t\t\t\t} else if (value.contains(\"1 item\")) {\n\t\t\t\t\tmanualScreenshot(\"[1 item] generated. \" + label + \" record is created\");\n\t\t\t\t} else {\n\t\t\t\t\tvalue=value.replace(\"\\\\.\", \"\");\n\t\t\t\t\tmanualScreenshot(value + \" are created\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" record is not created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Status. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 09-Jun-2022\n\t * @purpose : To verify the document is waived or not.\n\t */",
        "description": "This Java method, `verifyRecordIsCreatedInAdmin`, verifies whether a record with the given label exists in the admin panel. Here's a brief description of what it does:\n\n1. It constructs an XPath expression based on the input label to locate the relevant element in the UI.\n2. It waits for the element to load and then checks if it is displayed.\n3. If the element is displayed, it extracts the text value from the element and highlights it using a high-lighting method (not shown in this code snippet).\n4. Based on the extracted text value, it takes one of three actions:\n\t* If the text value is \"0 items\", it takes a manual screenshot with a failure message indicating that the record was not created.\n\t* If the text value contains \"1 item\", it takes a manual screenshot with a success message indicating that the record was created.\n\t* If the text value contains more than one item, it takes a manual screenshot with a success message indicating how many items were created.\n5. If the element is not displayed, it fails the test step with an error message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyDocIsWaived",
        "code": "public void verifyDocIsWaived() {\n\t\ttry {\n\t\t\tString waivedTextMsg = \"#xpath=//div[text()='This document is waived']\";\n\t\t\twaitForElement(waivedTextMsg, implicitlyWaitTime);\n\t\t\tif (isElementDisplayed(waivedTextMsg, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(waivedTextMsg);\n\t\t\t\tmanualScreenshot(\"Successfully document is waived.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Document is not waived.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocIsWaived. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 09-Jun-2022\n\t * @purpose : To verify the message in case page layout\n\t *\n\t * @param expectedMsg : To provide the expected message in String datatype.\n\t */",
        "description": "This Java method, `verifyDocIsWaived`, is used to verify if a specific document has been waived. It does this by:\n\n1. Searching for an element on the page with the specified XPath (`\"#xpath=//div[text()='This document is waived']\"`).\n2. Waiting until the element is displayed using `waitForElement` and `isElementDisplayed`.\n3. If the element is displayed, it scrolls to that element using `scrollToWebElement`.\n4. Takes a manual screenshot with the message \"Successfully document is waived.\".\n5. If the element is not displayed, it marks the test step as failed with the message \"Document is not waived.\"\n\nIf any exception occurs during this process, it will catch the exception and mark the test step as failed with an error message containing the exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyWaivedDocMessageInCasePage",
        "code": "public void verifyWaivedDocMessageInCasePage(String expectedMsg) {\n\t\ttry {\n\t\t\tString msgElement = \"#xpath=//div[@role='application']//div//strong\";\n\t\t\twaitForElement(msgElement, 15);\n\t\t\tif (isElementDisplayed(msgElement, 15)) {\n\t\t\t\tscrollToWebElement(msgElement);\n\t\t\t\tString actualMessage = getText(msgElement).trim();\n\t\t\t\tif (actualMessage.contains(expectedMsg)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully expected message [ \" + expectedMsg + \" ] is present in case page.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected message is not present in casepage.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWaivedDocMessageInCasePage. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Oct 6, 2022\n\t * @purpose : To verify the button is present in case page layout.\n\t *\n\t * @param buttonName : To provide the label of the button as String.\n\t */",
        "description": "This Java method, `verifyWaivedDocMessageInCasePage`, verifies if a specific message is present on a case page. \n\nThe method takes a string parameter `expectedMsg` which represents the expected message to be verified.\n\nHere's what it does:\n\n1. It tries to find an element with the specified XPath (`#xpath=//div[@role='application']//div//strong`) and waits for up to 15 seconds.\n2. If the element is displayed, it scrolls to that element.\n3. It then gets the text of the element and trims any leading or trailing whitespace.\n4. It checks if the actual message contains the expected message. \n5. If they match, it takes a manual screenshot with a success message. \n6. If they don't match, it fails the test step.\n\nIf any exception occurs during this process, it also fails the test step and logs the error message.",
        "input": [
            "String expectedMsg"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyCaseBtnIsPresent",
        "code": "public void verifyCaseBtnIsPresent(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 30)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Successfully button [ \" + buttonName + \" ] is present in cases layout\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"[ \" + buttonName + \" ] button is not present in case layout.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCaseBtnIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCaseBtnIsPresent`, verifies if a specific button is present in the cases layout of a web application.\n\nThe method takes a `buttonName` as input and uses it to construct an XPath expression that uniquely identifies the button. It then:\n\n1. Waits for the element to be loaded (up to 30 seconds).\n2. Checks if the element is displayed.\n3. If the element is present, it scrolls to the element and takes a manual screenshot to confirm the presence of the button.\n4. If the element is not present, it marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickCheckBoxinNewcaseLayout",
        "code": "public void clickCheckBoxinNewcaseLayout(String label) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString button = label + \"#xpath=//span[contains(text(),'\" + label\n\t\t\t\t\t+ \"')]//parent::div//input[@type='checkbox']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 14)) {\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" radio button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickRadioButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickCheckBoxinNewcaseLayout`, attempts to click a checkbox with the specified label in the New case layout. It uses Selenium WebDriver and its associated utilities (e.g., `waitTime`, `waitForElement`, `isElementDisplayed`, `findWebElement`) to perform the following steps:\n\n1. Waits for 2 seconds.\n2. Creates an XPath expression to locate the checkbox element based on the provided label.\n3. Waits up to 30 seconds for the element to be present.\n4. Checks if the element is displayed within 14 seconds. If it is, proceeds with clicking the checkbox using Selenium's `Actions` class.\n5. Waits for an additional 2 seconds after clicking the checkbox.\n6. If the element is not displayed or an exception occurs during the process, the method reports a test step failure.\n\nThe method catches any exceptions that may occur and reports a test step failure with the exception message if one is thrown.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "selectCheckBoxInQCPopup",
        "code": "public void selectCheckBoxInQCPopup(String Labelname) {\n\t\ttry {\n\t\t\tString textLabelName = \"#xpath=//span[text()='\" + Labelname + \"']/parent::label//..//input\";\n\t\t\twaitForElement(textLabelName, 10);\n\t\t\tif (isElementDisplayed(textLabelName, 10)) {\n\t\t\t\tscrollToElement(textLabelName);\n\t\t\t\t// highLighterMethod(textLabelName);\n\t\t\t\tclickOnSpecialElement(textLabelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \" is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInQCScreen\" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : I2518\n\t * @since : Feb 13, 2024\n\t * @purpose :\n\t */",
        "description": "This Java method is used to select a checkbox from a QCPopup (Quick Control Popup) element in an application. The method takes a `String` parameter `Labelname`, which is the label name of the checkbox to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath string to locate the checkbox based on its label text.\n2. It waits for the checkbox to be displayed using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the checkbox is displayed, it scrolls the element into view using the `scrollToElement` method (not shown in this code snippet).\n4. It then simulates a click on the checkbox using the `clickOnSpecialElement` method (also not shown in this code snippet).\n5. If the checkbox is not displayed after 10 seconds, the method fails the test step with an error message.\n6. If any exception occurs during the execution of the method, it also fails the test step with an error message.\n\nThe purpose of this method seems to be to automate the selection of a specific checkbox from a QCPopup in an application, likely for testing or automation purposes.",
        "input": [
            "String Labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyCaseIsMovedToAnotherQueue",
        "code": "public void verifyCaseIsMovedToAnotherQueue(String expectedCaseIDValue) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tString locator = \"#xpath=//a[contains(@class,'slds-truncate outputLookupLink')]\";\n\t\t\twaitForElement(locator, 25);\n\t\t\tif (isElementDisplayed(locator)) {\n\t\t\t\tList<WebElement> elements = findWebElements(locator);\n\t\t\t\tfor (int i = 0; i < elements.size(); i++) {\n\t\t\t\t\tif (elements.get(i).getText().equalsIgnoreCase(expectedCaseIDValue)) {\n\t\t\t\t\t\t((JavascriptExecutor) driver).executeScript(\"arguments[0].scrollIntoView(true);\",\n\t\t\t\t\t\t\t\telements.get(i));\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully [\" + expectedCaseIDValue + \"] record is moved to the expected queue.\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(\"Expected [\" + expectedCaseIDValue + \"] record is moved\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No records are found in this queue.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCaseIsMovedToAnotherQueue. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : I2518\n\t * @since : Feb 13, 2024\n\t * @purpose : To click and get the case record in QC page.\n\t */",
        "description": "This Java method, `verifyCaseIsMovedToAnotherQueue`, is used to verify if a specific case ID has been moved to another queue in a Quality Control (QC) page. \n\nThe method first waits for an element with the specified XPath locator to be displayed and then checks if any records are found at that location. If records are found, it iterates through them to find the one matching the expected case ID value. Once the record is found, it scrolls into view and takes a manual screenshot as proof of successful movement. \n\nIf no records are found or the expected record is not found, the method fails the test step with an appropriate error message. If any exception occurs during the execution of this method, it also fails the test step with the exception message.",
        "input": [
            "String expectedCaseIDValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnFirstCaseRecord",
        "code": "public String clickOnFirstCaseRecord() {\n\t\tString caseIdValue = null;\n\t\ttry {\n\t\t\tString button = \"#xpath=(//a[contains(@class,'slds-truncate outputLookupLink')])[1] \";\n\t\t\twaitForElement(button, 25);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tcaseIdValue = getText(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case records are not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFirstCaseRecord. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn caseIdValue;\n\t}",
        "description": "This Java method, `clickOnFirstCaseRecord`, simulates a user clicking on the first case record link and retrieves its ID value. The method uses various WebDriver APIs to:\n\n1. Wait for an element with the specified XPath (CSS selector) to be visible.\n2. Check if the element is displayed within a certain time frame.\n3. Scroll to the element if it's not currently visible.\n4. Get the text content of the element (which should contain the case ID).\n5. Click on the element.\n\nIf any of these steps fail, the method reports a test step failure with an appropriate error message. The method returns the retrieved case ID value as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Cases",
        "function_name": "clickOnPopupSaveButton",
        "code": "public void clickOnPopupSaveButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//span[text()='Save']//parent::button[not(contains(@title,'Save'))]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\tmanualScreenshot(\"Click on Save Button \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : I2518\n\t * @since : Feb 13, 2024\n\t * @purpose :\n\t */",
        "description": "This Java method, `clickOnPopupSaveButton()`, simulates a click on the \"Save\" button in a popup window. Here's what it does:\n\n1. It defines an XPath expression to locate the \"Save\" button.\n2. It waits for the element to be displayed within 10 seconds using the `waitForElement()` method.\n3. If the element is displayed, it clicks on the button using the `clickOn()` method and takes a manual screenshot with the label \"Click on Save Button \".\n4. If the element is not displayed, it fails the test step with the message \"Save button is not present\".\n5. It catches any exceptions that occur during execution and fails the test step with a message indicating the failure.\n\nThis method appears to be part of an automated testing framework for a web application, likely using a Selenium-based tool like TestNG or JUnit.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Cases",
        "function_name": "verifyExpecteValidationInQCPopup",
        "code": "public boolean verifyExpecteValidationInQCPopup(String expectedErrorMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\t// manualScreenshot(\"Error \" + (i + 1) + \" : \" +\n\t\t\t\t\t// errorsList.get(i).getText().trim());\n\t\t\t\t\tString error_Msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (error_Msg.contains(expectedErrorMessage)) {\n\t\t\t\t\t\tmanualScreenshot(\"Successfully Expected [\" + error_Msg + \"] validation message is displayed.\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not get fired. Instead of we got : \" + error_Msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Expected validation is not get fired\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, named `verifyExpecteValidationInQCPopup`, verifies whether a specific expected error message is displayed when an element is clicked. The method takes a `String` parameter `expectedErrorMessage` which represents the expected error message to be verified.\n\nHere's a step-by-step breakdown:\n\n1. It first checks if an element with the XPath `//span[text()='Review the errors on this page.']` is displayed within 2 seconds using the `isElementDisplayed` method.\n2. If the element is displayed, it retrieves the list of error messages using the XPath `//ul[contains(@class,'error')]`.\n3. It then iterates through each error message in the list and checks if the text contains the expected error message passed as a parameter.\n4. If the expected error message is found, it takes a manual screenshot with a message indicating that the expected validation message was displayed successfully.\n5. If the expected error message is not found or no error messages are present, it fails the test step and logs an error message.\n6. The method also catches any exceptions that may occur during execution and fails the test step if an exception is thrown.\n\nThe method returns a boolean value indicating whether the expected validation was successful or not.",
        "input": [
            "String expectedErrorMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Cases",
        "function_name": "selectOrUnSelectTheCheckBoxInQCPopup",
        "code": "public void selectOrUnSelectTheCheckBoxInQCPopup(String Labelname, String flag) {\n\t\ttry {\n\t\t\tString checkboxField = \"#xpath=//span[text()='\" + Labelname + \"']/parent::label//..//input\";\n\t\t\twaitForElement(checkboxField, 10);\n\t\t\tif (isElementDisplayed(checkboxField, 10)) {\n\t\t\t\tWebElement checkBox = findWebElement(checkboxField);\n\t\t\t\tif (flag.equalsIgnoreCase(\"Check\")) {\n\t\t\t\t\tif (checkBox.isSelected()) {\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\tmanualScreenshot(\"[\" + Labelname + \"] checkbox is already in Selected.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\tclickOnSpecialElement(checkboxField);\n\t\t\t\t\t\tmanualScreenshot(\"[\" + Labelname + \"] checkbox is Selected.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (flag.equalsIgnoreCase(\"UnCheck\")) {\n\t\t\t\t\tif (!checkBox.isSelected()) {\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\tmanualScreenshot(\"[\" + Labelname + \"] checkbox is already in UnSelected.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\tclickOnSpecialElement(checkboxField);\n\t\t\t\t\t\tmanualScreenshot(\"[\" + Labelname + \"] checkbox is UnSelected.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"UNDEFINED VALUE: \" + flag + \" Method name: selectOrUnSelectTheCheckBoxInQCPopup\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \" is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterTextInQCScreen\" + e.getMessage());\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `selectOrUnSelectTheCheckBoxInQCPopup`, selects or unselects a checkbox with the given label name and flag (\"Check\" or \"UnCheck\") in a QC popup. \n\nHere's how it works:\n\n1. It uses an XPath expression to locate the checkbox based on its label text.\n2. It waits for the element to be displayed and then checks if it is displayed.\n3. If the checkbox is not selected (or unchecked) when the flag is \"Check\", it clicks on the checkbox to select it.\n4. If the checkbox is already selected (or checked) when the flag is \"Check\", or vice versa for \"UnCheck\", it takes a manual screenshot to confirm the state of the checkbox.\n5. If the flag value is neither \"Check\" nor \"UnCheck\", it fails the test step with an error message.\n6. If any exception occurs during the execution, it also fails the test step with the error message.\n\nThis method seems to be part of a larger automation framework for testing QC (Quality Center) popup elements.",
        "input": [
            "String Labelname",
            "String flag"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getOpportunityLinkText",
        "code": "public String getOpportunityLinkText() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tmanualScreenshot(opportunityValue + \"Opportunity Name Link is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(opportunityValue + \"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `getOpportunityLinkText()`, retrieves the text of a link associated with an opportunity. It uses Selenium WebDriver to interact with the web page.\n\nHere's a step-by-step breakdown:\n\n1. It sets a variable `opportunityValue` to null.\n2. It attempts to perform the following actions:\n\t* Define a string `oppurtunity` as an XPath expression that targets a specific link on the page.\n\t* Wait for the element to be displayed using the `waitForElement()` method (with a timeout of 10 seconds).\n\t* Check if the element is displayed using the `isElementDisplayed()` method (with a timeout of 5 seconds). If it is, proceed with the next step.\n3. If the element is displayed:\n\t* Get the text of the link using the `getText()` method and store it in `opportunityValue`.\n\t* Take a manual screenshot to capture evidence of the link's presence (if successful).\n4. If the element is not displayed or any other exception occurs:\n\t* Report the failure by calling the `testStepFailed()` method, providing an error message that includes the opportunity value and the exception message.\n5. The method returns the `opportunityValue` as a string.\n\nThis method appears to be part of a larger test suite for testing web applications using Selenium WebDriver.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "selectvaluefromdropdownAdminlogin",
        "code": "public void selectvaluefromdropdownAdminlogin(String labelname, String value) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString Label = labelname + \"#xpath=//label[text()='\" + labelname + \"']/ancestor::span//div//button//span\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tscrollToWebElement(Label);\n\t\t\tif (isElementDisplayed(Label, 7)) {\n\t\t\t\thighLighterMethod(Label);\n\t\t\t\tclickOnSpecialElement(Label);\n\t\t\t\tString Element = value + \"#xpath=//label[text()='\" + labelname\n\t\t\t\t\t\t+ \"']/following-sibling::div//div//span[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + labelname + \" dropdown \");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(value + \"is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \"dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdropdownAdminlogin`, is used to select a value from a dropdown menu in an admin login page. \n\nThe method takes two parameters: `labelname` and `value`. The `labelname` parameter is the text of the label associated with the dropdown menu, and the `value` parameter is the specific value that needs to be selected from the dropdown.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `labelname` to locate the dropdown menu.\n2. It waits for the dropdown menu to appear, then scrolls to it if necessary.\n3. If the dropdown menu is displayed, it highlights the element and clicks on the dropdown button.\n4. It constructs another XPath expression to locate the specific value that needs to be selected from the dropdown, using the `labelname` and the provided `value`.\n5. If the value is displayed in the dropdown, it highlights the element and clicks on it to select the value.\n6. If the value is not present or if any error occurs during the process, it takes a manual screenshot with an appropriate message.\n\nNote that this method also includes some basic error handling by catching exceptions and taking screenshots when errors occur.",
        "input": [
            "String labelname",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyAutoPopulatedText",
        "code": "public String verifyAutoPopulatedText(String labelName) {\n\t\tString value = null;\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']/parent::div/following-sibling::div\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tString slot = field + \"//span/slot//lightning-formatted-text\";\n\t\t\t\tvalue = getText(slot);\n\t\t\t\tif (value.equals(\"\")) {\n\t\t\t\t\tvalue = \"\";\n\t\t\t\t}\n\t\t\t\tscrollToWebElement(slot);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(labelName + \" has [ \" + value + \" ] value\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAutoPopulatedText\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedText`, is used to verify the auto-populated text for a given label name. It attempts to locate an element with the specified label name using XPATH, waits for it to be displayed, and then retrieves the text value from that element. If the text value is empty, it returns an empty string. The method also takes screenshots of the process and highlights the element if it's successful or fails the test step if there are any exceptions.\n\nThe method takes a `String` parameter `labelName`, which represents the label name to be verified. It uses this label name to construct an XPATH expression that locates the desired element. The method then waits for the element to be displayed, retrieves its text value, and takes a screenshot of the result. If the text value is empty, it returns an empty string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnCustomer",
        "code": "public void clickOnCustomer(String customerName) {\n\t\ttry {\n\n\t\t\tString link = \"#xpath=//a[text()='\" + customerName + \"']\";\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\ttestStepPassed(customerName + \" is clicked successfully\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomer`, attempts to click on a link with the text matching the provided `customerName`. It uses an XPath expression to locate the element and then performs the click action if the element is present. If the element is not found or any exception occurs during the process, it logs a failure message and marks the test step as failed.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOptionWithTitle1",
        "code": "public void clickEditOptionWithTitle1(String fieldLabel, String ScrollElement) {\n\n\t\ttry {\n\t\t\tString editScroll = fieldLabel + \" edit button#xpath=(//span[text()='Additional Details'])[1]\";\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\twaitForElement(editScroll, 35);\n\n\t\t\tscrollbycordinates(editScroll);\n\n\t\t\twaitForElement(editOption, 25);\n\t\t\tscrollbycordinates(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle1`, simulates a click on an edit button with a specific title in the master page. \n\nThe method takes two parameters: `fieldLabel` and `ScrollElement`. It first constructs two XPath expressions to locate the edit scroll and edit option buttons based on the provided field label. \n\nIt then waits for the edit scroll element to be visible, scrolls down to it if necessary, and waits again for the edit option button to appear. If the button is displayed within a certain time limit (10 seconds), it simulates a click on the button using the `clickOnSpecialElement` method. \n\nIf the button is not present or takes too long to load, the test step fails with an error message. The method also catches any exceptions that may occur during its execution and logs them as test step information.",
        "input": [
            "String fieldLabel",
            "String ScrollElement"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditWithTitle1",
        "code": "public void clickEditWithTitle1(String fieldLabel, String ScrollElement) {\n\n\t\ttry {\n\t\t\tString editScroll = fieldLabel + \" edit button#xpath=(//span[text()='Additional Details'])[1]\";\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\twaitForElement(editScroll, 25);\n\t\t\tscrollbycordinates(editScroll);\n\t\t\twaitForElement(editOption, 25);\n\t\t\tscrollbycordinates(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditWithTitle1`, is used to click on the edit button with a specific title or label in a web page. It takes two string parameters: `fieldLabel` and `ScrollElement`. The method attempts to find the edit button by scrolling down to it and then clicking on it. If the edit button is not found, it reports a test failure.",
        "input": [
            "String fieldLabel",
            "String ScrollElement"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "RemoveCrossSignInZipCode",
        "code": "public void RemoveCrossSignInZipCode(String labelname) {\n\t\ttry {\n\t\t\tString btn_remove = \"Remove \" + labelname + \"#xpath=(//span[text()='\" + labelname\n\t\t\t\t\t+ \"'])[last()]//..//following-sibling::div//a[contains(@class,'delete')]\";\n\t\t\twaitForElement(btn_remove, 10);\n\t\t\tscrollToWebElement(btn_remove);\n\t\t\tif (isElementDisplayed(btn_remove, 6)) {\n\t\t\t\tclickOn(btn_remove);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Remove cross sign is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Remove cross sign Exception :\" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, named `RemoveCrossSignInZipCode`, appears to be used for removing a specific cross sign or delete button in a web application. The method takes a string parameter `labelname` which is likely the label or text associated with the cross sign.\n\nHere's what the method does:\n\n1. It constructs a XPath expression based on the provided `labelname` and uses it to locate the corresponding cross sign (or delete button).\n2. It waits for the element to be present on the page using the `waitForElement` method.\n3. If the element is found, it scrolls to the element using the `scrollToWebElement` method.\n4. It checks if the element is displayed on the page within a certain time limit (6 seconds) using the `isElementDisplayed` method.\n5. If the element is displayed, it clicks on the cross sign or delete button using the `clickOn` method.\n6. If the element is not displayed, it logs an error message indicating that the remove cross sign is not present.\n\nThe method also includes a try-catch block to handle any exceptions that may occur during execution. If an exception occurs, it logs a failure message with the exception details.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectDateInPopup",
        "code": "public void selectDateInPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\ttestStepPassed(\"POS able to entry data with \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"POS not able to entry data with out \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `selectDateInPopup`, is used to select a date value from a popup calendar in a web application. \n\nThe method takes two parameters: `labelName` and `value`. The `labelName` parameter is the name of the label associated with the date field, and the `value` parameter is the actual date value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `labelName` and uses it to find the date input field.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it types in the provided `value` into the field using the `typeIn` method.\n4. If the operation is successful, it logs a test step as passed. Otherwise, it logs a test step as failed.\n\nIf any exception occurs during the execution of this method, it logs a test step as failed with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getbankdetails",
        "code": "public void getbankdetails() {\n\t\ttry {\n\t\t\tString Name = \"#xpath=//th/span/a\";\n\t\t\twaitForElement(Name, 10);\n\t\t\tif (isElementDisplayed(Name, 3)) {\n\t\t\t\tclickOnSpecialElement(Name);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opportunity Link is not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getbankdetails\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `getBankDetails`, attempts to retrieve bank details by interacting with a web page. Here's a breakdown of what it does:\n\n1. It uses an XPath expression (`#xpath=//th/span/a`) to locate an element on the page.\n2. The method waits for this element to be displayed within a certain time frame (10 seconds).\n3. If the element is displayed, it clicks on it using `clickOnSpecialElement`.\n4. If the element is not displayed after 3 attempts, the test fails with a message indicating that the \"Opportunity Link\" is not present.\n5. In case of any exceptions during execution, the method catches them and reports a failure with a message indicating that the `getBankDetails` step failed.\n\nIn summary, this method appears to be part of an automated testing framework, designed to interact with a web page and verify the presence of specific elements or perform actions on those elements.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickonopportunityLink",
        "code": "public void clickonopportunityLink(String Link) {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a[text()='\" + Link\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tclickOnSpecialElement(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opportunity Link is not Present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonopportunityLink\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonopportunityLink`, simulates a click on an opportunity link with the given URL. It uses XPath to locate the link element and then waits for it to be displayed before attempting to click on it. If the link is not found or not displayed after a certain time, the test step fails. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String Link"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOrChangeButton",
        "code": "public void clickEditOrChangeButton(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=(//button[contains(@title,'\" + labelName + \"')])[2]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOrChangeButton`, simulates a click on an \"Edit or Change\" button with the specified label name. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be available and then checks if it is displayed within a certain time frame (10 seconds). If the element is not displayed, it marks the test as failed. The method also catches any exceptions that may occur during execution and reports the failure.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOrChangeButtonInFmsMasterPage",
        "code": "public void clickEditOrChangeButtonInFmsMasterPage(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]/parent::button\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOrChangeButtonInFmsMasterPage`, is designed to simulate a user clicking the \"Edit or Change\" button associated with a specific label name on an FMS Master Page.\n\nThe method takes a `String` parameter, `labelName`, which represents the text displayed next to the edit button. It uses this label name to construct an XPath expression that locates the button element on the page. The method then:\n\n1. Waits for the button to be present and visible (up to 30 seconds).\n2. Checks if the button is actually present using the `isElementPresent` method.\n3. If the button is found, it simulates a click on the button using the `clickOnSpecialElement` method.\n4. If the button is not found or an exception occurs during the process, the method reports a test failure with an error message.\n\nThe method uses try-catch blocks to catch and handle any exceptions that may occur during its execution.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectvaluefromDigitalLineStatusdropdownAdminlogin",
        "code": "public void selectvaluefromDigitalLineStatusdropdownAdminlogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]/parent::lightning-combobox//div//button//span\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \"#xpath=//label[text()='\" + dropdownName + \"']/..//span[@title='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromDigitalLineStatusdropdownAdminlogin`, is used to select a value from a dropdown menu with the specified name and value. It takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected). \n\nThe method first constructs an XPath expression for the dropdown element using the provided `dropdownName`. It then waits for the dropdown element to be displayed, scrolls to it if necessary, and clicks on it. After that, it waits for a new page load and checks if the specified `value` is present in the dropdown list. If the value is found, it selects it by clicking on the corresponding option. \n\nIf any of these steps fail (e.g., the dropdown element is not displayed or the selected value is not present), the method reports a test step failure with an appropriate message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectTimefromdropdownAdminlogin",
        "code": "public void selectTimefromdropdownAdminlogin(String labelname, String value) {\n\t\ttry {\n\t\t\tString Label = \"#xpath=//legend[text()='\" + labelname + \"']/parent::fieldset//lightning-timepicker//input\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tif (isElementDisplayed(Label, 7)) {\n\t\t\t\thighLighterMethod(Label);\n\t\t\t\tclickOnSpecialElement(Label);\n\t\t\t\tString Element = \"#xpath=//div//span[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected\" + value + \" value from \" + labelname + \" dropdown \");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(value + \"is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \"dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectTimefromdropdownAdminlogin`, selects a time value from a dropdown menu on an admin login page. It takes two parameters: `labelname` and `value`. \n\nHere's what the method does:\n\n1. It uses XPath to locate the label element with the specified `labelname`.\n2. It waits for the label element to be displayed.\n3. If the label is displayed, it highlights the element using a high-lighting method (presumably to indicate that the element has been interacted with).\n4. It then clicks on the special element associated with the label.\n5. Next, it uses XPath again to locate an element with the specified `value` and checks if it's displayed.\n6. If the value is displayed, it highlights the element using the same high-lighting method and clicks on it.\n7. Finally, if the selection was successful, it takes a manual screenshot with a message indicating that the value has been selected successfully. If not, it takes a screenshot with an error message.\n\nIf any of these steps fail (e.g., the label is not displayed), it reports a test step failure with an appropriate message.",
        "input": [
            "String labelname",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyAutoPopulatedLinkValueInMaster",
        "code": "public String verifyAutoPopulatedLinkValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\n\t\t\tString labelElement = moveToElement + \"//slot/span\";\n\t\t\tString labelElement1 = moveToElement + \"/slot//slot\";\n\t\t\tString labelElement2 = moveToElement + \"//slot//a\";\n\t\t\twaitForElement(labelElement, 40);\n\t\t\tif (isElementDisplayed(labelElement, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedLinkValueInMaster`, is used to verify the value of an auto-populated link field in a master record. The method takes a string parameter `Label` which represents the label or name of the field.\n\nThe method uses various WebDriver methods such as `moveToElement`, `scrollToWebElement`, and `getText` to interact with the element, scroll to it if necessary, and retrieve its text value. It also uses some custom methods like `highLighterMethod` and `testStepInfo` for logging and screenshot purposes.\n\nThe method checks three different elements (labelElement, labelElement1, and labelElement2) in sequence until one of them is displayed, then it retrieves the text value and logs a test step with the expected result. If none of the elements are displayed, it marks the test as failed.\n\nFinally, the method returns the retrieved text value.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "gettextLocationValueFromAdminLogin",
        "code": "public String gettextLocationValueFromAdminLogin(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//lightning-formatted-location\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 9)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(LabelName + \"Value is not populated\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `gettextLocationValueFromAdminLogin`, is used to retrieve the value of a location element from an admin login page. The method takes a `LabelName` as input and attempts to locate the corresponding element on the page using XPath.\n\nHere's what it does:\n\n1. Waits for 2 seconds.\n2. Locates the element using the provided `LabelName` and an XPath query.\n3. Waits for the element to be displayed within 5 seconds.\n4. If the element is displayed, it:\n\t* Scrolls to the element.\n\t* Highlights the element (using a highlighting method).\n\t* Retrieves the text value of the element.\n\t* Takes a manual screenshot with the label name and the retrieved text value.\n\t* Checks if the text value is empty; if so, logs a test step failure.\n5. If the element is not displayed, takes a manual screenshot with the label name and a message indicating that the element is not displayed.\n6. Catches any exceptions that occur during the process and logs a test step failure.\n\nThe method returns the retrieved text value as a `String`.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickDetailsTabInMasterPageforParentOpportunities",
        "code": "public void clickDetailsTabInMasterPageforParentOpportunities() {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString ecsMandateButton = \"Details  Button#xpath=(//lightning-tab-bar//ul//li//a[text()='Details'])[1]\";\n\t\t\twaitForElement(ecsMandateButton, 10);\n\t\t\tif (isElementDisplayed(ecsMandateButton, 3)) {\n\t\t\t\tscrollbycordinates(ecsMandateButton);\n\t\t\t\tclickOnSpecialElement(ecsMandateButton);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"ECS Mandate  button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickDetailsTabInMasterPageforParentOpportunities`, is used to click on the \"Details\" tab in a master page for parent opportunities. \n\nHere's what it does:\n\n1. It waits for the page to load.\n2. It identifies and waits for the \"Details\" button (located using XPath) to be displayed within 10 seconds.\n3. If the button is displayed, it scrolls down to the button and then clicks on it.\n4. If the button is not displayed after 3 seconds, the test fails with an error message.\n\nThe method also includes a catch block that logs any exceptions that occur during the execution of the method.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getNumberValueFromAdminLogin",
        "code": "public String getNumberValueFromAdminLogin(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//lightning-formatted-number\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 9)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(LabelName + \"Value is not populated\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `getNumberValueFromAdminLogin`, retrieves the value of a number field on an admin login page. It takes a `LabelName` as input and attempts to:\n\n1. Wait for 2 seconds.\n2. Locate an element on the page using XPath that matches the provided label name.\n3. Wait for up to 5 seconds for the element to be displayed.\n4. If the element is displayed, scroll to it, highlight it (using a highlighting method), retrieve its text value, and take a manual screenshot with the label name and value.\n5. If the text value is empty, log a test step failure with a message indicating that the value is not populated.\n\nIf the element is not displayed after 9 seconds, it takes a manual screenshot with the label name and a message indicating that the element is not displayed.\n\nThe method returns the retrieved text value as a `String`. If an exception occurs during the process, it logs a test step failure with an error message.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "toClickonSetUp",
        "code": "public void toClickonSetUp() {\n\t\ttry {\n\t\t\tString setupElement = \"Set Up#xpath=//a[contains(@class,'setup')]\";\n\t\t\tString setupcurrentApp = \"SetUp CurrentApp#xpath=//div[contains(@class,'popupTargetContainer')]//ul//li[@id='related_setup_app_home']//span[text()='Setup']\";\n\t\t\twaitForElement(setupElement, 25);\n\t\t\tActions action = new Actions(driver);\n\t\t\tif (isElementDisplayed(setupElement, 5)) {\n\t\t\t\taction.click(findWebElement(setupElement)).build().perform();\n\t\t\t\t// clickOnSpecialElement(setupElement);\n\t\t\t\twaitForElement(setupcurrentApp, 5);\n\t\t\t\tif (isElementDisplayed(setupcurrentApp, 5)) {\n\t\t\t\t\taction.click(findWebElement(setupcurrentApp)).build().perform();\n\t\t\t\t\t// clickOnSpecialElement(setupcurrentApp);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Failed in click on setupcurrentApp\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to Click on SetUp\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toDeletePreviosAuditSchedular\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toClickonSetUp()`, is used to perform a series of clicks on specific elements on a web page. It attempts to click on two different elements: \"Set Up\" and \"Setup Current App\". The method uses the Selenium WebDriver library to interact with the web page.\n\nHere's what it does:\n\n1. It waits for the \"Set Up\" element to be displayed within 25 seconds.\n2. If the element is displayed, it performs a click on that element using the `Actions` class and then waits for another element (\"Setup Current App\") to be displayed within 5 seconds.\n3. If this second element is also displayed, it clicks on that as well.\n4. If either of these clicks fails (i.e., the element is not displayed), it reports a test step failure.\n\nThe method catches any exceptions that may occur during execution and reports another test step failure with the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "toQuickSearchInAdmin",
        "code": "public void toQuickSearchInAdmin() {\n\t\ttry {\n\t\t\tString setupElement = \"Quick Find#xpath=//input[contains(@placeholder,'Quick Find')]\";\n\t\t\tString scheduledJobs = \"Scheduled Jobs#xpath=//a//mark[text()='Scheduled Jobs']\";\n\t\t\twaitForElement(setupElement, 5);\n\t\t\tif (isElementDisplayed(setupElement, 5)) {\n\t\t\t\ttypeIn(setupElement, \"Scheduled Jobs\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheduledJobs, 5);\n\t\t\t\tif (isElementDisplayed(scheduledJobs, 5)) {\n\t\t\t\t\tclickOnSpecialElement(scheduledJobs);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Failed to Click Scheduled Jobs\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to Search In Quick Find\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toQuickSearchInAdmin\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toQuickSearchInAdmin()`, performs a series of actions on an admin interface that utilizes Quick Find functionality. Here's a brief summary:\n\n1. It waits for the Quick Find element to be displayed and then types \"Scheduled Jobs\" into it.\n2. After typing, it waits for the page to load again.\n3. It then searches for the \"Scheduled Jobs\" element using XPath and waits for it to be displayed.\n4. If the element is found, it clicks on it and waits for the page to load again.\n5. Finally, it waits for 5 seconds before potentially failing a test step if any of these actions fail.\n\nThe method uses various utility methods such as `waitForElement()`, `typeIn()`, `clickOnSpecialElement()`, `waitTime()` and `testStepFailed()` to perform these actions. It also catches any exceptions that may occur during the execution of this method, and if an exception is caught, it will fail a test step with a descriptive message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "toDeletePreviosAuditSchedular",
        "code": "public void toDeletePreviosAuditSchedular() {\n\t\ttry {\n\t\t\tString setupElement = \"A Sorting#xpath=(//a//span[text()='A'])[1]\";\n\t\t\tString DeleteLink = \"AuditExisting Record#xpath=//th[text()='AuditTrailBatchScheduler']//parent::tr//a[text()='Del']\";\n\t\t\tString ScheduledJobsiframe = \"Iframe#xpath=//iframe[contains(@title,'All Scheduled Jobs')]\";\n\t\t\tString descendingorder = \"SortRecord#xpath=//html[@class='ext-strict']//table//tr//th//a[text()='Job Name']\";\n\t\t\twaitForElement(ScheduledJobsiframe, 5);\n\t\t\tif (isElementDisplayed(ScheduledJobsiframe, 5)) {\n\t\t\t\tswitchToFrame(ScheduledJobsiframe);\n\t\t\t\twaitForElement(setupElement, 5);\n\t\t\t\tif (isElementDisplayed(setupElement, 5)) {\n\t\t\t\t\tclickOnSpecialElement(setupElement);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tswitchToFrame(ScheduledJobsiframe);\n\t\t\t\t\twaitForElement(DeleteLink, 5);\n\t\t\t\t\tif (isElementDisplayed(DeleteLink, 5)) {\n\t\t\t\t\t\tscrollToWebElement(DeleteLink);\n\t\t\t\t\t\tWebElement ele = findWebElement(DeleteLink);\n\t\t\t\t\t\tele.click();\n\t\t\t\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\t\t\t\talert.accept();\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t}\n\t\t\t\t\twaitTime(1);\n\t\t\t\t}\n\t\t\t\tswitchToDefaultFrame();\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toDeletePreviosAuditSchedular\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toDeletePreviosAuditSchedular`, is used to delete a previous audit scheduler record. It attempts to perform the following steps:\n\n1. Waits for an iframe with the title \"All Scheduled Jobs\" to load.\n2. Switches to that iframe and waits for a specific element (\"A Sorting\") to be displayed.\n3. Clicks on that element, then waits for the page to load and waits for 5 seconds.\n4. Switches back to the default frame.\n5. Waits for another element (\"Delete Link\") to be displayed within the original frame.\n6. Scrolls to that element, clicks it, and accepts any subsequent alert pop-up.\n7. Waits for the page to load again.\n\nThe method uses various Selenium WebDriver methods, such as `waitForElement`, `isElementDisplayed`, `switchToFrame`, `clickOnSpecialElement`, `scrollToWebElement`, and `findWebElement`. It also includes a try-catch block to handle any exceptions that may occur during execution. If an exception is thrown, the method will log a test step failure with the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "EnterDateInAdminLogin",
        "code": "public void EnterDateInAdminLogin(String LabelName, String DateLabel, String DateValue) {\n\t\ttry {\n\t\t\tString Element = \"xpath=//legend[text()='\" + LabelName + \"']/parent::fieldset//label[text()='\" + DateLabel\n\t\t\t\t\t+ \"']/parent::div//input\";\n\t\t\twaitForElement(Element, 20);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tele.clear();\n\t\t\t\tele.sendKeys(DateValue);\n\t\t\t\tmanualScreenshot(DateValue + \" is entered in\" + DateLabel);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in EnterDateInAdminLogin\" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n**EnterDateInAdminLogin**\n\nThis method enters a date value into an input field with a specific label name and date label on an admin login page. It uses XPath to locate the element, waits for it to be displayed, clears any existing text, and then types in the provided `DateValue`. If the element is not displayed, it takes a manual screenshot of the issue. The method also logs any exceptions that may occur during execution.",
        "input": [
            "String LabelName",
            "String DateLabel",
            "String DateValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInFieldAdminLogin",
        "code": "public void enterValueInFieldAdminLogin(String labelName, String value) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/input\";\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tele.click();\n\t\t\t\t\tele.clear();\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please Provide the value for\" + labelName);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldAdminLogin`, is used to fill a specific input field on an admin login page with a given value. The method takes two parameters: `labelName` and `value`.\n\nHere's what the method does:\n\n1. Waits for 5 seconds using the `waitTime(5)` method.\n2. Checks if the provided `value` is not empty. If it's not, the method proceeds to fill the input field.\n3. Locates the input field using an XPath expression that matches the given `labelName`.\n4. Verifies if the element is displayed within 8 seconds using the `isElementDisplayed(field, 8)` method. If the element is not present or not visible, the method fails the test step.\n5. Scrolls to the located element using the `scrollToWebElement(field)` method.\n6. Clicks on the element to focus it, clears any existing text, and highlights the element using the `highLighterMethod(field)` method.\n7. Types in the value provided and presses Enter using the `typeIn(field, value)` and `ele.sendKeys(Keys.ENTER)` methods, respectively.\n8. Waits for 3 seconds before continuing.\n\nIf the value is empty, the method logs a test step info message indicating that no value was provided.\n\nThe method also includes exception handling to catch any unexpected errors that might occur during execution. If an error occurs, the method fails the test step with a descriptive message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "compareGetText1",
        "code": "public String compareGetText1(String labelname, String ExpectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div//following-sibling::lightning-button-icon/..//span[@records-recordtype_recordtype]\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(ExpectedValue)) {\n\t\t\t\t\tmanualScreenshot(text + \" is populated in the \" + labelname + \" Field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(text + \" is populated in the \" + labelname + \" Field\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \"field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `compareGetText1`, compares the actual text value of a specific element on a web page with an expected value. The element is identified by its XPath and is located within a parent div containing a lightning-button-icon. \n\nThe method first checks if the element is displayed using the `isElementDisplayed` method. If it is, the method scrolls to the element, highlights it, retrieves its text content, and compares it with the expected value. If the values match, a manual screenshot is taken; otherwise, a test step fails.\n\nIf the element is not displayed, a test step also fails. In case of any exception during the process, another test step fails with an error message. The method returns the actual text value of the element.",
        "input": [
            "String labelname",
            "String ExpectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSaveInCustomer",
        "code": "public void clickOnSaveInCustomer(String label) {\n\t\ttry {\n\t\t\tString button = \"#xpath=//button[text()='\" + label + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 9)) {\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tele.click();\n\t\t\t\ttestStepPassed(\"Click on : Save button\");\n\t\t\t\twaitTime(10);\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveInCustomer`, is used to click on a specific save button on a web page with the given label. The method uses Selenium WebDriver to locate and interact with the element.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression based on the provided label to locate the save button.\n2. It waits for the element to be displayed using `waitForElement`.\n3. If the element is displayed, it checks if the element is visible using `isElementDisplayed`.\n4. If the element is visible, it clicks on the element using `ele.click()`.\n5. It logs a success message and takes a manual screenshot.\n6. If the element is not present or an exception occurs during the process, it logs a failure message.\n\nThe method uses try-catch blocks to handle any exceptions that may occur during execution.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickDECHyperLink",
        "code": "public void clickDECHyperLink(String Link) {\n\t\ttry {\n\t\t\tString Element = Link + \"#xpath=(//article//a/span[text()='\" + Link + \"'])[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tscrollToElementTillPresent(Element);\n\t\t\twaitForElement(Element, 30);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitTime(5);\n\t\t\t\tmanualScreenshot(Link + \" is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Digital EMI Card is not created,Please active Cards\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickDECHyperLink\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickDECHyperLink`, simulates a click on a hyperlink with the given link text. It performs the following actions:\n\n1. Constructs an XPath expression to locate the desired element.\n2. Waits for the page to load and scrolls to the element until it's present.\n3. Waits for the element to be displayed within a certain time limit (30 seconds).\n4. If the element is displayed, clicks on it using `clickOnSpecialElement` method.\n5. Waits for 5 seconds and takes a manual screenshot with the link text as the filename.\n6. If the element is not displayed after waiting, reports a test step failure with an error message.\n\nThe method also includes exception handling to catch any errors that may occur during execution.",
        "input": [
            "String Link"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnButtonInZBB",
        "code": "public void clickOnButtonInZBB(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 8);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInZBB`, simulates a click on a button with the specified label (`buttonLabel`) in a ZBB application. The method:\n\n1. Waits for 4 seconds using the `waitTime` method.\n2. Creates two XPath-based strings: one for the main button and another for an optional button within a specific section (if present).\n3. Waits up to 8 seconds for the specified button(s) to be displayed using the `waitForElement` method.\n4. Checks if the main button is displayed after 5 seconds; if so, it scrolls to the button, performs a click using the `Actions` class, and marks the test step as passed.\n5. If the main button is not found, it checks for the optional button within the specific section; if found, it scrolls to the button and clicks on it using the `clickOnSpecialElement` method.\n6. If neither button is found after 10 seconds, it marks the test step as failed with an error message indicating that the button is not present.\n\nThe method also catches any exceptions that may occur during execution and reports a failure if one occurs.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyFieldEnabledOrDisabledInButtonQCOrg",
        "code": "public void verifyFieldEnabledOrDisabledInButtonQCOrg(String LabelName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=//button[@aria-label='QC PAN VALIDATION, Complete Form 60 Available']\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tString getareaDisabledAttributeValue = findWebElement(targetField).getAttribute(\"disabled\");\n\t\t\t\tif (getareaDisabledAttributeValue.equals(\"true\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Freeze\");\n\t\t\t\t} else if (getareaDisabledAttributeValue.equals(\"false\")) {\n\t\t\t\t\tmanualScreenshot(LabelName + \" This Field is Editable\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(LabelName + \"This field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Unable to find any scheme value in this page\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextAndverifyField\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldEnabledOrDisabledInButtonQCOrg`, is used to verify if a button with the specified aria-label is enabled or disabled. The method takes a string parameter `LabelName` which is likely used for logging and reporting purposes.\n\nThe method performs the following actions:\n\n1. Waits for the page to load.\n2. Finds an element using XPath with the specified aria-label.\n3. Verifies if the element is displayed within 5 seconds.\n4. If the element is displayed, it checks the value of the \"disabled\" attribute and:\n\t* If the value is \"true\", takes a manual screenshot with a message indicating that the field is disabled (or \"frozen\").\n\t* If the value is \"false\", takes a manual screenshot with a message indicating that the field is editable.\n\t* If the value is neither \"true\" nor \"false\", fails the test step with an error message.\n5. If the element is not displayed, fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during execution and fails the test step with an error message if one occurs.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getTextFromDisabledFieldinQCWithDocumentField",
        "code": "public String getTextFromDisabledFieldinQCWithDocumentField(String LabelName) {\n\t\tString fieldValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\t;\n\t\t\tString targetField = \"#xpath=//button[@aria-label='QC PAN VALIDATION, Complete Form 60 Available']/span\";\n\t\t\twaitForElement(targetField, 10);\n\t\t\tif (isElementDisplayed(targetField, 5)) {\n\t\t\t\tfieldValue = getText(targetField);\n\t\t\t\tmanualScreenshot(LabelName + \" Field Value is \" + fieldValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \"This field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextAndverifyField\" + e.getMessage());\n\t\t}\n\t\treturn fieldValue;\n\t}",
        "description": "Here's a brief description of the Java method:\n\n**Method:** `getTextFromDisabledFieldinQCWithDocumentField`\n\n**Purpose:** This method retrieves the text value from a disabled field (identified by an XPath) in a Quality Control (QC) page, and takes a screenshot as verification. If the field is not present, it marks the test step as failed.\n\n**Input Parameter:** `LabelName` - a string that serves as a label for the test step.\n\n**Return Value:** The text value of the disabled field, or null if the field is not found.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnButtonInPopup1",
        "code": "public void clickOnButtonInPopup1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button\";\n\t\t\twaitForElement(button, 20);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopup1`, simulates a click on a specific button within a popup window. The method takes a `String` parameter `buttonName`, which is used to construct the XPath of the button to be clicked.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `buttonName` with a fixed XPath string that targets a `<span>` element within a `<div>` with a specific style attribute.\n2. It uses the `waitForElement` method (not shown in this snippet) to wait for the button to be present on the page, up to 20 seconds.\n3. If the button is displayed, it calls another method `clickOnSpecialElement(button)` to simulate a click on the button.\n4. If the button is not displayed within 5 seconds, it marks the test step as failed with an error message indicating that the button was not present.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed if an exception occurs, providing the exception message in the failure report.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyIRIsCreatedAfterStageChange",
        "code": "public String verifyIRIsCreatedAfterStageChange(int beforeIRICount, String sortLabelName) {\n\t\tString getDateTime = \"\", getIR = \"\", StatusLabel = \"\";\n\t\tint rowsSize = 0;\n\t\tint rowCount = 0, iterate = 0;\n\n\t\ttry {\n\t\t\tSystem.out.println();\n\n\t\t\tString RowCount = \"#xpath=//h1[text()='Integration Responses']//ancestor::div[contains(@class,'firstHeaderRow')]//..//following-sibling::div[contains(@class,'grid')]//span[contains(text(),'items')]\";\n\t\t\tString CreatedDateTime = \"#xpath=//tbody/tr/td[contains(@class,'cellContainer')]//span[contains(@class,'uiOutputDateTime')]\";\n\t\t\tString sortCreatedDateTimeLabel = \"#xpath=//span[text()='Sort']//..//span[text()='\" + sortLabelName + \"']\";\n\t\t\tString sortOption = \"#xpath=//span[text()='Sorted Descending' or text()='Sorted Ascending']\";\n\t\t\tString TableHeader = \"#xpath=//thead/tr/th/div/a/span[contains(@class,'truncate')]\";\n\t\t\tString scrollToelement = \"#xpath=(//tbody/tr/td[contains(@class,'cellContainer')]/span/span/label)[last()]\";\n\t\t\tString currentDateTime = getCurrentDateAndTime1();\n\t\t\twaitForElement(scrollToelement, 5);\n\t\t\tif (isElementDisplayed(scrollToelement, 5)) {\n\t\t\t\tscrollToWebElement(scrollToelement);\n\t\t\t}\n\t\t\twaitForElement(RowCount, 5);\n\t\t\tif (isElementDisplayed(RowCount, 5)) {\n\t\t\t\tString rowcount = getText(RowCount);\n\t\t\t\tString[] count = rowcount.split(\" \");\n\t\t\t\tint rows = Integer.parseInt(count[0]);\n\t\t\t\t// List<WebElement> rows = findWebElements(RowCount);\n\t\t\t\t// if (!(rows.size() == 0)) {\n\t\t\t\t// rowsSize = rows.size();\n\t\t\t\tmanualScreenshot(rows + \" IR is Displayed After Stage has Changed\");\n\t\t\t\tbeforeIRICount = beforeIRICount + 1;\n\t\t\t\t// int intbeforeIRICount=Integer.parseInt(beforeIRICount);\n\t\t\t\tif (rows == beforeIRICount) {\n\t\t\t\t\ttestStepPassed(\"Successfully New Integration Response Record Is Created\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Not Created Integration Response Record\");\n\t\t\t\t}\n\t\t\t\twaitTime(5);\n\t\t\t\tclickOnSpecialElement(sortCreatedDateTimeLabel);\n\t\t\t\twaitForElement(sortOption, 5);\n\t\t\t\tif (isElementDisplayed(sortOption, 5)) {\n\t\t\t\t\tif (getText(sortOption).equals(\"Sorted Ascending\")) {\n\t\t\t\t\t\twaitForElement(sortCreatedDateTimeLabel, 6);\n\t\t\t\t\t\tif (isElementDisplayed(sortCreatedDateTimeLabel, 5)) {\n\t\t\t\t\t\t\tWebElement ele = findWebElement(sortCreatedDateTimeLabel);\n\t\t\t\t\t\t\tActions action = new Actions(driver);\n\t\t\t\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForElement(CreatedDateTime, 5);\n\t\t\t\tif (isElementDisplayed(CreatedDateTime, 5)) {\n\t\t\t\t\tList<WebElement> datetime = findWebElements(CreatedDateTime);\n\t\t\t\t\tfor (int i = 0; i <= datetime.size(); i++) {\n\t\t\t\t\t\tgetDateTime = datetime.get(i).getText();\n\t\t\t\t\t\tif (getDateTime.contains(currentDateTime)) {\n\t\t\t\t\t\t\titerate = i + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(CreatedDateTime + \"is not created\");\n\t\t\t\t}\n\t\t\t\twaitTime(5);\n\t\t\t\tString IRValue = \"#xpath=(//tbody/tr/th//a)[\" + iterate + \"]\";\n\t\t\t\twaitForElement(IRValue, 5);\n\t\t\t\tif (isElementDisplayed(IRValue, 6)) {\n\t\t\t\t\tgetIR = getText(IRValue);\n\t\t\t\t\tmanualScreenshot(getIR + \" is Created\");\n\n\t\t\t\t}\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForElement(TableHeader, 5);\n\t\t\t\tif (isElementDisplayed(TableHeader, 5)) {\n\t\t\t\t\tList<WebElement> Header = findWebElements(TableHeader);\n\t\t\t\t\tfor (int j = 0; j <= Header.size(); j++) {\n\t\t\t\t\t\tStatusLabel = Header.get(j).getText();\n\t\t\t\t\t\tif (StatusLabel.contains(\"Status\")) {\n\t\t\t\t\t\t\trowCount = j + 2;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tString StatusValue = \"#xpath=(//tbody/tr/td[contains(@class,'cellContainer')][\" + rowCount\n\t\t\t\t\t\t\t+ \"]/span/span)[\" + iterate + \"]\";\n\t\t\t\t\twaitForElement(StatusValue, 5);\n\t\t\t\t\tif (isElementDisplayed(StatusValue, 5)) {\n\t\t\t\t\t\tString getStatusValue = getText(StatusValue);\n\t\t\t\t\t\thighLighterMethod(StatusValue);\n\t\t\t\t\t\tmanualScreenshot(getStatusValue + \" Value is displayed in Status Column\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No Integration Responses is created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\t\treturn getIR;\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThe `verifyIRIsCreatedAfterStageChange` method verifies if Integration Responses are created after a stage change. It takes two parameters: `beforeIRICount`, which represents the count of IRs before the stage change, and `sortLabelName`, which is the name of the sort label.\n\nThe method uses various XPath expressions to locate elements on the page, such as the row count, created date time, sort option, table header, and status value. It then performs actions such as scrolling to an element, waiting for elements to be displayed, clicking on a special element, and getting text from an element.\n\nThe method checks if the number of IRs has increased after the stage change and verifies that the new IRs have the correct date time and status values. If any of these conditions fail, it reports a test step failure. The method returns the value of the newly created IR.",
        "input": [
            "int beforeIRICount",
            "String sortLabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "gettextValueFromAdminLogin",
        "code": "public String gettextValueFromAdminLogin(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 9)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(LabelName + \"Value is not populated\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `gettextValueFromAdminLogin`, is used to retrieve the text value of an element on a web page that matches a specified label name. The method uses various Selenium WebDriver methods to locate the element, check if it's displayed, scroll to it, highlight it, and then retrieve its text value. If the element is not found or is not displayed, the method takes a screenshot as evidence. The method also handles exceptions that may occur during execution. The returned value is the retrieved text value of the element.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyIRIsCreatedBeforeStageChange",
        "code": "public int verifyIRIsCreatedBeforeStageChange() {\n\t\tint rows = 0;\n\t\ttry {\n\t\t\tString RowCount = \"#xpath=//h1[text()='Integration Responses']//ancestor::div[contains(@class,'firstHeaderRow')]//..//following-sibling::div[contains(@class,'grid')]//span[contains(text(),'items')]\";\n\t\t\twaitForElement(RowCount, 35);\n\t\t\tif (isElementDisplayed(RowCount, 5)) {\n\t\t\t\tString rowcount = getText(RowCount);\n\t\t\t\tString[] count = rowcount.split(\" \");\n\t\t\t\trows = Integer.parseInt(count[0]);\n\t\t\t\tmanualScreenshot(rows + \" IR is displayed before Stage has Changed\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get Integration Responses count \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\t\treturn rows;\n\t}",
        "description": "This Java method, `verifyIRIsCreatedBeforeStageChange`, is used to verify that a certain number of Integration Responses (IRs) are displayed before a stage change occurs. The method uses WebDriver Wait and Element Displayed APIs to wait for the IR count element to be displayed and then extracts the row count from the element's text. If the IR count is successfully extracted, it takes a manual screenshot with the row count as the filename. If any exceptions occur during this process, the test step fails. The method returns the extracted row count as an integer value.",
        "input": [],
        "output": "int"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyRecordLinkisCreated",
        "code": "public void verifyRecordLinkisCreated(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName + \" Value#xpath=(//span[text()='\" + headerName\n\t\t\t\t\t+ \"']//parent::a//ancestor::table//tbody//tr//th//span//a)\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tString rowcount = getText(path);\n\t\t\t\tmanualScreenshot(rowcount + \" Record is displayed before Stage has Changed\");\n\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyRecordLinkisCreated`, verifies if a specific record link is created and present on the page. The method takes a `headerName` as input, which is used to construct an XPath path to locate the record link.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath path using the provided `headerName` to locate the record link.\n2. It waits for the page to load and then retrieves the text content of the constructed XPath path (i.e., the record link).\n3. It waits for 24 seconds to ensure the element is fully loaded.\n4. It checks if the element is present on the page using the same XPath path.\n5. If the element is present, it scrolls to the element and takes a manual screenshot with a message indicating that the record link is displayed before the stage has changed.\n6. If the element is not present, it marks the test step as failed.\n\nThe method catches any exceptions that may occur during execution and reports them as test step failures.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyCaseIsCreatedBeforeStageChange",
        "code": "public int verifyCaseIsCreatedBeforeStageChange() {\n\t\tint rows = 0;\n\t\ttry {\n\t\t\tString RowCount = \"#xpath=//h1[text()='Cases']//ancestor::div[contains(@class,'firstHeaderRow')]//..//following-sibling::div[contains(@class,'grid')]//span[contains(text(),'items')]\";\n\t\t\twaitForElement(RowCount, 5);\n\t\t\tif (isElementDisplayed(RowCount, 5)) {\n\t\t\t\tString rowcount = getText(RowCount);\n\t\t\t\tString[] count = rowcount.split(\" \");\n\t\t\t\trows = Integer.parseInt(count[0]);\n\t\t\t\tmanualScreenshot(rows + \" Case is record displayed \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get cases count \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCaseIsCreatedBeforeStageChange\" + e.getMessage());\n\t\t}\n\t\treturn rows;\n\t}",
        "description": "This Java method, `verifyCaseIsCreatedBeforeStageChange`, verifies if a specific number of cases are displayed on the page before a stage change. It uses an XPath expression to locate the element containing the case count, waits for it to be displayed, and then extracts the count from the text. If the count is successfully extracted, it takes a manual screenshot with the case count as the filename. If any exceptions occur during this process, it marks the test step as failed. The method returns the extracted case count.",
        "input": [],
        "output": "int"
    },
    {
        "class_name": "Customers",
        "function_name": "toClickDetailsTabInMaster",
        "code": "public void toClickDetailsTabInMaster() {\n\t\twaitTime(5);\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//a[text()='Details']\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Details Tab is not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickonDealerName\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toClickDetailsTabInMaster()`, performs the following actions:\n\n1. Waits for 5 seconds using the `waitTime(5)` method.\n2. Attempts to locate an element with the specified XPath: `//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//a[text()='Details']`.\n3. Waits for the located element to be displayed within 5 seconds using the `waitForElement(Element, 5)` method.\n4. Checks if the element is displayed after 6 seconds using the `isElementDisplayed(Element, 6)` method.\n5. If the element is displayed, clicks on it using the `clickOnSpecialElement(Element)` method.\n6. If the element is not displayed or an error occurs during the process, the test step fails with a message indicating that the \"Details Tab\" was not present.\n\nThe method also includes a catch block to handle any exceptions that may occur during execution, logging a failure message if an exception is caught.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyIRIsCreatedBeforeStageChangeDOM",
        "code": "public String verifyIRIsCreatedBeforeStageChangeDOM() {\n\t\tString rowSize = \"\";\n\t\ttry {\n\t\t\tString RowCount = \"#xpath=//span[@class='countSortedByFilteredBy']\";\n\t\t\twaitForElement(RowCount, 5);\n\t\t\tif (isElementDisplayed(RowCount, 5)) {\n\t\t\t\trowSize = getText(RowCount);\n\t\t\t\t;\n\t\t\t\trowSize = rowSize.replace(\" items \u00c3\u00af\u00c2\u00bf\u00c2\u00bd Sorted by Created Time \u00c3\u00af\u00c2\u00bf\u00c2\u00bd\", \"\");\n\t\t\t\tmanualScreenshot(rowSize + \" IR is displayed before Stage has Change\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\t\treturn rowSize;\n\t}",
        "description": "This Java method, `verifyIRIsCreatedBeforeStageChangeDOM`, verifies that a certain number of IRs (Information Records) are displayed on the page before a stage change occurs. The method:\n\n1. Waits for a specific element (`//span[@class='countSortedByFilteredBy']`) to be displayed.\n2. If the element is displayed, it retrieves the text content of the element and stores it in the `rowSize` variable.\n3. Removes unwanted text from the `rowSize` variable.\n4. Takes a manual screenshot with a descriptive name indicating that the IRs are displayed before the stage has changed.\n5. Returns the `rowSize` variable.\n\nIf any exceptions occur during the execution of this method, it catches them and reports the failure using the `testStepFailed` method.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickonDealerName",
        "code": "public void clickonDealerName(String DealerName) {\n\t\twaitTime(5);\n\t\ttry {\n\t\t\twaitTime(8);\n\t\t\tString Element = \"#xpath=//th//span//a[text()='\" + DealerName + \"']\";\n\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\tmanualScreenshot(\"click on \" + DealerName);\n\t\t\t\tclickOn(Element);\n\t\t\t\twaitTime(6);\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickonDealerName\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonDealerName`, simulates a click on an element with the given dealer name. It waits for 5 seconds initially, then tries to wait for 8 seconds and find an element using XPath that matches the provided dealer name. If the element is displayed within 6 seconds, it takes a manual screenshot, clicks on the element, and waits for another 6 seconds. If any exception occurs during this process, it fails the test step with an error message.",
        "input": [
            "String DealerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getdropdownvalue",
        "code": "public String getdropdownvalue(String labelname) {\n\t\tString val = null;\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[text()='\" + labelname + \"']//following-sibling::div//input\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tmanualScreenshot(\" \");\n\t\t\t\tString Listvalue = labelname + \" #xpath=(//lightning-base-combobox-item//span[text()])[6]\";\n\t\t\t\tif (isElementPresent(Listvalue)) {\n\t\t\t\t\tString value = getAttributeValue(\n\t\t\t\t\t\t\tlabelname + \" #xpath=(//lightning-base-combobox-item//span[text()])[6]\", \"title\");\n\t\t\t\t\tval = getText(value);\n\t\t\t\t\tmanualScreenshot(\"Value is displayed \" + val);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(e.getMessage());\n\t\t}\n\t\treturn val;\n\t}",
        "description": "This Java method, `getdropdownvalue`, takes a string parameter `labelname` and returns the value associated with that label in a dropdown list. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the label element.\n2. It waits for the element to be displayed and then scrolls to it if necessary.\n3. It checks if the dropdown list is present and if so, extracts the title attribute from the sixth item in the list (assuming that's where the desired value is located).\n4. If an exception occurs during this process, it fails the test step with a message describing the issue.\n5. Finally, it returns the extracted value.\n\nNote: The method uses some custom utility methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `manualScreenshot` that are not shown in this snippet.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "verifycustomerRecords",
        "code": "public void verifycustomerRecords(String ele) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + ele\n\t\t\t\t\t+ \"']/ancestor::div[@class='slds-form-element slds-form-element_readonly slds-grow slds-hint-parent override--slds-form-element']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString type_Record = getText(Element);\n\t\t\t\tmanualScreenshot(type_Record + \"is displayed in record Type\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Element + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyRecordType. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n**verifycustomerRecords(String ele)**: Verifies that a specific customer record is displayed on the page, based on the provided `ele` parameter (presumably an element name or identifier). The method uses various Selenium WebDriver methods to locate the element using XPath, wait for it to be displayed, and then verify its presence by scrolling to it and checking if it's visible. If the element is not found or not displayed within a certain time limit, the test step fails.",
        "input": [
            "String ele"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "changeRecordType",
        "code": "public void changeRecordType(String recordType) {\n\t\ttry {\n\t\t\tString btn_recordType = recordType + \"#xpath=//span[contains(text(),'\" + recordType + \"')]\";\n\t\t\twaitForElement(btn_recordType, 10);\n\t\t\tif (isElementDisplayed(btn_recordType, 5)) {\n\t\t\t\tclickOn(btn_recordType);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(recordType + \" Record Type is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in changeRecordType. Exception\" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate 12/11/2019\n\t * @Description - This method is used to click button in popup\n\t */",
        "description": "This Java method, `changeRecordType`, changes the record type by clicking on a corresponding button in a popup. \n\nThe method takes a `recordType` as input and attempts to find an element with that record type in the UI using XPath. It then waits for this element to be displayed and clicks on it if it is visible within a certain time limit (10 seconds). If the element is not found or is not displayed within the given time, the method fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String recordType"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnButtonInPopup",
        "code": "public void clickOnButtonInPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button\";\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on \" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopup`, simulates a click on a button within a popup window. It takes a `buttonName` parameter and uses it to construct an XPath expression that uniquely identifies the button. The method then:\n\n1. Waits for the element with the constructed XPath expression to be displayed.\n2. Verifies if the element is actually displayed (with a timeout of 5 seconds).\n3. If the element is displayed, takes a manual screenshot and simulates a click on the element using `clickOnSpecialElement`.\n4. If the element is not displayed, marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//following-sibling::div//span[@title='\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, selects a specific value from a drop-down list in an IMPSS popup. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression for the dropdown element based on its name.\n2. It waits for the dropdown element to be displayed (up to 30 seconds) using the `waitForElement` method.\n3. If the dropdown is displayed, it scrolls to the element and clicks on it using the `scrollToElement` and `clickOnSpecialElement` methods, respectively.\n4. The method then constructs an XPath expression for the specific value in the dropdown list based on its name and the desired value.\n5. It waits for the value element to be displayed (up to 10 seconds) using the `waitForElement` method.\n6. If the value is displayed, it scrolls to the element and clicks on it using the same methods as before.\n7. If the selection is successful, the method logs a test step passed message with the selected value and dropdown name.\n8. If any of the above steps fail (e.g., the dropdown or value is not present), the method logs a test step failed message with an error message.\n\nThe method also includes exception handling to catch any errors that may occur during execution, logging a test step failed message with the error message if an exception occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromDropdownInNSDL",
        "code": "public void selectValueFromDropdownInNSDL(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//input/parent::div/following-sibling::div//span[text()='\" + value + \"')]\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInNSDL`, selects a value from a dropdown list in an NSDL (National Stock Exchange of India Limited) application. \n\nThe method takes two parameters: the name of the dropdown and the desired value to be selected. It first waits for the dropdown element to be displayed, then scrolls to it if necessary, clicks on it, and then selects the specified value from the dropdown list. If the selection is successful, it logs a test step as passed; otherwise, it logs an error message.\n\nIf any exception occurs during the execution of this method, it catches the exception, logs an error message with the exception message, and fails the test step.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInFieldIMPSBankNumber",
        "code": "public void enterValueInFieldIMPSBankNumber(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tString ele = value\n\t\t\t\t\t\t+ \"#xpath=//span[@class='slds-listbox__option-meta slds-listbox__option-meta_entity'][last()]\";\n\t\t\t\tif (isElementDisplayed(ele, 3)) {\n\t\t\t\t\tdoubleClick(ele);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldIMPSBankNumber`, enters a given value into a specific field on an IMPS Bank application. It uses various methods to:\n\n1. Find the field element using XPath\n2. Wait for the field to be displayed (up to 25 seconds)\n3. Scroll to the field if it's not already visible\n4. Highlight the field to indicate interaction\n5. Enter the provided value into the field\n6. If the entered value is a dropdown option, double-click on it\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test step failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInFieldInIMPSPopup",
        "code": "public void enterValueInFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a specified `value` into a field with the given `labelName` within an IMPSPopup. Here's a breakdown of what it does:\n\n1. It constructs an XPath expression to locate the field based on the provided `labelName`.\n2. It waits for the field to be present using the `waitForElement` method.\n3. If the field is present, it scrolls to that field using the `scrollbycordinates` and `scrollToWebElement` methods.\n4. It then enters the specified `value` into the field using the `typeIn` method.\n5. If any of these steps fail (e.g., the field is not present), it reports a test step failure with an error message.\n\nThe method catches any exceptions that may occur during execution and reports a test step failure if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getTextInBankingIMPSValidation",
        "code": "public String getTextInBankingIMPSValidation(String LabelName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString Element = LabelName\n\t\t\t\t\t+ \"#xpath=//span[text()='Banking-IMPS Validation']/ancestor::div/following-sibling::div//label[text()='\"\n\t\t\t\t\t+ LabelName + \"']//..//textarea\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getAttributeValue(Element, \"value\");\n\t\t\t\tmanualScreenshot(Value + \" is displayed in \" + LabelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextInMarketPlaceDO\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getTextInBankingIMPSValidation`, is used to retrieve the text value from a specific element in a Banking-IMPS Validation page. \n\nIt takes a `String` parameter `LabelName`, which seems to be used as a reference for the element being searched. The method uses various WebDriver methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethod`) to interact with the element, including scrolling to it, highlighting it, and getting its attribute value (`value`). \n\nIf the element is displayed within a certain time limit (5 seconds), the method returns the text value. If not, it fails the test step. In case of any exception during execution, it also fails the test step with an error message.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "checkLabelIspresent",
        "code": "public void checkLabelIspresent(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tmanualScreenshot(labelName + \"is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `checkLabelIspresent`, checks if a label with the specified name is present on the UI. It uses XPath to locate the element and then performs various actions:\n\n1. Waits for the element to be displayed (up to 10 seconds).\n2. Checks if the element is actually displayed (after waiting up to 3 seconds).\n3. If the element is displayed, it scrolls to that element.\n4. Takes a manual screenshot with the label name as the file name.\n\nIf the label is not present or any of these actions fail, the method will report a test step failure and print an error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSaveButtonInCKYCPopup",
        "code": "public void clickOnSaveButtonInCKYCPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button[contains(@class,'publisher')]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInCKYCPopup`, simulates a click on a specific save button within a CKY C popup. The method takes one argument, `buttonName`, which is used to construct the XPath of the desired button.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `buttonName` and the expected HTML structure of the button.\n2. It waits for the element matching this XPath to be present within a certain timeout (10 seconds).\n3. If the element is displayed, it highlights the button using a separate method (`highLighterMethod`) and then simulates a click on the button using another method (`clickOn`).\n4. If the element is not displayed after the specified timeout (5 seconds), it fails the test step with an error message.\n5. If any exception occurs during this process, it catches the exception and fails the test step with an error message.\n\nIn summary, this method attempts to click on a specific save button within a CKY C popup, providing a flexible way to interact with different buttons based on their names.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t//\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::input\";\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../following-sibling::div//input\";\n\n\t\t\twaitForElement(field, 25);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, enters a given value into a form field with a specific label name. It uses Selenium WebDriver to interact with the web page.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided label name to locate the corresponding input field.\n2. It waits for the element to be present and visible using `waitForElement`.\n3. If the element is not scrolled into view, it uses `scrollbycordinates` to bring it into view.\n4. If a value is provided, it checks if the element is displayed using `isElementDisplayed`. If it is, it enters the value into the field using `typeIn`. If not, it fails the test step with an error message.\n5. If any exception occurs during the process, it catches it and reports a failure in entering the value for the specified label name.\n\nThe method takes two parameters: `labelName` (the name of the form field) and `value` (the value to be entered into the field).",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInAddressField",
        "code": "public void enterValueInAddressField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../..//textarea[@class=' textarea']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAddressField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInAddressField`, enters a given value into a text area field on the UI that corresponds to a specific label name. It first constructs an XPath expression based on the provided label name, then waits for the element to be displayed and checks if it is visible. If the element is present, it types in the provided value; otherwise, it marks the test step as failed. If any exception occurs during this process, it also marks the test step as failed and logs the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "entervalueInIMPSTextArea",
        "code": "public void entervalueInIMPSTextArea(String Label, String Value) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[text()='\" + Label + \"']//../..//textarea[@class='slds-textarea']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\ttypeIn(Label, Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in entervalueInIMPSTextArea\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to enter a value into a text area field on an Impala Salesforce page. The method takes two string parameters: `Label` and `Value`. \n\nIt first constructs an XPath expression using the provided label, then uses this expression to locate the corresponding textarea element on the page. It waits for the element to be displayed before attempting to enter the value into it. If the element is not displayed within a certain time limit (10 seconds), the method fails the test step with a message indicating that the label is not displayed.\n\nIf the element is displayed, the method uses another helper method `typeIn` to enter the provided value into the textarea. If any exception occurs during this process, it catches and reports the error as a failed test step.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "entervalueInBankIMPSTextArea",
        "code": "public void entervalueInBankIMPSTextArea(String Label, String Value) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[text()='\" + Label + \"']//../..//textarea[@class='slds-textarea']\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\ttypeIn(Label, Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in entervalueInIMPSTextArea\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to enter a value into a text area field in an IMP (Insurance Management Platform Solution) application. \n\nThe method takes two parameters: `Label` and `Value`. It uses XPath to locate the textarea field with the given label, waits for the element to be displayed, scrolls to it if necessary, and then enters the provided value.\n\nIf the element is not displayed or there's an issue during the process, the method will fail the test step.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\t// waitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value\n\t\t\t\t\t\t+ \" value#xpath=//lightning-base-combobox-item[contains(@class,'listbox')]//span[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 12/11/2019\n\t * @param headerName\n\t *                       - provide the name of the header\n\t * @Description - This method is used to click on the link of the header card\n\t * \n\t */",
        "description": "This Java method, `selectValueFromDropdown`, selects a value from a dropdown menu. It takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected). \n\nHere's a step-by-step breakdown:\n\n1. The method first tries to find the dropdown element using an XPath expression.\n2. If the dropdown is found, it then attempts to select the specified `value` from the dropdown list.\n3. It does this by clicking on the dropdown, waiting for the list of options to appear, and then clicking on the selected value.\n4. The method also includes some error handling:\n\t* If the dropdown is not found, it reports a failure.\n\t* If the specified `value` is not present in the dropdown list, it reports a failure.\n\t* If any other exception occurs during the execution of this method, it will be caught and reported as a failure.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnCardHeader",
        "code": "public void clickOnCardHeader(String headerName) {\n\t\ttry {\n\t\t\tString link = headerName + \"#xpath=//span[@title='\" + headerName + \"']//parent::a\";\n\t\t\tscrollToElement(link);\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(headerName + \" header link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCardHeader \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 21/11/2019\n\t * @param arguments\n\t *                      to give the values to compare and selecting the\n\t *                      particular button from the grid\n\t * @description Selecting the given button from the grid by comparing the given\n\t *              values in the argument\n\t */",
        "description": "This Java method, `clickOnCardHeader`, is used to click on a specific card header link with the given name. It takes a `String` parameter `headerName` which represents the name of the card header.\n\nHere's what the method does:\n\n1. It constructs a string `link` by combining the `headerName` with an XPath expression that targets the element with the matching title.\n2. It scrolls to the element using the `scrollToElement` method.\n3. It waits for the element to be displayed within a certain time limit (10 seconds).\n4. If the element is displayed, it clicks on the special element using the `clickOnSpecialElement` method.\n5. If the element is not displayed after waiting, it fails the test step with an error message indicating that the header link is not present.\n\nThe method also catches any exceptions that may occur during its execution and reports them as a failed test step.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickIntegrationResponse",
        "code": "public void clickIntegrationResponse(String... arguments) {\n\t\tint rowindex = 0;\n\t\tString tableRowInformation = null;\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString tableRows = \"Table rows#xpath=//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody//tr\";\n\t\t\tList<WebElement> tableRowsList = findWebElements(tableRows);\n\t\t\tif (!tableRowsList.isEmpty()) {\n\t\t\t\tint tableRowsize = tableRowsList.size();\n\t\t\t\tList<String> tableRowData = new ArrayList<String>();\n\t\t\t\tfor (rowindex = 1; rowindex <= tableRowsize; rowindex++) {\n\t\t\t\t\tList<WebElement> tablecolumn = driver.findElements(By.xpath(\n\t\t\t\t\t\t\t\"//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody//tr[\"\n\t\t\t\t\t\t\t\t\t+ rowindex + \"]//td\"));\n\t\t\t\t\tint tablecolumnsize = tablecolumn.size();\n\t\t\t\t\tfor (WebElement tablecolumns : tablecolumn) {\n\t\t\t\t\t\tfor (int columnindex = 1; columnindex <= tablecolumnsize; columnindex++) {\n\t\t\t\t\t\t\ttableRowInformation = tablecolumns.findElement(By.xpath(\n\t\t\t\t\t\t\t\t\t\"//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody//tr[1]//td/span/span\"))\n\t\t\t\t\t\t\t\t\t.getText();\n\t\t\t\t\t\t\ttableRowData.add(tableRowInformation);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tboolean clickDetailsButton = true;\n\t\t\t\t\tfor (int conditionIterator = 0; conditionIterator < arguments.length; conditionIterator++) {\n\t\t\t\t\t\tif (!tableRowData.contains(arguments[conditionIterator])) {\n\t\t\t\t\t\t\tclickDetailsButton = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (clickDetailsButton) {\n\t\t\t\t\t\tString integrationResponseName = \"Details#xpath=//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody//tr[\"\n\t\t\t\t\t\t\t\t+ rowindex + \"]//a[contains(@title,'IR')]\";\n\t\t\t\t\t\tclickOn(integrationResponseName);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No row may present in the table\");\n\t\t\t}\n\t\t\tif (!flag) {\n\t\t\t\ttestStepFailed(\"Test Data not found in the target table\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(e.getMessage());\n\t\t\twriteToLogFile(\"INFO\", \"exception thrown: \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 21/11/2019\n\t * @param customerName\n\t *                         - provide the name of the link\n\t * @Description - This method is used to click on the link\n\t * \n\t */",
        "description": "This Java method, `clickIntegrationResponse`, appears to be part of an automation test script that interacts with a web page. Here's a brief description of what it does:\n\nThe method takes a variable number of string arguments (`String... arguments`) and uses them to search for specific rows in a table on the webpage. It then checks if the row contains all the provided arguments, and if so, clicks on the \"Details\" button associated with that row.\n\nHere's a step-by-step breakdown:\n\n1. It initializes some variables: `rowindex`, `tableRowInformation`, and `flag`.\n2. It searches for the table rows using an XPath expression and stores them in a list.\n3. If there are any table rows found, it loops through each row and extracts the column data.\n4. For each row, it checks if all the provided arguments are present in the column data. If they are, it sets `clickDetailsButton` to `true`.\n5. If `clickDetailsButton` is still `true`, it clicks on the \"Details\" button associated with that row using another XPath expression.\n6. If no rows are found or if none of the provided arguments match any row, it fails the test step.\n\nThe method also catches and handles exceptions, logging them to a file if necessary.\n\nOverall, this method seems to be designed to automate the process of clicking on specific links in a table based on certain conditions being met.",
        "input": [
            "String arguments"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnCustomerLink",
        "code": "public void clickOnCustomerLink(String customerName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\trefreshPage();\n\t\t\trefreshPage();\n\t\t\tString link = customerName + \"#xpath=//div[contains(@class,'active')]//a[@title='\"+customerName+\"'] | (//force-lookup//span[text()='\"+customerName+\"'])[last()] | //span//slot[text()='\"+customerName+\"']\";\n\t\t\t//String link = customerName + \"#xpath=(//th[contains(@class,'cellContainer')]//span//a[@title='\"+customerName+\"'])[1]\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tscrollToElement(link);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerLink`, attempts to click on a customer link on a webpage. The link's XPath is dynamically generated based on the provided `customerName`. Here's what it does:\n\n1. Waits for the page to load and refreshes the page twice.\n2. Generates an XPath string for the customer link using the given `customerName`.\n3. Waits up to 30 seconds for the element with the generated XPath to appear.\n4. If the element is displayed within 5 seconds, it:\n\t* Scrolls to the element\n\t* Clicks on the special element (likely a JavaScript-generated element)\n\t* Waits for 2 seconds and then refreshes the page again\n\t* Waits for an additional 3 seconds before finishing the method\n5. If the element is not displayed within the allotted time, it fails the test step with an error message.\n6. If any exceptions occur during execution, it also fails the test step with an error message.\n\nThis method seems to be part of a larger automated testing framework for a web application.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectOperatorValueFromDropdown",
        "code": "public void selectOperatorValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//span[text()='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOperatorValueFromDropdown`, selects a value from a dropdown menu by its name and the desired value. It uses various methods to wait for the dropdown to load, click on the dropdown, and then click on the desired value in the list. If the value is not present in the dropdown or if there's an error during the process, it reports a failure.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnOMCButtonInEditPopup",
        "code": "public void clickOnOMCButtonInEditPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitTime(1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOMCButtonInEditPopup`, simulates a mouse click on an edit popup button with the specified name. It uses Selenium WebDriver's built-in methods to:\n\n1. Construct a unique XPath locator for the button based on its text.\n2. Wait up to 10 seconds for the element to be displayed.\n3. If the element is displayed, it waits for 2 seconds and then simulates a click on the button.\n4. If the element is not displayed within the specified time, it marks the test step as failed.\n\nThe method also includes error handling using a try-catch block. If an exception occurs during the execution of the method (e.g., if the button is not found or cannot be clicked), it will mark the test step as failed and provide an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getFieldValue",
        "code": "public String getFieldValue(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \" #xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//../following-sibling::div/span/span\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tvalue = getText(field).trim();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getFieldValue \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getFieldValue`, retrieves the text value of a field on a web page based on a given label name. \n\nIt takes a `labelName` as input and uses it to construct an XPath expression that identifies the desired field. The method then waits for the element to be displayed and checks if it is present within a certain time limit (5 seconds). If the field is found, it extracts the text value and returns it after trimming any whitespace. \n\nIf the field is not found or there's an exception during the process, the method fails the test step with an appropriate error message.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnIntegrationResponse",
        "code": "public void clickOnIntegrationResponse(String Value) {\n\t\ttry {\n\t\t\tString table = \"//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody\";\n\t\t\twaitForElement(table, 10);\n\t\t\tif (!table.isEmpty()) {\n\t\t\t\tString tableColumns = \"Table Columns#xpath=//div[@class='forceRelatedListDesktop']//table[contains(@class,'-table')]//tbody//tr//td\";\n\t\t\t\tList<WebElement> tableColumnList = findWebElements(tableColumns);\n\t\t\t\tfor (int iterate = 0; iterate < tableColumnList.size(); iterate++) {\n\t\t\t\t\tString tableColumnText = tableColumnList.get(iterate).getText();\n\t\t\t\t\tif (tableColumnText.equals(Value)) {\n\t\t\t\t\t\ttableColumnList.get(iterate - 1).click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Integration Response table is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepPassed(\"Failed to click the link \" + e.getClass());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnIntegrationResponse`, takes a `String` parameter `Value`. It attempts to find and interact with a table element on the web page. Here's what it does:\n\n1. It waits for an element with the specified XPath (`table`) to be present on the page (up to 10 seconds).\n2. If the element is found, it extracts the text from each table column using another XPath expression (`tableColumns`).\n3. It loops through the table columns and checks if the text matches the provided `Value`.\n4. If a match is found, it clicks on the previous table column (since indexing starts at 0) and exits the loop.\n5. If no match is found or the table element is not present, it reports a failure using the `testStepFailed` method.\n\nNote that this method also catches any exceptions that may occur during execution and reports them using the `testStepPassed` method with a descriptive message.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromPopupDropdown",
        "code": "public void selectValueFromPopupDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName\n\t\t\t\t\t+ \"#xpath=//span[text()='De Dupe Status'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[@title='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromPopupDropdown`, selects a value from a popup dropdown menu. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what it does:\n\n1. It constructs an XPath expression for the dropdown element based on the provided dropdown name.\n2. It waits for the dropdown element to be displayed, and if it is, it clicks on the dropdown.\n3. It then constructs another XPath expression for the list of values in the dropdown, using the provided value as a part of the expression.\n4. It waits for the list of values to be displayed, and if it is, it clicks on the selected value.\n5. If any of these steps fail (e.g., the dropdown or value is not present), it records a failure test step with an appropriate message.\n\nThe method also includes some error handling using a `try-catch` block, where it catches any exceptions that may occur during execution and records a failure test step with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "COTeamenterDob",
        "code": "public void COTeamenterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `COTeamenterDob`, enters a value into a specific field on a web page. The method takes two parameters: `labelName` and `value`. \n\n- It first constructs an XPath string to identify the field based on the provided label name.\n- It then waits for the field to be displayed, using a timeout of 10 seconds.\n- If the field is displayed, it scrolls to the field and enters the given value into it.\n- If the field is not displayed within a timeout of 5 seconds, it marks the test step as failed with an error message indicating that the field was not present.\n\nIf any exception occurs during these operations (e.g., if the field is not found or cannot be scrolled to), the method catches the exception and marks the test step as failed with an error message describing the failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "modifyDate",
        "code": "public void modifyDate(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method modifies the date associated with a given label name. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the input field corresponding to the provided label name. It then waits for this element to be displayed, scrolls to it if necessary, and enters the specified value into the field.\n\nIf the element is not present or any other exception occurs during execution, the method fails the test step with a descriptive message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectvaluefromglobaldropdown",
        "code": "public void selectvaluefromglobaldropdown(String searchvalue) {\n\t\ttry {\n\t\t\tString dropdown = searchvalue + \"#xpath=//div[@class='slds-form-element__control']\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tclearEditBox(dropdown);\n\t\t\t\ttypeIn(dropdown, searchvalue);\n\t\t\t\tString dropdownlist = \"#xpath=//span[text()='\" + searchvalue + \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownlist, 4)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownlist);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"DropdownList is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchvalufromglobaldropdown\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromglobaldropdown`, is used to select a value from a global dropdown list. It takes a string parameter `searchvalue` as input and attempts to find the dropdown list containing that value.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs a string `dropdown` by concatenating the `searchvalue` with an XPath expression that targets the dropdown control.\n2. It waits for the dropdown element to be displayed using the `waitForElement` method, and sets a timeout of 10 seconds.\n3. If the dropdown is displayed, it clears any existing text in the edit box using the `clearEditBox` method.\n4. It types the `searchvalue` into the dropdown edit box using the `typeIn` method.\n5. It constructs another string `dropdownlist` that targets a specific option in the dropdown list with the same value as the `searchvalue`.\n6. If this option is displayed, it clicks on it using the `clickOnSpecialElement` method.\n7. If the dropdown list or its options are not present, it fails the test step and logs an error message.\n\nThe method also catches any exceptions that may occur during execution and reports a failure if one occurs.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromStatusDropdown",
        "code": "public void selectValueFromStatusDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a)[2]\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[@title='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromStatusDropdown`, is used to select a specific value from a dropdown menu with the given name. It takes two parameters: `dropdownName` and `value`. \n\nThe method uses Selenium WebDriver's built-in methods like `waitForElement`, `isElementDisplayed`, and `clickOnSpecialElement` to interact with the webpage. \n\nHere's what it does:\n\n1. It constructs an XPath expression for the dropdown menu based on its name.\n2. It waits up to 10 seconds for the dropdown menu to be displayed, then checks if it is actually displayed.\n3. If the dropdown menu is present and displayed, it clicks on the dropdown menu.\n4. It then constructs an XPath expression for the specific value in the dropdown list.\n5. It waits up to 10 seconds for the value to be displayed, then checks if it is actually displayed.\n6. If the value is present and displayed, it clicks on the value.\n7. If any of these steps fail (e.g., the dropdown menu or value is not present), it reports a failure test step with an appropriate message.\n\nThis method can be used to automate interactions with dropdown menus in web applications.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInFieldInBlindData",
        "code": "public void enterValueInFieldInBlindData(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given value into a form field with the specified label name. It uses an XPath expression to locate the input field, waits for it to be displayed, and then attempts to type in the provided value. If the field is not present or there's an error during the process, it logs a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterDateInField",
        "code": "public void enterDateInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDateInField`, enters a given value into a date field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression to locate the date field based on its label name. It then waits for the element to be displayed and verifies that it is present before attempting to enter the provided value. If the element is not found, the test step fails.\n\nIf any exceptions occur during the execution of this method (e.g., if the element cannot be interacted with), the test step will fail and an error message will be logged.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSaveButtonInPopup",
        "code": "public void clickOnSaveButtonInPopup() {\n\t\ttry {\n\t\t\tString button = \"#xpath=//span[text()='Save & New']//..//following-sibling::button/span\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInPopup`, attempts to click on a save button located in a popup window. Here's what it does:\n\n1. It defines a XPath expression to locate the save button: `#xpath=//span[text()='Save & New']//..//following-sibling::button/span`.\n2. It waits for the element to be present using `waitForElement` with a timeout of 10 seconds.\n3. If the element is displayed within 5 seconds, it clicks on the button using `clickOn`.\n4. If the element is not displayed or takes longer than 5 seconds to appear, it fails the test step with an error message \"button is not present\".\n5. If any exception occurs during the process (e.g., network issue or timeout), it catches the exception and fails the test step with a message \"Failed in clickOnConfirmButton\" followed by the exception's message.\n\nIn summary, this method attempts to interact with a save button in a popup window, waiting for its presence and clicking on it if it's visible. If anything goes wrong, it reports an error and fails the test step.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button[contains(@class,'publisher')]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton`, simulates a click on a save button with the given name. It uses Selenium WebDriver to interact with the browser.\n\nHere's what it does:\n\n1. It constructs an XPath expression for the save button based on its name and some specific HTML structure.\n2. It waits up to 10 seconds for the element to be present in the browser using `waitForElement`.\n3. If the element is displayed within 5 seconds, it highlights the button (using `highLighterMethod`) and then clicks on it using `clickOn`. \n4. If the element is not displayed or takes longer than expected to appear, it fails the test step with a message \"Confirm button is not present\".\n5. If any exception occurs during these operations, it fails the test step with a message \"Failed in clickOnConfirmButton\" along with the exception message.\n\nIn summary, this method attempts to automate clicking on a specific save button in a web page, and reports failure if it can't find or interact with the button correctly.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getOppertuinityinFMS",
        "code": "public String getOppertuinityinFMS(String reterivelabel) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString oppertunity = \"Pending cases #xpath=//tbody//tr//th/span/span[1]\";\n\t\t\tString filebarcode = \"Pending cases #xpath=//tbody//tr//td[3]//a\";\n\t\t\tswitch (reterivelabel) {\n\t\t\tcase \"Opportunities\":\n\t\t\t\tList<WebElement> opp = findWebElements(oppertunity);\n\t\t\t\tif (opp.size() == 0) {\n\t\t\t\t\ttestStepInfo(\"Oppertuinity is not yet created in FMS\");\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"List of Pending cases are: \");\n\t\t\t\tfor (int iterate = 0; iterate < opp.size(); iterate++) {\n\t\t\t\t\tString tableColumnText = opp.get(iterate).getText().trim();\n\t\t\t\t\ttestStepPassed(tableColumnText);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"File Barcode(FMS Name)\":\n\t\t\t\tList<WebElement> barcode = findWebElements(filebarcode);\n\t\t\t\ttestStepPassed(\"List of Pending cases are: \");\n\t\t\t\tfor (int iterate = 0; iterate < barcode.size(); iterate++) {\n\t\t\t\t\tString tableColumnText = barcode.get(iterate).getText().trim();\n\t\t\t\t\ttestStepPassed(tableColumnText);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\ttestStepFailed(\"invalid input is given\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getFieldValue \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getOppertuinityinFMS`, appears to be a part of an automated testing framework. It takes a string input parameter `reterivelabel` and uses it to determine which type of data to retrieve from a web page.\n\nThe method attempts to find specific elements on the page using XPath expressions (`oppertunity` and `filebarcode`) and then performs different actions based on the value of `reterivelabel`. \n\nIf `reterivelabel` is \"Opportunities\", it retrieves a list of pending cases, checks if the list is empty, and if not, prints out each case. If `reterivelabel` is \"File Barcode(FMS Name)\", it does similar processing for file barcodes.\n\nIn all cases, it also logs test steps as passed or failed depending on the outcome. \n\nIf an exception occurs during execution, it logs a failure message with the error message. The method returns no value (i.e., `null`).",
        "input": [
            "String reterivelabel"
        ],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnOnlySave",
        "code": "public void clickOnOnlySave(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button\";\n\t\t\twaitForElement(button, 20);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOnlySave`, simulates a click on a specific button with the given name. It uses Selenium WebDriver to interact with the browser.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `buttonName` and a specific CSS style (`block`) in the HTML element.\n2. It waits for the element to be displayed within 20 seconds using the `waitForElement` method.\n3. If the element is displayed, it takes a manual screenshot with the name \"Click on\" followed by the button name.\n4. Then, it clicks on the special element (presumably a button) using the `clickOnSpecialElement` method.\n5. If the element is not displayed within 5 seconds, it marks the test step as failed.\n\nIf any exception occurs during this process, it catches and logs the error message with \"Failed in clickOnConfirmButton\" prefix, marking the test step as failed.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "msgInSubmit",
        "code": "public String msgInSubmit() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\tif (isElementDisplayed(msg, 30)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\tmanualScreenshot(message);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `msgInSubmit`, attempts to retrieve a specific error message from a web page element. It uses an XPath expression to locate the element and then retrieves its text content. The method takes up to 30 seconds to wait for the element to be displayed before attempting to retrieve the message. If the element is not displayed within this time limit, it will take a manual screenshot with a default error message. In case of any exceptions during the process, the method will record a test step failure with the exception's message. The method returns the retrieved message as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "msgInSubmittoCaptureError",
        "code": "public String msgInSubmittoCaptureError() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\twaitForElement(msg, 10);\n\t\t\tif (isElementDisplayed(msg, 5)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\tmanualScreenshot(message);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `msgInSubmittoCaptureError`, is designed to capture an error message that appears when a user submits data. The method attempts to locate the error message using XPath, waits for it to be displayed, and then retrieves its text content. If the error message is not found within a certain time limit, the test step fails with a specific error message. If an exception occurs during the process, the test step also fails with a descriptive error message. The method returns the captured error message as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "msgInSubmittoCaptureErrorwithFail",
        "code": "public String msgInSubmittoCaptureErrorwithFail() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\twaitForElement(msg, 10);\n\t\t\tif (isElementDisplayed(msg, 5)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\ttestStepFailed(\"While saving we got [ \" + message + \" ]\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, named `msgInSubmittoCaptureErrorwithFail`, is used to capture an error message that appears when submitting a form. It uses WebDriverWait and ElementDisplay methods to check if the expected error message is displayed within a certain timeframe (10 seconds). If the message is found, it retrieves the text of the element and records a test step failure with the error message. If the message is not found, it takes a manual screenshot as evidence. The method also handles exceptions that may occur during execution and records another test step failure if an exception occurs. Finally, it returns the captured error message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Customers",
        "function_name": "CheckValueIsfalse",
        "code": "public void CheckValueIsfalse(String Labelname, String label) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//input[@name='\" + Labelname + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tscrollToWebElement(Element);\n\t\t\tif (!(isCheckBoxSelected(Element))) {\n\t\t\t\tmanualScreenshot(label + \"Flag is False\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(label + \"Flag is True\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkvalueIsTrue\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `CheckValueIsfalse`, checks if a checkbox with the given name (`Labelname`) is not selected. It uses Selenium WebDriver to:\n\n1. Wait for the element to be present on the page (using `waitForElement`).\n2. Scroll to the element (using `scrollToWebElement`).\n3. Check if the checkbox is not selected using `isCheckBoxSelected`.\n4. If the checkbox is not selected, take a manual screenshot with a label indicating that the flag is false.\n5. If the checkbox is selected, take a manual screenshot with a label indicating that the flag is true.\n\nIf any exception occurs during this process, it will be caught and the test step will be marked as failed using `testStepFailed`.",
        "input": [
            "String Labelname",
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickonFMSLink",
        "code": "public void clickonFMSLink(String LabelName) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//span[text()='\" + LabelName + \"']/parent::div/following-sibling::div//a\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on:\" + LabelName);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonFMSLink`, is used to simulate a click on an element with the given label name. The method uses XPath to locate the element and then performs the following actions:\n\n1. Waits for the element to be present (up to 10 seconds).\n2. Checks if the element is displayed (up to 5 seconds). If it is, proceeds to:\n\t* Take a manual screenshot with a caption indicating which link was clicked.\n\t* Simulate a click on the element using `clickOnSpecialElement`.\n3. If the element is not present or not displayed, marks the test step as failed.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and marking the test step as failed with an error message if one occurs.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOrChangeFMSButton",
        "code": "public void clickEditOrChangeFMSButton(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \"#xpath=//button[@title='\" + labelName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOrChangeFMSButton`, simulates a click on an edit button with the specified label name. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression for the button based on the provided label name.\n2. Wait up to 10 seconds for the element to be available.\n3. Check if the element is displayed within 5 seconds.\n4. If the element is displayed, scroll to it and click on it using `clickOnSpecialElement`.\n5. If the element is not displayed or an exception occurs during the process, mark the test step as failed.\n\nThe method catches any exceptions that may occur during execution and reports them as a failure in the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSave",
        "code": "public void clickOnSave(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']|//span[text()='\"+buttonName+\"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName+\" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSave`, attempts to click on a button with the specified name. It uses various UI automation tools and checks for the presence of the button before clicking it. Here's a breakdown of what the method does:\n\n1. **Constructs an XPath locator**: The method takes a `buttonName` parameter and constructs an XPath expression that combines the button name with a specific XPath pattern to locate the element.\n2. **Waits for the element**: It uses a `waitForElement` method to wait up to 15 seconds for the element to be present on the page.\n3. **Scrolls to the element**: If the element is not visible, it scrolls to the element using the `scrollbycordinates` method.\n4. **Checks if the element is displayed**: It uses an `isElementDisplayed` method to check if the element is visible and can be interacted with.\n5. **Highlights and clicks the element**: If the element is present and displayed, it highlights the element using a `highLighterMethod`, then clicks on it using a `clickOn` method.\n6. **Handles exceptions**: If any of these steps fail or an exception occurs, the method catches the exception and reports a test step failure with a message indicating what went wrong.\n\nIn summary, this method is designed to interact with a button element on a web page by locating it, waiting for it to be present, scrolling to it if necessary, checking its visibility, highlighting it, and clicking on it.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "entervalueTextArea",
        "code": "public void entervalueTextArea(String Label, String Value) {\n\t\ttry {\n\t\t\tString field = Label + \" textarea field#xpath=//span[contains(text(),'\" + Label + \"')]//../..//textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in entervalueInIMPSTextArea\" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`entervalueTextArea`: This method enters a given value into a text area field on a web page. It takes two parameters: `Label`, which is the label associated with the text area, and `Value`, which is the actual value to be entered.\n\nThe method uses various Selenium WebDriver methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToElement`, `highLighterMethod`, and `typeIn`) to locate the text area field, verify its presence on the page, scroll to it if necessary, highlight it for visual confirmation, and finally enter the given value into the field. If any step fails (e.g., the element is not displayed), the method logs a test step failure with an appropriate error message.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickRecordTypeEditButton",
        "code": "public void clickRecordTypeEditButton(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Edit or Change#xpath=//span[text()='\"+labelName+\"']/ancestor::dt/..//..//button[@title='Change Record Type']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" edit button is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickEditOrChangeButton. Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickRecordTypeEditButton`, simulates a click on an \"Edit or Change\" button for a specific record type. The method takes a `String` parameter `labelName`, which represents the label of the record type.\n\nHere's what it does:\n\n1. It constructs a unique XPath expression to locate the edit button based on the provided `labelName`.\n2. It waits up to 10 seconds for the element to be available using `waitForElement`.\n3. If the element is displayed, it performs the following actions:\n\t* Highlights the element using `highLighterMethod`.\n\t* Scrolls the element into view using `scrollToWebElement`.\n\t* Simulates a click on the element using `clickOnSpecialElement`.\n4. If the element is not available or the click operation fails, it reports a test step failure with an error message.\n\nThe method also catches any exceptions that may occur during execution and reports another test step failure if an exception occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnExtensionButton",
        "code": "public void clickOnExtensionButton(String labelname) {\n\t\ttry {\n\t\t\tString button = labelname\n\t\t\t\t\t+ \"field#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']//..//..//..//div//a\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\twaitTime(4);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Extension button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnExtensionButton`, simulates a click on an extension button with the specified label name. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression based on the label name and the expected location of the button.\n2. Wait for the element to be displayed using the `waitForElement` method.\n3. Check if the element is displayed within a certain time limit (using `isElementDisplayed`).\n4. If the element is displayed, it highlights the element (using `highLighterMethod`) and then simulates a click on the element (using `clickOnSpecialElement`).\n5. If the element is not displayed or an exception occurs during execution, it logs a test step failure with a relevant message.\n\nThe method takes one parameter: `labelname`, which is used to construct the XPath expression for locating the extension button.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "pageScrollDown",
        "code": "public void pageScrollDown() {\n\t\twaitTime(6);\n\n\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\t\tjse.executeScript(\"scroll(-250, 0);\");\n\n\t}",
        "description": "This Java method, `pageScrollDown`, simulates a scroll down action on the current webpage. It uses the Selenium WebDriver's JavaScript executor to execute a script that scrolls the page down by 250 pixels. The method also includes a wait time of 6 seconds before scrolling, allowing for any previous operations to complete.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyErrorMessageInAlertPopup",
        "code": "public boolean verifyErrorMessageInAlertPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div/span[text()='Review the following fields']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li/a\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorMessageInAlertPopup()`, verifies if there are any error messages displayed in an alert popup. \n\nHere's a step-by-step breakdown of what the method does:\n\n1. It sets a boolean flag to `false`.\n2. It tries to execute the following steps:\n   - Waits for the page to load.\n   - Waits for an element with the specified XPath (error) and timeout of 4 seconds.\n   - Checks if the element is displayed.\n   - If the element is displayed, sets the flag to `true`.\n3. If the error message is displayed, it:\n   - Finds all web elements that match a specific XPath (error list).\n   - Takes manual screenshots for each error message in the list.\n4. If the flag is still `true` after verifying the errors, it marks the test step as failed due to the errors.\n5. If the flag remains `false`, it takes a manual screenshot with the message \"There is no error while entering the fields\".\n6. It catches any exceptions that occur during execution and marks the test step as failed if an exception occurs.\n\nThe method returns the value of the boolean flag, which indicates whether there were any error messages displayed in the alert popup or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Customers",
        "function_name": "selectValueFromDropdownDealer",
        "code": "public void selectValueFromDropdownDealer(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//button\";\n\t\t\twaitForElement(dropdown, 25);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n//\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n//\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'dropdown')]//lightning-base-combobox-item/span/span[text()='\"+value+\"']\";\n\t\t\t\t\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownDealer`, is used to select a specific value from a dropdown menu. It takes two parameters: the name of the dropdown and the value to be selected.\n\nThe method first waits for the page to load and then locates the dropdown element using an XPath expression. It then scrolls down to the dropdown, clicks on it, and waits for the dropdown list to appear. If the value is present in the list, it selects the value by clicking on it. The method continues to try scrolling down to the dropdown and selecting the value up to two times.\n\nIf the value is not found in the dropdown or if the dropdown is not present, the method fails the test step with an appropriate error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String fieldLabel) {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\twaitForElement(editOption, 4);\n\t\t\tscrollbycordinates(editOption);\n\n\t\t\tif (isElementDisplayed(editOption, 3)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle`, simulates a click on an edit button with a specific title that matches the provided `fieldLabel`. The method attempts to:\n\n1. Wait for the page to load.\n2. Find the edit button with the matching title using XPath and wait for it to be displayed within a certain time limit (4 seconds).\n3. Scroll the element into view if necessary.\n4. Check if the element is displayed on the screen. If it is, click on it. If not, report an error.\n\nIf any exceptions occur during this process, the method logs an informative message with the exception's message.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\thighLighterMethod(searchField);\n\t\t\t\tWebElement input = findWebElement(searchField);\n\t\t\t\tchar ch[] = value.toCharArray();\n\t\t\t\tfor (char c : ch) {\n\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t}\n\t\t\t\tString search_icn = \"search tab#xpath=//span[contains(text(),'Show All Results for \\\"\"+value+\"\\\"')]\";\n\t\t\t\twaitForElement(search_icn);\n\t\t\t\tclickOn(search_icn);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField`, appears to be a part of an automated testing framework. It's designed to interact with a web application and perform the following actions:\n\n1. Searches for a specific label or field on the page using XPath.\n2. If the field is found, it scrolls to the field, highlights it, and then types in a value (character by character) using the `sendKeys` method.\n3. After typing in the value, it searches for a result related to that value using another XPath expression.\n4. It waits for the search results page to load and then clicks on the first result link.\n\nThe method takes two parameters: `labelName` (the name of the field or label) and `value` (the value to be typed into the field). If any part of this process fails, it will log a test step failure and throw an exception.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n//\t\t\tString field = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n//\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDob`, enters a value into a specific field on a webpage. It takes two parameters: `labelName` and `value`. \n\n- The method first constructs an XPath string to identify the field by its label name.\n- It then uses this XPath string to locate the field, wait for it to be displayed (up to 25 seconds), and scroll into view if necessary.\n- If the field is displayed, it enters the provided value into the field using a `typeIn` method (not shown in the code snippet).\n- After entering the value, it highlights the entered text using another method (`highLighterMethod`, not shown) to visually confirm the entry.\n- If the field is not present after 5 seconds, the test step fails.\n\nIf any exception occurs during this process, the method catches and reports it as a test failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String fieldLabel, String ScrollElement) {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 30);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle`, is used to click on an edit button with a specific title within a webpage. The method takes two parameters: `fieldLabel` and `ScrollElement`.\n\n- It first waits for the page to load using the `waitForPageToLoad()` method.\n- Then it constructs a string `editOption` by concatenating the provided `fieldLabel` with an XPath expression that targets the edit button with the same title as the label.\n- It also constructs another string `scrollElement` by concatenating the provided `ScrollElement` with an XPath expression that targets the element containing the scroll element.\n- The method then waits for the `scrollElement` to be displayed using the `waitForElement()` method, and scrolls to it using the `scrollbycordinates()` method.\n- If the edit button is present on the page (checked using the `isElementDisplayed()` method), the method scrolls to and clicks on it using the `scrollToWebElement()` and `clickOnSpecialElement()` methods respectively. \n- If the edit button is not found, the method reports a failure with a message indicating that the edit button was not present.\n\nThe method catches any exceptions that may occur during its execution and logs an informative message if an exception occurs.",
        "input": [
            "String fieldLabel",
            "String ScrollElement"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "appDataEntryPersonaldetails",
        "code": "public void appDataEntryPersonaldetails(String poiTypelabel, String poiTypeValue, String poiNolabel,\n\t\t\tString poiNoValue, String creditCardNumberlabel, String creditCardValue, String processTypelabel,\n\t\t\tString processTypeValue, String creditProgramLabel, String creditProgramValue, String firstNameNCValue,\n\t\t\tString lastNameLabel, String lastNameValue, String dobLabel, String dobValue, String genderLabel,\n\t\t\tString genderValue) {\n\t\ttry {\n\n\t\t\tclickEditOptionWithTitle(\"Edit POI Type\", \"POI Type\");\n\t\t\twaitTime(4);\n\t\t\tselectValueFromDropdown(poiTypelabel, poiTypeValue);\n\t\t\tenterValueInField(poiNolabel, poiNoValue);\n\t\t\tenterValueInField(creditCardNumberlabel, creditCardValue);\n\t\t\tselectValueFromDropdown(processTypelabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tenterValueInField(\"First Name\", firstNameNCValue);\n\t\t\tenterValueInField(lastNameLabel, lastNameValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tselectValueFromDropdownDealer(genderLabel, genderValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to perform data entry for personal details. It takes 16 string parameters that represent various labels and values for fields such as POI Type, Credit Card Number, Process Type, Credit Program, First Name, Last Name, Date of Birth, and Gender. The method attempts to perform the following actions:\n\n1. Click on the \"Edit POI Type\" option with a title of \"POI Type\"\n2. Wait for 4 seconds\n3. Select the value from a dropdown list based on the provided label and value\n4. Enter values in fields based on the provided labels and values\n5. Catch any exceptions that occur during the execution of these actions, and if an exception is caught, mark the test step as failed with a message including the exception's message.",
        "input": [
            "String poiTypelabel",
            "String poiTypeValue",
            "String poiNolabel",
            "String poiNoValue",
            "String creditCardNumberlabel",
            "String creditCardValue",
            "String processTypelabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String firstNameNCValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String dobLabel",
            "String dobValue",
            "String genderLabel",
            "String genderValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "appDataEntryPersonaldetailsDPFProduct",
        "code": "public void appDataEntryPersonaldetailsDPFProduct(String Dealer, String poiTypelabel, String poiTypeValue,\n\t\t\tString poiNolabel, String poiNoValue, String creditCardNumberlabel, String creditCardValue,\n\t\t\tString processTypelabel, String processTypeValue, String creditProgramLabel, String creditProgramValue,\n\t\t\tString firstNameNCValue, String lastNameLabel, String lastNameValue, String dobLabel, String dobValue,\n\t\t\tString genderLabel, String genderValue) {\n\t\ttry {\n\t\t\tif (poiTypeValue.equals(\"PAN\")) {\n\t\t\t\tAadhar = generatePanNumber();\n\t\t\t} else {\n\t\t\t\tAadhar = generateAadhaar4DigitNumber();\n\t\t\t}\n\t\t\tclickEditOptionWithTitle(\"Edit POI Type\", \"POI Type\");\n\t\t\twaitTime(4);\n\t\t\tselectValueFromDropdown(poiTypelabel, poiTypeValue);\n\t\t\tenterValueInField(poiNolabel, Aadhar);\n\t\t\t// enterValueInField(creditCardNumberlabel, creditCardValue);\n\n\t\t\tselectValueFromDropdown(processTypelabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tenterValueInField(\"First Name\", firstNameNCValue);\n\t\t\tenterValueInField(lastNameLabel, lastNameValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tselectValueFromDropdownDealer(genderLabel, genderValue);\n\t\t\tif (Dealer.contains(\"Automation DPF Dealer\") || Dealer.contains(\"Automation Rural Dealer\")) {\n\t\t\t\tenterValueInField(\"Applied Amount\", \"45900\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `appDataEntryPersonaldetailsDPFProduct` that appears to be part of an automated testing framework. The method takes 17 string parameters, which are used to populate various fields and dropdown menus on a user interface.\n\nThe method's main functionality can be summarized as follows:\n\n1. It generates an Aadhar number based on the value of `poiTypeValue`.\n2. It clicks on an \"Edit POI Type\" option and waits for 4 seconds.\n3. It selects the value from a dropdown menu using the labels and values provided as parameters.\n4. It enters values into various fields, such as first name, last name, date of birth, and credit card number (although this field is commented out).\n5. It selects values from dropdown menus for process type, credit program, and gender.\n6. If the dealer type contains specific strings (\"Automation DPF Dealer\" or \"Automation Rural Dealer\"), it enters a value into an \"Applied Amount\" field.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and reporting them as test step failures.",
        "input": [
            "String Dealer",
            "String poiTypelabel",
            "String poiTypeValue",
            "String poiNolabel",
            "String poiNoValue",
            "String creditCardNumberlabel",
            "String creditCardValue",
            "String processTypelabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String firstNameNCValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String dobLabel",
            "String dobValue",
            "String genderLabel",
            "String genderValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "RemoveCrossSignInAdmin",
        "code": "public void RemoveCrossSignInAdmin(String labelname) {\n\t\ttry {\n\t\t\tString btn_remove = \" Clear Selection \" + labelname + \"#xpath=(//label[text()='\" + labelname\n\t\t\t\t\t+ \"'])[last()]//following::button[@title='Clear Selection']\";\n\t\t\twaitForElement(btn_remove, 10);\n\t\t\tif (isElementDisplayed(btn_remove, 6)) {\n\t\t\t\tscrollToWebElement(btn_remove);\n\t\t\t\tclickOn(btn_remove);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Clear Selection sign is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Remove cross sign Exception :\" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `RemoveCrossSignInAdmin`, removes a cross sign in an admin panel by simulating a click on the \"Clear Selection\" button associated with a given label name. \n\nHere's how it works:\n\n1. It constructs a string (`btn_remove`) that represents the XPath of the button to be clicked.\n2. It waits for the element (the button) to be displayed within a certain time limit (10 seconds).\n3. If the button is displayed, it scrolls down to the button and clicks on it.\n4. If the button is not displayed after waiting for 6 seconds, it logs an error message indicating that the sign is not present.\n\nIf any exception occurs during this process, it logs a failure message with the exception details.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnButton1",
        "code": "public void clickOnButton1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\twaitForElement(button, 8);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\ttestStepPassed(\"Click On :\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton1`, is used to simulate a click on a specific button with the given name. The method takes a `String` parameter `buttonName` which represents the name of the button to be clicked.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `buttonName` with the XPath syntax for finding a button element.\n2. It uses this XPath expression to find the corresponding WebElement using the `findWebElement` method.\n3. It waits for the button to be displayed using the `waitForElement` method with a timeout of 8 seconds.\n4. If the button is displayed, it simulates a click on the button by moving the mouse cursor to the button and then clicking it using the `Actions` class from Selenium WebDriver.\n5. The method logs a test step as passed if the button is successfully clicked.\n\nIf any exception occurs during these steps, the method catches the exception and logs a test step failure with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInFatherMotherTextField",
        "code": "public void enterValueInFatherMotherTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]/following-sibling::div//input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFatherMotherTextField`, enters a given value into a text field with the specified label name. The method uses various WebDriver operations to locate the element, scroll it into view if necessary, highlight it, and then enter the provided value.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the text field based on its label name.\n2. It waits for the element to be displayed using `waitForElement`.\n3. If the element is not present within 25 seconds, it attempts to scroll into view using `scrollbycordinates`.\n4. If the element is still not visible after scrolling, it checks if the element is displayed within 5 seconds using `isElementDisplayed`. If not, it marks the test step as failed.\n5. If the element is displayed, it highlights the element using `highLighterMethod`, scrolls to the element using `scrollToWebElement`, and then enters the provided value into the field using `typeIn`.\n6. If any exceptions occur during these operations, it catches them and marks the test step as failed with an error message.\n\nThe method takes two parameters: `labelName` (the name of the label associated with the text field) and `value` (the value to be entered into the field).",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getValidationTextInDOStage1",
        "code": "public boolean getValidationTextInDOStage1(String ExpectedValue) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\twaitForElementToDisplay(Text, 10);\n\t\t\tscrollToElement(Text);\n\t\t\tif (isElementDisplayed(Text, 10)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString errorMessage = errorsList.get(i).getText().trim();\n\t\t\t\t\tmanualScreenshot(\"Verify Validation is displayed as Expected\");\n\t\t\t\t\tverifyTwoValues(errorMessage, ExpectedValue);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no expected validation displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getValidationTextInDOStage\" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `getValidationTextInDOStage1`, checks if a specific validation text is displayed on the page and verifies its content matches an expected value. \n\nThe method takes a string parameter `ExpectedValue` which represents the expected validation text.\n\nHere's what it does:\n\n- It waits for an element with the specified XPath to be displayed.\n- If the element is displayed, it scrolls to that element.\n- Then, it checks if any error messages are present under that element. \n- For each error message found, it takes a manual screenshot and verifies that the error message matches the expected value.\n- If no error messages are found or an exception occurs during the process, it marks the test step as failed.\n\nThe method returns a boolean flag indicating whether the validation text was found and verified successfully.",
        "input": [
            "String ExpectedValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Customers",
        "function_name": "ckycPagePersonaldetails",
        "code": "public void ckycPagePersonaldetails(String fatherNameLabel, String fatherNameValue, String motherNameLabel,\n\t\t\tString motherNameValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAreaLabel,\n\t\t\tString officeAreaValue, String nameofCompanyLabel, String nameofCompanyValue, String monthlyIncomeLabel,\n\t\t\tString monthlyIncomeValue, String maritalStatuslabel, String maritalStatusValue, String poaTypeLabel,\n\t\t\tString poaTypeValue, String poaNolabel, String poaNoValue) {\n\t\ttry {\n\n\t\t\tclickEditOptionWithTitle1(\"Edit Father\", \"Details Entry\");\n\t\t\ttestStepInfo(\" CKYC - Data Entry \");\n\t\t\twaitTime(3);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInField(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInField(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInField(officeAreaLabel, officeAreaValue);\n\t\t\tchooseValueFromSearchAndListField(nameofCompanyLabel, nameofCompanyValue);\n\t\t\tif (nameofCompanyValue.equalsIgnoreCase(\"Others\")) {\n\t\t\t\tenterValueInFatherMotherTextField(\"If Other Company Please Specify\", \"inCorp\");\n\t\t\t}\n\t\t\tselectValueFromDropdown(monthlyIncomeLabel, monthlyIncomeValue);\n\t\t\tselectValueFromDropdownDealer(maritalStatuslabel, maritalStatusValue);\n\t\t\tselectValueFromDropdown(poaTypeLabel, poaTypeValue);\n\t\t\tenterValueInField(poaNolabel, poaNoValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to enter personal details for a CKYC (Central Know Your Customer) page. It takes 17 string parameters as input, which represent various labels and values for fields such as father's name, mother's name, office address, company name, monthly income, marital status, POA type, and POA number.\n\nThe method attempts to perform the following actions:\n\n1. Click on the \"Edit Father\" button with the title \"Details Entry\".\n2. Enter values in text fields for father's/mother's name.\n3. Enter values in text fields for office address (line 1, line 2, and area).\n4. Choose a value from a search and list field for company name.\n5. If the company name is \"Others\", enter a specific value in the text field.\n6. Select a value from dropdown lists for monthly income, marital status, POA type, and POA number.\n\nIf any of these actions fail, an exception is caught and a test step failure message is logged with the error message.",
        "input": [
            "String fatherNameLabel",
            "String fatherNameValue",
            "String motherNameLabel",
            "String motherNameValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAreaLabel",
            "String officeAreaValue",
            "String nameofCompanyLabel",
            "String nameofCompanyValue",
            "String monthlyIncomeLabel",
            "String monthlyIncomeValue",
            "String maritalStatuslabel",
            "String maritalStatusValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNolabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String linkName) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\tString link = linkName + \"#xpath=//a[@title='\" + linkName + \"']\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 30);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(6);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLink`, attempts to click on a specific link with the given name. It first waits for 6 seconds using the `waitTime` method, then constructs an XPath expression to locate the link element based on its title attribute. The method then waits for 1 second and uses another wait method (`waitForElement`) to ensure the link is present within 30 seconds. If the link is found, it scrolls to the link using `scrollbycordinates`, clicks on it with `clickOnSpecialElement`, and waits again for 6 seconds. If the link is not found, it fails the test step. The method also catches any exceptions that occur during execution and reports them as a failed test step.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnBlindData",
        "code": "public void clickOnBlindData() {\n\t\ttry {\n\t\t\tString blindLink = \"Blind Data#xpath=//div[text()='Blind Data']\";\n\t\t\twaitForElement(blindLink, 10);\n\t\t\tif (isElementDisplayed(blindLink, 5)) {\n\t\t\t\tclickOn(blindLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Blind Data link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnBlindData \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnBlindData`, attempts to click on an element with the XPath expression `\"//div[text()='Blind Data']\"` after waiting for up to 10 seconds. If the element is not displayed within 5 seconds, the test step fails. The method also catches any exceptions that occur during execution and reports a failure if one occurs.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "BlindDataEntryPersonaldetail",
        "code": "public void BlindDataEntryPersonaldetail(String qcDOBLabel, String dobValue, String qcMandateBarcodeLabel,\n\t\t\tString ECSBarcodeValue, String qcAccHolderNameLabel, String firstNameNCValue, String lastNameNCValue,\n\t\t\tString qcAccNumberLabel, String bankAccountValue, String bankingIMPSFlag, String qcIfscCodeLabel,\n\t\t\tString qcIfscCodeValue, String bankNameWithoutIMPSValue, String saveValue, String submitValue,\n\t\t\tString onlySavelabel) {\n\t\ttry {\n\n\t\t\tclickOnBlindData();\n\n\t\t\tmanualScreenshot(\"Verifying the Blind data entry is eligible for this case.\");\n\n\t\t\tenterValueInFieldInBlindData(qcDOBLabel, dobValue);\n\t\t\tenterValueInField(qcMandateBarcodeLabel, ECSBarcodeValue);\n\t\t\tenterValueInField(qcAccHolderNameLabel, firstNameNCValue + \" \" + lastNameNCValue);\n\t\t\tenterValueInField(qcAccNumberLabel, bankAccountValue);\n\t\t\tif (bankingIMPSFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, qcIfscCodeValue);\n\t\t\t} else {\n\t\t\t\tenterValueInField(qcIfscCodeLabel, bankNameWithoutIMPSValue.split(\" \")[0]);\n\t\t\t}\n\t\t\twaitTime(5);\n\t\t\tclickOnButton1(saveValue);\n\n\t\t\twaitForPageToLoad();\n\n\t\t\tclickOnLink(submitValue);\n\t\t\tclickOnButtonInPopup(onlySavelabel);\n\t\t\twaitTime(7);\n\t\t\tmsgInSubmittoCaptureErrorwithFail();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `BlindDataEntryPersonaldetail`, is used to perform data entry for a person's details in a blind data entry form. The method takes several string parameters that represent different fields and values to be entered in the form.\n\nThe method performs the following steps:\n\n1. Clicks on the \"Blind Data\" button.\n2. Verifies the screen by taking a manual screenshot.\n3. Enters the provided values into the corresponding fields:\n\t* Date of birth (qcDOBLabel, dobValue)\n\t* ECS Barcode (qcMandateBarcodeLabel, ECSBarcodeValue)\n\t* Account holder name (qcAccHolderNameLabel, firstNameNCValue + \" \" + lastNameNCValue)\n\t* Bank account number (qcAccNumberLabel, bankAccountValue)\n\t* IFSC code (depending on the value of bankingIMPSFlag: either qcIfscCodeValue or the first word of bankNameWithoutIMPSValue)\n4. Waits for 5 seconds.\n5. Saves the data by clicking on the \"Save\" button.\n6. Waits for the page to load.\n7. Submits the form by clicking on the \"Submit\" link and then clicking on the \"Save\" button in the popup dialog box.\n8. Waits for 7 seconds before capturing any errors that may have occurred.\n\nIf any exceptions occur during the execution of this method, it will catch them and report a failure with an error message.",
        "input": [
            "String qcDOBLabel",
            "String dobValue",
            "String qcMandateBarcodeLabel",
            "String ECSBarcodeValue",
            "String qcAccHolderNameLabel",
            "String firstNameNCValue",
            "String lastNameNCValue",
            "String qcAccNumberLabel",
            "String bankAccountValue",
            "String bankingIMPSFlag",
            "String qcIfscCodeLabel",
            "String qcIfscCodeValue",
            "String bankNameWithoutIMPSValue",
            "String saveValue",
            "String submitValue",
            "String onlySavelabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "selectOptionFromCKYCDropdown",
        "code": "public void selectOptionFromCKYCDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/parent::label//following-sibling::div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tWebElement ele = findWebElement(dropdown);\n\t\t\t\tSelect select = new Select(ele);\n\t\t\t\tselect.selectByVisibleText(value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOptionFromCKYCDropdown`, selects a value from a dropdown menu with the specified name and value. It uses various helper methods to:\n\n1. Wait for a certain time period (3 seconds).\n2. Locate the dropdown element using XPath.\n3. Wait for the element to be displayed (10 seconds).\n4. Scroll to the element if it's not visible.\n5. Verify that the element is displayed before attempting to select a value from the dropdown.\n6. If the element is displayed, use the `Select` class to select the specified value by its text.\n\nIf any of these steps fail, the method catches the exception and marks the test step as failed with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnCKYCTab",
        "code": "public void clickOnCKYCTab(String buttonName) {\n\t\ttry {\n\t\t\tpageScrollUp();\n\t\t\twaitTime(2);\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\t// clickOnSpecialElement(button);\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\ttestStepPassed(\"Click On : \" + buttonName);\n\t\t\t\twaitTime(6);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCKYCTab`, simulates a mouse click on an element with the given `buttonName` within a certain time frame. It performs the following actions:\n\n1. Scrolls up the page using `pageScrollUp()`.\n2. Waits for 2 seconds using `waitTime(2)`.\n3. Constructs an XPath expression to locate the button with the given name.\n4. Waits for the element to be displayed within a time limit of 10 seconds using `waitForElement`.\n5. Checks if the element is displayed and if not, fails the test step.\n6. If the element is displayed, highlights it using `highLighterMethod`, moves the mouse cursor to the element using `Actions`, clicks on the element, and then waits for 6 seconds using `waitTime(6)`.\n7. Logs a test step as passed or failed based on whether the click was successful.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and logging them as test failures.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "appDataEntryAddressDetails",
        "code": "public void appDataEntryAddressDetails(String residenceTypeLabel, String residenceTypeValue,\n\t\t\tString addressLine1Label, String addressLine1Value, String addressLine2Label, String addressLine2Value,\n\t\t\tString addressLine3Label, String addressLine3Value, String areaLabel, String areaValue,\n\t\t\tString landmarkLabel, String landmarkValue, String zipcodeLabel, String zipcodeValue, String bflBranchLabel,\n\t\t\tString bflBranchValue, String employmentTypelabel, String employmentTypeValue, String dataEntryStatusLabel,\n\t\t\tString dataEntryStatusValue, String saveButton) {\n\t\ttry {\n\n\t\t\tselectValueFromDropdownDealer(residenceTypeLabel, residenceTypeValue);\n\n\t\t\tenterValueInField(addressLine1Label, addressLine1Value);\n\t\t\tenterValueInField(addressLine2Label, addressLine2Value);\n\t\t\tenterValueInField(addressLine3Label, addressLine3Value);\n\t\t\tenterValueInField(areaLabel, areaValue);\n\n\t\t\tenterValueInField(landmarkLabel, landmarkValue);\n\t\t\tchooseValueFromSearchAndListField(zipcodeLabel, zipcodeValue);\n\t\t\tchooseValueFromSearchAndListField(bflBranchLabel, bflBranchValue);\n\t\t\tselectValueFromDropdown(employmentTypelabel, employmentTypeValue);\n\n\t\t\tselectValueFromDropdown(dataEntryStatusLabel, \"Draft\");\n\t\t\tclickOnSave(saveButton);\n\t\t\twaitTime(7);\n\t\t\tclickOnCKYCTab(\"CKYC\");\n\t\t\tselectOptionFromCKYCDropdown(\"Bypass Reason\", \"Customer doesn't have one of the listed Document types\");\n\t\t\tclickOnButton(\"Save Bypass Reason\");\n\t\t\twaitForPageToLoad();\n\t\t\tclickOnSave(\"Data Entry\");\n\t\t\tclickEditOptionWithTitle(\"Edit POI Type\", \"POI Type\");\n\t\t\tselectValueFromDropdown(dataEntryStatusLabel, dataEntryStatusValue);\n\t\t\tclickOnSave(saveButton);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to fill out various fields and dropdown menus on a web page, likely for data entry purposes. It takes 24 string parameters that correspond to labels and values for different fields.\n\nThe method performs the following actions:\n\n1. Selects a value from a dropdown menu based on the `residenceTypeLabel` and `residenceTypeValue`.\n2. Enters values into text fields for address lines 1, 2, and 3, as well as area.\n3. Enters values into text fields for landmark and zip code.\n4. Selects values from search-and-list fields for BFL branch and employment type.\n5. Selects a value from a dropdown menu for data entry status and sets it to \"Draft\".\n6. Clicks the save button.\n7. Waits for 7 seconds, then clicks on the CKYC tab.\n8. Selects an option from a dropdown menu for bypass reason and saves the change.\n9. Waits for the page to load, then clicks the save button again.\n10. Edits the POI type and selects a new value from a dropdown menu.\n11. Saves the changes.\n\nThe method also includes error handling using a `try-catch` block. If an exception occurs during the execution of the method, it will print an error message indicating that the \"Failed in clickcustometLinkInopp\" step failed.",
        "input": [
            "String residenceTypeLabel",
            "String residenceTypeValue",
            "String addressLine1Label",
            "String addressLine1Value",
            "String addressLine2Label",
            "String addressLine2Value",
            "String addressLine3Label",
            "String addressLine3Value",
            "String areaLabel",
            "String areaValue",
            "String landmarkLabel",
            "String landmarkValue",
            "String zipcodeLabel",
            "String zipcodeValue",
            "String bflBranchLabel",
            "String bflBranchValue",
            "String employmentTypelabel",
            "String employmentTypeValue",
            "String dataEntryStatusLabel",
            "String dataEntryStatusValue",
            "String saveButton"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "appDataEntryPersonaldetails",
        "code": "public void appDataEntryPersonaldetails(String poiTypelabel, String poiTypeValue, String poiNolabel,\n\t\t\tString poiNoValue, String processTypelabel, String processTypeValue, String creditProgramLabel,\n\t\t\tString creditProgramValue, String firstNameNCValue, String lastNameLabel, String lastNameValue,\n\t\t\tString dobLabel, String dobValue, String genderLabel, String genderValue) {\n\t\ttry {\n\n\t\t\tif (poiTypeValue.equals(\"PAN\")) {\n\t\t\t\tAadhar = generatePanNumber();\n\t\t\t} else {\n\t\t\t\tAadhar = generateAadhaar4DigitNumber();\n\t\t\t}\n\t\t\tclickEditOptionWithTitle(\"Edit POI Type\", \"POI Type\");\n\t\t\twaitTime(4);\n\n\t\t\tselectValueFromDropdown(poiTypelabel, poiTypeValue);\n\t\t\tif (poiTypeValue.equalsIgnoreCase(\"PAN\")) {\n\t\t\t\tenterValueInField(poiNolabel, Aadhar);\n\t\t\t} else if (poiTypeValue.equalsIgnoreCase(\"Aadhaar\")) {\n\t\t\t\tenterValueInField(poiNolabel, Aadhar);\n\t\t\t}\n\t\t\t// enterValueInField(creditCardNumberlabel, creditCardValue);\n\t\t\tselectValueFromDropdown(processTypelabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tif (creditProgramValue.contains(\"Credit Card\")) {\n\t\t\t\tenterValueInField(\"Credit/Debit Card Number\", generateCreditCardNumber());\n\t\t\t}\n\t\t\tenterValueInField(\"First Name\", firstNameNCValue);\n\n\t\t\tenterValueInField(lastNameLabel, lastNameValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tselectValueFromDropdownDealer(genderLabel, genderValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in AppDataEntry Personal Details\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to perform data entry operations for personal details in an application. The method takes 14 string parameters that represent labels and values for various fields such as POI type, PAN/Aadhaar number, process type, credit program, first name, last name, date of birth, and gender.\n\nThe method attempts to perform the following actions:\n\n1. Generates a PAN or Aadhaar number based on the provided POI type value.\n2. Edits the POI type field in the application.\n3. Selects the corresponding POI type from a dropdown menu.\n4. Enters the generated PAN or Aadhaar number into the relevant field.\n5. Selects the process type and credit program from their respective dropdown menus.\n6. If the credit program is \"Credit Card\", generates a credit card number and enters it into the application.\n7. Enters the first name, last name, date of birth, and gender into their corresponding fields.\n\nIf any errors occur during these operations, the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String poiTypelabel",
            "String poiTypeValue",
            "String poiNolabel",
            "String poiNoValue",
            "String processTypelabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String firstNameNCValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String dobLabel",
            "String dobValue",
            "String genderLabel",
            "String genderValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "ckycPagePersonaldetails",
        "code": "public void ckycPagePersonaldetails(String fatherNameLabel, String fatherNameValue, String motherNameLabel,\n\t\t\tString motherNameValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAreaLabel,\n\t\t\tString officeAreaValue, String nameofCompanyLabel, String nameofCompanyValue, String monthlyIncomeLabel,\n\t\t\tString monthlyIncomeValue, String maritalStatuslabel, String maritalStatusValue, String OtherCompanyLabel,\n\t\t\tString OtherCompanyValue, String poaTypelabel, String poaTypeValue, String poaNolabel, String poaNoValue) {\n\t\ttry {\n\n\t\t\tclickEditOptionWithTitle(\"Edit Father\", \"Additional Details\");\n\n\t\t\ttestStepInfo(\" CKYC - Data Entry \");\n\t\t\twaitTime(3);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\n\t\t\tselectValueFromDropdownDealer(poaTypelabel, poaTypeValue);\n\t\t\tif (poaTypeValue.equalsIgnoreCase(\"PAN\")) {\n\t\t\t\tenterValueInField(poaNolabel, Aadhar);\n\t\t\t} else if (poaTypeValue.equalsIgnoreCase(\"Aadhaar\")) {\n\t\t\t\tenterValueInField(poaNolabel, Aadhar);\n\t\t\t}\n\n\t\t\tenterValueInField(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInField(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInField(officeAreaLabel, officeAreaValue);\n\t\t\tchooseValueFromSearchAndListField(nameofCompanyLabel, nameofCompanyValue);\n\t\t\tif (nameofCompanyValue.equalsIgnoreCase(\"Others\")) {\n\t\t\t\tenterValueInField(OtherCompanyLabel, OtherCompanyValue);\n\t\t\t}\n\n\t\t\tselectValueFromDropdown(monthlyIncomeLabel, monthlyIncomeValue);\n\t\t\tselectValueFromDropdownDealer(maritalStatuslabel, maritalStatusValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to perform data entry for a CKYC (Customer Know Your Customer) page. It takes 23 string parameters, each representing a label and value pair for various fields on the page.\n\nThe method attempts to:\n\n1. Click an \"Edit Father\" option with a specific title.\n2. Enter values in father/mother name text fields.\n3. Select a value from a dropdown field labeled \"PAN/Aadhaar type\".\n4. If the selected value is PAN or Aadhaar, enter the corresponding PAN or Aadhaar number.\n5. Enter values in office address fields (line 1, line 2, and area).\n6. Choose a value from a search-and-list field labeled \"Name of Company\".\n7. If the chosen value is \"Others\", enter an additional company name.\n8. Select a value from a dropdown field labeled \"Monthly Income\".\n9. Select a value from a dropdown dealer field labeled \"Marital Status\".\n\nIf any step fails, it will throw an exception and report the failure with a message.",
        "input": [
            "String fatherNameLabel",
            "String fatherNameValue",
            "String motherNameLabel",
            "String motherNameValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAreaLabel",
            "String officeAreaValue",
            "String nameofCompanyLabel",
            "String nameofCompanyValue",
            "String monthlyIncomeLabel",
            "String monthlyIncomeValue",
            "String maritalStatuslabel",
            "String maritalStatusValue",
            "String OtherCompanyLabel",
            "String OtherCompanyValue",
            "String poaTypelabel",
            "String poaTypeValue",
            "String poaNolabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "ckycPageOfficialdetails",
        "code": "public void ckycPageOfficialdetails(String officePincodeLabel, String officePincodeValue,\n\t\t\tString preferredLanguageLabel, String preferredLanguageValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String preferredMailingAddressLabel, String preferredMailingAddressValue,\n\t\t\tString nameOnCardLabel, String nameOnCardValue, String alternateNoLabel, String alternateNoValue,\n\t\t\tString designationLabel, String designationValue, String qualificationLabel, String qualificationValue,\n\t\t\tString saveButton) {\n\t\ttry {\n\n\t\t\tchooseValueFromSearchAndListField(officePincodeLabel, officePincodeValue);\n\n\t\t\tselectValueFromDropdownDealer(preferredLanguageLabel, preferredLanguageValue);\n\t\t\tselectValueFromDropdownDealer(\"Office Phone No Type\", \"Mobile\");\n\t\t\tenterValueInField(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromDropdownDealer(preferredMailingAddressLabel, preferredMailingAddressValue);\n\n\t\t\tenterValueInField(nameOnCardLabel, nameOnCardValue);\n\t\t\tenterValueInField(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromDropdownDealer(designationLabel, designationValue);\n\n\t\t\tselectValueFromDropdownDealer(qualificationLabel, qualificationValue);\n\n\t\t\tclickOnSave(saveButton);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to populate and save official details of a customer. It takes 17 parameters, which are labels and values for various fields such as office pin code, preferred language, office phone number, mailing address, name on card, alternate phone number, designation, and qualification.\n\nThe method performs the following actions:\n\n1. Chooses the value from search and list field based on office pin code.\n2. Selects values from dropdown dealers for preferred language, office phone no type, and preferred mailing address.\n3. Enters values in fields for office phone number, name on card, alternate phone number, designation, and qualification.\n4. Clicks the save button.\n\nIf any exception occurs during these actions, it catches the exception and reports a test step failure with the error message.",
        "input": [
            "String officePincodeLabel",
            "String officePincodeValue",
            "String preferredLanguageLabel",
            "String preferredLanguageValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String preferredMailingAddressLabel",
            "String preferredMailingAddressValue",
            "String nameOnCardLabel",
            "String nameOnCardValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String saveButton"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickEditOptionWithLabelInDealer",
        "code": "public void clickEditOptionWithLabelInDealer(String fieldLabel) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(4);\n\t\t\tpageScrollDown();\n\t\t\twaitTime(2);\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/button\";\n\t\t\twaitForElement(editOption, 4);\n\t\t\tscrollbycordinates(editOption);\n\t\t\tscrollToWebElement(editOption);\n\t\t\tscrollToElement(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tWebElement txtUsername = findWebElement(editOption);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInDealer`, simulates a click on an edit button with a specific label in a web page. The method takes a `String` parameter `fieldLabel`, which is used to construct the XPath of the edit button.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 4 seconds using the `waitTime(4)` method.\n2. Scrolls down the page using the `pageScrollDown()` method.\n3. Waits for another 2 seconds using the `waitTime(2)` method.\n4. Constructs an XPath expression to locate the edit button with the given label.\n5. Waits for the edit button to be displayed using the `waitForElement(editOption, 4)` method.\n6. Scrolls to the edit button using the `scrollbycordinates(editOption)`, `scrollToWebElement(editOption)`, and `scrollToElement(editOption)` methods.\n7. Checks if the edit button is displayed within a certain time limit (10 seconds). If it is, simulates a click on the button using the `Actions` class.\n8. If the edit button is not displayed or the simulation fails, logs an error message using the `testStepFailed()` method.\n\nThe method also catches any exceptions that may occur during execution and logs an error message using the `testStepInfo()` method if an exception occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "enterValueInTextField",
        "code": "public void enterValueInTextField(String labelName, String value) {\n\t\ttry {\n\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextField`, is used to input a given value into a text field on a web page. It takes two parameters: `labelName` and `value`. \n\nThe method first checks if the provided value is not empty. If it's not, it constructs an XPath expression based on the label name to locate the corresponding text field. It then waits for the element to be displayed and attempts to type in the given value. If the field is not present or the operation fails, the method logs a test step failure message.\n\nIf the provided value is empty, the method logs a test step information message asking the user to provide some value for the field.\n\nIn case any exception occurs during the execution of this method, it logs a test step failure message with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnRecordInCaseRecord",
        "code": "public void clickOnRecordInCaseRecord(String customerName) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString link = customerName + \"#xpath=//th//span/a\";\n\t\t\twaitForElement(link, 20);\n\t\t\twaitTime(3);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(10);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRecordInCaseRecord`, simulates a user clicking on a specific record link for a given customer name. It uses various Selenium WebDriver wait methods to ensure the element is loaded and visible before attempting to click on it. The method takes a `customerName` parameter, which is used to construct the link URL.\n\nHere's a step-by-step breakdown:\n\n1. Waits for 4 seconds using `waitTime(4)`.\n2. Constructs the link URL by concatenating the `customerName` with a fixed string and an XPath expression (`//th//span/a`).\n3. Waits up to 20 seconds for the element to be present using `waitForElement(link, 20)`.\n4. Waits for 3 seconds again using `waitTime(3)`.\n5. Checks if the element is present using `isElementPresent(link)`. If it is:\n\t* Clicks on the special element ( likely a link or button) using `clickOnSpecialElement(link)`.\n\t* Waits for the page to load completely using `waitForPageToLoad()`.\n\t* Waits for 10 seconds using `waitTime(10)`.\n6. If the element is not present, logs a test step failure with a message indicating that the link is not present.\n7. Catches any exceptions and logs a test step failure with a message describing the failure.\n\nIn summary, this method simulates clicking on a specific record link for a given customer name, using various Selenium WebDriver wait methods to ensure the element is loaded and visible before attempting to click on it.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyCurrentStageOfOpportunity",
        "code": "public void verifyCurrentStageOfOpportunity(String Stage_value) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(8);\n\t\t\twaitForElement(currentStage_Opp, 30);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 6)) {\n\t\t\t\tString stageValue = getText(currentStage_Opp);\n\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t\tif (stageValue.equals(Stage_value)) {\n\t\t\t\t\ttestStepPassed(\"Application Succesfully Moved to \" + stageValue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Opportunity Current Stage is \" + stageValue + \" Stage and it's not in \"\n\t\t\t\t\t\t\t+ Stage_value + \" Stage\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCurrentStageOfOpportunity`, is used to verify that an opportunity is currently in a specific stage. The method takes a string parameter `Stage_value` which represents the expected stage value.\n\nHere's what the method does:\n\n1. It refreshes the current page and waits for it to load.\n2. It waits for 8 seconds.\n3. It then waits up to 30 seconds for an element with the id `currentStage_Opp` to be displayed.\n4. If the element is displayed, it retrieves the text value of that element (which should match the expected stage value).\n5. It scrolls to the element and takes a manual screenshot.\n6. If the retrieved stage value matches the expected `Stage_value`, it marks the test step as passed; otherwise, it fails the test step with an error message indicating the mismatched stage values.\n\nThe method also includes exception handling to catch any errors that may occur during execution and report them as test failures.",
        "input": [
            "String Stage_value"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "getCardStatus",
        "code": "public void getCardStatus(String Label) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + Label\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \" is displayed in \" + Label);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(Label + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCardStatus\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getCardStatus`, takes a string parameter `Label` and performs the following actions:\n\n1. It constructs an XPath expression to locate an HTML element with the specified label.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed within a certain time limit (8 seconds), it scrolls to the element using the `scrollToWebElement` method.\n4. It then checks if the element's text is displayed by calling `getText(Element)`. If it is, it takes a manual screenshot with the label and the text of the element as the file name.\n5. If the element is not displayed within the time limit, or if an exception occurs during any of these steps, it takes a manual screenshot with the label and the error message.\n\nThe method also includes try-catch block to handle any exceptions that might occur during its execution. If an exception occurs, it calls the `testStepFailed` method to report the failure.",
        "input": [
            "String Label"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnRecordInOppExtention",
        "code": "public void clickOnRecordInOppExtention(String customerName) {\n\t\ttry {\n\t\t\tString document = customerName + \"#xpath=//span[text()='Required Documents Name']/following::span[text()='\"\n\t\t\t\t\t+ customerName + \"']\";\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\tclickOn(document);\n\t\t\t\tmanualScreenshot(\"Successfully clicked \" + customerName + \" in Required Documents\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + customerName + \" in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to find waiver Reason :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRecordInOppExtention`, is used to simulate a click on a record that matches the provided `customerName` in an extension of Opp. It uses XPath to locate the element and performs the following actions:\n\n1. Checks if the element is displayed within 4 seconds using the `isElementDisplayed` method.\n2. If the element is displayed, it highlights the element using the `highLighterMethodWithForLoop` method and then simulates a click on the element using the `clickOn` method.\n3. Takes a manual screenshot with the message \"Successfully clicked [customerName] in Required Documents\".\n4. If the element is not displayed or any other exception occurs, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed if an exception is thrown.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnAccountLink",
        "code": "public void clickOnAccountLink(String customerName) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString link = customerName + \"#xpath=(//div[contains(@class,'active')]//a[@title='\" + customerName\n\t\t\t\t\t+ \"'])[1]\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tscrollToElement(link);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(8);\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(8);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnAccountLink`, simulates a user clicking on an account link for a specific customer. It takes the customer's name as a parameter.\n\nThe method first refreshes the page and waits for it to load. Then, it constructs a XPath expression based on the customer's name and locates the corresponding link using that expression. If the link is displayed within 5 seconds, it scrolls to the link, clicks on it, waits for 2 seconds, and then refreshes the page again.\n\nIf the link is not found or displayed, the method marks the test step as failed with a message indicating that the link was not present. In case of any other exceptions, it also marks the test step as failed with the exception's message.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnLinkAfterGlobalSearch",
        "code": "public void clickOnLinkAfterGlobalSearch(String result, String customerName) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString link = customerName + \"#xpath=(//div[contains(@class,'active')]//a[@title='\"+result + customerName\n\t\t\t\t\t+ \"'])[1]\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tscrollToElement(link);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(8);\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(8);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkAfterGlobalSearch`, attempts to click on a specific link after performing a global search. The method takes two parameters: `result` and `customerName`. \n\nHere's what the method does:\n\n1. It refreshes the current page.\n2. It waits for the page to load.\n3. It constructs an XPath string based on the `customerName` and `result`, which is used to locate the link.\n4. It waits for the link to be present on the page (up to 30 seconds).\n5. If the link is displayed, it scrolls to the link, then clicks on it after a short delay.\n6. After clicking the link, it refreshes the page again and waits for some time before proceeding.\n7. If the link is not displayed, it marks the test step as failed.\n\nThe method also includes error handling: if any exception occurs during the execution of the method, it will mark the test step as failed with a message describing the failure.",
        "input": [
            "String result",
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnAccountLinkWithContains",
        "code": "public void clickOnAccountLinkWithContains(String customerName) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString link = customerName + \"#xpath=(//div[contains(@class,'active')]//a[contains(@title,'\" + customerName\n\t\t\t\t\t+ \"')])[1]\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tscrollToElement(link);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(8);\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(8);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnAccountLinkWithContains`, attempts to click on an account link with a specific customer name. It performs the following steps:\n\n1. Refreshes the page.\n2. Waits for the page to load.\n3. Creates an XPath expression to locate the link based on the provided customer name and class \"active\".\n4. Waits for the element to be displayed within 30 seconds.\n5. If the element is displayed, it:\n\t* Scrolls to the element.\n\t* Scrolls to the element again (perhaps to ensure it's fully visible).\n\t* Waits for 2 seconds.\n\t* Clicks on the special element (the account link).\n\t* Waits for 8 seconds.\n\t* Refreshes the page and waits for another 8 seconds.\n6. If the element is not displayed, it marks the test step as failed with a message indicating that the link was not present.\n\nIf any exception occurs during these steps, it catches the exception and marks the test step as failed with a message describing the failure.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnSaveInCustomer",
        "code": "public void clickOnSaveInCustomer() {\n\t\ttry {\n\t\t\twaitTime(7);\n\t\t\tString button = \"#xpath=//button[text()='Save']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 9)) {\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\twaitTime(6);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveInCustomer()`, simulates a user clicking on the \"Save\" button in a customer application. It uses Selenium WebDriver to perform the following actions:\n\n1. Waits for 7 seconds before attempting to click the button.\n2. Uses an XPath expression to locate the \"Save\" button.\n3. Waits up to 10 seconds for the element to be displayed.\n4. Checks if the element is displayed after 9 seconds of waiting.\n5. If the element is displayed, it uses Selenium's `Actions` class to move the mouse cursor to the element and then click on it.\n6. Takes a manual screenshot (optional).\n7. Waits for 6 seconds before continuing.\n\nIf any of these steps fail or if the \"Save\" button is not present, the method will report a test step failure with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyTaskRedesignLink",
        "code": "public void verifyTaskRedesignLink() {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString link = \"#xpath=(//span[text()='B2BPOS_QC_Hold']//..//..//..//th//a)[1]\";\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\ttestStepInfo(\n\t\t\t\t\t\t\"##### Verify the Description on task redesign where Campaign name is B2BPOS_QC_Hold & Description should be updated as \u00c3\u00a2\u00e2\u201a\u00ac\u00c5\u201cLoan applied by *customer name* with ID *Opportunity Name* has been put on Hold. Please resolve this Issue at the earliest\u00c3\u00a2\u00e2\u201a\u00ac\u00ef\u00bf\u00bd #####\");\n\t\t\t\tString campaignname = gettextValueFromAdminLogin(\"Campaign Name\");\n\t\t\t\tverifyTwoValues(campaignname, \"B2BPOS_QC_Hold\");\n\t\t\t\tgettextValueFromAdminLogin(\"ValueFirst Description\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"B2BPOS_QC_Hold Task Redesigns Link is not created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTaskRedesignLink. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTaskRedesignLink()`, verifies the task redesign link on a webpage. It does the following:\n\n1. Waits for 2 seconds.\n2. Checks if an element with the specified XPath (`#xpath=(//span[text()='B2BPOS_QC_Hold']//..//..//..//th//a)[1]`) is present on the page.\n3. If the element is present, it scrolls to that element, highlights it, clicks on a special element (not specified), and takes a manual screenshot.\n4. It then verifies that the campaign name is \"B2BPOS_QC_Hold\" by comparing it with the value obtained from an admin login page.\n5. If the element is not present, it takes a manual screenshot with the message \"B2BPOS_QC_Hold Task Redesigns Link is not created\".\n\nThe method also catches any exceptions that may occur during its execution and reports them as test step failures if they do.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verifyIRIsCreatedorNot",
        "code": "public void verifyIRIsCreatedorNot(String label) {\n\t\ttry {\n\t\t\tString field = \"#xpath=(//span[text()='\" + label + \"']/ancestor::td/preceding-sibling::td//a)[last()] | (//slot[text()='\" + label + \"']/ancestor::td/preceding-sibling::td//a)[last()]\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString text = getAttributeValue(field,\"title\");\n\t\t\t\tmanualScreenshot(text + \" IR record is created with Record Type \" + label);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"IR record is not created with Record Type \" + label);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyIRIsCreatedorNot`, checks if an IR record has been created with a specific Record Type (`label`) and takes a screenshot if it is. \n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided label.\n2. It then uses this XPath expression to check if the element is displayed within 15 seconds. \n3. If the element is displayed, it highlights the element using `highLighterMethod` and gets the title attribute of the element.\n4. It takes a manual screenshot with the title as the filename, indicating that an IR record has been created with the specified Record Type.\n5. If the element is not displayed (i.e., the IR record is not created), it marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it also marks the test step as failed and logs the error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "verify3in1RecordCreatedorNot",
        "code": "public void verify3in1RecordCreatedorNot() {\n\t\ttry {\n\t\t\t//String field = \"#xpath=//span[text()='\"+label+\"']/ancestor::td[@data-label='Type']/preceding-sibling::th[@data-label='3in1 Interface Name']//lst-output-lookup//slot//span\";\n\t\t\tString field = \"3in1 Interface Name #xpath=(//span[text()='3in1 Interface Name']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[1]\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString text = getText(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t\tmanualScreenshot(\"Click On : \"+text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"3in1 Interfaces record is not created with Record Type 3in1 Interface Name\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verify3in1RecordCreatedorNot`, is used to verify if a specific record has been created with the type \"3in1 Interface Name\". It uses XPath expressions to locate the element and then performs actions such as highlighting the element, getting its text, clicking on it, and taking a manual screenshot. If the record is not found after a certain timeout (15 seconds), the test step fails. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnOfferLinkWithOfferType",
        "code": "public void clickOnOfferLinkWithOfferType(String label) {\n\t\ttry { \n\t\t\tString field = label+\" Offer #xpath=//span[text()='\"+label+\"']/ancestor::td[@data-label='Offer type']/preceding-sibling::th[@data-label='Offer Name']//lst-output-lookup//slot//span\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString text = getText(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Offer record is not available with Offer Type \"+label);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnOfferLinkWithOfferType`, appears to be a part of an automated testing framework. The method is designed to click on a specific link related to an offer type.\n\nHere's a brief summary of what the method does:\n\n1. It takes a `String` parameter `label` which represents the offer type.\n2. It constructs a unique `field` string by combining the `label` with an XPath expression that navigates through the HTML elements to find the specific link related to the offer type.\n3. It checks if the element is displayed within 15 seconds using the `isElementDisplayed` method. If it is, then:\n\t* It highlights the element using the `highLighterMethod`.\n\t* It retrieves the text of the element using the `getText` method.\n\t* It clicks on the special element (likely a link) using the `clickOnSpecialElement` method.\n4. If the element is not displayed within 15 seconds, it fails the test step with an error message indicating that the offer record is not available for the given offer type.\n5. In case of any exception during the execution of the method, it catches the exception and fails the test step with an error message including the exception's message.\n\nIn summary, this method is designed to interact with a web application by clicking on a specific link related to an offer type, and verify that the operation succeeds or fails accordingly.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Customers",
        "function_name": "clickOnIRRecrd",
        "code": "public void clickOnIRRecrd(String label) {\n\t\ttry {\n\t\t\tString field = label +\"#xpath=(//span[text()='\" + label + \"']/ancestor::td/preceding-sibling::td//a)[last()] | (//slot[text()='\" + label + \"']/ancestor::td/preceding-sibling::td//a)[last()]\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString text = getAttributeValue(field,\"title\");\n\t\t\t\tmanualScreenshot(text + \" IR record is created with Record Type \" + label);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"IR record is not created with Record Type \" + label);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\n\t}\n\n}",
        "description": "Here is a brief description of the Java method:\n\nThis method, `clickOnIRRecrd`, simulates clicking on an IR record with a specified label. It uses XPath to locate the element and then checks if it's displayed within a certain time limit (15 seconds). If the element is found and displayed, it highlights the element, gets its title attribute value, takes a manual screenshot, and clicks on the element. If the element is not found or displayed, it marks the test step as failed. The method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnApps",
        "code": "public void clickOnApps() {\n\t\ttry {\n\t\t\tString apps = \"Apps Waffle icon#xpath=//div[contains(@class,'waffle')]/parent::button\";\n\t\t\twaitForElement(apps, 5);\n\t\t\tif (isElementDisplayed(apps, 5)) {\n\t\t\t\tclickOn(apps);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Apps Waffle icon is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnApps. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnApps()`, attempts to click on the \"Apps\" Waffle icon on a web page. It uses an XPath expression to locate the element and then waits for it to be displayed before clicking on it. If the element is not present after 5 seconds or if there's an exception during the process, the test step fails.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "getUserId",
        "code": "public String getUserId() {\n\t\tString User_Id = null;\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"User/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] userId = splited_Url[size - 1].split(\"/\");\n\t\t\t\t;\n\t\t\t\tUser_Id = userId[0];\n\t\t\t\ttestStepPassed(\"Successfully got User Id : \" + User_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get User id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn User_Id;\n\t}",
        "description": "This Java method, `getUserId()`, attempts to extract a user ID from the current URL of a web driver. It splits the URL into parts, extracts the last part that starts with \"User/\", and then further splits this part to get the user ID. If the extraction is successful, it logs a test step as passed and returns the user ID. If not, it logs a test step as failed.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInFieldAdminSales",
        "code": "public void enterValueInFieldAdminSales(String labelName, String value) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/input\";\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tele.click();\n\t\t\t\t\tele.clear();\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please Provide the value for\" + labelName);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldAdminSales`, is used to input a value into an admin sales field on a web page. The method takes two parameters: `labelName` (the label of the field) and `value` (the value to be entered).\n\nThe method first waits for 5 seconds using the `waitTime(5)` method, then checks if the provided value is not empty. If it's not empty, the method attempts to find the corresponding web element based on the label name, scroll to the element if necessary, clear any existing text in the field, enter the new value, and press Enter.\n\nIf the field is not present or the value is empty, the method reports a test step failure. If an exception occurs during the process, the method also reports a test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnSaveButtonAdminPopup",
        "code": "public void clickOnSaveButtonAdminPopup(String label) {\n\t\ttry {\n\t\t\tString button = label + \"#xpath=//button[text()='\" + label + \"']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(button, 4);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\tmanualScreenshot(\"Click On : \" + label);\n\t\t\t\t// if (isElementDisplayed(button, 2)) {\n\t\t\t\t// action.moveToElement(element).click().perform();\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \"  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonAdminPopup`, is used to simulate a mouse click on a button with the specified label within an admin popup page. \n\nThe method attempts to:\n\n1. Construct a locator string for the button using the provided label and XPath syntax.\n2. Wait for the page to load and then wait for the button to be displayed.\n3. Scroll to the button if it's not already visible.\n4. Simulate a mouse click on the button using the `Actions` class.\n5. Take a manual screenshot with the label as the filename.\n\nIf any of these steps fail, the method will report an error and mark the test step as failed.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectDealerUAT",
        "code": "public String selectDealerUAT(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']//ancestor::div//div//button[contains(@aria-label,'Select Dealer')]\";\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerName + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 4)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDealer \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerUAT`, is used to select a dealer from a dropdown menu on a webpage. It takes a string parameter `dealerName` which represents the name of the dealer to be selected.\n\nThe method first checks if the `dealerName` is not empty. If it's not empty, it then checks if the `dealerName` contains a specific character (`#`). If it does, it replaces this character with a space. It then waits for a certain amount of time (2 seconds) before attempting to select the dealer.\n\nThe method uses various WebDriver commands such as `waitForElementUntilVisible`, `isElementDisplayed`, `scrollToWebElement`, and `clickOn` to interact with the webpage. If the dealer is successfully selected, it returns an empty string (`selectedOption`). If there's an error or the dealer is not present in the dropdown, it logs a test step failure message.\n\nIf the `dealerName` is empty, the method logs a test step info message asking the user to provide some value for this field.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "globalSalesSearchInClassic",
        "code": "public void globalSalesSearchInClassic(String searchValue) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, searchValue);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOn(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `globalSalesSearchInClassic`, performs a search operation on a classic-style global sales page. The method takes a single string parameter `searchValue` which is the value to be searched.\n\nThe method first waits for the page to load and then checks if the \"Search\" button is displayed. If it is, the method clicks on the button. Then, it types in the search value into the search field. After that, it waits for 3 seconds and then checks if the \"Show more results\" option is available. If it is, the method clicks on it.\n\nIf at any point during this process an expected element is not displayed or the method encounters an exception, it fails the test step with a corresponding error message.",
        "input": [
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterUserValueInGlobalSearchField",
        "code": "public void enterUserValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString ClickonUser = \"Click on User#xpath=//span[contains(text(),'User')]/parent::lightning-formatted-rich-text\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(ClickonUser, 9)) {\n\t\t\t\t\t\tclickOn(ClickonUser);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"User is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterUserValueInGlobalSearchField`, enters a given value into the global search field on a webpage and then clicks on the \"User\" option that appears in the search results.\n\nHere's a breakdown of what the method does:\n\n1. It waits for the page to load.\n2. It checks if the \"Search button\" is displayed within 25 seconds, and if so, clicks on it.\n3. If the \"Search field\" is displayed (after 9 seconds), it types in the given value into that field.\n4. After a 3-second wait, it checks if the \"Click on User\" element (which contains the text \"User\") is displayed. If it is, it clicks on it.\n5. If any of these steps fail (e.g., the search button or field isn't present), it reports a test step failure with an appropriate error message.\n\nThe method also catches any exceptions that may occur during its execution and reports a test step failure if one occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnheadertab",
        "code": "public void clickOnheadertab(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//a[text()='\" + label + \"']\";\n\n\t\t\tif (isElementDisplayed(field, 4)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tif (isElementDisplayed(field))\n\t\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" tab is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Tab. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnheadertab`, simulates a click on a header tab with the given label. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression based on the provided label.\n2. Checks if the element is displayed using a timeout of 4 seconds. If it's not displayed, the method fails the test step.\n3. Scrolls to the element if it's not already visible.\n4. Clicks on the special element (likely a link or button) associated with the header tab.\n\nIf any exception occurs during these steps, the method catches and reports the error as a failed test step.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "SearchValueInGlobalSearchField",
        "code": "public void SearchValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOn(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SearchValueInGlobalSearchField`, searches for a given value in a global search field on a webpage. It uses Selenium WebDriver to interact with the webpage and perform the following actions:\n\n1. Waits for the page to load.\n2. Searches for specific elements (buttons, fields, and options) using XPath locators.\n3. Clicks on the \"Search\" button if it's present.\n4. Types the given value into the search field.\n5. Waits for a short period of time.\n6. If the \"Show more results\" option is present, clicks on it.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "getAddonCardCount",
        "code": "public int getAddonCardCount() {\n\t\tSystem.out.println();\n\t\tint DECCount = 0;\n\t\tString activationStatus = \"\";\n\t\tString DECLinkValue = \"\";\n\t\tint AddonCardCount = 0;\n\t\ttry {\n\t\t\tString rowCount = \"DEC Check Box#xpath=//span[@class='countSortedByFilteredBy']\";\n\t\t\tString addonCheck = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()= 'Is Add On Card']/../following-sibling::div/span//input\";\n\t\t\twaitForElement(rowCount, 5);\n\t\t\tif (isElementDisplayed(rowCount, 5)) {\n\t\t\t\tString rowcount = getText(rowCount);\n\t\t\t\trowcount = rowcount.replaceAll(\"[^0-9]\", \"\");\n\t\t\t\tDECCount = Integer.parseInt(rowcount);\n\t\t\t\tif (DECCount > 0) {\n\t\t\t\t\tfor (int iterate = 1; iterate <= DECCount; iterate++) {\n\t\t\t\t\t\tString DECLink = \"#xpath=(//th//span//a)[\" + iterate + \"]\";\n\t\t\t\t\t\twaitForElement(DECLink, 5);\n\t\t\t\t\t\tif (isElementDisplayed(DECLink, 5)) {\n\t\t\t\t\t\t\tDECLinkValue = getText(DECLink);\n\t\t\t\t\t\t\tclickOnSpecialElement(DECLink);\n\t\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\t\tactivationStatus = gettextValueFromAdminLogin(\"Activation Status\");\n\t\t\t\t\t\t\tmanualScreenshot(activationStatus + \" Status is displayed in \" + DECLinkValue);\n\t\t\t\t\t\t\twaitForElement(addonCheck, 5);\n\t\t\t\t\t\t\tif (isCheckBoxSelected(addonCheck)) {\n\t\t\t\t\t\t\t\tscrollToWebElement(addonCheck);\n\t\t\t\t\t\t\t\thighLighterMethod(addonCheck);\n\t\t\t\t\t\t\t\tmanualScreenshot(\"Is Add on Card Check box is successfully checked in \" + DECLinkValue);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscrollToWebElement(addonCheck);\n\t\t\t\t\t\t\t\thighLighterMethod(addonCheck);\n\t\t\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\t\t\"Is Add on Card Check box is successfully unchecked in \" + DECLinkValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (isCheckBoxSelected(addonCheck) && !activationStatus.equalsIgnoreCase(\"To be Blocked\")) {\n\t\t\t\t\t\t\t\tAddonCardCount = AddonCardCount + 1;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepInfo(AddonCardCount + \" Addon is added for this Customer\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(DECCount + \" is Zero,Kindly add addon Cards\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Please add Health/EMI addon Cards\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getAddonCard\" + e.getMessage());\n\t\t}\n\t\treturn AddonCardCount;\n\t}",
        "description": "This is a Java method named `getAddonCardCount` that appears to be part of an automation test script. The method's purpose is to count the number of add-on cards added for a customer.\n\nHere's a brief summary of what the method does:\n\n1. It prints a blank line to the console using `System.out.println()`.\n2. It initializes several variables: `DECCount`, `activationStatus`, `DECLinkValue`, and `AddonCardCount` (all set to 0).\n3. The method attempts to perform the following steps:\n\t* Waits for an element with the XPath `//span[@class='countSortedByFilteredBy']` to be displayed (up to 5 seconds).\n\t* If the element is displayed, extracts the text content and converts it to an integer value (`DECCount`).\n\t* If `DECCount` is greater than 0, loops through each add-on card:\n\t\t+ Waits for an element with the XPath `(//th//span//a)[iterate]` to be displayed (up to 5 seconds).\n\t\t+ If the element is displayed, extracts the text content and stores it in `DECLinkValue`.\n\t\t+ Clicks on the add-on card link.\n\t\t+ Waits for an activation status update and takes a manual screenshot.\n\t\t+ Checks if the \"Is Add On Card\" checkbox is selected (or not).\n\t\t+ If the checkbox is selected and the activation status is not \"To be Blocked\", increments `AddonCardCount`.\n4. The method returns the final value of `AddonCardCount`.\n\nThe method also includes some error handling using a `try`-`catch` block to catch any exceptions that might occur during execution. If an exception occurs, it sets a test step failed message and returns 0.\n\nOverall, this method appears to be designed to automate the process of adding add-on cards for a customer in a web application, with some basic error handling and reporting features.",
        "input": [],
        "output": "int"
    },
    {
        "class_name": "Home",
        "function_name": "gettextValueFromAdminLogin",
        "code": "public String gettextValueFromAdminLogin(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 9)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\ttestStepInfo(LabelName + \"Value is not populated\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method is used to retrieve the value of a specific element on an admin login page. The method takes a `String` parameter `LabelName`, which represents the label name of the element for which the value needs to be retrieved.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It initializes an empty string variable `text`.\n2. It attempts to retrieve the element using an XPath expression, which is constructed by concatenating strings.\n3. If the element is displayed within a certain time limit (10 seconds), it proceeds to:\n\t* Scroll to the element.\n\t* Highlight the element using a highlighting method.\n\t* Get the text value of the element.\n\t* Take a manual screenshot with the label name and the retrieved text value.\n\t* Check if the text value is empty. If it is, the method logs a test step failure message.\n4. If the element is not displayed within the time limit (9 seconds), it takes a manual screenshot with the label name and a message indicating that the element is not displayed.\n5. In case of any exception during the process, the method logs a test step failed message.\n6. Finally, the method returns the retrieved text value.\n\nThe method seems to be part of an automation test suite for an admin login page, where it's used to retrieve and verify the values of specific elements on the page.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@title='Search']//input\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchField`, enters a given value into a search field on a web page. It uses an XPath locator to find the search input element and then types the provided value into it. The method also includes error handling to catch any exceptions that may occur during execution. If the search field is not present or if there's an issue entering the value, the test step fails with an appropriate message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectItemFromAppsMenu",
        "code": "public void selectItemFromAppsMenu(String itemName) {\n\t\ttry {\n\t\t\tenterValueInSearchField(itemName);\n\t\t\tString item = itemName + \" #xpath=//li[contains(@class,'oneAppLauncherItem')]//a[@title='\" + itemName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(item, 10);\n\t\t\tif (isElementDisplayed(item, 5)) {\n\t\t\t\tclickOn(item);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(itemName + \" item is not available in the Apps Menu\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectItemFromApps. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`selectItemFromAppsMenu(String itemName)` - This method selects an item from the Apps Menu by searching for it and clicking on it if available. It takes a `String` parameter `itemName` which is the name of the item to be selected. The method uses various methods like `enterValueInSearchField`, `waitForElement`, and `isElementDisplayed` to locate and interact with the element in the UI. If the item is not found or an exception occurs, it reports a failure by calling `testStepFailed`.",
        "input": [
            "String itemName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "searchInLightning",
        "code": "public void searchInLightning(String value) {\n\t\ttry {\n\t\t\tString search = \"Lightning Search #xpath=//input[contains(@title,'Search')]\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\tString list = \"Search list #xpath=//span[text()='\\\"\" + value + \"\\\" in Customers']//parent::a\";\n\t\t\t\tif (isElementDisplayed(list, 5)) {\n\t\t\t\t\tclickOn(list);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"List is not available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lightning Search field is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchInLightning. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchInLightning`, searches for a given value (`value`) in the Lightning Search field of an application. It uses Selenium WebDriver to perform the following actions:\n\n1. Waits up to 10 seconds for the Lightning Search field to be displayed.\n2. Checks if the Lightning Search field is actually displayed within 5 seconds. If not, it fails the test step.\n3. Types in the search value into the Lightning Search field.\n4. Searches for a list element that contains the typed-in value and checks if it's displayed within 5 seconds. If found, it clicks on the list element.\n5. If the list element is not found or the Lightning Search field is not present, it fails the test step.\n\nThe method catches any exceptions that may occur during execution and reports a failure message with the exception details.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLink",
        "code": "public String clickOnLink(String labelValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString finOneDetailsTableRow = \"FinnOne Details Table Row #xpath=//div[@class='uiVirtualDataTable indicator']/following-sibling::table//tbody//tr/*/span/a\";\n\t\t\tList<WebElement> tableRows = findWebElements(finOneDetailsTableRow);\n\t\t\tfor (int i = 0; i < tableRows.size(); i++) {\n\t\t\t\tString tableRowLabel = tableRows.get(i).getText();\n\t\t\t\tif (tableRowLabel.equals(labelValue)) {\n\t\t\t\t\tvalue = tableRows.get(i - 1).getText();\n\t\t\t\t\ttableRows.get(i - 1).click();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnLink`, takes a string parameter `labelValue` and attempts to find a table row with that label value. It then clicks on the link associated with the previous table row (assuming the link is in the same row). The method returns the text value of the clicked link.\n\nThe method uses Selenium WebDriver's `findWebElements` method to locate the table rows, and then iterates through the list of elements to find the one with a label that matches the input `labelValue`. Once found, it retrieves the text value of the previous row (assuming the link is in the same row) and clicks on it. If an exception occurs during this process, the method logs an error message using `testStepFailed` and returns null.",
        "input": [
            "String labelValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "globalCustomerSearch",
        "code": "public String globalCustomerSearch(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue\n\t\t\t\t\t+ \"#xpath=//div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='Search Customers']\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 3)) {\n\t\t\t\tWebElement element = findWebElement(search);\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in globalSearch \" + e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `globalCustomerSearch`, performs a search for customers using the global search functionality. It takes a `searchValue` as input and attempts to find an element matching the XPath provided. If the element is displayed within a certain time frame (10 seconds), it types in the `searchValue` and presses Enter to initiate the search. If the element is not displayed, or if any exceptions occur during the process, the method will fail the test step with an error message. The method returns the original `searchValue`.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "globalSalesSearch",
        "code": "public void globalSalesSearch(String searchValue) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, searchValue);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOn(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `globalSalesSearch`, performs a search for sales data on a global scale using an XPath locator. It takes a `searchValue` as input and attempts to:\n\n1. Wait for the page to load\n2. Find and click the \"Search\" button\n3. Enter the `searchValue` into the search field\n4. Click the \"Show more results\" option (if present)\n\nThe method uses various helper methods like `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, `clickOn`, `typeIn`, and `waitTime` to interact with the UI elements. It also includes some basic error handling using a `try-catch` block.\n\nIf any of these steps fail, the method will report a test step failure with an appropriate message.",
        "input": [
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "searchViewOption",
        "code": "public void searchViewOption(String requireddocumentlabel) {\n\t\ttry {\n\t\t\tString Label = \"#xpath=(//span[text()='\" + requireddocumentlabel + \"']/parent::a)[1]\";\n\t\t\tString documents = \"#xpath=(//th//span/a)[1]\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tif (isElementDisplayed(Label, 5)) {\n\t\t\t\tscrollToWebElement(Label);\n\t\t\t\tclickOnSpecialElement(Label);\n\t\t\t\tmanualScreenshot(\"Click on\" + requireddocumentlabel);\n\t\t\t\twaitForElement(documents, 10);\n\t\t\t\tif (isElementDisplayed(documents, 7)) {\n\t\t\t\t\tclickOnSpecialElement(documents);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"No Documents is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(requireddocumentlabel + \"link is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchViewOption\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchViewOption`, searches for a specific document label on a webpage and performs the following actions:\n\n1. Waits for an element with the specified label to be displayed.\n2. Scrolls to the element and clicks it.\n3. Takes a manual screenshot of the action.\n4. Waits for another element (likely a list of documents) to be displayed.\n5. If the element is displayed, clicks on it.\n\nIf the initial element is not displayed within a certain time limit, or if any exceptions occur during the process, the method will fail the test step and report an error message.",
        "input": [
            "String requireddocumentlabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "globalSearch",
        "code": "public void globalSearch(String SearchValue) {\n\t\ttry {\n\t\t\tString search = \"#xpath=//div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='Search Banking Details']\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 3)) {\n\t\t\t\tWebElement element = findWebElement(search);\n\t\t\t\ttypeIn(search, SearchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Sales Search is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in globalSearch \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `globalSearch`, performs a search operation on a web application. It takes a `String` parameter `SearchValue` which is the value to be searched.\n\nHere's what it does:\n\n1. It tries to locate an XPath element with the specified path (`search`) and waits for up to 10 seconds.\n2. If the element is displayed within 3 seconds, it types in the search value into the input field using `typeIn` method.\n3. Then, it simulates pressing the Enter key on the keyboard.\n4. If the element is not displayed or any exception occurs during this process, it fails the test step and reports an error message.\n\nThe method uses various WebDriver methods like `waitForElement`, `isElementDisplayed`, `findWebElement`, and `typeIn` to interact with the web page.",
        "input": [
            "String SearchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForElement(profileLink, 10);\n\t\t\twaitForElement(profileLink, 3);\n\t\t\tif (isElementDisplayed(profileLink, 3)) {\n\t\t\t\tclickOn(profileLink);\n\t\t\t\tif (isElementDisplayed(btn_logout, 3)) {\n\t\t\t\t\tclickOn(btn_logout);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, named `logout()`, is used to log out of an application. It attempts to perform the following steps:\n\n1. Refreshes the current page.\n2. Waits for a certain amount of time (10 seconds) until the profile link is displayed.\n3. Waits again for another 3 seconds to ensure the profile link is still present.\n4. If the profile link is displayed, it clicks on it.\n5. If the logout button (`btn_logout`) is displayed after clicking the profile link, it also clicks on that button.\n6. If all these steps are successful, it reports a test step as passed with the message \"Successfully logged out of the application\".\n7. If any of these steps fail (e.g., the profile link or logout button is not present), it reports a test step as failed with an error message.\n\nThe method also catches any exceptions that may occur during execution and logs them to a log file for debugging purposes.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t;\n\t\t\t\tString dropdownList = value + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//button/following::span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollbycordinates(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, is used to select a specific value from a dropdown menu within an IMPs popup. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. It waits for the page to load.\n2. It constructs the XPath for the dropdown element using the provided dropdown name.\n3. It waits for the dropdown element to appear on the screen (with a timeout of 10 seconds).\n4. If the dropdown is displayed, it scrolls to the dropdown and clicks on it.\n5. It then constructs the XPath for the specific value within the dropdown list.\n6. It checks if the desired value is present in the dropdown list (with a timeout of 4 seconds). If it is:\n\t* Scrolls to the value and clicks on it.\n\t* Logs a test step as passed, indicating successful selection of the value.\n7. If the value is not present or the dropdown is not displayed, it logs a test step as failed with an appropriate error message.\n\nThe method also catches any exceptions that may occur during execution and logs a test step failure with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnSaveButtonInMasterPage",
        "code": "public void clickOnSaveButtonInMasterPage(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\ttestStepPassed(\"Click On : \" + buttonLabel);\n\t\t\t\t// if (isElementDisplayed(button, 2)) {\n\t\t\t\t// action.moveToElement(element).click().perform();\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInMasterPage`, is used to simulate a mouse click on a button with the specified label in the master page of an application. The method takes a string parameter `buttonLabel` which represents the text content of the button to be clicked.\n\nHere's what the method does:\n\n1. It constructs a Selenium WebDriver XPath expression by concatenating the provided `buttonLabel` with the XPath syntax.\n2. It waits for the element matching the constructed XPath expression to be present on the page (up to 10 seconds).\n3. If the element is displayed, it scrolls to the element and then performs a mouse click action using the `Actions` class.\n4. It logs a test step as passed if the button is clicked successfully.\n5. If the element is not displayed within the specified time (5 seconds), it logs a test step failure.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the exception message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInSearchFieldInMaster1",
        "code": "public void enterValueInSearchFieldInMaster1(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=(//a[@role='option']//parent::li)[3]\";\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(searchValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchFieldInMaster1`, enters a given value into a search field in Master 1 and then selects the third option from the dropdown list. Here's a step-by-step breakdown:\n\n1. It waits for an element with the specified XPath to be displayed (10 seconds timeout).\n2. If the element is displayed, it types the given `value` into the search field using the `typeIn` method.\n3. It waits for the page to load completely.\n4. It constructs a new XPath string by appending the given value to the existing XPath and adds \"(//a[@role='option']//parent::li)[3]\" which selects the third option from the dropdown list.\n5. It waits for 2 seconds before clicking on the selected option using the `clickOn` method.\n6. If any of these steps fail, it reports a test step failure with an appropriate error message.\n\nThe method also catches any exceptions that may occur during execution and reports a test step failure with the exception message if one occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "searchValueInLightning",
        "code": "public void searchValueInLightning(String value, String text) {\n\t\ttry {\n\t\t\tString search = \"Lightning Search #xpath=//input[contains(@title,'Search')]\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\tString list = \"Search list #xpath=//span[text()='\\\"\" + value + \"\\\" in \" + text + \"']//parent::a\";\n\t\t\t\twaitForElement(list, 2);\n\t\t\t\tif (isElementDisplayed(list, 5)) {\n\t\t\t\t\tclickOn(list);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"List is not available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lightning Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchInLightning. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `searchValueInLightning`, searches for a specific value within a text in Salesforce Lightning Search. It takes two parameters: the value to be searched and the text to be searched within.\n\nHere's what it does:\n\n1. Waits for the Lightning Search input field to appear.\n2. If the search field is present, types in the provided `value` into it.\n3. Searches for a list containing the typed `value` within the provided `text`.\n4. Waits for the searched list to appear.\n5. If the list is found and displayed, clicks on it.\n\nIf any of these steps fail (e.g., the search field or list is not present), the method will report a test step failure with an error message.",
        "input": [
            "String value",
            "String text"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "searchInSalesForce",
        "code": "public void searchInSalesForce(String SearchValue) {\n\t\ttry {\n\t\t\tString SearchElement = \"#xpath=//input[@title='Search...']\";\n\t\t\twaitForElement(SearchElement, 10);\n\t\t\tif (isElementDisplayed(SearchElement, 3)) {\n\t\t\t\tWebElement element = findWebElement(SearchElement);\n\t\t\t\ttypeIn(SearchElement, SearchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(SearchElement + \"is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in SearchInSalesForce.Exception:\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchInSalesForce`, searches for a specific value in Salesforce using Selenium WebDriver. It takes a `String` parameter `SearchValue` as input and performs the following actions:\n\n1. Waits for an element with the specified XPath (`#xpath=//input[@title='Search...']`) to be present on the page.\n2. Checks if the element is displayed within a certain time frame (3 seconds).\n3. If the element is displayed, types in the `SearchValue` and presses Enter.\n4. If any exceptions occur during the process, it logs a test step failure with an error message.\n\nThe method uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `findWebElement`, and `typeIn` to interact with the Salesforce search field.",
        "input": [
            "String SearchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "getValuefromSearchResults",
        "code": "public void getValuefromSearchResults(String SearchValue) {\n\t\ttry {\n\t\t\tString SearchElement = \"#xpath=//table[@class='list']/tbody/tr/td/a[text()='\" + SearchValue + \"']\";\n\t\t\twaitForElement(SearchElement, 10);\n\t\t\tif (isElementDisplayed(SearchElement, 3)) {\n\t\t\t\tclickOnSpecialElement(SearchElement);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(SearchValue + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getValuefromSearchResults.Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getValuefromSearchResults`, is used to retrieve a value from search results. It takes a `String` parameter `SearchValue` which represents the search query.\n\nHere's what it does:\n\n1. It constructs an XPath expression using the `SearchValue`. The XPath expression is used to locate an element in the DOM.\n2. It waits for the element specified by the XPath expression to be present on the page, with a timeout of 10 seconds.\n3. If the element is displayed within 3 seconds, it clicks on that element.\n4. If the element is not displayed, it logs a test step failure indicating that the `SearchValue` is not present in the search results.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the error message.",
        "input": [
            "String SearchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnFinnoneInterfaceLink",
        "code": "public String clickOnFinnoneInterfaceLink(String labelValue) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString finOneDetailsTableRow = \"FinnOne Details Table Row #xpath=//div[@class='uiVirtualDataTable indicator']//following::span[contains(text(), '\"\n\t\t\t\t\t+ labelValue + \"')]//following::tbody//span//a[@data-refid='recordId']\";\n\t\t\tList<WebElement> tableRows = findWebElements(finOneDetailsTableRow);\n\t\t\tfor (int i = 0; i < tableRows.size(); i++) {\n\t\t\t\tvalue = tableRows.get(i - 1).getText();\n\t\t\t\ttableRows.get(i - 1).click();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFinnoneInterfaceLink \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `clickOnFinnoneInterfaceLink`, is used to simulate a click on an interface link with the given label value in FinOne application. \n\nIt takes a string parameter `labelValue` which represents the text content of the link that needs to be clicked. The method uses XPATH to locate the table row containing the link, then iterates through the table rows to find the one matching the provided `labelValue`. Once found, it retrieves the text value and clicks on the link.\n\nThe method also handles exceptions by calling a test step failed method if an error occurs during the execution. The method returns the text value of the clicked link.",
        "input": [
            "String labelValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyDIStatus",
        "code": "public String verifyDIStatus(String Label, String Status) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + Label + \"']/following::lightning-formatted-text[text()='\"\n\t\t\t\t\t+ Status + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 4)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \" Status is displayed in\" + Label);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\" Status is not displayed in\" + Label);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyStatus\" + e.getMessage());\n\t\t}\n\t\treturn Status;\n\t}",
        "description": "This Java method, named `verifyDIStatus`, verifies the status of a specific label in a UI component. \n\nIt takes two parameters: `Label` and `Status`. The method uses an XPath expression to locate the element with the given label and status. It then waits for the element to be displayed (up to 10 seconds) and checks if it is indeed displayed. If it is, it highlights the element and takes a screenshot of the highlighted element along with the label and status. \n\nIf the element is not displayed, it simply takes a screenshot indicating that the status is not displayed in the given label. \n\nIn case any exception occurs during this process, it fails the test step with an error message. The method returns the `Status` parameter.",
        "input": [
            "String Label",
            "String Status"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInSearchFieldInMaster",
        "code": "public void enterValueInSearchFieldInMaster(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=(//a[@role='option']//parent::li)[2]\";\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(searchValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created date - May 06, 2020\n\t * \n\t *          Description - This method\n\t * \n\t * @param Label\n\t * @param Value\n\t */",
        "description": "This Java method is used to enter a value in the search field on a webpage. It takes a `String` parameter `value` which represents the value to be entered in the search field.\n\nHere's what the method does:\n\n1. It waits for an element with the specified XPath (`//div[@class='uiInput uiAutocomplete uiInput--default']//input`) and then checks if it is displayed within a certain time limit (5 seconds).\n2. If the element is displayed, it enters the given `value` in the search field using the `typeIn` method.\n3. It waits for the page to load completely after entering the value.\n4. Then, it clicks on the second option from the dropdown list of suggestions by searching for the XPath (`//a[@role='option']//parent::li)[2]`) and clicking on it.\n\nIf any exception occurs during this process or if the search field is not present, the method fails the test step with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedValueInMaster",
        "code": "public void verifyAutoPopulatedValueInMaster(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\n\t\tString labelElement = moveToElement + \"/slot/lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 20);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + Value + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `verifyAutoPopulatedValueInMaster` that verifies if the auto-populated value in a master field matches the expected value.\n\nThe method takes two parameters: `Label` and `Value`. It uses these values to construct an XPath expression that moves to the element containing the label. It then checks if the element is displayed, scrolls to it, retrieves its text, and compares it with the expected value.\n\nIf the values match, it takes a manual screenshot and highlights the element using a `highLighterMethod`. If they don't match, it fails the test step with an error message indicating that the expected value was not reflected in the label field. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedValueInMaster",
        "code": "public String verifyAutoPopulatedValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\n\t\t\tString moveToElement1 = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dl/parent::div\";\n\t\t\tString labelElement = moveToElement + \"//slot/lightning-formatted-text\";\n\t\t\tString labelElement1 = moveToElement + \"//slot/lightning-formatted-number\";\n\t\t\tString labelElement2 = moveToElement + \"//slot/lightning-formatted-location\";\n\t\t\tString labelElement3 = moveToElement + \"//force-lookup/following-sibling::lightning-formatted-text\";\n\t\t\tString labelElement4 = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/following::records-record-type//div//div//span\";\n\t\t\tif (isElementDisplayed(labelElement, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement3, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement3);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement4, 10)) {\n\t\t\t\tscrollToWebElement(labelElement4);\n\t\t\t\ttext = getText(labelElement4);\n\t\t\t\thighLighterMethod(labelElement4);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(moveToElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement1);\n\t\t\t\t// text = getText(moveToElement1);\n\t\t\t\thighLighterMethod(moveToElement1);\n\t\t\t\tmanualScreenshot(Label + \" has [ null ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInMaster`, is used to verify the auto-populated value of a field with the given label in a Salesforce Lightning page. \n\nThe method takes a `String` parameter `Label` which represents the label of the field to be verified.\n\nIt uses various XPath expressions to locate the field elements and then performs the following actions:\n\n1. Scrolls to the element if it's not already visible.\n2. Retrieves the text value of the element.\n3. Highlights the element using a highlighting method.\n4. Takes a manual screenshot with the label and the retrieved text value.\n\nThe method returns the retrieved text value. If the field is not present, or there are any exceptions during execution, the method fails the test step.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyTextFieldIsMasked",
        "code": "public void verifyTextFieldIsMasked(String Label) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\t\tString labelElement = moveToElement + \"/slot/lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement).replace(\",\", \"\");\n\t\t\t\tif (text.contains(\"*\")) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + Label + \" ] field value is masked.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Masked value is not reflected in [ \" + Label\n\t\t\t\t\t\t\t+ \" ] field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextFieldIsMasked. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTextFieldIsMasked`, verifies that a text field with the given label is masked by checking if it contains asterisks (`*`) or commas (`,`). \n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the element associated with the given label.\n2. It waits for the element to be displayed and then scrolls to it.\n3. It retrieves the text value of the element, removes any commas from the text, and checks if the text contains asterisks.\n4. If the text contains asterisks, it highlights the element (using a `highLighterMethod`) and takes a manual screenshot to confirm that the field is masked.\n5. If the text does not contain asterisks, it fails the test step with an error message indicating that the expected masked value was not reflected in the field.\n6. If the element is not displayed, it fails the test step with an error message indicating that the field is not present.\n\nThe method catches any exceptions that occur during its execution and fails the test step if one occurs.",
        "input": [
            "String Label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectOrDeselectCheckBoxInMasterPage",
        "code": "public boolean selectOrDeselectCheckBoxInMasterPage(String labelname, String status) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString checkBox = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/../following-sibling::div/span//input\";\n\t\t\twaitForElement(checkBox, 6);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to True\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already True\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to False\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already False\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInMasterPage`, is used to select or deselect a checkbox on a master page based on the provided label name and status (either \"check\" or \"uncheck\"). The method uses various Selenium WebDriver actions such as waiting for an element, scrolling to it, clicking on it, and taking manual screenshots. If the operation is successful, it returns `true`. If an exception occurs during the execution of the method, it writes the error message to a log file and marks the test step as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Home",
        "function_name": "selectOrDeselectCheckBoxInMasterPageWithOutEdit",
        "code": "public boolean selectOrDeselectCheckBoxInMasterPageWithOutEdit(String labelname, String status) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/ancestor::lightning-primitive-input-checkbox[@checked]\";\n\n\t\t\tString checkBox1 = labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/ancestor::lightning-primitive-input-checkbox\";\n\t\t\twaitForElement(checkBox, 6);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already True\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" check box is False\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\ttestStepFailed(labelname + \" check box is True\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(checkBox1);\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already False\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t\treturn flag;\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created Date - May 06, 2020\n\t * \n\t *          Description - This method is used for enter the date and time value\n\t *          in text field in Master page.\n\t * \n\t * @param labelName - Provide value of head field label in text.\n\t * @param field     - Provide the label of the field. example (Date, Time).\n\t * @param value     - Provide the value to enter in text field.\n\t */",
        "description": "This Java method is used to select or deselect a checkbox in the Master page. The method takes two parameters: `labelname` and `status`. \n\n- `labelname`: This is the label name of the checkbox that needs to be selected or deselected.\n- `status`: This can either be \"check\" (to select the checkbox) or \"uncheck\" (to deselect the checkbox).\n\nThe method first constructs two XPath expressions: one for the checked state and another for the unchecked state. It then uses these expressions to locate the checkbox element, scroll to it, highlight it, and take a screenshot if necessary.\n\nIf the `status` parameter is \"check\", the method checks if the checkbox is already selected. If not, it fails the test step. If the `status` parameter is \"uncheck\", the method checks if the checkbox is already deselected. If not, it selects the checkbox and takes a screenshot. In either case, if the element is not displayed within a certain time limit, the test step fails.\n\nThe method also catches any exceptions that may occur during its execution and writes them to a log file before failing the test step. Finally, it returns a boolean flag (which is always `false` in this implementation).",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Home",
        "function_name": "enterDateAndTimeInMasterPage",
        "code": "public void enterDateAndTimeInMasterPage(String labelName, String field, String value) {\n\t\ttry {\n\t\t\tString textField = labelName + \"#xpath=//legend[text()='\" + labelName + \"']/..//label[text()='\" + field\n\t\t\t\t\t+ \"']/../div//input\";\n\t\t\twaitForElement(textField, 10);\n\t\t\tWebElement ele = findWebElement(textField);\n\t\t\tif (isElementDisplayed(textField, 5)) {\n\t\t\t\tscrollToWebElement(textField);\n\t\t\t\ttypeIn(textField, value);\n\t\t\t\tdriver.findElementByXPath(\"//legend[text()='\" + labelName + \"']\").click();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(field + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Enter Date And Time In MasterPage \" + field + \" field.\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDateAndTimeInMasterPage`, enters a given value into a specific field on a master page. The method takes three parameters: `labelName` (the label associated with the field), `field` (the name of the field to enter the value in), and `value` (the actual value to be entered).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the specific field based on the provided `labelName` and `field`.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n4. It enters the given `value` into the field using the `typeIn` method.\n5. Finally, it clicks on the legend associated with the label using the `findElementByXPath` method.\n\nIf any of these steps fail (e.g., the element is not displayed), the method will report a test step failure and provide an error message.",
        "input": [
            "String labelName",
            "String field",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyValueIsCreatedInCardBoundaryTable",
        "code": "public boolean verifyValueIsCreatedInCardBoundaryTable(String expectedValue) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString tableHeaderValues = \"Table header values#xpath=(//div[contains(@class,'active')]//*[contains(text(),'\"\n\t\t\t\t\t+ expectedValue + \"')])[last()]\";\n\t\t\twaitForElement(tableHeaderValues, 10);\n\t\t\tif (isElementDisplayed(tableHeaderValues, 5)) {\n\t\t\t\thighLighterMethod(tableHeaderValues);\n\t\t\t\tmanualScreenshot(\"Value is created. \");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Value is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Value Is Created In Card Boundary Table. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, named `verifyValueIsCreatedInCardBoundaryTable`, is used to verify if a specific value (`expectedValue`) exists in the card boundary table on a web page. \n\nHere's how it works:\n\n1. It constructs an XPath expression that searches for the expected value within the active div with class 'active'.\n2. It waits for the element to be displayed using `waitForElement`.\n3. If the element is displayed, it highlights the element and takes a manual screenshot if the expected value is found.\n4. If the element is not displayed or the expected value is not found, it also takes a manual screenshot with an error message.\n5. In case of any exception, it logs the failure with the exception message.\n\nThe method returns a boolean flag (`flag`) which is initially set to `false`. However, its actual value does not seem to be used anywhere in this method.",
        "input": [
            "String expectedValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Home",
        "function_name": "verifyValueIsPresentInCardBoundaryTable",
        "code": "public boolean verifyValueIsPresentInCardBoundaryTable(String expectedValue) {\n\t\tboolean flag = false;\n\t\tboolean checkFlag = false;\n\t\ttry {\n\t\t\tString tableHeaderValues = \"Table header values#xpath=((//table/tbody/tr/*[contains(@class,'cellContainer')][5])/span/*[contains(@class,'truncate')])\";\n\t\t\twaitForElement(tableHeaderValues, 10);\n\t\t\tList<WebElement> listOfHeaderValue = findWebElements(tableHeaderValues);\n\t\t\tfor (int i = 0; i < listOfHeaderValue.size(); i++) {\n\t\t\t\tString text = listOfHeaderValue.get(i).getText();\n\t\t\t\tif (text.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\ttestStepInfo(\"Expected value \" + text + \"is present in table. \");\n\t\t\t\t\tcheckFlag = true;\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!checkFlag) {\n\t\t\t\ttestStepInfo(\"Expected value \" + expectedValue + \" is not present in the table.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Value Is Present In Card Boundary Table. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created Date - May 18, 2020\n\t * \n\t *          Description - This method is used for click the link in master page.\n\t * \n\t * @param label - Have to provide the field label value.\n\t */",
        "description": "This Java method, `verifyValueIsPresentInCardBoundaryTable`, checks if a given expected value (`expectedValue`) is present in a specific table on a web page. The method:\n\n1. Waits for an element with a specific XPath expression (table header values) to be visible.\n2. Retrieves the list of elements matching that XPath expression.\n3. Iterates through each element, checks if its text content matches the expected value using case-insensitive comparison.\n4. If the expected value is found, sets a flag `checkFlag` to true and breaks out of the loop.\n5. If the expected value is not found after iterating through all elements, sets a flag `flag` to false.\n6. Logs a test step information message based on whether the expected value was found or not.\n7. Returns the value of the `flag` variable.\n\nThe method also catches any exceptions that may occur during execution and logs an error message if one is thrown.",
        "input": [
            "String expectedValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnHyperLinkWithLabelInMaster",
        "code": "public void clickOnHyperLinkWithLabelInMaster(String label) {\n\t\ttry {\n\t\t\tString link = label\n\t\t\t\t\t+ \"field#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ label + \"']//..//..//..//div//a\";\n\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not having link value.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Hyper Link With Label In Master. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnHyperLinkWithLabelInMaster`, is used to click on a hyperlink with a specific label in a master page. The method takes a string parameter `label` which represents the text of the hyperlink.\n\nHere's what the method does:\n\n1. It constructs a XPath expression based on the provided label.\n2. It waits for the element identified by the XPath expression (up to 30 seconds).\n3. If the element is displayed within 15 seconds, it scrolls to the element, highlights it using a high-lighting method, and then clicks on it.\n4. If the element is not displayed or clicking on it fails, it marks the test step as failed with an appropriate error message.\n\nThe method also catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedNumberValueInMaster",
        "code": "public void verifyAutoPopulatedNumberValueInMaster(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\n\t\tString labelElement = moveToElement + \"//slot/lightning-formatted-number\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement).replace(\",\", \"\");\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + Value + \" ] is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Expected value is not reflected in [ \" + Label + \" ] field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Number Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedNumberValueInMaster`, is used to verify that an auto-populated number value is correctly displayed in a specific field (identified by the `Label` parameter) in a master record. The method performs the following actions:\n\n1. It constructs two strings: `moveToElement` and `labelElement`. These strings are used to locate the element containing the auto-populated number value.\n2. It waits for the element to be displayed using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the element is displayed, it checks if the element is visible using the `isElementDisplayed` method, with a timeout of 5 seconds.\n4. If the element is visible, it scrolls to the element using the `scrollToWebElement` method.\n5. It extracts the text value from the element using the `getText` method and removes any commas from the text.\n6. It compares the extracted text value with the expected value passed as a parameter (`Value`). If they match, it highlights the element and takes a manual screenshot to confirm that the value is correct.\n7. If the values do not match, or if the element is not displayed, the method marks the test step as failed and provides an error message.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnHyperLinkWithLabelInMasterInQCUAT",
        "code": "public void clickOnHyperLinkWithLabelInMasterInQCUAT(String label) {\n\t\ttry {\n\t\t\tString link = label + \" field#xpath=//div[contains(@class,'active')]//span[text()='\" + label\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/span//a\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\ttestStepPassed(\"Click on : \" + getText(link));\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not having link value.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Hyper Link With Label In Master. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnHyperLinkWithLabelInMasterInQCUAT`, is designed to click on a specific hyperlink within an element labeled with the provided string (`label`) in a QCUAT (Quality Control Unified Automation Test) framework. \n\nThe method attempts to locate the hyperlink by combining the label with a predefined XPath expression, waits for the element to be displayed, scrolls to it if necessary, highlights it using a `highLighterMethod`, and then clicks on it. If the hyperlink is not found or displayed within the given time limit (30 seconds), the test step fails. In case of any exception during the execution of this method, the test step also fails with an error message describing the exception.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnCustomer",
        "code": "public void clickOnCustomer(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//p//div[@class='slds-grid']//div//span[text()='\" + linkName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomer`, attempts to click on a specific customer link element on a webpage. It takes a `String` parameter `linkName`, which is used to construct the XPath locator for the link.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Constructs an XPath locator string by concatenating the provided `linkName` with some additional elements.\n2. Waits for the element located by the constructed XPath locator using the `waitForElement` method (presumably a custom method that waits for an element to be visible).\n3. Checks if the element is displayed using the `isElementDisplayed` method (another custom method that checks if an element is visible on the screen).\n4. If the element is displayed, it applies a highlight effect to the element using the `highLighterMethod` (presumably another custom method), clicks on the element using the `clickOnSpecialElement` method (yet another custom method), and then waits for 3 seconds using the `waitTime` method.\n5. If the element is not displayed, it fails the test step with a message indicating that the link is not present.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures using the `testStepFailed` method (presumably another custom method).",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "getCustomerName",
        "code": "public String getCustomerName(String linkName) {\n\t\tString textName = \"\";\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//div//p[@title='Customer']//..//a\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\ttextName = getText(link);\n\n\t\t\t\twaitTime(3);\n\t\t\t\tmanualScreenshot(\"Successfully got text \" + textName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t\treturn textName;\n\t}",
        "description": "This Java method, `getCustomerName`, takes a string parameter `linkName` and returns the customer name as a string. It uses various Selenium WebDriver methods to interact with a web element:\n\n1. It constructs an XPath expression based on the provided `linkName`.\n2. It waits for the element to be present using `waitForElement`.\n3. If the element is present, it scrolls to the element using `scrollToWebElement`, highlights it using `highLighterMethod`, and then extracts the text from the element using `getText`.\n4. It takes a manual screenshot after successfully extracting the customer name.\n5. If the element is not present or any other exception occurs, it fails the test step.\n\nThe method returns the extracted customer name as a string.",
        "input": [
            "String linkName"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnIntegrationResponseLink",
        "code": "public void clickOnIntegrationResponseLink(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//table[contains(@class,'forceRecordLayout')]//span[text()='\" + linkName\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::td//a\";\n\t\t\twaitForElement(link, 20);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnIntegrationResponseLink`, attempts to locate and click on a specific link within an HTML table based on the provided `linkName`. \n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression using the given `linkName` to identify the link.\n2. It waits for the element to be present (up to 20 seconds).\n3. If the element is displayed, it highlights the link using a separate method (`highLighterMethod`), clicks on the link using another method (`clickOnSpecialElement`), and then waits for 3 seconds.\n4. If the element is not displayed within 5 seconds, it marks the test step as failed with an error message indicating that the link was not present.\n\nIf any exceptions occur during this process, it catches them and marks the test step as failed with a generic error message.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnTextLink",
        "code": "public void clickOnTextLink(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//a[text()='\" + linkName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created date - May 06, 2020\n\t * \n\t *          Description - This method is used to verify the text is present in\n\t *          the field.\n\t * \n\t * @param Label\n\t * @param Value\n\t */",
        "description": "This Java method, `clickOnTextLink`, simulates a click on a text link with the given name. It uses Selenium WebDriver's `waitForElement` and `isElementPresent` methods to verify that the link is present before clicking on it. If the link is not found, the test step fails. The method also waits for 3 seconds after clicking on the link.\n\nThe method takes a single parameter `linkName`, which is used to construct the XPath locator for the text link. The XPath locator combines the given link name with an XPath expression that searches for an `<a>` element containing the given link name as its text content.\n\nNote: This method seems to be part of a larger automation framework, and it appears to use custom methods like `waitForElement`, `isElementPresent`, `highLighterMethod`, and `clickOnSpecialElement`. The exact behavior of these methods is not specified in this code snippet.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnTabInMasterPage",
        "code": "public void clickOnTabInMasterPage(String labelName) {\n\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\twaitForPageToLoad();\n\t\t\tString tabField = labelName + \" field #xpath=//a[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(tabField, 16);\n\t\t\tif (isElementDisplayed(tabField, 5)) {\n\t\t\t\tscrollToWebElement(tabField);\n\t\t\t\thighLighterMethod(tabField);\n\t\t\t\tclickOnSpecialElement(tabField);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Tab In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method simulates a click on a tab with a specified label name within a Master page. It first waits for 4 seconds, then loads the page and waits for an element matching the label name to be displayed. If the element is found, it scrolls to the element, highlights it, and then clicks on it. If the element is not found, it fails the test step with an error message. The method also catches any exceptions that may occur during execution and reports a failure if one occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyCheckBoxIsSelectedOrDeselectInMasterPage",
        "code": "public boolean verifyCheckBoxIsSelectedOrDeselectInMasterPage(String labelname, String status) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString checkBox = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/parent::div/../..//div//input\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(checkBox, 6);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" Check box is not Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, named `verifyCheckBoxIsSelectedOrDeselectInMasterPage`, is used to verify whether a checkbox with the specified label name is selected or deselected in a master page. The method takes two parameters: `labelname` (the label of the checkbox) and `status` (either \"check\" or \"uncheck\", indicating whether the checkbox should be checked or unchecked).\n\nThe method uses various Selenium WebDriver methods to locate the checkbox, wait for it to load, scroll to it if necessary, and check its status. If the status is \"check\", it checks if the checkbox is selected; if not, it fails the test step. Similarly, if the status is \"uncheck\", it checks if the checkbox is not selected; if not, it fails the test step.\n\nThe method returns a boolean flag indicating whether the verification was successful or not. If an exception occurs during the execution of this method, it logs the error and marks the test step as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedValueInMaster1",
        "code": "public void verifyAutoPopulatedValueInMaster1(String Label, String Value) {\n\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/../..//div//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(Element, 20);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString text = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + Value + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInMaster1`, is used to verify that an auto-populated value in a specific field (identified by the given label) matches the expected value. The method:\n\n1. Waits for the element to be displayed.\n2. Checks if the element is displayed.\n3. Scrolls to the element if it's not already visible.\n4. Retrieves the text value of the element.\n5. Compares the retrieved text with the expected value. If they match, it takes a manual screenshot and highlights the element.\n6. If the values do not match, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception is thrown.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickEditOptionWithLabelInMasterPage1",
        "code": "public void clickEditOptionWithLabelInMasterPage1(String fieldLabel) {\n\t\ttry {\n\t\t\twaitTime(8);\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel\n\t\t\t\t\t+ \" edit button#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']/parent::button\";\n\t\t\twaitForElement(editOption, 10);\n\t\t\tif (isElementDisplayed(editOption, 3)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t\twaitTime(8);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPage1`, is used to click on an edit button with a specific label in a master page. The method takes a string parameter `fieldLabel` which represents the label of the edit button. \n\nHere's what it does:\n\n1. Waits for 8 seconds using the `waitTime(8)` method.\n2. Waits for the page to load using the `waitForPageToLoad()` method.\n3. Builds an XPath expression based on the provided `fieldLabel` and a specific class (`oneRecordHomeFlexipage2Wrapper`) to locate the edit button.\n4. Waits for the edit button to be displayed using the `waitForElement(editOption, 10)` method.\n5. Checks if the edit button is displayed using the `isElementDisplayed(editOption, 3)` method. If it's not, the test step fails with a message indicating that the edit button is not present.\n6. If the edit button is displayed, scrolls to it using the `scrollToWebElement(editOption)` method and then clicks on it using the `clickOnSpecialElement(editOption)` method.\n7. Waits for 8 seconds again before moving on.\n\nIf any exception occurs during the execution of this method, it will be caught by the catch block and a test step info will be logged with the exception message.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLinkValueInCardBoundary",
        "code": "public void clickOnLinkValueInCardBoundary(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName\n\t\t\t\t\t+ \" Value#xpath=(//div[contains(@class,'active')]//*[not(contains(@class,'marker'))]//table/tbody//th//span//a)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkValueInCardBoundary`, clicks on the last link value present within a specific boundary (identified by the provided `headerName`) and handles any exceptions that may occur during this process. The method uses various Selenium WebDriver methods to locate the element, wait for it to be displayed, scroll to it if necessary, and then click on it. If the element is not found or an exception occurs during the process, the method will report a test failure with a descriptive message.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnCardBoundary",
        "code": "public void clickOnCardBoundary(String cardName) {\n\t\ttry {\n\t\t\tString path = cardName + \"#xpath=(//article//a/span[text()='\" + cardName + \"'])[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tscrollToElementTillPresent(path);\n\t\t\twaitForElement(path, 10);\n\t\t\twaitTime(4);\n\t\t\tif (isElementDisplayed(path, 7)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + cardName + \" card \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `clickOnCardBoundary` that simulates a user clicking on the boundary of a card with the specified name. The method uses various web automation techniques to:\n\n1. Construct an XPath expression to locate the card element.\n2. Wait for the page to load and scroll to the element if it's not visible.\n3. Wait for the element to be present and clickable (up to 10 seconds).\n4. If the element is displayed, simulate a click on it using `scrollToWebElement` and `clickOnSpecialElement`.\n5. If the element is not displayed after waiting for 7 seconds, mark the test as failed.\n\nThe method catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyExpectedTextValueIsPresentInMaster",
        "code": "public String verifyExpectedTextValueIsPresentInMaster(String Label, String expectedValue) {\n\t\tString value = \"\";\n\t\tString labelElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/../..//div//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.contains(\"\\n\")) {\n\t\t\t\t\ttext = text.split(\"\\n\")[0];\n\t\t\t\t}\n\t\t\t\tif (!text.isEmpty() && text.equals(expectedValue)) {\n\t\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tvalue = text;\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + text + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no expected value is reflected in \" + Label + \" field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyExpectedTextValueIsPresentInMaster`, verifies if a specific text value is present in the master page of a Salesforce application. It takes two parameters: `Label` and `expectedValue`.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the element containing the expected text value.\n2. It waits for the element to be displayed, then checks if the element is actually visible on the screen.\n3. If the element is present, it retrieves the text value from the element and trims any newline characters.\n4. It compares the retrieved text value with the `expectedValue` parameter. If they match, it takes a screenshot (manually) to confirm that the expected value is indeed reflected in the field labeled by the `Label` parameter.\n5. If the values don't match or if the element is not present, it fails the test step and reports an error message.\n\nThe method returns the retrieved text value as a string.",
        "input": [
            "String Label",
            "String expectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyValueShouldNotBePresent",
        "code": "public String verifyValueShouldNotBePresent(String Label) {\n\t\tString value = \"\";\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\n\t\tString labelElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span/slot/slot\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementPresent(labelElement)) {\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.contains(\"\\n\")) {\n\t\t\t\t\ttext = text.split(\"\\n\")[0];\n\t\t\t\t}\n\t\t\t\tif (!text.isEmpty()) {\n\t\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tvalue = text;\n\t\t\t\t\ttestStepFailed(\" \" + text + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully there is no value is reflected in \" + Label + \" field\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyValueShouldNotBePresent`, verifies that a specific label does not have any associated value present on the UI. It takes a `String` parameter `Label` which is used to construct two XPath expressions: `moveToElement` and `labelElement`. \n\nThe method first waits for the element identified by `labelElement` to be present, then checks if the element is actually present using `isElementPresent`. If it is, it retrieves the text content of the element, removes any newline characters (`\\n`) from the text, and checks if the text is not empty. \n\nIf the text is not empty, it scrolls to the element identified by `moveToElement`, highlights the element using the `highLighterMethod`, and captures a manual screenshot with a message indicating that there is no value reflected in the label field. If the text is empty, it simply scrolls to the same element.\n\nIf the element is not present, it fails the test step with an error message. If any exception occurs during this process, it also fails the test step with the exception message. The method returns the value associated with the label if one exists; otherwise, it returns an empty string.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "clickCustomerNameInAdmin",
        "code": "public void clickCustomerNameInAdmin() {\n\t\ttry {\n\t\t\tString customerNameLink = \"Customer Name#xpath=//p[text()='Customer']//following-sibling::p//a\";\n\n\t\t\twaitForElement(customerNameLink, 10);\n\t\t\tif (isElementPresent(customerNameLink)) {\n\t\t\t\tscrollToElement(customerNameLink);\n\t\t\t\tclickOnSpecialElement(customerNameLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer name link is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click Customer Name In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created date - May 06, 2020\n\t * \n\t *          Description - This method is used to verify the text is present in\n\t *          the field.\n\t * \n\t * @param Label\n\t * @param Value\n\t */",
        "description": "This Java method, `clickCustomerNameInAdmin`, is used to click on a specific link containing the customer name in an admin interface. \n\nThe method attempts to locate the link using an XPath expression and then performs the following actions:\n\n1. Waits for the element to be present (up to 10 seconds).\n2. Scrolls to the element if it's not already visible.\n3. Clicks on the special element (the customer name link).\n\nIf the link is not found, the method fails the test step with an error message indicating that the \"Customer name link is not present.\" If any other exception occurs during the execution of this method, it will also fail the test step and provide a detailed error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyTextIsPresentValueInMasterPage",
        "code": "public String verifyTextIsPresentValueInMasterPage(String Label) {\n\t\tString value = \"\";\n\t\tString labelElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span/slot/slot\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.contains(\"\\n\")) {\n\t\t\t\t\ttext = text.split(\"\\n\")[0];\n\t\t\t\t}\n\t\t\t\tif (!text.isEmpty()) {\n\t\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tvalue = text;\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + text + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no value is reflected in \" + Label + \" field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyTextIsPresentValueInMasterPage`, is used to verify if a specific text value is present and reflected in the corresponding label field on a master page. \n\nThe method takes a string parameter `Label` which represents the label name. It uses this label to construct an XPath expression that targets the desired element on the web page. \n\nThe method then attempts to wait for the element to be displayed, verify if it's actually displayed, and retrieve its text value. If the text contains newline characters (`\\n`), it removes them. \n\nIf the text is not empty, the method scrolls to the element, highlights it, and takes a manual screenshot as proof of the verification. It also returns the text value.\n\nIf the element is not found or the text is empty, the method fails the test step. In case of any exception during the process, it catches the exception, logs an error message, and also fails the test step.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInFieldInMasterPopup",
        "code": "public void enterValueInFieldInMasterPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tActions actions = new Actions(driver);\n\t\t\tWebElement element = findWebElement(field);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tscrollToElement(field);\n\t\t\t\tactions.click(element).keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL).sendKeys(Keys.BACK_SPACE)\n\t\t\t\t\t\t.build().perform();\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given `value` into a text field with the specified `labelName` in a Master popup. It uses Selenium WebDriver to interact with the web element, including scrolling and highlighting the element if necessary. The method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInTextAreaFieldInMasterPopup",
        "code": "public void enterValueInTextAreaFieldInMasterPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement element = findWebElement(field);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tscrollToElement(field);\n\t\t\t\telement.clear();\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given value into a text area field in a master popup. The method takes two parameters: `labelName` and `value`. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the text area field based on the provided label name.\n2. It waits for the element to be present, then scrolls to it if necessary.\n3. If the field is displayed, it clears any existing value, highlights the field (for debugging purposes), and enters the given `value` into the field.\n4. If the field is not present or an exception occurs during the process, it marks the test step as failed.\n\nThis method seems to be part of a larger automation framework, possibly using Selenium WebDriver, based on the presence of methods like `waitForElement`, `findWebElement`, and `typeIn`.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectValueFromDropdownInPopup",
        "code": "public void selectValueFromDropdownInPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tList<WebElement> listOfElement = findWebElements(dropdownList);\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tfor (int i = 0; i < listOfElement.size(); i++) {\n\t\t\t\t\tint count = i + 1;\n\t\t\t\t\tString dropdownValue = value\n\t\t\t\t\t\t\t+ \" value#xpath=(//div[contains(@class,'select-options')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t\t+ \"'])[\" + count + \"]\";\n\t\t\t\t\tif (isElementDisplayed(dropdownValue, 5)) {\n\t\t\t\t\t\thighLighterMethod(dropdownValue);\n\t\t\t\t\t\tclickOnSpecialElement(dropdownValue);\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t}\n\t\t\t\t\tif (listOfElement.size() == count - 1) {\n\t\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInPopup`, selects a value from a dropdown menu within a popup. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method first constructs an XPath expression for the dropdown element using the provided dropdown name.\n2. It waits for the dropdown element to be displayed, then highlights it (using a `highLighterMethod`) and clicks on it (using a `clickOnSpecialElement`).\n3. Next, it constructs an XPath expression for the list of options within the dropdown, also using the provided value.\n4. The method finds all elements that match this XPath expression (`findWebElements`) and waits for them to be displayed.\n5. It then iterates through the list of options and checks if each option is displayed. If it finds the desired value, it highlights it (using `highLighterMethod`) and clicks on it (using `clickOnSpecialElement`).\n6. If the desired value is found, the method reports a test step as passed. If not, it reports a test step failure.\n7. The method also checks if all options have been iterated through without finding the desired value, in which case it reports another test step failure.\n\nThe method catches any exceptions that may occur during execution and reports a test step failure with the error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectvaluefromDigitalLineStatusdropdownAdminlogin",
        "code": "public void selectvaluefromDigitalLineStatusdropdownAdminlogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]/parent::lightning-combobox//div//input\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitTime(2);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \"#xpath=//label[text()='\" + dropdownName + \"']/..//span[@title='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\twaitTime(1);\n\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromDigitalLineStatusdropdownAdminlogin`, is used to select a value from a dropdown menu on an admin login page. The method takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression for the dropdown element based on the provided dropdown name.\n2. It waits for the dropdown element to load (up to 10 seconds).\n3. If the dropdown is displayed, it scrolls to the element, clicks on it, and waits for the dropdown list to load.\n4. It then searches for the desired value in the dropdown list using another XPath expression.\n5. If the desired value is found and displayed, it selects that value by clicking on it.\n6. If the desired value is not found or the dropdown is not present, it reports a test failure.\n\nThe method also includes some error handling to catch any exceptions that may occur during the execution of these steps.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyTextIsPresentValueInMaster",
        "code": "public String verifyTextIsPresentValueInMaster(String Label) {\n\t\tString value = \"\";\n\t\tString labelElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/../..//div//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.contains(\"\\n\")) {\n\t\t\t\t\ttext = text.split(\"\\n\")[0];\n\t\t\t\t}\n\t\t\t\tif (!text.isEmpty()) {\n\t\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tvalue = text;\n\t\t\t\t\tmanualScreenshot(\"Successfully [\" + text + \"] is reflected in [\" + Label + \"] field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no value is reflected in [\" + Label + \"] field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyTextIsPresentValueInMaster`, is used to verify if a specific text value is present in the master field with the given label. It uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `getText`, and `scrollToWebElement` to interact with the web page.\n\nHere's what the method does:\n\n1. It takes a string parameter `Label` that represents the label of the text value to be verified.\n2. It constructs an XPath expression using the provided `Label` to locate the element containing the text value.\n3. It waits for the element to be displayed and then verifies if it's actually displayed on the page.\n4. If the element is displayed, it extracts the text value from the element and checks if it contains any newline characters (`\\n`). If present, it takes the first part of the text (i.e., up to the first newline character).\n5. It then scrolls to the element and highlights it using a `highLighterMethod`.\n6. If the text value is not empty, it returns the value; otherwise, it fails the test step.\n7. In case of any exception during the execution, it fails the test step with an error message.\n\nThe method also takes manual screenshots at certain points to provide visual evidence of the verification process.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "selectValueInNewGlobalSearchDropDown",
        "code": "public void selectValueInNewGlobalSearchDropDown(String dropDownValue) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString inputField = \"Global search input#xpath=//div//input[contains(@class,'combobox__input')]\";\n\t\t\tString dropdownOption = \"Global Search dropdown#xpath=//div//li//span[@title='\" + dropDownValue + \"']\";\n\t\t\tString search = \"Search #xpath=//button[contains(text(),'Search')]\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(search);\n\t\t\t\twaitForElement(inputField, 10);\n\t\t\t\tif (isElementDisplayed(inputField, 7)) {\n\t\t\t\t\tWebElement element = findWebElement(inputField);\n\t\t\t\t\tActions actions = new Actions(driver);\n\t\t\t\t\tactions.click(element).build().perform();\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\ttestStepPassed(\"Click On Global Search dropdown.\");\n\t\t\t\t\tif (isElementDisplayed(dropdownOption, 3)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownOption);\n\t\t\t\t\t\twaitTime(2);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(dropDownValue + \" Option is not Present in Global Search Dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Global Search dropdown field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Global Search Field is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in Select Value In Global Search DropDown. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueInNewGlobalSearchDropDown`, selects a value from the dropdown list in a global search field. \n\nThe method first waits for the page to load and then verifies if the global search input field is displayed. If it is, the method clicks on the input field, types some text (not shown in this snippet), waits for the dropdown options to appear, and then selects the specified value from the dropdown list.\n\nIf any of these steps fail, the method reports a test step failure with an appropriate error message.",
        "input": [
            "String dropDownValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyFieldIsPresentInMasterPage",
        "code": "public void verifyFieldIsPresentInMasterPage(String fieldLabel) {\n\t\ttry {\n\t\t\tString field = fieldLabel\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//div[contains(@class,'container')]/span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']\";\n\t\t\twaitForElement(field, 30);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(\"Successfully \" + fieldLabel + \" field is present.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Field Is Present In Master Page. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyFieldIsPresentInMasterPage`, verifies if a specific field is present on the master page of an application. It takes a `String` parameter `fieldLabel` which represents the label of the field to be verified.\n\nThe method uses XPath to locate the field and then performs the following actions:\n\n1. Waits for the element to appear (up to 30 seconds).\n2. Checks if the element is displayed (up to 5 seconds).\n3. Scrolls to the element.\n4. Highlights the element using a highlighting method (not shown in this code snippet).\n5. Takes a manual screenshot with a message indicating that the field was successfully found.\n\nIf the field is not present, it fails the test step and reports an error. If any other exception occurs during the execution of the method, it also fails the test step and reports the exception message.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedValueInRecordType",
        "code": "public void verifyAutoPopulatedValueInRecordType(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//div\";\n\t\tString labelElement = moveToElement + \"//slot/span\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement).replace(\",\", \"\");\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + Value + \" ] is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"Expected value is not reflected in [ \" + Label + \" ] field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInRecordType`, verifies if the auto-populated value in a record type matches the expected value. It takes two input parameters: `Label` and `Value`. The method performs the following actions:\n\n1. Creates an XPath string to locate the element containing the label.\n2. Moves to that element using the `moveToElement` method.\n3. Waits for the label element to be displayed (up to 5 seconds).\n4. Scrolls to the label element if it's not already visible.\n5. Gets the text of the label element and removes commas from the string.\n6. Compares the resulting text with the expected `Value`. If they match, the method:\n\t* Highlights the element using a highlighter method (not shown in this code snippet).\n\t* Takes a manual screenshot with a message indicating that the value is reflected correctly.\n7. If the values don't match, the method fails the test step and reports an error message.\n8. If the label element is not displayed after 5 seconds, the method also fails the test step.\n\nThe method catches any exceptions that may occur during execution and reports a failure if one does occur.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnOneActionDropdown",
        "code": "public void clickOnOneActionDropdown(String optionValue) {\n\t\ttry {\n\t\t\twaitForElement(admin_downArrow_icn, 30);\n\t\t\tif (isElementDisplayed(admin_downArrow_icn, 6)) {\n\t\t\t\tscrollToWebElement(admin_downArrow_icn);\n\t\t\t\tclickOnSpecialElement(admin_downArrow_icn);\n\t\t\t\twaitTime(2);\n\t\t\t\tString option = optionValue + \"#xpath=//a//span[text()='\" + optionValue + \"']\";\n\t\t\t\twaitForElement(option, 20);\n\t\t\t\tif (isElementDisplayed(option, 3)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"One Action Dropdown is not present. \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On One Action Dropdown. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOneActionDropdown`, simulates a click on an option from a dropdown menu with the specified value (`optionValue`). It waits for the dropdown to be displayed, scrolls to it if necessary, clicks on it, and then waits for the selected option to be displayed. If the option is not present or the dropdown is not visible, the method fails the test step.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnButtonInSetupPage",
        "code": "public void clickOnButtonInSetupPage(String elementLabel) {\n\t\ttry {\n\t\t\tString field = elementLabel + \" button#xpath=//td[@id='topButtonRow']//input[@title='\" + elementLabel\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(field, 4);\n\t\t\tswitchToFrame(UserSetup_Iframe);\n\t\t\twaitForElement(field, 7);\n\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(elementLabel + \" field is not present.\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Button In Setup Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInSetupPage`, is used to click on a button with the specified label in the setup page of an application. The method takes one argument, `elementLabel`, which is the label of the button to be clicked.\n\nThe method first constructs an XPath expression to locate the button element based on the given label and a predefined XPath path. It then waits for the element to appear (up to 4 seconds) and switches to a specific iframe named \"UserSetup_Iframe\".\n\nOnce in the iframe, it waits again for the element to be displayed (up to 7 seconds) and checks if the element is actually visible. If it is, the method scrolls to the element and clicks on it using another method called `clickOnSpecialElement`. If the element is not present, the method fails the test step.\n\nIf any exceptions occur during the execution of this method, it catches them and reports a failure in the test step with the error message.",
        "input": [
            "String elementLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnButtonInSetupPageWithoutFrame",
        "code": "public void clickOnButtonInSetupPageWithoutFrame(String elementLabel) {\n\t\ttry {\n\t\t\tString field = elementLabel + \" button#xpath=//td[@id='topButtonRow']//input[@title='\" + elementLabel\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(field, 4);\n\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(elementLabel + \" field is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Button In Setup Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnButtonInSetupPageWithoutFrame`, simulates a click on a button with the specified label (`elementLabel`) within the setup page without using an iframe. \n\nThe method first constructs an XPath expression to locate the button based on its label and the HTML structure of the setup page. It then waits for the element to be displayed, scrolls to it if necessary, and clicks on it.\n\nIf the button is not present or the click operation fails, the method reports a test step failure with an appropriate message.",
        "input": [
            "String elementLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInTextFieldInSetupPage",
        "code": "public void enterValueInTextFieldInSetupPage(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tswitchToFrame(UserSetup_Iframe);\n\t\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//parent::td//following-sibling::td/input | //label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//parent::td//following-sibling::td//textarea\";\n\t\t\t\twaitForElement(field, 20);\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Enter Value In TextField In SetupPage. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextFieldInSetupPage`, is used to enter a given value into a text field or textarea on a setup page. The method takes two parameters: `labelName` and `value`. \n\nThe method first checks if the provided value is not empty. If it's not, it switches to the specified iframe (`UserSetup_Iframe`) and then tries to find an element with the label name. It uses XPath to construct the field path based on the label name.\n\nOnce the element is found, the method waits for it to be displayed (up to 20 seconds), scrolls to it if necessary, and then enters the provided value into the field using a `typeIn` action.\n\nIf the element is not present or any other exception occurs during execution, the method fails the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInTextFieldInSetupPageWithoutFrame",
        "code": "public void enterValueInTextFieldInSetupPageWithoutFrame(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//parent::td//following-sibling::td/input | //label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//parent::td//following-sibling::td//textarea\";\n\t\t\t\twaitForElement(field, 20);\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Enter Value In TextField In SetupPage. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextFieldInSetupPageWithoutFrame`, is used to enter a given value into a text field or textarea on a setup page without a frame. \n\nThe method takes two string parameters: `labelName` and `value`. It first checks if the provided value is not empty. If it's not empty, it constructs an XPath expression to locate the text field or textarea with the matching label name. It then waits for the element to be displayed, scrolls to the element if necessary, and enters the given value into the field. \n\nIf the element is not present, the method fails the test step. If any exception occurs during this process, it also fails the test step and logs the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyTextIsAutopopulatedInSetupPage",
        "code": "public void verifyTextIsAutopopulatedInSetupPage(String fieldName, String expectedValue) {\n\t\ttry {\n\t\t\tString actualValue = \"\";\n\t\t\tString dataField = \"#xpath=//td[text()='\" + fieldName + \"']//following-sibling::td[1]\";\n\t\t\twaitForPageToLoad();\n\t\t\tswitchToFrame(UserSetup_Iframe);\n\t\t\twaitForElement(dataField, 25);\n\t\t\tif (isElementDisplayed(dataField, 5)) {\n\t\t\t\tactualValue = getText(dataField).trim();\n\t\t\t\tscrollToWebElement(dataField);\n\t\t\t\tif (actualValue.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + actualValue + \" value is present.\");\n\t\t\t\t\t;\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not present. Instead of we get \" + actualValue);\n\t\t\t\t}\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Text Is Autopopulated In Setup Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyTextIsAutopopulatedInSetupPage`, verifies that a specific text value is autopopulated in the setup page of an application.\n\nThe method takes two input parameters: `fieldName` and `expectedValue`. It uses these values to:\n\n1. Locate the field with the specified name using XPath.\n2. Wait for the page to load, switch to the relevant iframe (UserSetup_Iframe), and wait for the field to be displayed.\n3. If the field is displayed, it retrieves the actual value of the field, scrolls to the field, and checks if the expected value is present in the actual value.\n4. If the expected value is found, it takes a manual screenshot as confirmation. Otherwise, it marks the test step as failed with an error message indicating that the expected value was not found.\n5. If the field is not displayed, it also marks the test step as failed with an error message indicating that the field is missing.\n\nThe method catches any exceptions that may occur during its execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickEditOptionWithLabelInMasterPage",
        "code": "public void clickEditOptionWithLabelInMasterPage(String fieldLabel) {\n\t\ttry {\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']/parent::div/../..//div/button\";\n\t\t\twaitForElement(editOption, 20);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPage`, simulates a click on an edit button with a specific label in the Master Page of a web application.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the edit button based on the provided `fieldLabel`.\n2. It waits for the edit button to be present using the `waitForElement` method.\n3. If the edit button is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods respectively.\n4. If the edit button is not present, it marks the test step as failed with an error message including the label of the missing edit button.\n\nThe method catches any exceptions that may occur during execution and logs a failure message if an exception is thrown.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedValueFromInMasterformatted_rich_text",
        "code": "public String verifyAutoPopulatedValueFromInMasterformatted_rich_text(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=(//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span[@part='formatted-rich-text'])[last()]\";\n\t\t\tif (isElementDisplayed(moveToElement, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(moveToElement);\n\t\t\t\t;\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueFromInMasterformatted_rich_text`, is used to verify the auto-populated value from a rich text field in a master page. \n\nThe method takes a String parameter `Label` and uses it to construct an XPath expression that moves to the element containing the rich text field. It then checks if this element is displayed, scrolls to it if necessary, gets its text value, highlights the element, and captures a screenshot for verification purposes. If the element is not present or any exception occurs during execution, the method fails the test step. \n\nThe method returns the auto-populated text value as a String.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "GetExpectedAgreementJson1Value",
        "code": "public String GetExpectedAgreementJson1Value(String JSON) {\n\t\tString Exptext = \"\";\n\t\tString replaceText = \"\";\n\t\ttry {\n\t\t\tint count = 0;\n\t\t\tint j = 0;\n\t\t\tint i = 0;\n\t\t\tString[] Substring = JSON.split(\",\");\n\t\t\tfor (i = 0; i <= Substring.length - 1; i++) {\n\t\t\t\tif (Substring[i].contains(\"Date_FD\")) {\n\t\t\t\t\tcount = count + 1;\n\t\t\t\t\treplaceText = Substring[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (i = 0; i <= Substring.length - 1; i++) {\n\t\t\t\tif (Substring[i].contains(replaceText)) {\n\t\t\t\t\tj = j + 1;\n\t\t\t\t\tif (j == count) {\n\t\t\t\t\t\tSubstring[i] = Substring[i].replace(replaceText, \"\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tExptext = Arrays.toString(Substring);\n\t\t\tExptext = Exptext.replace(\", ,  \", \",\");\n\t\t\tExptext = Exptext.replace(\"[\", \"\");\n\t\t\tExptext = Exptext.replace(\"]\", \"\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in AgreementJson1Value. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn Exptext;\n\t}",
        "description": "This Java method, `GetExpectedAgreementJson1Value`, takes a JSON string as input and returns the expected agreement value in JSON format after processing.\n\nThe method appears to be designed to extract specific values from the input JSON string. It does this by:\n\n1. Splitting the JSON string into an array of substrings using commas as separators.\n2. Iterating through the array and finding the first substring that contains the string \"Date_FD\".\n3. Counting the number of occurrences of this substring in the array.\n4. Then, it iterates through the array again and replaces each occurrence of the \"Date_FD\" substring with an empty string (i.e., removes it).\n5. Finally, it converts the processed array back into a JSON-like string by joining the substrings with commas.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during processing and report them as test failures.",
        "input": [
            "String JSON"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyTextIsPresentValueInHyperLinkField",
        "code": "public String verifyTextIsPresentValueInHyperLinkField(String Label) {\n\t\tString value = \"\";\n\t\tString labelElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span/slot//a//span\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 10);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.contains(\"\\n\")) {\n\t\t\t\t\ttext = text.split(\"\\n\")[0];\n\t\t\t\t}\n\t\t\t\tif (!text.isEmpty()) {\n\t\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tvalue = text;\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + text + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no value is reflected in \" + Label + \" field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyTextIsPresentValueInHyperLinkField`, verifies if the specified text is present in a Hyperlink field on a web page. The method takes a string parameter `Label` which represents the text to be searched for.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the input `Label` and navigates to the element.\n2. It waits for the element to be displayed (up to 10 seconds) and checks if it is displayed within 5 seconds.\n3. If the element is displayed, it extracts the text from the element.\n4. If the extracted text contains newline characters (`\\n`), it removes them by splitting the string at the first occurrence of `\\n`.\n5. It then verifies that the resulting text is not empty.\n6. If the text is not empty, it scrolls to the element, highlights it (using a high-lighting method), and captures a manual screenshot for verification purposes.\n7. The method returns the extracted text value.\n\nIf any step fails (e.g., the element is not displayed or the text is empty), the method reports a test failure with an appropriate message.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "selectValueInAvailableChosenBox",
        "code": "public void selectValueInAvailableChosenBox(String fieldlabel, String value, String moveTo) {\n\t\ttry {\n\t\t\tString valueInAvailableBox = value + \" value#xpath=//div[text()='\" + fieldlabel\n\t\t\t\t\t+ \"']/..//span[text()='Available']/..//span[text()='\" + value + \"']\";\n\t\t\tString valueInChosenBox = value + \" value#xpath=//div[text()='\" + fieldlabel\n\t\t\t\t\t+ \"']/..//span[text()='Chosen']/..//span[text()='\" + value + \"']\";\n\t\t\tif (moveTo.equalsIgnoreCase(\"Chosen\")) {\n\t\t\t\tString rightArrow_btn = \"#xpath=//div[text()='\" + fieldlabel + \"']/..//button[contains(@title,'\"\n\t\t\t\t\t\t+ moveTo + \"')]\";\n\t\t\t\twaitForElement(valueInAvailableBox, 10);\n\t\t\t\tif (isElementDisplayed(valueInAvailableBox, 4)) {\n\t\t\t\t\tscrollToWebElement(valueInAvailableBox);\n\t\t\t\t\tclickOnSpecialElement(valueInAvailableBox);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tclickOnSpecialElement(rightArrow_btn);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + value + \" is moved to Chosen box.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(value + \" value is not present in Available box. \");\n\t\t\t\t}\n\t\t\t} else if (moveTo.equalsIgnoreCase(\"Available\")) {\n\t\t\t\tString leftArrow_btn = \"#xpath=//div[text()='\" + fieldlabel + \"']/..//button[contains(@title,'\" + moveTo\n\t\t\t\t\t\t+ \"')]\";\n\t\t\t\tif (isElementDisplayed(valueInChosenBox, 4)) {\n\t\t\t\t\tscrollToWebElement(valueInChosenBox);\n\t\t\t\t\tclickOnSpecialElement(valueInChosenBox);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tclickOnSpecialElement(leftArrow_btn);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + value + \" is moved to Available box.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(value + \" value is not present in Chosen box. \");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(moveTo + \" value is not present in UI. \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Value In Available Chosen Box. Exception :\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueInAvailableChosenBox`, is used to select a value from either the \"Available\" or \"Chosen\" box, depending on the specified `moveTo` parameter.\n\nThe method takes three string parameters: `fieldlabel`, `value`, and `moveTo`. It uses these values to construct XPath expressions for the available and chosen boxes. \n\nIf `moveTo` is equal to \"Chosen\", it attempts to move a value from the Available box to the Chosen box by clicking on the right arrow button. If the value is not present in the Available box, it reports an error.\n\nIf `moveTo` is equal to \"Available\", it attempts to move a value from the Chosen box to the Available box by clicking on the left arrow button. If the value is not present in the Chosen box, it reports an error.\n\nIf neither \"Chosen\" nor \"Available\" are specified for `moveTo`, it reports an error stating that the value is not present in the UI.\n\nThe method also includes some basic error handling using a try-catch block, which will catch any exceptions and report them as test failures.",
        "input": [
            "String fieldlabel",
            "String value",
            "String moveTo"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "VerifyDropdownValuesInField",
        "code": "public void VerifyDropdownValuesInField(String dropdownName, String value) {\n\t\tArrayList<String> al = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/ancestor::span//div//button//span\";\n\t\t\tclickOn(dropdown);\n\n\t\t\tList<WebElement> element = findWebElements(\"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/ancestor::span//lightning-combobox//div//lightning-base-combobox//div//lightning-base-combobox-item//span[@class='slds-truncate'])\");\n\n\t\t\tfor (int i = 1; i <= element.size(); i++) {\n\t\t\t\tString Field = \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']/ancestor::span//lightning-combobox//div//lightning-base-combobox//div//lightning-base-combobox-item//span[@class='slds-truncate'])[\"\n\t\t\t\t\t\t+ i + \"]\";\n\n\t\t\t\tString arr = getText(Field);\n\t\t\t\tif (arr.equals(value)) {\n\t\t\t\t\ttestStepFailed(dropdownName + \" dropdown value is present in \" + dropdownName);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tal.add(arr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmanualScreenshot(value + \" is not available in \" + dropdownName + \".The picklist values are : \" + al);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDropdownValuesInField`, is used to verify if a specific value exists in a dropdown field. It takes two parameters: the name of the dropdown field and the expected value.\n\nHere's what it does:\n\n1. It clicks on the specified dropdown field.\n2. It finds all the options available in the dropdown field.\n3. It then iterates through each option, checking if the expected value matches any of them.\n4. If the expected value is found, it reports a test step failure and stops searching.\n5. If the expected value is not found after iterating through all options, it adds the actual values to an array list and takes a manual screenshot with the details.\n\nThe method also catches any exceptions that may occur during execution and reports a test step failure if one occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "VerifyDropdownValuesInField",
        "code": "public void VerifyDropdownValuesInField(String dropdownName) {\n\t\tArrayList<String> al = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/ancestor::span//div//button//span\";\n\t\t\tif (isElementDisplayed(dropdown, 16)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tList<WebElement> element = findWebElements(\"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']/ancestor::span//lightning-combobox//div//lightning-base-combobox//div//lightning-base-combobox-item//span[@class='slds-truncate'])\");\n\t\t\t\tfor (int i = 1; i <= element.size(); i++) {\n\t\t\t\t\tString Field = \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t\t+ \"']/ancestor::span//lightning-combobox//div//lightning-base-combobox//div//lightning-base-combobox-item//span[@class='slds-truncate'])[\"\n\t\t\t\t\t\t\t+ i + \"]\";\n\t\t\t\t\tString arr = getText(Field);\n\t\t\t\t\tal.add(arr);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(dropdownName + \" picklist values are : \" + al);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDropdownValuesInField`, is used to verify the values present in a dropdown field. It takes a string parameter `dropdownName` which represents the name of the dropdown field.\n\nThe method first constructs an XPath expression to locate the dropdown element and then checks if it's displayed on the page using the `isElementDisplayed` method. If the dropdown is displayed, it clicks on the dropdown and retrieves all the values present in the dropdown using another XPath expression.\n\nIt then loops through these values, adds them to an ArrayList, and takes a manual screenshot of the dropdown with its values. Finally, if any exception occurs during this process, it marks the test step as failed.\n\nIf the dropdown is not displayed on the page, it also marks the test step as failed.",
        "input": [
            "String dropdownName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInTextareaFieldInAdminLogin",
        "code": "public void enterValueInTextareaFieldInAdminLogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\twaitTime(8);\n\t\t\t;\n\t\t\tString field = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//following::div/textarea\";\n\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInTextareaFieldInAdminLogin \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextareaFieldInAdminLogin`, enters a specified value into a textarea field with a specific dropdown name in an admin login page. The method:\n\n1. Waits for 8 seconds using the `waitTime(8)` method.\n2. Constructs an XPath expression to locate the textarea field based on the provided dropdown name.\n3. Checks if the field is displayed within 8 seconds using the `isElementDisplayed` method. If not, it fails the test step with a message indicating that the field is not present.\n4. Scrolls to the field and highlights it using the `scrollToWebElement` and `highLighterMethod` methods, respectively.\n5. Enters the specified value into the textarea field using the `typeIn` method.\n6. If any exceptions occur during execution, it catches them and fails the test step with a message indicating that the operation failed.\n\nThe method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be entered into the textarea field).",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + labelname + \"']\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementPresent(searchField)) {\n\t\t\t\tmanualScreenshot(getText(searchField) + \" field is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(getText(labelname) + \"field is not present\");\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsPresent`, checks if a specific field with the given label name is present on the page. It uses an XPath expression to locate the element and then verifies its presence using a wait for the element and an isElementPresent check. If the field is found, it takes a manual screenshot with the text of the field as the file name. If an exception occurs during this process, it marks the test step as failed and includes a message indicating that the field was not present.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "gettextValueFromHyperLinkInAdminLogin",
        "code": "public String gettextValueFromHyperLinkInAdminLogin(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div/span//a//span\";\n\t\t\tString Label = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']\";\n\t\t\twaitForElement(Label);\n\t\t\tif (isElementDisplayed(Label)) {\n\t\t\t\tscrollToWebElement(Label);\n\t\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\ttext = getText(Element);\n\t\t\t\t\tmanualScreenshot(LabelName + \" : \" + text);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\t\ttestStepInfo(LabelName + \"Value is not populated\");\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(LabelName + \"is not displayed\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `gettextValueFromHyperLinkInAdminLogin`, is used to retrieve the text value from a hyperlink element on an admin login page. The method takes a string parameter `LabelName` which is used to construct two XPath expressions: one for finding the label element and another for finding the hyperlink element.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for the label element to be displayed using the `waitForElement` method.\n2. If the label element is displayed, it scrolls to that element using the `scrollToWebElement` method.\n3. It checks if the hyperlink element is displayed within 3 seconds using the `isElementDisplayed` method with a timeout of 3 seconds.\n4. If the hyperlink element is displayed, it highlights the element using the `highLighterMethod` and retrieves the text value from that element using the `getText` method.\n5. It takes a manual screenshot of the label element with its associated text value.\n6. It waits for 5 seconds using the `waitTime` method.\n7. If the text value is empty, it logs an error message indicating that the value is not populated.\n8. If any exception occurs during the execution of the method, it logs a failure message and returns an empty string.\n\nThe method finally returns the retrieved text value as a string.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "chooseValueInListTextField",
        "code": "public void chooseValueInListTextField(String labelName, String value) {\n\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString closeIcon = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//div//div//button\";\n\t\t\t\t;\n\t\t\t\tif (isElementDisplayed(closeIcon, 6)) {\n\t\t\t\t\tscrollToWebElement(closeIcon);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tscrollToElement(closeIcon);\n\t\t\t\t\thighLighterMethod(closeIcon);\n\t\t\t\t\tclickOnSpecialElement(closeIcon);\n\t\t\t\t}\n\t\t\t\tString searchField = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//../following-sibling::div//input\";\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\tString lnk_zipCity = value\n\t\t\t\t\t\t+ \"#xpath=//table[contains(@class,'forceRecordLayout')]//tbody//td//a[@title='\" + value + \"']\";\n\t\t\t\twaitTime(4);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t// scrollToElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']/following::div//span[contains(text(),'Show more results for')]\";\n\n\t\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOnSpecialElement(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\twaitForElement(lnk_zipCity, 5);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(lnk_zipCity);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \"is not displayed\" + labelName);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueInListTextField`, appears to be part of a web automation test script. It takes two input parameters: `labelName` and `value`. The method's purpose is to interact with a web page to choose a value from a list.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. If the provided `value` is not empty, it proceeds with the following steps.\n2. It checks if an element with a specific XPath (a close icon) is displayed within 6 seconds. If it is, it scrolls to that element, waits for 1 second, and then highlights the element using a highlighting method.\n3. The method then clicks on the special element (likely a button or link).\n4. It sets focus on an input field with the same label name as the original `labelName` parameter.\n5. If the input field is displayed within the specified time frame, it scrolls to that field, highlights it using another highlighting method, and types in the provided `value`.\n6. The method then waits for 2 seconds before searching for an element with a specific XPath (a search icon).\n7. Once the search icon is found, it highlights the icon using the highlighting method and clicks on it.\n8. The script then waits for the page to load completely.\n9. It searches for another element with a specific XPath (`lnk_zipCity`) and waits for 5 seconds. If this element is displayed within 9 seconds, it clicks on it.\n\nIf any of these steps fail, the method catches the exception and reports a test failure with an appropriate message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "removeValueInListTextField",
        "code": "public void removeValueInListTextField(String labelName) {\n\t\ttry {\n\t\t\tString closeIcon = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//div//div//button\";\n\t\t\tif (isElementDisplayed(closeIcon, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(closeIcon);\n\t\t\t\twaitTime(1);\n\t\t\t\tscrollToElement(closeIcon);\n\t\t\t\thighLighterMethod(closeIcon);\n\t\t\t\tclickOnSpecialElement(closeIcon);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `removeValueInListTextField`, appears to be part of a test automation framework. The method removes a value from a list text field on a web page.\n\nHere's a brief summary:\n\n* It takes a `String` parameter `labelName` which represents the label name of the text field.\n* The method attempts to find an element with the specified label name using XPath.\n* If the element is displayed, it performs the following actions:\n\t+ Scrolls to the element\n\t+ Waits for 1 second\n\t+ Scrolls to the element again (perhaps to ensure the element is in view)\n\t+ Highlights the element using a high-lighting method\n\t+ Clicks on the special element (presumably the close button associated with the text field)\n* If the element is not displayed, it logs an error message.\n* The method catches any exceptions that may occur during execution and logs a failure message if one occurs.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "chooseValueInListTextFieldWithoutContains",
        "code": "public void chooseValueInListTextFieldWithoutContains(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tSystem.out.println();\n\t\t\t\tString closeIcon = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//div//div//button\";\n\t\t\t\tif (isElementDisplayed(closeIcon, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(closeIcon);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tscrollToElement(closeIcon);\n\t\t\t\t\thighLighterMethod(closeIcon);\n\t\t\t\t\tclickOnSpecialElement(closeIcon);\n\t\t\t\t}\n\t\t\t\tString searchField = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//div//lightning-base-formatted-text[text()='\" + value\n\t\t\t\t\t\t+ \"']/ancestor::th/preceding-sibling::td\";\n\t\t\t\twaitTime(4);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t// scrollToElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tString search_icn = \"search tab#xpath=(//label[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//following::div/lightning-base-combobox-item[@role='option'])[1]\";\n\n\t\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOnSpecialElement(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(lnk_zipCity);\n\t\t\t\t\t\tString select_btn = \"Select button#xpath=//lightning-button[@data-label='Select']/button\";\n\t\t\t\t\t\tif (isElementDisplayed(select_btn, 9)) {\n\t\t\t\t\t\t\tclickOn(select_btn);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueInListTextFieldWithoutContains`, appears to be a part of an automation test script. It is designed to interact with a web application and perform the following steps:\n\n1. Check if the given `value` is not empty.\n2. If the value is not empty, it searches for two elements:\n\t* A close icon element (identified by the label name and XPath) and performs actions on it (e.g., scrolling to the element, highlighting it, clicking on it).\n\t* A search field element (also identified by the label name and XPath) and performs actions on it (e.g., scrolling to the element, typing in the value, waiting for a specific icon to appear).\n\n3. If the search field element is displayed, it:\n\t* Scrolls to the element\n\t* Types in the value into the search field\n\t* Waits for a certain amount of time\n\t* Clicks on the first option in the dropdown list (identified by XPath)\n\t* Waits for the page to load and then waits for a specific amount of time\n\n4. If the `value` is empty or any of the above steps fail, it calls the `testStepFailed` method with an error message.\n\nThe method also catches any exceptions that may occur during its execution and calls the `testStepFailed` method with the exception message if one occurs.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "deleteAllDocumentsInAdmin",
        "code": "public void deleteAllDocumentsInAdmin() {\n\t\ttry {\n\t\t\tString downArrowField = \"#xpath=//td//span[text()='Show Actions']\";\n\t\t\twaitForElement(downArrowField, 5);\n\t\t\tif (isElementDisplayed(downArrowField, 4)) {\n\t\t\t\tList<WebElement> listOfDocuments = findWebElements(downArrowField);\n\t\t\t\tfor (int i = 0; i < listOfDocuments.size(); i++) {\n\t\t\t\t\tint countOfDocument = listOfDocuments.size() - i;\n\t\t\t\t\tString document_arrow_Btn = \"down arrow button #xpath=(//td//span[text()='Show Actions'])[\"\n\t\t\t\t\t\t\t+ countOfDocument + \"]\";\n\t\t\t\t\tString delete_Btn = \"Delete option#xpath=//a[@role='menuitem']//div[text()='Delete']\";\n\t\t\t\t\tString delete_Btn_popup = \"Delete button#xpath=//span[text()='Delete']//parent::button\";\n\t\t\t\t\tif (isElementDisplayed(document_arrow_Btn, 3)) {\n\t\t\t\t\t\tclickOnSpecialElement(document_arrow_Btn);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\twaitForElement(delete_Btn, 5);\n\t\t\t\t\t\tif (isElementDisplayed(delete_Btn, 5)) {\n\t\t\t\t\t\t\tclickOnSpecialElement(delete_Btn);\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\twaitForElement(delete_Btn_popup, 5);\n\t\t\t\t\t\t\tif (isElementDisplayed(delete_Btn_popup, 6)) {\n\t\t\t\t\t\t\t\tclickOn(delete_Btn_popup);\n\t\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Documents are not present.\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Delete All Documents In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `deleteAllDocumentsInAdmin()`, is designed to delete all documents present in an administrative interface. The method uses various Selenium Webdriver methods and waits to interact with the UI elements.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It searches for an element with the XPath `#xpath=//td//span[text()='Show Actions']` (a down arrow button) and waits for it to be displayed within 5 seconds.\n2. If the element is found, it retrieves all the child elements of this down arrow button using `findWebElements()`.\n3. It then iterates through each document element (identified by the XPath `(//td//span[text()='Show Actions'])[countOfDocument]`) and performs the following actions:\n\t* Clicks on the down arrow button to expand the document options.\n\t* Waits for 5 seconds.\n\t* Checks if the \"Delete\" option is displayed within 5 seconds.\n\t* If it is, clicks on the Delete option.\n\t* Waits for 5 seconds.\n\t* Verifies that the Delete confirmation pop-up is displayed within 6 seconds and clicks on it to confirm deletion.\n4. If any of these steps fail or if no documents are present, the method takes a manual screenshot with the message \"Documents are not present.\" and logs an error message.\n\nThe method catches any exceptions thrown during execution and reports them as test step failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "VerifyOppty_5kWallet_Status",
        "code": "public void VerifyOppty_5kWallet_Status() {\n\t\ttry {\n\t\t\tString element = \"#xpath=//th[@data-label='Oppty_5kWallet_Status Name']//a\";\n\t\t\twaitForElement(element, 5);\n\t\t\tif (isElementDisplayed(element, 4)) {\n\t\t\t\tList<WebElement> listOfelements = findWebElements(element);\n\t\t\t\tfor (int i = 0; i < listOfelements.size(); i++) {\n\t\t\t\t\tint countOfDocument = listOfelements.size() - i;\n\t\t\t\t\tString Oppty_5kWallet_Status = \"Oppty_5kWallet_Status Name #xpath=(//th[@data-label='Oppty_5kWallet_Status Name']//a)[\"\n\t\t\t\t\t\t\t+ countOfDocument + \"]\";\n\t\t\t\t\tString Oppty_5kWallet_Status_ID = \"Oppty_5kWallet_Status Name#xpath=(//th[@data-label='Oppty_5kWallet_Status Name']//a//slot//slot)[\"\n\t\t\t\t\t\t\t+ countOfDocument + \"]\";\n\t\t\t\t\tif (isElementDisplayed(Oppty_5kWallet_Status, 3)) {\n\t\t\t\t\t\tclickOnSpecialElement(Oppty_5kWallet_Status);\n\t\t\t\t\t\ttestStepPassed(\"Oppty_5kWallet_Status Record : \" + getText(Oppty_5kWallet_Status_ID));\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\tverifyAutoPopulatedValueInMaster(\"Offer Type\");\n\t\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Oppty_5kWallet_Status record is not created\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Oppty_5kWallet_Status records are not present.\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyOppty_5kWallet_Status In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyOppty_5kWallet_Status`, is used to verify the presence and status of records for \"Oppty_5kWallet_Status Name\" in an application. Here's a brief summary:\n\n1. The method uses XPath to locate an element with the label \"Oppty_5kWallet_Status Name\".\n2. It waits for the element to be displayed (up to 5 seconds).\n3. If the element is displayed, it retrieves a list of web elements matching the XPath.\n4. The method then iterates through each element in the list and:\n\t* Verifies if the element is displayed (up to 3 seconds).\n\t* If the element is displayed, clicks on it and verifies that an auto-populated value for \"Offer Type\" is present.\n\t* Navigates back to the previous page and waits for 2 seconds.\n5. If any of these steps fail or if the element is not displayed, the method takes a manual screenshot and reports the failure.\n\nThe method catches any exceptions that occur during execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "deleteADocumentInAdmin",
        "code": "public void deleteADocumentInAdmin(String label) {\n\t\ttry {\n\t\t\tString document_arrow_Btn = label + \" down arrow button #xpath=//slot[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::th//a/ancestor::th/following::td//span[text()='Show Actions']\";\n\t\t\twaitForElement(document_arrow_Btn, 5);\n\t\t\tString delete_Btn = \"Delete option#xpath=//a[@role='menuitem']//div[text()='Delete']\";\n\t\t\tString delete_Btn_popup = \"Delete button#xpath=//span[text()='Delete']//parent::button\";\n\t\t\tif (isElementDisplayed(document_arrow_Btn, 3)) {\n\t\t\t\tclickOnSpecialElement(document_arrow_Btn);\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForElement(delete_Btn, 5);\n\t\t\t\tif (isElementDisplayed(delete_Btn, 5)) {\n\t\t\t\t\tclickOnSpecialElement(delete_Btn);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\twaitForElement(delete_Btn_popup, 5);\n\t\t\t\t\tif (isElementDisplayed(delete_Btn_popup, 6)) {\n\t\t\t\t\t\tclickOn(delete_Btn_popup);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(label + \" is not present.\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Delete a Document In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `deleteADocumentInAdmin`, deletes a document with the given label in an administrative context. \n\nThe method uses Selenium WebDriver to interact with the UI elements on the page. It first attempts to find the down arrow button associated with the document by its label, and then clicks on it. After waiting for some time, it checks if the \"Delete\" option is displayed and clicks on it. If the \"Delete\" button popup is displayed, it clicks on that as well.\n\nIf any of these steps fail (i.e., the element is not found or the click operation fails), the method catches the exception and reports a failure with a message describing the issue.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLinkValueInCardBoundaryInAdminLogin",
        "code": "public void clickOnLinkValueInCardBoundaryInAdminLogin(String headerName) {\n\t\ttry {\n\t\t\tString path = headerName\n\t\t\t\t\t+ \" Value#xpath=//div[contains(@class,'active')]//th[not(contains(@class,'marker'))]//span//a[text()='\"\n\t\t\t\t\t+ headerName + \"']\";\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(headerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + headerName + \" value . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnLinkValueInCardBoundaryInAdminLogin`, is used to click on a specific link that matches the given `headerName` within an admin login page. The link is identified by its path in the HTML structure of the page, which includes a class name \"active\" and the text of the link matching the provided `headerName`.\n\nThe method first constructs the path string using the `headerName` and a specific XPath expression. It then uses a `waitForElement` method to wait for the element to be present on the page (up to 10 seconds). If the element is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods, respectively.\n\nIf the element is not displayed after the specified timeout (6 seconds), the method fails the test step with a message indicating that the link is not present. In case of any exception during the execution of this method, it also fails the test step with an error message including the exception details.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnOppLinkafterGlobalSearch",
        "code": "public String clickOnOppLinkafterGlobalSearch() {\n\t\tString OppId = \"\";\n\t\ttry {\n\t\t\tString path = \"Opportunity id#xpath=//th/span/a[contains(text(),'B')]\";\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 10)) {\n\t\t\t\tOppId = getText(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opportunity link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppLink. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn OppId;\n\t}",
        "description": "This Java method, `clickOnOppLinkafterGlobalSearch`, simulates a user clicking on an opportunity link after performing a global search. It:\n\n1. Waits for an element with the specified XPath to be displayed (10 seconds timeout).\n2. If the element is displayed, it extracts the opportunity ID from the text of the element.\n3. Clicks on the special element (likely an HTML anchor tag) using the extracted path.\n4. Waits for the page to load completely.\n5. If the element is not displayed or any exception occurs during execution, it reports a test step failure with an appropriate error message.\n\nThe method returns the extracted opportunity ID as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "selectvaluefromdropdownAdminlogin",
        "code": "public void selectvaluefromdropdownAdminlogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/ancestor::span//div//button//span\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(dropdown);\n\t\t\t\tfor (int i = 0; i < 2; i++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString dropdownList = value + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t\t+ \"']//following-sibling::div//span[@title='\" + value + \"']\";\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdropdownAdminlogin`, selects a specific value from a dropdown menu on an admin login page. \n\nThe method takes two parameters: the name of the dropdown and the value to be selected. It uses various Selenium WebDriver methods to locate the dropdown, scroll to it if necessary, click on the dropdown, select the desired value, and then verify that the selection was successful or not.\n\nHere's a step-by-step breakdown:\n\n1. It first tries to locate the dropdown by its name using an XPath expression.\n2. If the dropdown is found, it scrolls to it and clicks on it twice (possibly to open the dropdown list).\n3. Then, it checks if the desired value is present in the dropdown list. If it is, it selects that value by clicking on it.\n4. If the selection is successful, it logs a test step as passed.\n5. If the selection fails or the value is not found in the dropdown, it logs a test step as failed.\n\nIf any exception occurs during this process, it also logs a test step as failed and provides the error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnButtonOnMasterPage",
        "code": "public void clickOnButtonOnMasterPage(String buttonLabel) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitTime(2);\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']//parent::lightning-button |  //div[text()='\"+buttonLabel+\"']/parent::a\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tif (isElementDisplayed(button, 3)) {\n\t\t\t\t\tclickOn(button);\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(button);\n\t\t\t\t\tclickOn(button);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnButtonOnMasterPage`, simulates a user clicking on a button with the specified label (`buttonLabel`) on a master page. The method performs the following steps:\n\n1. Refreshes the current page.\n2. Waits for 2 seconds.\n3. Constructs an XPath expression to locate the button using the provided `buttonLabel`.\n4. Waits up to 10 seconds for the button to be displayed.\n5. If the button is displayed, it attempts to scroll to and click on the button. If scrolling does not work, it tries clicking again.\n6. If the button is not displayed after a certain time (5 seconds), takes a manual screenshot with an error message.\n\nIf any exception occurs during these steps, the method catches it and reports the failure with the exception message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInFieldAdminLogin",
        "code": "public void enterValueInFieldAdminLogin(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldAdminLogin`, is used to enter a value into a specific field on an admin login page. The method takes two parameters: `labelName` and `value`. \n\nHere's what the method does:\n\n- It constructs an XPath expression based on the provided `labelName`.\n- It waits for the element identified by this XPath expression to be visible (up to 10 seconds).\n- If the element is displayed, it scrolls to that element, highlights it, and then enters the provided `value` into the field.\n- If the element is not displayed after 8 seconds, it marks the test step as failed.\n\nThe method also includes error handling: if any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a message including the exception's message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInFieldAdminLoginWithScreenshot",
        "code": "public void enterValueInFieldAdminLoginWithScreenshot(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tmanualScreenshot(labelName +\" has ' \"+value+\" '\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `enterValueInFieldAdminLoginWithScreenshot`, enters a given value into a text field on an admin login page and takes a screenshot of the process. The method:\n\n1. Creates an XPath expression to locate the text field based on its label name.\n2. Waits for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it scrolls to the element, highlights it using a high lighter method, enters the given value into the field, and takes a manual screenshot with the entered value.\n4. If the element is not displayed after 8 seconds, it marks the test step as failed.\n5. If any exception occurs during the process, it also marks the test step as failed.\n\nThe method is used to automate testing of an admin login page where users need to enter specific values into text fields.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedDateValueInMaster",
        "code": "public String verifyAutoPopulatedDateValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Date = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//lightning-formatted-text\";\n\t\t\tif (isElementDisplayed(Date, 5)) {\n\t\t\t\tscrollToWebElement(Date);\n\t\t\t\thighLighterMethod(Date);\n\t\t\t\ttext = getText(Date);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `verifyAutoPopulatedDateValueInMaster`, is used to verify the auto-populated date value in a master record. \n\nIt takes a string parameter `Label` which seems to be the label or title of the field being verified. The method uses an XPath expression to locate the element containing the desired date value. \n\nIf the element is displayed, it scrolls to the element, highlights it using a highlighting method (not shown in this code), gets the text value from the element, and takes a manual screenshot for verification purposes. If the field is not present or the operation fails, it reports a test step failure.\n\nThe method returns the text value of the auto-populated date if successful, otherwise an empty string.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInFieldInMasterPage",
        "code": "public void enterValueInFieldInMasterPage(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//legend[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//..//lightning-datepicker//div/input\";\n\t\t\t\twaitTime(2);\n\t\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldInMasterPage`, enters a given value into a field on the Master Page of a Lightning application. The method takes two parameters: `labelName` and `value`. \n\n- It first checks if the provided value is not empty.\n- If it's not empty, it constructs an XPath expression to locate the field with the label name.\n- It then waits for 2 seconds before attempting to interact with the field.\n- If the field is displayed, it scrolls to the field and types in the provided value. \n- If the field is not present or any other exception occurs during execution, it fails the test step.\n\nThis method seems to be part of an automation framework that interacts with a Salesforce Lightning application using Selenium WebDriver.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInTextAreaAdminLogin",
        "code": "public void enterValueInTextAreaAdminLogin(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//ancestor::span//div/textarea\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 8)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextAreaAdminLogin`, is used to enter a value into a text area field on an admin login page. The method takes two parameters: `labelName` and `value`. \n\n- It first constructs an XPath expression by combining the provided label name with a specific path to locate the corresponding textarea element.\n- Then, it waits for the element to be displayed within a specified time limit (10 seconds).\n- If the element is displayed, the method scrolls the textarea into view, highlights it using a high-lighting mechanism (not shown in this code snippet), and enters the provided value into the textarea using a `typeIn` method.\n- If the element is not displayed after waiting for 8 seconds, the method marks the test step as failed with an error message indicating that the field was not present.\n\nThe method also includes exception handling to catch any unexpected errors during execution. If an exception occurs, it will mark the test step as failed and report the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnSaveButtonInMasterPageWithActionClass",
        "code": "public void clickOnSaveButtonInMasterPageWithActionClass(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\ttestStepPassed(\"Click On : \" + buttonLabel);\n\t\t\t\t// if (isElementDisplayed(button, 10)) {\n\t\t\t\t// action.moveToElement(element).click().perform();\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnSaveButtonInMasterPageWithActionClass`, simulates a click on a button with the specified label in the master page. The method uses Selenium WebDriver to interact with the browser.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the button based on its text.\n2. It waits for the button to be displayed (up to 10 seconds).\n3. If the button is displayed, it scrolls to the button and then simulates a mouse click on it using the `Actions` class.\n4. It logs a test step as passed if the button is clicked successfully.\n5. If the button is not displayed within the specified time, it logs a test step failure with an error message.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the exception message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectSales",
        "code": "public void selectSales(String sales) {\n\t\ttry {\n\t\t\tString waffle = \"App Launcher icon#xpath=//div[contains(@class,'appLauncher')]//button\";\n\t\t\tString search = \"App Launcher input field#xpath=//div[contains(@class,'appLauncherMenu')]//input\";\n\t\t\twaitForElement(waffle, 20);\n\t\t\tif (isElementDisplayed(waffle, 4)) {\n\t\t\t\tclickOn(waffle);\n\t\t\t\twaitForElement(search, 20);\n\t\t\t\tif (isElementDisplayed(search, 4)) {\n\t\t\t\t\ttypeIn(search, sales);\n\t\t\t\t\tWebElement ele = findWebElement(search);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Sales. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "The `selectSales` method is a Java method that simulates a user interaction to select sales options on a web application using Selenium WebDriver. \n\nIt attempts to:\n\n1. Wait for an element with the XPath locator `\"App Launcher icon#xpath=//div[contains(@class,'appLauncher')]//button\"` (waffle) to be displayed.\n2. If the waffle is displayed, click on it.\n3. Wait for another element with the XPath locator `\"App Launcher input field#xpath=//div[contains(@class,'appLauncherMenu')]//input\"` (search) to be displayed.\n4. If the search box is displayed, type in the provided `sales` string and then press Enter using the `Keys.ENTER` key.\n\nIf any of these steps fail or an exception occurs, it will catch the exception and report a test step failure with the error message.",
        "input": [
            "String sales"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "selectSetUp",
        "code": "public void selectSetUp(String setup) {\n\t\ttry {\n\t\t\tString search = \"App Launcher icon#xpath=//input[@placeholder='Quick Find']\";\n\t\t\tString setUpList = \"App Launcher input field#xpath=//mark[text()='\" + setup + \"']\";\n\t\t\twaitForElement(search, 20);\n\t\t\tif (isElementDisplayed(search, 4)) {\n\t\t\t\ttypeIn(search, setup);\n\t\t\t\tWebElement ele = findWebElement(search);\n\t\t\t\twaitTime(2);\n\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\twaitForElement(setUpList, 20);\n\t\t\t\tif (isElementDisplayed(setUpList, 4)) {\n\t\t\t\t\tclickOn(setUpList);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Sales. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `selectSetUp`, is used to select a specific setup from an App Launcher icon. It takes one parameter, `setup`, which represents the name of the setup to be selected.\n\nThe method uses various WebDriver commands and waits to perform the following steps:\n\n1. Finds the \"App Launcher icon\" element using XPath.\n2. Waits for the element to be displayed (up to 20 seconds).\n3. If the element is displayed, types in the `setup` parameter into the input field associated with the icon.\n4. Sends an Enter key press to the input field.\n5. Waits for another element (\"App Launcher input field\") that matches the specified setup name to be displayed (up to 20 seconds).\n6. If the element is displayed, clicks on it.\n\nIf any of these steps fail or throw an exception, the method catches the exception and logs a failure message using `testStepFailed`.",
        "input": [
            "String setup"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLinkValueInCardBoundaryWithLabel",
        "code": "public void clickOnLinkValueInCardBoundaryWithLabel(String LabelValue) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = LabelValue + \"#xpath=(//span[text()='\" + LabelValue\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkValueInCardBoundaryWithLabel`, clicks on a link with the specified label value within a specific boundary (card) using XPath. Here's a breakdown of what it does:\n\n1. It takes a `String` parameter `LabelValue`, which represents the label value of the link to be clicked.\n2. It constructs an XPath path by concatenating the `LabelValue` with a fixed XPath expression that targets the link element.\n3. It waits for the page to load using the `waitForPageToLoad()` method.\n4. It extracts the text content of the link element using the `getText(path)` method and stores it in the `link` variable.\n5. It waits for the link element to be present on the page using the `waitForElement(path, 24)` method, which takes a timeout value of 24 seconds.\n6. If the link is present, it scrolls to the link element using the `scrollToWebElement(path)` method and then clicks on it using the `clickOnSpecialElement(path)` method.\n7. If the link is not present, it fails the test step with an error message indicating that the link is not present.\n\nThe method also includes a catch block to handle any exceptions that may occur during the execution of the method, such as if the link is not found or if there's an issue clicking on it. In this case, it fails the test step with an error message indicating the failure and the exception message.",
        "input": [
            "String LabelValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyDocShouldPresentInAdmin",
        "code": "public void verifyDocShouldPresentInAdmin(String LabelValue) {\n\t\ttry {\n\t\t\tString link = LabelValue\n\t\t\t\t\t+ \" Value#xpath=//div[@class='uiVirtualDataTable indicator']//following::a[contains(text(), '\"\n\t\t\t\t\t+ LabelValue + \"')]/../..//..//a[@data-refid='recordId']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(link, 5);\n\t\t\tif (isElementDisplayed(link, 6)) {\n\t\t\t\tmanualScreenshot(\"Successfully [ \" + LabelValue + \" ] document is created.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" document is not created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocShouldPresentInAdmin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocShouldPresentInAdmin`, verifies that a specific document labeled with the provided `LabelValue` is present in the admin interface.\n\nHere's a step-by-step breakdown:\n\n1. It constructs a link by concatenating the `LabelValue` with an XPath expression that targets the element containing the document.\n2. The method waits for the page to load and then waits for the constructed link to be displayed (up to 5 seconds).\n3. If the link is displayed, it takes a manual screenshot with a message indicating that the document was successfully created.\n4. If the link is not displayed within 6 seconds, it marks the test step as failed.\n5. In case of any exceptions during the execution, it catches the exception and marks the test step as failed with an error message.\n\nIn summary, this method checks if a specific document labeled with `LabelValue` exists in the admin interface and takes screenshots or marks failures accordingly.",
        "input": [
            "String LabelValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "enterValueInGlobalSearchField",
        "code": "public void enterValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOn(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Oct 6, 2022\n\t * @purpose : To remove the selected record value from field in masterpage.\n\t *\n\t * @param fieldLabelName : Provide the label of the field.\n\t */",
        "description": "This Java method is used to enter a specified value into the global search field on a webpage. The method attempts to locate and interact with specific elements on the page, including a \"Search\" button, a search field, and an option to show more results.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for the page to load.\n2. Waits for the \"Search\" button to appear (up to 25 seconds).\n3. If the \"Search\" button is displayed, clicks on it.\n4. Waits for the search field to appear (up to 9 seconds).\n5. If the search field is displayed, types in the specified value and waits for 3 seconds.\n6. If the \"Show more results\" option is displayed, clicks on it.\n7. If any of these steps fail, the method reports a test step failure with an error message.\n\nThe method also catches any exceptions that may occur during execution and reports a test step failure with the exception message if one occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "removeRecordValueInMaster",
        "code": "public void removeRecordValueInMaster(String fieldLabelName) {\n\t\ttry {\n\t\t\tString removeIcon = fieldLabelName + \" clear icon#xpath=//label[text()='\" + fieldLabelName\n\t\t\t\t\t+ \"']//..//button[@title='Clear Selection']\";\n\t\t\tif (isElementDisplayed(removeIcon, 20)) {\n\t\t\t\tscrollToWebElement(removeIcon);\n\t\t\t\tclickOnSpecialElement(removeIcon);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Clear icon or Record is not present in \" + fieldLabelName + \" field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnNextButtonInPopup . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `removeRecordValueInMaster`, removes a record value from a master field by clicking the clear icon associated with it. The method takes a `fieldLabelName` as input and performs the following actions:\n\n1. It constructs an XPath expression to locate the clear icon button corresponding to the given field label name.\n2. It checks if the clear icon is displayed within 20 seconds using the `isElementDisplayed` method.\n3. If the clear icon is displayed, it scrolls to the element using the `scrollToWebElement` method and then clicks on it using the `clickOnSpecialElement` method.\n4. If the clear icon is not displayed or the click operation fails, it takes a manual screenshot with an error message indicating that the clear icon or record is not present in the field.\n\nThe method also catches any exceptions that may occur during execution and logs them as test step failures using the `testStepFailed` method.",
        "input": [
            "String fieldLabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnCardBoundaryInCustomerAdminLogin",
        "code": "public void clickOnCardBoundaryInCustomerAdminLogin(String cardName) {\n\t\ttry {\n\t\t\tString path = cardName + \"#xpath=(//article//a/span[text()='\" + cardName + \"'])[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tscrollToElementTillPresentWithLowRange(path);\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 10)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + cardName + \" card \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnCardBoundaryInCustomerAdminLogin`, attempts to click on a specific card boundary in the customer admin login page. The method takes a string parameter `cardName` which is used to construct an XPath path to locate the card element.\n\nThe method performs the following steps:\n\n1. Constructs an XPath path based on the provided `cardName`.\n2. Waits for the page to load.\n3. Scrolls to the element until it's present with a low range (i.e., until the element is visible).\n4. Waits for the element to be displayed within 10 seconds.\n5. If the element is displayed, scrolls to the web element and clicks on it using `clickOnSpecialElement(path)`.\n6. If the element is not displayed, fails the test step with a message indicating that the card was not found.\n\nIf any exception occurs during these steps, the method catches it and fails the test step with an error message containing the exception's message.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLinkCustomerRelatedTabRecords",
        "code": "public String clickOnLinkCustomerRelatedTabRecords(String labelValue, String optionCount) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString IRRecordLink = labelValue + \" record link#xpath=(//span[text()='\" + labelValue\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForElement(IRRecordLink, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(IRRecordLink, 10)) {\n\t\t\t\tvalue = getText(IRRecordLink).trim();\n\t\t\t\thighLighterMethodManualScreenShot(IRRecordLink, value);\n\t\t\t\tclickOnSpecialElement(IRRecordLink);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelValue + \" IR record is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFinnoneInterfaceLink \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * @param Label\n\t * @param Value\n\t */",
        "description": "This Java method, `clickOnLinkCustomerRelatedTabRecords`, is used to interact with a link related to customer records in a Salesforce interface. The method takes two string parameters: `labelValue` and `optionCount`. \n\nThe method first constructs an XPath expression to locate the link by combining the provided `labelValue` with a predefined path. It then waits for this element to be displayed, checks if it is indeed displayed, and if so, retrieves its text value, takes a manual screenshot of the highlighted element, clicks on the element, and waits for 5 seconds. If the element is not created, the method fails the test step. \n\nIf any exception occurs during execution, the method also fails the test step with an error message. The method returns the retrieved text value as a string.",
        "input": [
            "String labelValue",
            "String optionCount"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedRecordTypeSlot",
        "code": "public void verifyAutoPopulatedRecordTypeSlot(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span[@class='displayLabel']/slot\";\n\t\ttry {\n\t\t\twaitForElement(moveToElement, 25);\n\t\t\tif (isElementDisplayed(moveToElement, 8)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(moveToElement);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + Value + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAutoPopulatedRecordTypeSlot. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedRecordTypeSlot`, is used to verify that the auto-populated record type slot matches the expected value for a given label. \n\nThe method first constructs an XPath string to locate the element associated with the provided label. It then waits for this element to be displayed and scrolls into view if necessary. The text of this element is retrieved and compared to the expected value. If the values match, the method takes a manual screenshot and highlights the element. If they do not match, the test step fails.\n\nThe method also includes error handling in case an exception occurs during execution.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyAutoPopulatedLinkValueInMaster",
        "code": "public String verifyAutoPopulatedLinkValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/parent::div/../..//div\";\n\t\t\tString labelElement = moveToElement + \"//slot/slot/*\";\n\t\t\tString labelElement1 = moveToElement + \"//span//slot/*\";\n\t\t\tString labelElement2 = moveToElement + \"//slot//a\";\n\t\t\tif (isElementDisplayed(labelElement, 40)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(Label + \" : \" + text);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `verifyAutoPopulatedLinkValueInMaster`, is used to verify the value of an auto-populated link field in a master record. The method takes a `String` parameter `Label` which represents the label of the field being verified.\n\nThe method uses various XPath expressions to locate the element and then performs the following actions:\n\n1. Scrolls to the element if it's not already visible.\n2. Retrieves the text value of the element using the `getText()` method.\n3. Highlights the element using a highlighting method (not shown in this code snippet).\n4. Logs the test step information with the label and the retrieved text value.\n5. Takes a manual screenshot to capture the visual verification.\n\nThe method also includes error handling to catch any exceptions that may occur during execution. If an exception is caught, it logs a test step failure message with the exception message.\n\nFinally, the method returns the retrieved text value as a `String`.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "Home",
        "function_name": "verifyExpectValueShouldNotPresentInRecordType",
        "code": "public void verifyExpectValueShouldNotPresentInRecordType(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/../..//div//span[@class='displayLabel']/slot\";\n\t\t// String labelElement = moveToElement + \"//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(moveToElement, 15);\n\t\t\tif (isElementPresent(moveToElement)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(moveToElement);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t} else if (text.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"Successfully no value is updated in [ \" + Label + \" ] field. And Expectedly [\"\n\t\t\t\t\t\t\t+ Value + \"] value is not updated.\");\n\t\t\t\t} else {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + Value + \" ] is not reflected in [ \" + Label + \" ] field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectValueShouldNotPresentInRecordType. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyExpectValueShouldNotPresentInRecordType`, is designed to verify that a specific value (`Value`) is not present in a record type field labeled with the given `Label`. \n\nHere's how it works:\n\n1. It constructs an XPath expression based on the provided `Label` and moves the focus to the corresponding element.\n2. It waits for the element to be present, then scrolls to it if necessary.\n3. If the expected value is found in the element, it fails the test step with a message indicating that the expected value was not reflected in the field.\n4. If no value is found (i.e., the text is empty), it takes a manual screenshot as evidence of this expected behavior.\n5. If the value is present but not equal to the expected value, it highlights the element and takes another manual screenshot.\n\nIf any exception occurs during the execution of these steps, it fails the test step with an error message indicating that the method `verifyExpectValueShouldNotPresentInRecordType` failed.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyExpectValueShouldNotPresent",
        "code": "public void verifyExpectValueShouldNotPresent(String Label, String Value) {\n\t\tString moveToElement = Label\n\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t+ Label + \"']/parent::div/../..//div\";\n\t\tString labelElement = moveToElement + \"//lightning-formatted-text\";\n\t\ttry {\n\t\t\twaitForElement(labelElement, 15);\n\t\t\tif (isElementPresent(labelElement)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t} else if (text.isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"Successfully no value is updated in [ \" + Label + \" ] field. And Expectedly [\"\n\t\t\t\t\t\t\t+ Value + \"] value is not updated.\");\n\t\t\t\t} else {\n\t\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + Value + \" ] is not reflected in [ \" + Label + \" ] field\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 26, 2023\n\t * @purpose :To verify the expected link value in master login.\n\t */",
        "description": "This Java method is used to verify that a specific label or field does not contain an expected value. The method takes two parameters: `Label` and `Value`. It first constructs an XPath expression to move to the element with the given label, then checks if the element is present on the page. If it is, the method scrolls to the element and gets its text content. If the text content matches the expected value, the test fails. If the text content is empty (i.e., no value is updated), a manual screenshot is taken to capture this behavior. In any case where the expected value is not present or empty, the method takes a manual screenshot and highlights the element using the `highLighterMethod`.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyExpectedHyperlinkValueIsPresent",
        "code": "public void verifyExpectedHyperlinkValueIsPresent(String label, String expectedValue) {\n\t\ttry {\n\t\t\tString link = label\n\t\t\t\t\t+ \"field#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ label + \"']//..//..//..//div//a//span\";\n\t\t\twaitForElement(link, 25);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tString actualValue = getText(link);\n\t\t\t\tif (actualValue.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Expected value [\" + expectedValue + \"] is present in [\" + label + \"] field.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value [\" + expectedValue + \"] is not present in [\" + label\n\t\t\t\t\t\t\t+ \"] field. Actual Value: \" + actualValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not having link value.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedHyperlinkValueIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyExpectedHyperlinkValueIsPresent`, verifies that a specific hyperlink value is present on the page. It takes two parameters: `label` and `expectedValue`. The method:\n\n1. Constructs an XPath expression to locate the link element based on the provided label.\n2. Waits for the element to be visible using `waitForElement`.\n3. Checks if the element is displayed within a certain time frame (15 seconds) using `isElementDisplayed`.\n4. If the element is displayed, it scrolls to the element using `scrollToWebElement`, highlights it using `highLighterMethod`, and retrieves its text value using `getText`.\n5. Compares the actual text value with the expected value provided as a parameter.\n6. If the values match, it takes a manual screenshot with a success message. Otherwise, it marks the test step as failed with an error message indicating that the expected value is not present or the actual value does not match.\n7. If any exception occurs during the execution of the method, it catches and fails the test step with an error message.",
        "input": [
            "String label",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyChargeIsCreated",
        "code": "public void verifyChargeIsCreated(String ChargeLabel) {\n\t\ttry {\n\t\t\tString link = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::th//a\";\n\t\t\twaitForElement(link, 25);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tString chargeRecordID = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::th//span//slot//slot\";\n\t\t\t\tif (isElementDisplayed(chargeRecordID, 15)) {\n\t\t\t\t\tchargeRecordID = getText(chargeRecordID);\n\t\t\t\t\tString chargeAmt = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t\t\t+ \"']/ancestor::td/following-sibling::td[@data-label='Charge Amount']//span//span\";\n\t\t\t\t\tif (isElementDisplayed(chargeAmt, 15)) {\n\t\t\t\t\t\thighLighterMethod(chargeAmt);\n\t\t\t\t\t\tmanualScreenshot(ChargeLabel + \" ( \" + chargeRecordID + \" ) is created with charge amount \"\n\t\t\t\t\t\t\t\t+ getText(chargeAmt));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(ChargeLabel + \" is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyChargeIsCreated. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyChargeIsCreated`, verifies that a charge with the specified label has been created and displays the expected information. \n\nThe method takes a `String` parameter `ChargeLabel`, which is used to construct XPath expressions to locate elements related to the charge.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the `ChargeLabel` and uses it to wait for an element to be displayed.\n2. If the element is displayed, it scrolls to that element, highlights it using a custom method (`highLighterMethod`), and then extracts the charge record ID from another XPath expression.\n3. It also extracts the charge amount from yet another XPath expression and takes a manual screenshot with the charge label, record ID, and charge amount as part of the screenshot name.\n4. If the element is not displayed (i.e., the charge has not been created), it marks the test step as failed.\n\nThe method catches any exceptions that occur during its execution and also marks the test step as failed if an exception occurs.",
        "input": [
            "String ChargeLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyChargeIsNotCreated",
        "code": "public void verifyChargeIsNotCreated(String ChargeLabel) {\n\t\ttry {\n\t\t\tString link = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::th//a\";\n\t\t\twaitForElement(link, 25);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tString chargeRecordID = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::th//span//slot//slot\";\n\t\t\t\tif (isElementDisplayed(chargeRecordID, 15)) {\n\t\t\t\t\tchargeRecordID = getText(chargeRecordID);\n\t\t\t\t\tString chargeAmt = ChargeLabel + \"#xpath=//slot[text()='\" + ChargeLabel\n\t\t\t\t\t\t\t+ \"']/ancestor::td/following-sibling::td[@data-label='Charge Amount']//span//span\";\n\t\t\t\t\tif (isElementDisplayed(chargeAmt, 15)) {\n\t\t\t\t\t\thighLighterMethod(chargeAmt);\n\t\t\t\t\t\ttestStepFailed(ChargeLabel + \" ( \" + chargeRecordID + \" ) is created with charge amount \"\n\t\t\t\t\t\t\t\t+ getText(chargeAmt));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(ChargeLabel + \" is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyChargeIsCreated. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyChargeIsNotCreated`, verifies that a charge with the specified label has not been created. It performs the following actions:\n\n1. Creates an XPath link based on the provided ChargeLabel.\n2. Waits for the element to be displayed (up to 25 seconds).\n3. If the element is displayed, it scrolls to the element and highlights it using the `highLighterMethod`.\n4. Verifies that a charge record ID exists by checking if the corresponding XPath link is displayed (up to 15 seconds).\n5. If the charge record ID exists, retrieves its text value.\n6. Verifies that the charge amount associated with the charge record ID is displayed (up to 15 seconds) and highlights it using `highLighterMethod`.\n7. If all checks pass, the test step fails with a message indicating that the charge has been created.\n8. If any of the above steps fail or an exception occurs, the method takes a manual screenshot with a message indicating that the charge was not created.\n\nThe method uses various helper methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethod` to perform these actions.",
        "input": [
            "String ChargeLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "verifyOfferStatusValue",
        "code": "public void verifyOfferStatusValue(String label, String expectedValue) {\n\t\ttry {\n\t\t\tString link = label + \"field#xpath=//span[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::td/following-sibling::td[@data-label='Status']//span//span\";\n\t\t\twaitForElement(link, 25);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tString actualValue = getText(link);\n\t\t\t\tif (actualValue.equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(label + \" offer status is updated as [\" + expectedValue + \"] .\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value [\" + expectedValue + \"] is not present in [\" + label\n\t\t\t\t\t\t\t+ \"] field. Actual Value: \" + actualValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not having link value.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedHyperlinkValueIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOfferStatusValue`, verifies the status value of an offer based on a given label and expected value. Here's a breakdown of what it does:\n\n1. It constructs a link string by concatenating the provided label with an XPath expression that navigates to the \"Status\" element related to the label.\n2. It uses the `waitForElement` method to wait for the element to be present, up to 25 seconds.\n3. If the element is displayed (within 15 seconds), it:\n\t* Scrolls to the element using `scrollToWebElement`.\n\t* Highlights the element using `highLighterMethod`.\n\t* Retrieves the actual value of the status using `getText`.\n\t* Compares the actual value with the expected value. If they match, it takes a manual screenshot.\n4. If the element is not displayed or the expected value does not match the actual value, it fails the test step and provides an error message.\n\nThe method also catches any exceptions that may occur during execution and reports a failure if one occurs.",
        "input": [
            "String label",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home",
        "function_name": "clickOnLinkInHomePage",
        "code": "public String clickOnLinkInHomePage(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\n\t\t\tString ClickOnLink = \"\" + labelname + \"#xpath=(//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/ancestor::table//tbody//th/span/a)[1]\";\n\t\t\twaitForElement(ClickOnLink, 30);\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(\"Successfully clicked on : \" + value);\n\t\t\t\t// waitTime(8);\n\t\t\t\trefreshPage();\n\t\t\t\t// waitTime(8);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}\n\n}",
        "description": "This Java method, `clickOnLinkInHomePage`, is used to click on a specific link in the home page of a web application based on the provided label name. The method attempts to:\n\n1. Construct an XPath expression to locate the link element with the specified label name.\n2. Wait for the link element to be displayed (up to 30 seconds).\n3. If the link is displayed, scroll to it and highlight it using a highlighting mechanism (not shown in this code snippet).\n4. Get the text of the link and store it in the `value` variable.\n5. Click on the link.\n6. Take a manual screenshot with a message indicating that the link was successfully clicked.\n7. Refresh the page.\n\nIf any exceptions occur during these steps, the method catches them and reports a test step failure with the exception details. The method returns the value of the link text as a string.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Home1",
        "function_name": "clickOnApps",
        "code": "public void clickOnApps() {\n\t\ttry {\n\t\t\tString apps = \"Apps Waffle icon#xpath=//div[contains(@class,'waffle')]/parent::button\";\n\t\t\tif (isElementDisplayed(apps, elementLoadWaitTime)) {\n\t\t\t\tclickOn(apps);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Apps Waffle icon is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnApps. Exception : \"+e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnApps()`, attempts to click on an \"Apps\" button with a Waffle icon on the screen. It uses an XPath expression to locate the element and then checks if it is displayed before attempting to click on it. If the element is not found or cannot be clicked, it reports a failure and ends the test step.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "clickOnCustomer",
        "code": "public void clickOnCustomer(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//p//div[@class='slds-grid']//div//a[text()='\"+linkName+\"']\";\n\t\t\twaitTime(4);\n\t\t\twaitForElementUntilVisible(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomer`, attempts to click on a specific customer link on a webpage. The method takes a string parameter `linkName` which is used to construct the XPath of the link element.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `linkName` with a fixed path to locate the desired link.\n2. It waits for 4 seconds using the `waitTime(4)` method.\n3. It uses the `waitForElementUntilVisible(link)` method to wait until the constructed link is visible on the page.\n4. If the link is present, it highlights the element using the `highLighterMethod(link)` method and then clicks on it using the `clickOnSpecialElement(link)` method. After clicking, it waits for 3 seconds.\n5. If the link is not present, it fails the test step with a message indicating that the link is not found.\n\nIf any exception occurs during the execution of this method, it catches the exception and fails the test step with a message indicating the failure.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@title='Search']//input\";\n\t\t\twaitForElement(search);\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \"+e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchField`, enters a given value into a search field on a web page. It uses an XPath locator to find the search input field and then attempts to type in the provided `value`. If the search field is not present or there's an error during the typing process, it logs a failure message and ends the test step.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "selectItemFromAppsMenu",
        "code": "public void selectItemFromAppsMenu(String itemName) {\n\t\ttry {\n\t\t\tenterValueInSearchField(itemName);\n\t\t\t\n\t\t\tString item = itemName+\" #xpath=//li[contains(@class,'oneAppLauncherItem')]//a[@title='\"+itemName+\"']\";\n\t\t\twaitForElement(item,3);\n\t\t\tif (isElementDisplayed(item, elementLoadWaitTime)) {\n\t\t\t\tclickOn(item);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(itemName+\" item is not available in the Apps Menu\");\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectItemFromApps. Exception : \"+e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectItemFromAppsMenu`, selects an item from an \"Apps\" menu by searching for the item name and then clicking on it if it's available.\n\nHere's a step-by-step breakdown:\n\n1. It attempts to enter the given `itemName` into a search field using the `enterValueInSearchField` method.\n2. It constructs an XPath expression that combines the `itemName` with a specific class (`oneAppLauncherItem`) and title attribute equal to the `itemName`. This is used to locate the item in the Apps menu.\n3. The method waits for up to 3 seconds using `waitForElement` for the constructed XPath expression to be displayed.\n4. If the element is displayed, it clicks on the item using the `clickOn` method.\n5. If the element is not displayed (i.e., the item is not available in the Apps menu), it fails the test step with a message indicating that the item is missing.\n6. In case of any exceptions during these steps, the method catches them and fails the test step with an error message.",
        "input": [
            "String itemName"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "searchInLightning",
        "code": "public void searchInLightning(String value) {\n\t\ttry {\n\t\t\tString search = \"Lightning Search #xpath=//input[contains(@title,'Search')]\";\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString list = \"Search list #xpath=//span[text()='\\\"\"+value+\"\\\" in Customers']//parent::a\";\n\t\t\t\tif (isElementDisplayed(list, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(list);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"List is not available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lightning Search field is not present\");\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchInLightning. Exception : \"+e.getMessage());\n\t\t}\n\t}",
        "description": "The `searchInLightning` method in Java searches for a specific value in the Lightning Search field of a Salesforce application. It takes a string parameter `value` as input, which is the term to be searched.\n\nHere's what the method does:\n\n1. It attempts to find the Lightning Search field using an XPath expression.\n2. If the field is found and displayed, it types in the search value using the `typeIn` method.\n3. It waits for the page to load completely using the `waitForPageToLoad` method.\n4. It then searches for a list element that contains the search value. The list element's XPath expression includes the search value as part of its text content.\n5. If the list element is found and displayed, it clicks on the list element using the `clickOn` method.\n6. If either the Lightning Search field or the list element is not found or displayed, the method fails with a test step failure.\n\nThe method also catches any exceptions that may occur during execution and reports them as test step failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "clickOnLink",
        "code": "public String clickOnLink(String labelValue) {\n\t\tString value = null;\n\t\tlabelValue=\"B18068315\";\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString finOneDetailsTableRow=\"FinnOne Details Table Row #xpath=//div[@class='uiVirtualDataTable indicator']/following-sibling::table//tbody//tr/*/span/a\";\n\t\t\tList<WebElement> tableRows=findWebElements(finOneDetailsTableRow);\n\t\t\tfor(int i=0;i<tableRows.size();i++) {\n\t\t\t\tString tableRowLabel=tableRows.get(i).getText();\n\t\t\t\tif(tableRowLabel.equals(labelValue)) {\n\t\t\t\t\tvalue=tableRows.get(i-1).getText();\n\t\t\t\t\ttableRows.get(i-1).click();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" +e.getMessage());\n\t\t}\n\t\treturn value;\n\t}\n\t\n\t/*if (isElementDisplayed(SearchText, 4)) {\n\t\tWebElement element = findWebElement(SearchText);\n\t\ttypeIn(SearchText, SearchValue);\n\t\telement.sendKeys(Keys.ENTER);\n\t*///div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='Search Customers']",
        "description": "This Java method is designed to interact with a web page using Selenium WebDriver. The method takes a `labelValue` parameter, which is expected to match the text of a table row in a specific table on the page.\n\nHere's what the method does:\n\n1. It sets the `labelValue` parameter to a hardcoded value (\"B18068315\") and assigns it to a local variable.\n2. It uses an XPath expression to locate a table with a specific class name, finds all the rows in that table, and stores them in a list of WebElements.\n3. The method then iterates through each row in the table, checking if the text of the current row matches the `labelValue` parameter.\n4. If a match is found, it extracts the text from the previous row (assuming the desired link is in the same row) and clicks on that link.\n5. If an exception occurs during this process, the method catches it and reports a test step failure with the error message.\n\nThe method returns the value of the clicked link as a String.",
        "input": [
            "String labelValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home1",
        "function_name": "globalCustomerSearch",
        "code": "public String globalCustomerSearch(String searchValue)\n\t{\n\t\ttry\n\t\t{\n\t\t\tString search = searchValue+\"#xpath=//div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='Search Customers']\";\n\t\t\tif(isElementDisplayed(search,3))\n\t\t\t{\n\t\t\t\tWebElement element = findWebElement(search);\n\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttestStepFailed(\"Global Search is not displayed\");\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"Failed in globalSearch \" +e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `globalCustomerSearch`, performs a search for customers using a global search functionality. It takes a `searchValue` as input and attempts to find the search input field on the page. If the search input field is found, it enters the search value and presses the Enter key to execute the search. The method returns the original `searchValue`.\n\nThe method uses Selenium WebDriver's APIs to interact with the web element, including:\n\n* `isElementDisplayed`: checks if an element is displayed\n* `findWebElement`: finds a web element based on the provided XPath expression\n* `typeIn`: types text into a web element\n* `sendKeys`: sends keyboard input (in this case, the Enter key)\n\nIf any exceptions occur during the execution of the method, it catches them and reports a test step failure with an error message.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home1",
        "function_name": "globalSalesSearch",
        "code": "public String globalSalesSearch(String searchValue)\n\t{\n\t\ttry\n\t\t{\n\t\t\tString search = searchValue+\"#xpath=//div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='Search Salesforce']\";\n\t\t\tif(isElementDisplayed(search,3))\n\t\t\t{\n\t\t\t\tWebElement element = findWebElement(search);\n\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttestStepFailed(\"Global Sales Search is not displayed\");\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"Failed in globalSearch \" +e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `globalSalesSearch`, performs a search in Salesforce using the provided `searchValue`. It uses an XPath expression to locate the search input field and then enters the search value and presses Enter. The method also includes error handling to catch any exceptions that may occur during execution. If the search input field is not displayed, it fails the test step.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Home1",
        "function_name": "globalSearch",
        "code": "public String globalSearch(String searchValue,String SearchLabel)\n\t{\n\t\ttry\n\t\t{\n\t\t\tString search = searchValue+\"#xpath=//div[contains(@class,'uiInput uiAutocomplete uiInput--default')]/input[@title='\"+SearchLabel+\"']\";\n\t\t\tif(isElementDisplayed(search,3))\n\t\t\t{\n\t\t\t\tWebElement element = findWebElement(search);\n\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\ttestStepFailed(\"Global Sales Search is not displayed\");\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"Failed in globalSearch \" +e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, named `globalSearch`, searches for a specific value within a web application using an XPath expression. The method takes two parameters: `searchValue` (the value to be searched) and `SearchLabel` (the label associated with the search input field).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression that combines the `searchValue` with the XPath query to locate the specific search input field.\n2. It checks if the search input field is displayed on the page using the `isElementDisplayed` method, allowing for a 3-second timeout.\n3. If the search input field is displayed, it finds the element using the `findWebElement` method and types in the `searchValue`.\n4. It then simulates pressing the Enter key to submit the search query.\n5. If the search input field is not displayed, it fails the test step with a message indicating that the global sales search is not displayed.\n6. In case of any exception during the execution of the method, it catches the exception and fails the test step with a message containing the error message.\n\nThe method returns the `searchValue` as its output.",
        "input": [
            "String searchValue",
            "String SearchLabel"
        ],
        "output": "String"
    },
    {
        "class_name": "Home1",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\t\t\tif (isElementDisplayed(profileLink, 3)) {\n\t\t\t\tclickOn(profileLink);\n\t\t\t\tif(isElementDisplayed(btn_logout,3)) {\n\t\t\t\t\tclickOn(btn_logout);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `logout()`, attempts to log out of an application. It first checks if a specific profile link is displayed on the screen, and if so, clicks on it. If the profile link is present, it then checks if another button (btn_logout) is also displayed. If both are present, it clicks on the logout button and logs that the logout was successful as a test step. If either the profile link or the logout button is not present, it fails the test step. In case of any exception during the execution of this method, it writes the exception information to a log file.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "searchValueInLightning",
        "code": "public void searchValueInLightning(String value,String text) {\n\t\ttry {\n\t\t\tString search = \"Lightning Search #xpath=//input[contains(@title,'Search')]\";\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\tString list = \"Search list #xpath=//span[text()='\\\"\"+value+\"\\\" in \"+text+\"']//parent::a\";\n\t\t\t\twaitForElement(list, 2);\n\t\t\t\tif (isElementDisplayed(list, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(list);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"List is not available\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Lightning Search field is not present\");\n\t\t\t}\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchInLightning. Exception : \"+e.getMessage());\n\t\t}\n\t\t\n\t\t\n\t}",
        "description": "This Java method, `searchValueInLightning`, searches for a given value (`value`) within a specified text (`text`) in the Lightning search field of a Salesforce application.\n\nHere's a step-by-step breakdown:\n\n1. It first defines two XPath strings: one for the Lightning Search input field and another for the search result list.\n2. It checks if the Lightning Search input field is displayed using the `isElementDisplayed` method, with a wait time specified by `elementLoadWaitTime`. If it's not displayed, the method fails.\n3. If the input field is present, it types in the given value (`value`) using the `typeIn` method.\n4. It then defines an XPath string for the search result list that contains the searched value and the original text.\n5. The method waits for this list to be displayed using the `waitForElement` method with a timeout of 2 seconds.\n6. If the list is not displayed, it fails the test step.\n7. If the list is present, it clicks on the search result link using the `clickOn` method.\n8. If any exceptions occur during this process, it catches them and reports a failure in the test step.\n\nThe method returns no value (void) but can potentially fail or report success based on its execution outcome.",
        "input": [
            "String value",
            "String text"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "searchInSalesForce",
        "code": "public void searchInSalesForce(String SearchValue)\n\t{\n\t\ttry\n\t\t{\n\t\t\tString SearchElement = \"#xpath=//input[@title='Search...']\";\n\t\t\tif(isElementDisplayed(SearchElement,3))\n\t\t\t{\n\t\t\t\tWebElement element = findWebElement(SearchElement);\n\t\t\t\ttypeIn(SearchElement, SearchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttestStepFailed(SearchElement + \"is not present\");\n\t\t\t}\n\t\t\t\n\t\t}catch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"Failed in SearchInSalesForce.Exception:\" +e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchInSalesForce`, searches for a value within Salesforce using WebDriver. It takes one parameter, `SearchValue`, which is the value to be searched.\n\nHere's what the method does:\n\n1. It tries to find an input element with the specified XPath (`#xpath=//input[@title='Search...']`).\n2. If the element is displayed, it types in the search value and presses Enter.\n3. If the element is not displayed (i.e., not present), it fails the test step.\n4. If any exception occurs during the execution of these steps, it also fails the test step with an error message containing the exception's message.\n\nIn summary, this method performs a search in Salesforce using WebDriver and handles any exceptions that may occur during the process.",
        "input": [
            "String SearchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Home1",
        "function_name": "getValuefromSearchResults",
        "code": "public void getValuefromSearchResults(String SearchValue)\n\t{\n\t\ttry\n\t\t{\n\t\t\tString SearchElement = \"#xpath=//table[@class='list']/tbody/tr/td/a[text()='\"+SearchValue+\"']\";\n\t\t\tif(isElementDisplayed(SearchElement,3))\n\t\t\t{\n\t\t\t\tclickOnSpecialElement(SearchElement);\n\t\t\t}else\n\t\t\t{\n\t\t\t\ttestStepInfo(SearchValue+\"is not present\");\n\t\t\t}\n\t\t}catch(Exception e)\n\t\t{\n\t\t\ttestStepFailed(\"Failed in getValuefromSearchResults.Exception\" +e.getMessage());\n\t\t}\n\t}\n\t\n\n}",
        "description": "This Java method, `getValuefromSearchResults`, is used to retrieve the value of an element from search results based on a given search value. \n\nThe method takes one parameter, `SearchValue`, which represents the value being searched for. It uses an XPath expression to locate an HTML table row containing an anchor tag with text matching the `SearchValue`. If the element is found and displayed within 3 seconds (as specified by the `isElementDisplayed` method), it calls another method (`clickOnSpecialElement`) to perform some action on that element. \n\nIf the element is not found or not displayed, it logs a test step failure with an informative message indicating that the search value was not present in the results.\n\nThe method also includes error handling using a `try-catch` block. If any exception occurs during the execution of the method, it logs a test step failed event with the exception message.",
        "input": [
            "String SearchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiHeaders",
        "code": "public String ApiHeaders() {\n\t\ttry {\n\t\t\tString headder = accesstocken + \",Content-Type:application/json\";\n\t\t\tSystem.out.println(headder);\n\t\t\treturn headder;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiHeaders\" + e.toString());\n\t\t}\n\t\treturn null;\n\n\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 29-Jun-2022\n\t * @purpose : To update or create an record through Rest assured API.\n\t *\n\t * @param Params\n\t *            : To provide the parameters which contains credentials\n\t * @param URL\n\t *            : To provide base URL.\n\t * @param EndPointURl\n\t *            : To provide the endpoint URL.\n\t * @param apiBody\n\t *            : To provide the body content of the API.\n\t */",
        "description": "This Java method, `ApiHeaders()`, appears to generate a string that represents an HTTP header for making a RESTful API request. The header includes the specified \"accesstocken\" value and sets the Content-Type to \"application/json\". \n\nIf any exception occurs while generating this header, it catches the exception and calls the `testStepFailed` method with the error message. If no exception is thrown, it prints the generated header to the console and returns it.\n\nThe method does not seem to take in any parameters as part of its signature, but based on the comments provided, it seems that this method is part of a larger API client class that takes in various parameters (such as `Params`, `URL`, `EndPointURl`, and `apiBody`) elsewhere.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiPush",
        "code": "public void ApiPush(String Params, String URL, String EndPointURl, String[] apiBody) {\n\t\ttry {\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\n\t\t\tApiValidation(Params, URL);\n\t\t\tString apiHeaders = ApiHeaders();\n\t\t\tfor (int apiBodyIterationCount = 0; apiBodyIterationCount < apiBody.length; apiBodyIterationCount++) {\n\t\t\t\ttestStepInfo(\"Service URL: \" + EndPointURl.split(\"com\")[1]);\n\t\t\t\ttestStepInfo(\"Request Body:\");\n\t\t\t\ttestStepPassed(apiBody[apiBodyIterationCount]);\n\t\t\t\tString endPointAuth = EndPointAuth(EndPointURl, apiHeaders, apiBody[apiBodyIterationCount]);\n\t\t\t\ttestStepInfo(\"Response Body:\");\n\t\t\t\ttestStepPassed(endPointAuth);\n\t\t\t\tThread.sleep(300);\n\t\t\t}\n\t\t\twaitTime(30);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiPush\" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `ApiPush`, is used to execute API scripts by pushing data to a specified endpoint. It takes four parameters: `Params` (likely some kind of parameter string), `URL` (the base URL for the API), `EndPointURl` (the specific endpoint URL), and `apiBody` (an array of request bodies).\n\nThe method first logs a test step information message indicating that it's executing an API script. It then calls another method, `ApiValidation`, to validate the API parameters.\n\nNext, it constructs a string called `apiHeaders` using the `ApiHeaders()` method. Then, for each item in the `apiBody` array, it:\n\n1. Logs test step information about the service URL and request body.\n2. Calls the `testStepPassed` method to mark the current test step as passed.\n3. Calls another method, `EndPointAuth`, to authenticate with the endpoint using the provided headers and request body.\n4. Logs test step information about the response body.\n5. Calls the `testStepPassed` method again to mark the current test step as passed.\n\nAfter processing each item in the `apiBody` array, it waits for 30 seconds using the `waitTime(30)` method.\n\nIf any exceptions occur during execution, the method catches them and logs a test step failure message with the exception's string representation.",
        "input": [
            "String Params",
            "String URL",
            "String EndPointURl",
            "String apiBody"
        ],
        "output": "void"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiPushToGet",
        "code": "public String ApiPushToGet(String Params, String URL, String EndPointURl) {\n\t\tString returnResponse = null;\n\t\ttry {\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\n\t\t\tApiValidation(Params, URL);\n\t\t\tString apiHeaders = ApiHeaders();\n\t\t\ttestStepInfo(\"Service URL: \" + EndPointURl.split(\"com\")[1]);\n\t\t\tString endPointAuth = EndPointAuthToGet(EndPointURl, apiHeaders);\n\t\t\ttestStepInfo(\"Response Body:\");\n\t\t\ttestStepPassed(endPointAuth);\n\t\t\treturnResponse = endPointAuth;\n\t\t\tThread.sleep(300);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiPush\" + e.toString());\n\t\t}\n\t\treturn returnResponse;\n\t}",
        "description": "This Java method, `ApiPushToGet`, is used to push a request to an API endpoint and retrieve the response. It takes three parameters: `Params` (the request parameters), `URL` (the base URL of the API), and `EndPointURl` (the specific endpoint URL).\n\nHere's what the method does:\n\n1. It logs a test step information message indicating that it is executing an API script.\n2. It calls another method, `ApiValidation`, to validate the request parameters and URL.\n3. It retrieves the API headers using the `ApiHeaders()` method.\n4. It extracts the service URL from the endpoint URL by splitting it at \"com\".\n5. It generates authentication for the endpoint using the `EndPointAuthToGet` method and the API headers.\n6. It logs a test step information message indicating that it is about to retrieve the response body.\n7. It calls another method, `testStepPassed`, to pass the test step if the response is successful.\n8. It returns the response from the endpoint as a string.\n9. If an exception occurs during execution, it logs a test step failure message with the exception details.\n\nThe method also includes a sleep of 300 milliseconds at the end, which could be used for testing or debugging purposes.",
        "input": [
            "String Params",
            "String URL",
            "String EndPointURl"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiValidation",
        "code": "public String ApiValidation(String Params, String URL) {\n\t\ttry {\n\t\t\tString access_tocken;\n\t\t\tMap<String, String> apiParameters = new HashMap<>();\n\t\t\tParams.replace(\"=\", \":\").trim();\n\t\t\tString[] apiParametersArray = Params.split(\"\\\\n\");\n\n\t\t\tint numberofApiParameters = apiParametersArray.length;\n\t\t\tint i;\n\t\t\tString[] keyValuePairArray;\n\t\t\tString key;\n\t\t\tString value;\n\t\t\tfor (i = 0; i < numberofApiParameters; i++) {\n\t\t\t\tkeyValuePairArray = apiParametersArray[i].split(\":\");\n\t\t\t\tkey = keyValuePairArray[0].replace(\"\\\"\", \"\").trim();\n\t\t\t\tvalue = keyValuePairArray[1].replace(\"\\\"\", \"\").trim();\n\t\t\t\tapiParameters.put(key, value);\n\t\t\t}\n\t\t\tString resp = executeTokenMethod(URL, apiParameters);\n\t\t\tJSONObject respObj = new JSONObject(resp);\n\t\t\tString accessToken = respObj.get(\"access_token\").toString();\n\t\t\taccess_tocken = \"Authorization:Bearer \" + accessToken;\n\t\t\t// System.out.println(access_tocken);\n\t\t\taccesstocken = access_tocken;\n\t\t\treturn access_tocken;\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiValidation\" + e.toString());\n\t\t}\n\t\treturn null;\n\n\t}",
        "description": "This Java method, named `ApiValidation`, takes two parameters: `Params` and `URL`. It validates the API request by parsing the input `Params` string into a map of key-value pairs. The method then calls another method (`executeTokenMethod`) to execute the token method with the parsed parameters and the given `URL`. The result is a JSON object, which contains an \"access_token\" that is used to generate an authorization header. The method returns this authorization header as a string.\n\nThe method also catches any exceptions that may occur during execution and logs them using the `testStepFailed` method. If an exception occurs, the method returns null.",
        "input": [
            "String Params",
            "String URL"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "EndPointAuth",
        "code": "public String EndPointAuth(String apiURI, String apiHeaders, String apiBody) {\n\n\t\tString[] apiHeadersArray = apiHeaders.split(\",\");\n\t\tint numberOfApiHeaders = apiHeadersArray.length;\n\t\tint i;\n\t\tList<Header> headersList = new ArrayList<Header>();\n\t\tString[] individualHeaderArray;\n\t\tfor (i = 0; i < numberOfApiHeaders; i++) {\n\t\t\tindividualHeaderArray = apiHeadersArray[i].split(\":\");\n\t\t\theadersList.add(new Header(individualHeaderArray[0], individualHeaderArray[1]));\n\t\t}\n\n\t\tfor (i = 1; i <= 6; i++) {\n\t\t\ttry {\n\t\t\t\tresponse = null; // nullifying the response at the start\n\t\t\t\tresponse = given().headers(new Headers(headersList)).body(apiBody).relaxedHTTPSValidation().when()\n\t\t\t\t\t\t.post(apiURI);\n\t\t\t\tSystem.out.println(response.getBody().asString());\n\t\t\t\ttestStepPassed(\"API command executed successfully\");\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (i == 6) {\n\t\t\t\t\tstepFailed(\n\t\t\t\t\t\t\t\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\n\t\t\t\t\t\t\t\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");\n\t\t\t\t\twaitTime(10); // a small before trying again\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn response.getBody().asString();\n\t}",
        "description": "This Java method, `EndPointAuth`, is used to authenticate with an endpoint (API) and perform a POST request. It takes three parameters: `apiURI` (the URL of the API), `apiHeaders` (a comma-separated string containing header key-value pairs), and `apiBody` (the body of the POST request).\n\nThe method first splits the `apiHeaders` string into an array of individual headers, then creates a list of `Header` objects from these individual headers.\n\nIt then attempts to perform the POST request using the provided API URI, headers, and body. If the request is successful, it prints the response body and marks the test step as passed. If the request fails or times out, it catches the exception, waits for a short time before retrying up to 6 times. If all retries fail, it marks the test step as failed.\n\nThe method returns the response body as a string.",
        "input": [
            "String apiURI",
            "String apiHeaders",
            "String apiBody"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "EndPointAuthToGet",
        "code": "public String EndPointAuthToGet(String apiURI, String apiHeaders) {\n\n\t\tString[] apiHeadersArray = apiHeaders.split(\",\");\n\t\tint numberOfApiHeaders = apiHeadersArray.length;\n\t\tint i;\n\t\tList<Header> headersList = new ArrayList<Header>();\n\t\tString[] individualHeaderArray;\n\t\tfor (i = 0; i < numberOfApiHeaders; i++) {\n\t\t\tindividualHeaderArray = apiHeadersArray[i].split(\":\");\n\t\t\theadersList.add(new Header(individualHeaderArray[0], individualHeaderArray[1]));\n\t\t}\n\n\t\tfor (i = 1; i <= 6; i++) {\n\t\t\ttry {\n\t\t\t\tresponse = null; // nullifying the response at the start\n\t\t\t\tresponse = given().headers(new Headers(headersList)).relaxedHTTPSValidation().when().get(apiURI);\n\t\t\t\tSystem.out.println(response.getBody().asString());\n\t\t\t\ttestStepPassed(\"API command executed successfully\");\n\t\t\t\tbreak;\n\t\t\t} catch (Exception e) {\n\t\t\t\tif (i == 6) {\n\t\t\t\t\tstepFailed(\n\t\t\t\t\t\t\t\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\n\t\t\t\t\t\t\t\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");\n\t\t\t\t\twaitTime(10); // a small before trying again\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn response.getBody().asString();\n\t}",
        "description": "This Java method, named `EndPointAuthToGet`, is used to authenticate an endpoint using the provided API URI and headers. The method takes two parameters: `apiURI` (the URL of the API endpoint) and `apiHeaders` (a string containing the headers in the format \"header1:value1, header2:value2, ...\").\n\nThe method first splits the `apiHeaders` string into an array of individual headers using commas as separators. It then creates a list of `Header` objects from these individual headers.\n\nNext, the method attempts to execute a GET request on the provided API endpoint using the provided headers. If the request is successful, it prints the response body and marks the test step as passed. If the request fails or throws an exception, it waits for 10 seconds before retrying up to 6 times. If all retries fail, it marks the test step as failed.\n\nThe method returns the response body as a string.",
        "input": [
            "String apiURI",
            "String apiHeaders"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "executeTokenMethod",
        "code": "public String executeTokenMethod(String apiURI, Map<String, String> apiParams) {\n\t\ttry {\n\t\t\tint i;\n\t\t\tfor (i = 1; i <= 6; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = null; // nullifying the response at the start //.headers(new Headers(headersList)) //\n\t\t\t\t\tresponse = given().params(apiParams).when().post(apiURI);\n\t\t\t\t\t// System.out.println(response);\n\n\t\t\t\t\ttestStepPassed(\"API command executed successfully\");\n\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tif (i == 6) {\n\t\t\t\t\t\tstepFailed(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\twaitTime(10); // a small before trying again\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tstepFailed(\"Exception while attempting to execute the API method - '\" + e.getClass().getName() + \"'\");\n\t\t}\n\t\treturn response.getBody().asString();\n\n\t}",
        "description": "This Java method, `executeTokenMethod`, attempts to execute an API command with the given URI and parameters. It uses a loop to retry the execution up to 6 times in case of exceptions. If all retries fail, it marks the step as failed. The method returns the response body as a string.\n\nHere's a high-level overview of what the method does:\n\n1. It takes two inputs: `apiURI` (the URL of the API endpoint) and `apiParams` (a map of parameters to be passed with the request).\n2. It loops up to 6 times, attempting to execute the API command with the given URI and parameters.\n3. If an exception occurs during the execution, it catches the exception and checks if this is the last retry attempt (i.e., `i == 6`). If so, it marks the step as failed. Otherwise, it waits for a short time before trying again.\n4. If all retries fail, it still marks the step as failed.\n5. Finally, it returns the response body as a string.\n\nThe method seems to be using a library like Rest Assured (based on the `given()` and `when()` methods) to send the API request and handle the response.",
        "input": [
            "String apiURI",
            "Map apiParams"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "parseObject",
        "code": "public boolean parseObject(JSONObject json, String key) {\n\t\tboolean returnflag = false;\n\t\ttry {\n\t\t\tSystem.out.println(json.get(key));\n\t\t\tString str = json.get(key).toString();\n\t\t\tif (str.contains(key)) {\n\t\t\t\tstr = json.get(\"Id\").toString();\n\t\t\t\tSystem.out.println(str);\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn returnflag;\n\t}",
        "description": "This Java method, named `parseObject`, takes a `JSONObject` and a `String` key as input parameters. It attempts to retrieve the value associated with the given key from the JSON object and print it to the console. If the retrieved value contains the same key, it then retrieves the value of \"Id\" key and prints that too. The method returns a boolean flag (`returnflag`) which is initially set to `false`. If any exception occurs during the execution of the code (like JSONException), it catches the exception, prints the error message, and continues with the next line of code.",
        "input": [
            "JSONObject json",
            "String key"
        ],
        "output": "boolean"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "getKey",
        "code": "public String getKey(JSONObject json, String key, String keyValue) {\n\t\ttry {\n\t\t\tboolean exists = json.has(key);\n\t\t\tIterator<?> keys;\n\t\t\tString nextKeys;\n\t\t\tif (!exists) {\n\t\t\t\tkeys = json.keys();\n\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\tnextKeys = (String) keys.next();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (json.get(nextKeys) instanceof JSONObject) {\n\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\tgetKey(json.getJSONObject(nextKeys), key, keyValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (json.get(nextKeys) instanceof JSONArray) {\n\t\t\t\t\t\t\tJSONArray jsonarray = json.getJSONArray(nextKeys);\n\t\t\t\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\t\tgetKey(innerJSOn, key, keyValue);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(json.get(key));\n\t\t\t\tString str = json.get(key).toString();\n\t\t\t\tif (str.contains(keyValue)) {\n\t\t\t\t\treturnKeyValue = json.get(\"Id\").toString();\n\t\t\t\t\ttestStepInfo(returnKeyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();;\n\t\t}\n\t\treturn returnKeyValue;\n\t}",
        "description": "This Java method, `getKey`, takes a `JSONObject` and two strings (`key` and `keyValue`) as input. It recursively traverses the JSON object tree to find the value associated with the given key. If the key exists in the top-level JSON object, it checks if the value contains the provided `keyValue`. If it does, it calls another method `testStepInfo` with the ID of the matching value. If the key is not found at the top level, it recursively searches through nested JSON objects and arrays to find a match. The method returns the ID of the first match found, or an empty string if no match is found.",
        "input": [
            "JSONObject json",
            "String key",
            "String keyValue"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "getKeylang_Code",
        "code": "public String getKeylang_Code(JSONObject json, String key, String keyValue) {\n\t\tString str =null;\n\t\ttry {\n\t\t\tboolean exists = json.has(key);\n\t\t\tIterator<?> keys;\n\t\t\tString nextKeys;\n\t\t\tif (!exists) {\n\t\t\t\tkeys = json.keys();\n\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\tnextKeys = (String) keys.next();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (json.get(nextKeys) instanceof JSONObject) {\n\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\tgetKey(json.getJSONObject(nextKeys), key, keyValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (json.get(nextKeys) instanceof JSONArray) {\n\t\t\t\t\t\t\tJSONArray jsonarray = json.getJSONArray(nextKeys);\n\t\t\t\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\t\tgetKey(innerJSOn, key, keyValue);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(json.get(key));\n\t\t\t\tstr = json.get(key).toString();\n\t\t\t\tif (str.contains(keyValue)) {\n\t\t\t\t\treturnKeyValue = json.get(\"Preferred_Communication_Language_Code__c\").toString();\n\t\t\t\t\ttestStepInfo(returnKeyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();;\n\t\t}\n\t\treturn str;\n\t}",
        "description": "This Java method, `getKeylang_Code`, takes three parameters: a JSONObject (`json`), a string key (`key`), and another string value (`keyValue`). The method searches the JSON object for the specified key and recursively explores nested JSON objects or arrays to find a match. \n\nIf the specified key is found in the top-level JSON object, it checks if the value contains the provided `keyValue`. If it does, it calls another method (`testStepInfo`) with the value of the \"Preferred_Communication_Language_Code__c\" key as an argument.\n\nThe method returns a string representing the value of the specified key. If no match is found in the top-level JSON object, it recursively searches nested objects and arrays.",
        "input": [
            "JSONObject json",
            "String key",
            "String keyValue"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "getPreferred_Communication_Language_Code__c",
        "code": "public String getPreferred_Communication_Language_Code__c(JSONObject json, String key, String keyValue)throws JSONException {\n\t\tString str =null;\n\t\ttry {\n\t\t\tkeyValue=\"RURAL_B2B_Bajaj_lite_app__cc\";\n\t\t\tSystem.out.println();\n\t\t\tboolean exists = json.has(key);\n\t\t\tIterator<?> keys;\n\t\t\tString nextKeys;\n\t\t\tif (!exists) {\n\t\t\t\tkeys = json.keys();\n\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\tnextKeys = (String) keys.next();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (json.get(nextKeys) instanceof JSONObject) {\n\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\tgetKeylang_Code(json.getJSONObject(nextKeys), key, keyValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (json.get(nextKeys) instanceof JSONArray) {\n\t\t\t\t\t\t\tJSONArray jsonarray = json.getJSONArray(nextKeys);\n\t\t\t\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\t\tstr=getKeylang_Code(innerJSOn, key, keyValue);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(json.get(key));\n\t\t\t\tstr = json.get(key).toString();\n\t\t\t\tif (str.contains(keyValue)) {\n\t\t\t\t\treturnKeyValue = json.get(\"Preferred_Communication_Language_Code__c\").toString();\n\t\t\t\t\ttestStepInfo(returnKeyValue);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\treturn str; \n\t}",
        "description": "This Java method, `getPreferred_Communication_Language_Code__c`, takes a `JSONObject` and two strings as input parameters. It attempts to retrieve the value of a specific key (`key`) from the JSON object. If the key is not found in the top-level of the JSON object, it recursively searches through nested objects and arrays to find a match.\n\nIf the key is found, it checks if the value contains a specific substring (`keyValue`). If it does, it extracts the value of another key (`Preferred_Communication_Language_Code__c`) from the JSON object and calls a method named `testStepInfo` with this extracted value as an argument.\n\nThe method returns the value associated with the original key or null if not found.",
        "input": [
            "JSONObject json",
            "String key",
            "String keyValue"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "getKey",
        "code": "public List<String> getKey(JSONObject json, String key) throws JSONException {\n\t\tif (!(listValue == null)) {\n\t\t\tlistValue.addAll(listValue);\n\t\t} else {\n\t\t\tlistValue = new ArrayList<>();\n\t\t}\n\t\tboolean exists = json.has(key);\n\t\tIterator<?> keys;\n\t\tString nextKeys;\n\t\tif (!exists) {\n\t\t\tkeys = json.keys();\n\t\t\twhile (keys.hasNext()) {\n\t\t\t\tnextKeys = (String) keys.next();\n\t\t\t\ttry {\n\t\t\t\t\tif (json.get(nextKeys) instanceof JSONObject) {\n\n\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\tgetKey(json.getJSONObject(nextKeys), key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (json.get(nextKeys) instanceof JSONArray) {\n\t\t\t\t\t\tJSONArray jsonarray = json.getJSONArray(nextKeys);\n\t\t\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\tgetKey(innerJSOn, key);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.getLocalizedMessage();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tString str = parseObjectReturnKey(json, key);\n\t\t\tlistValue.add(str);\n\t\t}\n\t\treturn listValue;\n\t}",
        "description": "This Java method takes a JSON object and a key as input parameters. It recursively traverses the JSON object to find all values associated with the given key. The method returns a list of strings containing these key-value pairs.\n\nHere's a step-by-step breakdown:\n\n1. If `listValue` is not null, it adds itself to the list. Otherwise, it initializes `listValue` as an empty ArrayList.\n2. It checks if the JSON object has the given key. If not, it iterates through all keys in the JSON object and recursively calls itself on each key.\n3. If a key-value pair is found (i.e., the key exists), it parses the value using `parseObjectReturnKey` method and adds the result to the list.\n4. Finally, it returns the list of strings.\n\nNote that this method uses recursion to traverse the JSON object, which can lead to stack overflow errors if the JSON object is very deep or complex.",
        "input": [
            "JSONObject json",
            "String key"
        ],
        "output": "List"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "parseObjectReturnKey",
        "code": "public String parseObjectReturnKey(JSONObject json, String key) throws JSONException {\n\t\t JSONObject jsonObject = new JSONObject(json);\n         JSONArray records = jsonObject.getJSONArray(\"records\");\n         JSONObject record = records.getJSONObject(0);\n         String id = record.getString(\"Id\");\n         return id;\n\t}\n\t\n\t\n//\tpublic String parseObjectReturnKey(JSONObject json, String key) throws JSONException {\n//\t\tkey=\"Id\";\n//\t\tString str = json.get(key).toString();\n//\t\treturn str;\n//\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 23-Jul-2022\n\t * @purpose : To update or create an record through Rest assured API.\n\t * @param Params\n\t *            : To provide the parameters which contains credentials\n\t * @param URL\n\t *            : To provide base URL.\n\t * @param EndPointURl\n\t *            : To provide the endpoint URL.\n\t * @param apiBody\n\t *            : To provide the body content of the API.\n\t */",
        "description": "Here is a brief description for the Java method:\n\n**Method:** `parseObjectReturnKey(JSONObject json, String key)`\n\n**Purpose:** Parse a JSON object and return the value of a specific key.\n\n**Parameters:**\n\n* `json`: A JSONObject containing the JSON data\n* `key`: The name of the key to extract from the JSON object\n\n**Returns:** The value associated with the given key as a String\n\n**Throws:** `JSONException` if there is an error parsing the JSON object\n\nThis method takes two parameters: a JSONObject and a string representing the key to extract. It then extracts the value associated with that key from the JSONObject and returns it as a String.",
        "input": [
            "JSONObject json",
            "String key"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiPushToPatch",
        "code": "public void ApiPushToPatch(String Params, String URL, String[] EndPointURl, String[] apiBody) {\n\t\ttry {\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\n\t\t\tApiValidation(Params, URL);\n\t\t\tString apiHeaders = ApiHeaders();\n\t\t\tfor (int apiBodyIterationCount = 0; apiBodyIterationCount < apiBody.length; apiBodyIterationCount++) {\n\t\t\t\ttestStepInfo(\"Service URL: \" + EndPointURl[apiBodyIterationCount].split(\"com\")[1]);\n\t\t\t\ttestStepInfo(\"Request Body:\");\n\t\t\t\ttestStepPassed(apiBody[apiBodyIterationCount]);\n\t\t\t\tString endPointAuth = EndPointAuthToPatch(EndPointURl[apiBodyIterationCount], apiHeaders,\n\t\t\t\t\t\tapiBody[apiBodyIterationCount]);\n\t\t\t\ttestStepInfo(\"Response Body:\");\n\t\t\t\ttestStepPassed(endPointAuth);\n\t\t\t\tThread.sleep(300);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiPush\" + e.toString());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 23-Jul-2022\n\t * @purpose : To update or create an record through Rest assured API.\n\t * @param Params\n\t *            : To provide the parameters which contains credentials\n\t * @param URL\n\t *            : To provide base URL.\n\t * @param EndPointURl\n\t *            : To provide the endpoint URL.\n\t * @param apiBody\n\t *            : To provide the body content of the API.\n\t */",
        "description": "This is a Java method named `ApiPushToPatch` that makes RESTful API calls to update or create records. The method takes four parameters:\n\n* `Params`: A string containing parameters such as credentials.\n* `URL`: A string representing the base URL for the API.\n* `EndPointURl`: An array of strings representing the endpoint URLs for each API call.\n* `apiBody`: An array of strings representing the body content for each API call.\n\nThe method performs the following steps:\n\n1. Logs a test step information message indicating that it is executing an API script.\n2. Calls another method named `ApiValidation` with the provided parameters and URL, which is not shown in this code snippet.\n3. Retrieves API headers using the `ApiHeaders()` method.\n4. Iterates through the array of endpoint URLs and performs the following steps for each endpoint:\n\t* Logs a test step information message showing the service URL.\n\t* Logs a test step information message with the request body content.\n\t* Calls another method named `EndPointAuthToPatch` to authenticate the API call, passing in the current endpoint URL, API headers, and request body content.\n\t* Logs a test step information message with the response body content.\n\t* Waits for 300 milliseconds using `Thread.sleep(300)`.\n5. If any exception occurs during execution, it logs a test step failure message with the error details.\n\nThe purpose of this method is to update or create records through RESTful API calls, and it provides flexibility in terms of handling multiple endpoints and request bodies.",
        "input": [
            "String Params",
            "String URL",
            "String EndPointURl",
            "String apiBody"
        ],
        "output": "void"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiPatch",
        "code": "public void ApiPatch(String Params, String URL, String EndPointURl, String[] apiBody) {\n\t\ttry {\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\n\t\t\tApiValidation(Params, URL);\n\t\t\tString apiHeaders = ApiHeaders();\n\t\t\tfor (int apiBodyIterationCount = 0; apiBodyIterationCount < apiBody.length; apiBodyIterationCount++) {\n\t\t\t\ttestStepInfo(\"Service URL: \" + EndPointURl.split(\"com\")[1]);\n\t\t\t\ttestStepInfo(\"Request Body:\");\n\t\t\t\ttestStepPassed(apiBody[apiBodyIterationCount]);\n\t\t\t\tString endPointAuth = EndPointAuthToPatch(EndPointURl, apiHeaders, apiBody[apiBodyIterationCount]);\n\t\t\t\ttestStepInfo(\"Response Body:\");\n\t\t\t\tif (endPointAuth.contains(\"CUSTOM_VALIDATION_EXCEPTION\")\n\t\t\t\t\t\t|| endPointAuth.contains(\"Provided external ID field does not exist\")) {\n\t\t\t\t\ttestStepFailed(\"Got negative response : \" + endPointAuth);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(endPointAuth);\n\t\t\t\t}\n\t\t\t\tThread.sleep(300);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiPush\" + e.toString());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy007\n\t * @since : 23-Jul-2022\n\t * @purpose : To update or create an record through Rest assured API.\n\t * @param URL\n\t *            : To provide base URL.\n\t * @param EndPointURl\n\t *            : To provide the endpoint URL.\n\t * @param apiBody\n\t *            : To provide the body content of the API.\n\t * @return :\n\t */",
        "description": "This Java method, named `ApiPatch`, is used to update or create a record through a Rest Assured API. It takes four parameters:\n\n1. `Params`: A string parameter that is not explicitly used within the method.\n2. `URL`: The base URL of the API.\n3. `EndPointURl`: The endpoint URL where the request will be sent.\n4. `apiBody`: An array of strings representing the body content of the API.\n\nThe method performs the following actions:\n\n1. It logs a test step information message indicating that it is executing an API script.\n2. It calls another method, `ApiValidation`, passing in the `Params` and `URL` parameters.\n3. It constructs a string `apiHeaders` by calling another method, `ApiHeaders`.\n4. It iterates through each element of the `apiBody` array.\n5. For each iteration, it logs test step information messages with the service URL and request body.\n6. It calls another method, `EndPointAuthToPatch`, passing in the `EndPointURl`, `apiHeaders`, and current `apiBody` element. This method likely handles authentication for the API endpoint.\n7. If the response from the API endpoint contains specific error messages (e.g., \"CUSTOM_VALIDATION_EXCEPTION\" or \"Provided external ID field does not exist\"), it logs a test step failure message with the error message. Otherwise, it logs a test step passed message with the response body.\n8. It waits for 300 milliseconds before moving on to the next iteration.\n9. If any exception occurs during the execution of the method, it logs a test step failed message with the exception details.\n\nIn summary, this method is used to update or create records through a Rest Assured API by iterating over an array of body content and performing authentication and validation checks for each request.",
        "input": [
            "String Params",
            "String URL",
            "String EndPointURl",
            "String apiBody"
        ],
        "output": "void"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "EndPointAuthToPatch",
        "code": "public String EndPointAuthToPatch(String apiURI, String apiHeaders, String apiBody) {\n\t\ttry {\n\t\t\tString[] apiHeadersArray = apiHeaders.split(\",\");\n\t\t\tint numberOfApiHeaders = apiHeadersArray.length;\n\t\t\tint i;\n\t\t\tList<Header> headersList = new ArrayList<Header>();\n\t\t\tString[] individualHeaderArray;\n\t\t\tfor (i = 0; i < numberOfApiHeaders; i++) {\n\t\t\t\tindividualHeaderArray = apiHeadersArray[i].split(\":\");\n\t\t\t\theadersList.add(new Header(individualHeaderArray[0], individualHeaderArray[1]));\n\t\t\t}\n\t\t\tfor (i = 1; i <= 6; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse = null; // nullifying the response at the start\n\t\t\t\t\tresponse = given().headers(new Headers(headersList)).body(apiBody).relaxedHTTPSValidation().when()\n\t\t\t\t\t\t\t.patch(apiURI);\n\t\t\t\t\tSystem.out.println(response.getBody().asString());\n\t\t\t\t\ttestStepPassed(\"API command executed successfully\");\n\t\t\t\t\tbreak;\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tif (i == 6) {\n\t\t\t\t\t\tstepFailed(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"Exception while attempting to execute the API method - '\" + e.getClass().getName()\n\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\twaitTime(10); // a small before trying again\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn response.getBody().asString();\n\t}",
        "description": "This Java method, named `EndPointAuthToPatch`, is used to authenticate and patch an endpoint using the given API URI, headers, and body. \n\nThe method takes three parameters: \n- `apiURI`: The Uniform Resource Identifier (URI) of the API endpoint.\n- `apiHeaders`: A comma-separated string containing the API headers in the format \"headerName:HeaderValue\".\n- `apiBody`: The request body to be sent with the patch request.\n\nHere's what the method does:\n\n1. It splits the `apiHeaders` into an array of strings, each representing a single header.\n2. It creates a list of `Header` objects from these individual headers.\n3. It attempts to execute a patch request to the API endpoint using the provided headers and body.\n4. If the request is successful, it prints the response body and marks the test step as passed.\n5. If the request fails for any reason, it catches the exception and waits for 10 seconds before trying again up to 6 times.\n6. If all attempts fail, it marks the test step as failed.\n\nThe method returns the response body as a string.",
        "input": [
            "String apiURI",
            "String apiHeaders",
            "String apiBody"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "returnValueFromJSON",
        "code": "public String returnValueFromJSON(String jsonString, String Key) {\n\t\tString actualKeyValue = null;\n\t\t\ttry {\n\t\t\tJSONObject json = new JSONObject(jsonString);\n\t\t\tif(json.get(Key) instanceof JSONObject) {\n\t\t\t\tactualKeyValue=json.getString(Key);\n\t\t\t}else if(json.get(Key) instanceof JSONArray) {\n\t\t\t\tJSONArray jsonarray = json.getJSONArray(jsonString);\n\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\tactualKeyValue = innerJSOn.getString(Key);\n\t\t\t\t}\n\t\t\t}else {\n\t\t\t\tactualKeyValue=json.getString(Key);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in returnValueFromJSON. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn actualKeyValue;\n\t}",
        "description": "This Java method takes a JSON string and a key as input, and returns the value associated with that key from the JSON object. The method handles cases where the value is:\n\n1. A simple string: It directly retrieves the value using `json.getString(Key)`.\n2. A nested JSON object: It recursively traverses the JSON array to find the inner JSON object and then retrieves the value.\n3. A JSON array: It iterates through the array, treating each element as a JSON object, and finds the first one that has the specified key.\n\nIf an exception occurs during the processing (e.g., JSON parsing error), it logs an error message using `testStepFailed` and returns `null`.",
        "input": [
            "String jsonString",
            "String Key"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "returnIdValueFromJSON",
        "code": "public String returnIdValueFromJSON(String jsonString, String Key) {\n\t\tString actualKeyValue = null;\n\t\ttry {\n\t\t\tJSONObject jsonObject = new JSONObject(jsonString);\n\t\t\tJSONArray records = jsonObject.getJSONArray(\"records\");\n\t\t\tJSONObject record = records.getJSONObject(0);\n\t\t\tactualKeyValue = record.getString(\"Id\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in returnValueFromJSON. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn actualKeyValue;\n\t}",
        "description": "This Java method, `returnIdValueFromJSON`, takes two parameters: a JSON string (`jsonString`) and a key (`Key`). It attempts to parse the JSON string into a JSONObject and then extracts the value of the \"Id\" field from the first record in the \"records\" array. If any exceptions occur during this process (e.g., if the JSON is malformed or the desired field is missing), it logs an error message using `testStepFailed` and returns null. Otherwise, it returns the extracted ID value as a string.",
        "input": [
            "String jsonString",
            "String Key"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "returntotalSizeValueFromJSON",
        "code": "public String returntotalSizeValueFromJSON(String jsonString, String Key) {\n\t\tString actualKeyValue = null;\n\t\ttry {\n\t\t\tJSONObject jsonObject = new JSONObject(jsonString);\n\t\t\tJSONArray records = jsonObject.getJSONArray(\"records\");\n\t\t\tJSONObject record = records.getJSONObject(0);\n\t\t\tactualKeyValue = record.getString(\"totalSize\");\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in returnValueFromJSON. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn actualKeyValue;\n\t}",
        "description": "This Java method, `returntotalSizeValueFromJSON`, takes two parameters: a JSON string (`jsonString`) and a key (`Key`). It attempts to parse the JSON string into a JSONObject, then extracts the value of the \"records\" array's first element's \"totalSize\" field. If any exceptions occur during this process (e.g., if the JSON is malformed or the specified field doesn't exist), it logs an error and returns `null`. Otherwise, it returns the extracted value as a string.",
        "input": [
            "String jsonString",
            "String Key"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "getKeyValue",
        "code": "public String getKeyValue(JSONObject json, String key) {\n\t\ttry {\n\t\t\tboolean exists = json.has(key);\n\t\t\tIterator<?> keys;\n\t\t\tString nextKeys;\n\t\t\tif (!exists) {\n\t\t\t\tkeys = json.keys();\n\t\t\t\twhile (keys.hasNext()) {\n\t\t\t\t\tnextKeys = (String) keys.next();\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (json.get(nextKeys) instanceof JSONObject) {\n\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\tgetKey(json.getJSONObject(nextKeys), key);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (json.get(nextKeys) instanceof JSONArray) {\n\t\t\t\t\t\t\tJSONArray jsonarray = json.getJSONArray(nextKeys);\n\t\t\t\t\t\t\tfor (int i = 0; i < jsonarray.length(); i++) {\n\t\t\t\t\t\t\t\tString jsonarrayString = jsonarray.get(i).toString();\n\t\t\t\t\t\t\t\tJSONObject innerJSOn = new JSONObject(jsonarrayString);\n\t\t\t\t\t\t\t\tif (exists == false) {\n\t\t\t\t\t\t\t\t\tgetKeyValue(innerJSOn, key);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturnKeyValue = json.get(key).toString();\n\t\t\t}\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn returnKeyValue;\n\t}",
        "description": "This Java method, `getKeyValue`, takes a JSONObject and a key as input parameters. It recursively traverses the JSON object tree to find the value associated with the given key. If the key is not found in the current object, it iterates through all child objects (JSONObjects) and arrays (JSONArray), and calls itself for each of them until the key is found or the end of the traversal is reached. The method returns the value associated with the given key as a string.",
        "input": [
            "JSONObject json",
            "String key"
        ],
        "output": "String"
    },
    {
        "class_name": "APICommonKeywords",
        "function_name": "ApiPushToGetWithEncoded",
        "code": "public String ApiPushToGetWithEncoded(String Params, String URL, String EndPointURl) {\n\t\tString returnResponse = null;\n\t\ttry {\n\t\t\tEndPointURl = java.net.URLDecoder.decode(EndPointURl, \"UTF-8\");\n\t\t\ttestStepInfo(\"********************** Executing API Script **********************\");\n\t\t\tApiValidation(Params, URL);\n\t\t\tString apiHeaders = ApiHeaders();\n\t\t\ttestStepInfo(\"Service URL: \" + EndPointURl.split(\"com\")[1]);\n\t\t\tString endPointAuth = EndPointAuthToGet(EndPointURl, apiHeaders);\n\t\t\ttestStepInfo(\"Response Body:\");\n\t\t\ttestStepPassed(endPointAuth);\n\t\t\treturnResponse = endPointAuth;\n\t\t\tThread.sleep(300);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ApiPush\" + e.toString());\n\t\t}\n\t\treturn returnResponse;\n\t}\n}",
        "description": "This Java method, named `ApiPushToGetWithEncoded`, is designed to send a GET request to an API endpoint and retrieve the response. The method takes three parameters: `Params` (a string), `URL` (a string), and `EndPointURl` (a string).\n\nHere's what the method does:\n\n1. It decodes the `EndPointURl` using URL decoding.\n2. It logs a test step information message indicating that it is executing an API script.\n3. It calls another method, `ApiValidation`, to validate the API request parameters.\n4. It constructs the API headers by calling the `ApiHeaders` method.\n5. It extracts the service URL from the `EndPointURl` and logs it as a test step information message.\n6. It generates an endpoint authentication string using the `EndPointAuthToGet` method, passing in the decoded `EndPointURl` and the constructed API headers.\n7. It logs the response body and marks the test step as passed.\n8. If any exceptions occur during this process, it logs a test step failure message with the exception details.\n\nThe method returns the response from the API endpoint as a string.",
        "input": [
            "String Params",
            "String URL",
            "String EndPointURl"
        ],
        "output": "String"
    },
    {
        "class_name": "AtosPage",
        "function_name": "waitTillElementAppears",
        "code": "public void waitTillElementAppears(String objectLocator) {\n\t\ttry {\n\t\t\tdriver.manage().timeouts().implicitlyWait(1, TimeUnit.SECONDS);\n\t\t\tparseidentifyByAndlocator(objectLocator);\n\t\t\tif (counter <= elementLoadWaitTime && driver.findElement(By.xpath(locator)).isDisplayed()) {\n\t\t\t\twriteToLogFile(\"INFO\", \"Element appeared within \" + counter + \" seconds\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to element appears within \" + elementLoadWaitTime + \" Seconds\");\n\t\t\t}\n\t\t} catch (NoSuchElementException ex) {\n\n\t\t\twriteToLogFile(\"INFO\", \"Waiting for element to appear \" + objectLocator);\n\t\t\twaitTime(1);\n\t\t\tcounter++;\n\t\t\twaitTillElementAppears(objectLocator);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to wait untill the element appears \");\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to wait untill the element appears. ERROR: \" + e.getMessage());\n\t\t} finally {\n\t\t\tdriver.manage().timeouts().implicitlyWait(implicitlyWaitTime, TimeUnit.SECONDS);\n\t\t\tcounter = 0;\n\n\t\t}\n\n\t}\n\n\t\n\t/**\n\t * Author- Description of method-Click On Button\n\t * \n\t * @param buttonName\n\t * @return null\n\t */",
        "description": "This Java method is used to wait until a specific element appears on the webpage. The method takes an object locator as input, which is used to identify the element. \n\nHere's what it does:\n\n1. It sets an implicit wait of 1 second.\n2. It identifies the element using the provided object locator.\n3. It checks if the element is displayed within a certain time limit (elementLoadWaitTime). If the element appears within this time, it logs a success message to the log file.\n4. If the element does not appear within the specified time, it writes an error message to the log file and marks the test step as failed.\n\nThe method also has a recursive nature, meaning that if the element does not appear immediately, it will wait for 1 second and then re-check until the element appears or the maximum waiting time is reached. \n\nFinally, it resets the implicit wait to its original value and resets a counter variable to zero.",
        "input": [
            "String objectLocator"
        ],
        "output": "void"
    },
    {
        "class_name": "AtosPage",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tdoubleClick(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}\n\n\t\n\t\n\n\t\n\t\n\n\t}",
        "description": "This Java method, `clickOnButton`, simulates a double-click on a web element with the specified name. It uses Selenium WebDriver to locate and interact with the element.\n\nHere's a breakdown of what the method does:\n\n1. It takes a `String` parameter `buttonName`, which is used to construct an XPath expression to locate the button.\n2. The method tries to find an element matching the constructed XPath expression using the `waitForElement` method, waiting for up to 10 seconds.\n3. If the element is found and displayed within 6 seconds, it performs a double-click on the element using the `doubleClick` method.\n4. If the element is not found or not displayed within the timeout period, the method reports a test step failure with a message indicating that the button was not present.\n\nThe method also catches any exceptions that may occur during execution and reports a test step failure with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "changeStageInFMS",
        "code": "public void changeStageInFMS(String stageOption) {\n\t\ttry {\n\t\t\tString readyForDispatch_btn = \"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\";\n\t\t\tString readyForDispatch_btn_2 = \"Ready For Dispatch#xpath=//a[text()='Ready for Dispatch' and @class='select']\";\n\t\t\tString field = stageOption + \"#xpath=//div[@class='select-options']//ul//li/a[contains(text(),'\"\n\t\t\t\t\t+ stageOption + \"')]\";\n\t\t\tString save = \"Save\" + \"#xpath=//button//span[text()='Save']\";\n\t\t\tif (isElementDisplayed(readyForDispatch_btn, 13)) {\n\t\t\t\tWebElement button = findWebElement(readyForDispatch_btn);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.doubleClick(button).perform();\n\t\t\t\tif (isElementDisplayed(readyForDispatch_btn, 6)) {\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tclickOnSpecialElement(readyForDispatch_btn_2);\n\t\t\t\t\twaitTime(4);\n\t\t\t\t\tclickOn(field);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tclickOn(save);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(stageOption + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on Ready For Dispatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate Ready For Dispatch \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `changeStageInFMS`, is designed to interact with a web application's user interface. It takes a string parameter `stageOption` and performs the following actions:\n\n1. Checks if an element labeled \"Ready For Dispatch\" is displayed on the page.\n2. If the element is displayed, it simulates a double click on the element using Selenium WebDriver's `Actions` class.\n3. Waits for 6 seconds to allow any subsequent actions to complete.\n4. Clicks on another element with the same label (\"Ready For Dispatch\") but with an additional class attribute \"select\".\n5. Waits again for 4 seconds.\n6. Clicks on a field that matches the `stageOption` parameter.\n7. Waits for 1 second.\n8. Clicks on a \"Save\" button.\n\nIf any of these steps fail (e.g., the element is not displayed, or an exception occurs), the method will report a test step failure and highlight the problematic element using a highlighting mechanism (not shown in this code snippet).",
        "input": [
            "String stageOption"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName + \"')]//..//input\";\n\t\t\twaitForElement(field, 40);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tWebElement searchBtn = findWebElement(field);\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\ttestStepPassed(\"Type '\" + value + \"'In : \" + labelName);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, enters a given value into an input field on a web page that is labeled with the provided `labelName`. The method uses Selenium WebDriver to:\n\n1. Create an XPath expression to locate the input field based on its label.\n2. Wait for the element to be displayed and clickable.\n3. Enter the provided `value` into the input field using the `sendKeys` method.\n4. Send a key press event of Enter (or equivalent) to simulate submitting the form.\n5. Verify that the page has finished loading after the submission.\n\nIf any exceptions occur during this process, the method catches them and reports a failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "enterValueInTextField",
        "code": "public void enterValueInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/..//input\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tWebElement textbox = findWebElement(field);\n\t\t\t\ttextbox.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAddressField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextField`, enters a given value into a text field on a webpage. It takes two parameters: the label name of the text field and the value to be entered.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the text field based on the provided label name.\n2. It waits for the element to be displayed using `waitForElement`.\n3. If the element is displayed, it checks if the element is present using `isElementDisplayed`. If not, it fails the test step with a message indicating that the field is not present.\n4. If the element is present, it enters the provided value into the text field using `typeIn` and then simulates pressing the Enter key using `sendKeys`.\n5. If any exception occurs during these steps, it catches the exception and fails the test step with a message indicating the failure.\n\nThis method appears to be part of a larger automated testing framework, possibly using Selenium WebDriver or similar technology.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnTab",
        "code": "public void clickOnTab(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//a[@title='\" + label + \"']|//span[text()='\" + label + \"']\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" tab is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Tab. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnTab`, simulates a click on a tab with the specified label. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression to locate the tab element based on its title or text content.\n2. Wait for the tab element to be present and visible using the `waitForElement` method.\n3. If the tab is present, scroll to it and click on it using the `scrollToWebElement` and `clickOnSpecialElement` methods respectively.\n4. If the tab is not present, mark the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during the execution of these steps, and logs a failure message if an exception occurs.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']|//div[@title='\" + buttonLabel\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Button. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton`, attempts to find and click on a button with the specified label using Selenium WebDriver. The method takes a `String` parameter `buttonLabel` which is used to construct an XPath expression to locate the button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `buttonLabel` with some additional text.\n2. It uses the `waitForElement` method to wait for the element (button) to be present on the page, up to a maximum of 10 seconds.\n3. If the button is displayed within 5 seconds, it attempts to scroll to and click on the button using the `clickOnSpecialElement` method.\n4. If the button is not displayed within 5 seconds or an exception occurs during the process, it takes a manual screenshot with a descriptive message indicating that the button was not present.\n5. If an exception occurs during any part of the process, it logs the failure and ends the test step.\n\nIn summary, this method attempts to automate clicking on a button with a specific label by waiting for its presence, scrolling to it if necessary, and then clicking on it.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnButton1",
        "code": "public void clickOnButton1(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//li//a//div[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(button);\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Button. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton1`, simulates a click on a web element with the specified label (`buttonLabel`) after waiting for its presence and visibility. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to ensure the element is present and visible before attempting to click it. If the element is not found or displayed within the specified time, it takes a manual screenshot with an error message indicating that the button was not present. If any exception occurs during the process, it logs the failure as a test step failure.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnButtonQc",
        "code": "public void clickOnButtonQc(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button//span[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Button. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQc`, simulates a click on a button with the specified label using XPath. Here's a brief summary of its functionality:\n\n1. It takes a `String` parameter `buttonLabel` representing the text of the button to be clicked.\n2. It constructs an XPath expression by concatenating the `buttonLabel` with the XPath syntax for selecting a button element (`//button//span[text()='\" + buttonLabel + \"']`). This creates a unique XPath for the specified button.\n3. The method waits for the button to appear on the screen using the `waitForElement` method, allowing up to 10 seconds for the button to load.\n4. If the button is displayed within 5 seconds, it simulates a click on the button using the `clickOnSpecialElement` method (which is not shown in this code snippet).\n5. If the button is not present or takes longer than 5 seconds to appear, the method fails the test step with an error message indicating that the button was not found.\n6. The method also catches any exceptions that may occur during execution and reports a failure with the exception message if one occurs.\n\nIn summary, this method attempts to click on a button with the specified label using XPath, waiting for the button to appear before attempting the click, and reporting failures if the button is not found or an unexpected error occurs.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "getValueFromField",
        "code": "public String getValueFromField(String label) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString txt_field = label + \"#xpath=//span[text()='\" + label + \"']/../following-sibling::div/span\";\n\t\t\twaitForElement(txt_field, 4);\n\t\t\tif (isElementDisplayed(txt_field, 5)) {\n\t\t\t\tscrollToElement(txt_field);\n\t\t\t\thighLighterMethod(txt_field);\n\t\t\t\tvalue = getText(txt_field);\n\t\t\t\tmanualScreenshot(label + \" : \" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Button. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getValueFromField`, retrieves a text value from a field on the webpage based on a given label. It uses an XPath expression to locate the element and then performs various actions such as waiting for the element to be displayed, scrolling to it, highlighting it, getting its text value, and taking a manual screenshot. If the element is not found or there's an exception during execution, the method fails the test step. The method returns the retrieved value as a string.",
        "input": [
            "String label"
        ],
        "output": "String"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyValueInFileOutwardTable",
        "code": "public void verifyValueInFileOutwardTable(String tableColumnHeaderLabel, String tableColumnValue) {\n\n\t\ttry {\n\t\t\tString tablerow = \"Table row#xpath=//thead//tr/th/a/span\";\n\t\t\tString table = \"table#xpath=//div[@class='container cFMS']\";\n\t\t\tint count = 0;\n\t\t\tif (isElementDisplayed(table, 3)) {\n\t\t\t\tList<WebElement> listOfElements = findWebElements(tablerow);\n\t\t\t\tfor (int i = 0; i < listOfElements.size(); i++) {\n\t\t\t\t\tString textvalue = listOfElements.get(i).getText().trim();\n\t\t\t\t\tif (textvalue.equals(tableColumnHeaderLabel)) {\n\t\t\t\t\t\tcount = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tString tableCellValue = \"Table cell value#xpath=(//tbody//td/span/span)[\" + count + \"]\";\n\t\t\t\tif (isElementDisplayed(tableCellValue, 2)) {\n\n\t\t\t\t\tif (getText(tableCellValue).equals(tableColumnValue)) {\n\n\t\t\t\t\t\tmanualScreenshot(\"Verified successfully \" + tableColumnValue + \"  value is present under the '\"\n\t\t\t\t\t\t\t\t+ tableColumnHeaderLabel + \" ' header.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(tableCellValue + \"Value is not auto populate under the ' \"\n\t\t\t\t\t\t\t\t+ tableColumnHeaderLabel + \" '\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the File outward Table.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in Verify Value In File Outward Table. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyValueInFileOutwardTable`, is used to verify the presence of a specific value in a table cell within an HTML element identified by the XPath expression `\"//div[@class='container cFMS']\"`. The method takes two parameters: `tableColumnHeaderLabel` and `tableColumnValue`.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the HTML element identified by the XPath expression is displayed.\n2. If the element is displayed, it finds all table rows within that element using an XPath expression `\"//thead//tr/th/a/span\"`.\n3. It then iterates through each row and checks if the text value of a specific cell matches the `tableColumnHeaderLabel`. When a match is found, it records the index of that cell.\n4. Using the recorded index, it constructs an XPath expression to find the table cell value at that position, identified by `\"//tbody//td/span/span\"[index]`.\n5. It checks if this table cell value is displayed and then compares its text value with the `tableColumnValue` parameter.\n6. If the values match, it takes a manual screenshot with a success message indicating that the value was found under the specified header. If they don't match, it fails the test step.\n7. If the HTML element is not displayed or any other exception occurs during execution, it also fails the test step.\n\nIn summary, this method verifies the presence of a specific value in a table cell within an HTML element and reports success or failure accordingly.",
        "input": [
            "String tableColumnHeaderLabel",
            "String tableColumnValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnEditInFinnone",
        "code": "public void clickOnEditInFinnone() {\n\t\ttry {\n\t\t\tString button = \"Finnone reflow Edit button#xpath=//button[@title='Edit Finnone Reflow']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnEditInFinnone`, attempts to click on an edit button with the title \"Edit Finnone Reflow\" within a specified time limit (15 seconds). \n\nHere's what it does:\n\n1. It defines a string variable `button` that contains the XPath locator of the edit button.\n2. It waits for the element to be present using the `waitForElement` method, with a timeout of 15 seconds.\n3. If the element is displayed within 5 seconds, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOn` methods respectively.\n4. If the element is not displayed within the specified time, it takes a manual screenshot as an error indication.\n5. It catches any exceptions that may occur during this process and logs the failure with a message indicating what went wrong.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnFinnoneInterfaceLink",
        "code": "public void clickOnFinnoneInterfaceLink(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName\n\t\t\t\t\t+ \" Value#xpath=(//span[text()='Finnone Interface Name']//parent::a//ancestor::table//tbody//tr//th//span//a[(text())])\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 4);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnFinnoneInterfaceLink`, simulates a click on a specific link within an HTML element that matches the given `headerName`. The method uses various Selenium WebDriver methods to:\n\n1. Wait for the page to load.\n2. Retrieve the XPath of the link using the provided `headerName`.\n3. Get the text content of the link.\n4. Wait for the link to be present on the page (with a timeout of 4 seconds).\n5. If the link is present, scroll to it and click on it.\n6. If the link is not present, fail the test step with an error message.\n\nIf any exception occurs during these steps, the method catches the exception and reports a failure in clicking on the specified link.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnCardBoundary",
        "code": "public void clickOnCardBoundary(String cardName) {\n\t\ttry {\n\t\t\twaitTime(4);;\n\t\t\tString path = cardName + \"#xpath=(//article//a/span[text()='\" + cardName + \"'])[last()]\";\n\t\t\tscrollToElementTillPresent(path);\n\t\t\twaitTime(3);\n\t\t\twaitForElement(path, 30);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + cardName + \" card \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCardBoundary`, is designed to simulate a click on the boundary of a specific card with the given name (`cardName`). The method attempts to perform the following steps:\n\n1. Waits for 4 seconds using the `waitTime` method.\n2. Constructs an XPath expression based on the provided `cardName` and uses it to locate the last element that matches the specified text within an article section.\n3. Scrolls to the located element until it is present using the `scrollToElementTillPresent` method, then waits for 3 seconds.\n4. Waits for up to 30 seconds for the element to be displayed using the `waitForElement` method.\n5. Checks if the element is displayed within 6 seconds using the `isElementDisplayed` method. If it is, it simulates a click on the special element (likely an HTML anchor tag) using the `clickOnSpecialElement` method.\n6. If any of these steps fail or the element is not displayed, the method reports a test step failure with an error message.\n\nThe method catches any exceptions that may occur during execution and reports another test step failure if one occurs, including the exception's message.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyCaseIsCreatedOrNot",
        "code": "public void verifyCaseIsCreatedOrNot(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//h1[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::div[@class='slds-grid']/following-sibling::div//span[@class='countSortedByFilteredBy']\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tString value = getText(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tif (value.contains(\"1 item\")) {\n\t\t\t\t\tmanualScreenshot(label+\" record is created\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label+\" record is not created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Case Is Created Or Not. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCaseIsCreatedOrNot`, checks if a specific case record is created or not on the UI. It takes a `label` parameter as input and performs the following steps:\n\n1. Constructs an XPath expression to locate the element containing the label.\n2. Waits for the element to be loaded using the `waitForElement` method.\n3. Checks if the element is displayed using the `isElementDisplayed` method.\n4. If the element is displayed, extracts the text value and highlights it using the `highLighterMethod`.\n5. Checks if the text value contains \"1 item\", which indicates that a record has been created.\n6. If the record is created, takes a manual screenshot with a label indicating that the record was created.\n7. If the element is not displayed (i.e., the record is not created), marks the test step as failed.\n\nIf any exception occurs during these steps, it catches the exception and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "assetValidationInAdmin",
        "code": "public void assetValidationInAdmin(String headerName, String status) {\n\t\ttry {\n\t\t\tString path = headerName + \" Value#xpath=(//span[text()='\" + headerName\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\n\t\t\tString drodwon = headerName + \" Value#xpath=//td//span[text()='Show Actions']\";\n\t\t\tString delete = headerName + \" Value#xpath=//a[@title='Delete']\";\n\t\t\tString delete1 = headerName + \" Value#xpath=//span[text()='Delete']\";\n\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 5);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (isElementDisplayed(path)) {\n\t\t\t\t\tscrollToWebElement(path);\n\t\t\t\t\tString link = getText(path);\n\t\t\t\t\tmanualScreenshot(link + \" Asset validation record successfully created after request\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Asset validation record is not created\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!isElementPresent(path)) {\n\t\t\t\t\tmanualScreenshot(\"Asset validation record not created before request\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnSpecialElement(drodwon);\n\t\t\t\t\tclickOnSpecialElement(delete);\n\t\t\t\t\tclickOnSpecialElement(delete1);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tmanualScreenshot(\"Asset validation record not created before request\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in \" + headerName + \". Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `assetValidationInAdmin`, is used to validate the creation of an asset validation record in an administrative interface. The method takes two parameters: `headerName` and `status`. \n\n- If the `status` parameter is set to \"check\", it checks if the asset validation record has been successfully created by verifying its presence on the page using XPath expressions.\n- If the status is not \"check\" or if the record is not found, it attempts to delete the record. It does this by clicking on specific elements on the page (identified by XPath expressions) and then refreshes the page.\n\nThe method also includes error handling, catching any exceptions that may occur during its execution and reporting them as test step failures.",
        "input": [
            "String headerName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLinkUnderRelatedBoundary",
        "code": "public String clickOnLinkUnderRelatedBoundary(String ColumnName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString path = \" #xpath=(//span[text()='\" + ColumnName\n\t\t\t\t\t+ \"']//parent::a//parent::div//parent::th//parent::tr//parent::thead//parent::table//tbody//tr//th//span//a)[1]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollbycordinates(path);\n\t\t\t\tValue = getText(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on  card . Exception : \" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method simulates clicking on a link under a related boundary element, given a specific column name. It uses XPath to locate the element, waits for the page to load and the element to be displayed, scrolls to the element if necessary, gets the text of the element, clicks on it, and returns the text value. If an exception occurs during execution, it logs the failure as a test step failure.",
        "input": [
            "String ColumnName"
        ],
        "output": "String"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnSaveButtonInMasterPageWithActionClass",
        "code": "public void clickOnSaveButtonInMasterPageWithActionClass(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\ttestStepPassed(\"Click On : \" + buttonLabel);\n\t\t\t\twaitTime(5);\n\t\t\t\tif (isElementDisplayed(button, 2)) {\n\t\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInMasterPageWithActionClass`, simulates a click on a button with the specified label in the master page. It uses Selenium WebDriver and its associated actions to perform the following steps:\n\n1. Waits for the button to be displayed.\n2. Scrolls to the button if it's not currently visible.\n3. Performs a mouse hover action over the button.\n4. Clicks on the button.\n5. Waits for the button to be displayed again (in case the click has some effect on the page).\n6. If the button is still displayed, performs another mouse hover and click action.\n\nThe method also includes error handling using try-catch blocks. If any exception occurs during execution, it will log a failure test step with the exception message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLinkUnderRelatedTab",
        "code": "public void clickOnLinkUnderRelatedTab(String ColumnName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = ColumnName + \" Value#xpath=(//span[text()='\" + ColumnName\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkUnderRelatedTab`, simulates a click on a link under the related tab with the specified column name. It first constructs an XPath path to locate the link element based on the provided column name. Then it waits for the page to load and the element to be present, scrolls to the element if necessary, and clicks on it. If the element is not present or an exception occurs during the process, it marks the test step as failed.",
        "input": [
            "String ColumnName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnDocumentInRequiredDocuments",
        "code": "public void clickOnDocumentInRequiredDocuments(String Value) {\n\t\ttry {\n\t\t\tString document = Value + \"#xpath=//slot[text()='\"+Value+\"']//ancestor::a\";\n\t\t\tscrollToElement(document);\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\tclickOn(document);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + Value + \" in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to find waiver Reason :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDocumentInRequiredDocuments`, is used to simulate a click on a specific document in the \"Required Documents\" section of a web page. The method takes a string parameter `Value` which represents the name of the document.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the provided `Value` with some predefined text.\n2. It calls the `scrollToElement` method to scroll the page to the element matching the constructed XPath expression.\n3. It checks if the element is displayed using the `isElementDisplayed` method, and if it is, it calls two other methods: `highLighterMethodWithForLoop` (which highlights the element) and `clickOn` (which simulates a click on the element).\n4. If the element is not displayed, it marks the test step as failed.\n5. If any exception occurs during the execution of the method, it catches the exception and marks the test step as failed with an error message.\n\nIn summary, this method automates the process of clicking on a specific document in the \"Required Documents\" section of a web page, while also handling potential errors and exceptions.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String labelname) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = labelname + \" Value#xpath=(//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLink`, simulates a click on an HTML element (likely a link) with the given label name. It uses various WebDriver methods to:\n\n1. Wait for the page to load\n2. Get the XPath of the link using the provided label name\n3. Wait for the link to be present and visible on the page\n4. Scroll to the link if it's not already in view\n5. Click on the link using a special element click method (not shown)\n6. If the link is not found, fail the test step with an error message\n\nThe method also includes error handling for any exceptions that might occur during execution.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLastLink",
        "code": "public String clickOnLastLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString ClickOnLink = \"\" + labelname\n\t\t\t\t\t+ \"#xpath=(//div[@data-aura-class='forceRelatedListDesktop']//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"') and @title='\" + labelname + \"']/ancestor::thead/following-sibling::tbody//th//a)[last()]\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitTime(6);\n\t\t\t\tmanualScreenshot(\"Successfully clicked :\" + value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method, `clickOnLastLink`, clicks on the last link with the specified label name and returns the text of the clicked link. It uses various WebDriver methods such as `waitTime`, `isElementDisplayed`, `highLighterMethod`, `getText`, `clickOnSpecialElement`, and `manualScreenshot` to perform the click action, wait for the element to be displayed, highlight the element, get the text of the element, and take a manual screenshot. The method also includes error handling using a try-catch block.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "BranchQC",
        "function_name": "chooseValueFromSearchAndListFieldInAdminLogin",
        "code": "public void chooseValueFromSearchAndListFieldInAdminLogin(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tSystem.out.println();\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[text()='\" + value + \"']\";\n\n\t\t\t\twaitTime(4);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\tString search_icn = \"search tab#xpath=//span[contains(text(),'Show All Results')] \";\n\t\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tclickOn(lnk_zipCity);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListFieldInAdminLogin`, appears to be a part of an automation script that interacts with a web application. The method takes two string parameters: `labelName` and `value`.\n\nHere's a brief description of what the method does:\n\n1. It checks if the provided `value` is not empty.\n2. If the value is not empty, it performs the following actions:\n\t* Waits for a specified time (4 seconds).\n\t* Checks if an element with the XPath expression `searchField` is displayed within a certain time frame (`elementLoadWaitTime`). \n\t* Scrolls to the element and highlights it using the `scrollToWebElement` and `highLighterMethod` methods, respectively.\n\t* Types the provided `value` into the element using the `typeIn` method.\n\t* Waits for another 5 seconds for a specific search icon (`search_icn`) to be displayed.\n\t* Highlights the search icon using the `highLighterMethod`.\n\t* Clicks on the search icon using the `clickOn` method.\n\t* Waits for the page to load completely using the `waitForPageToLoad` method.\n\t* Finally, clicks on an element with the XPath expression `lnk_zipCity`.\n\nIf any of these steps fail or the expected elements are not found, the method will report a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnFinnoneInterfaceLink",
        "code": "public void clickOnFinnoneInterfaceLink() {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = \" Value#xpath=//th//span//a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tlink = getText(path);\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFinnoneInterfaceLink`, attempts to click on a specific link within the FinnOne interface. Here's a brief summary of what it does:\n\n1. It sets an empty string variable `link`.\n2. It waits for the page to load using the `waitForPageToLoad()` method.\n3. It then waits for a specific element (identified by the XPath expression `\" Value#xpath=//th//span//a\"`) to be present on the page, with a timeout of 10 seconds.\n4. If the element is found, it retrieves the text content of that element using `getText(path)`.\n5. It then scrolls to the element and clicks on it using `scrollToWebElement()` and `clickOnSpecialElement()`, respectively.\n6. If the element is not present, it marks the test step as failed with a message indicating that the link is not present.\n7. If any exception occurs during these operations, it catches the exception and marks the test step as failed with a message describing the failure.\n\nIn summary, this method attempts to click on a specific link within FinnOne interface after verifying its presence and scrolling to it if necessary.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "enterValueInListFieldInAdminLogin",
        "code": "public void enterValueInListFieldInAdminLogin(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tSystem.out.println();\n\t\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\twaitTime(4);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInListFieldInAdminLogin`, enters a given value into a list field within the admin login page. It takes two parameters: `labelName` and `value`. \n\nThe method first checks if the provided value is not empty. If it's not, it attempts to enter the value into the corresponding list field on the page. The field is identified by its label name using XPath. \n\nThe method waits for a short period of time before attempting to interact with the field, and then scrolls to the field, highlights it, enters the value, and waits for the page to load. If the field is not present or any other exception occurs during this process, the test step fails.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "toChangeCaseOwner",
        "code": "public void toChangeCaseOwner(String fieldLabel) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString editOption = fieldLabel\n\t\t\t\t\t+ \" edit button#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//button[@title='\"\n\t\t\t\t\t+ fieldLabel + \"']\";\n\t\t\twaitForElement(editOption, 30);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toChangeCaseOwner`, appears to be a part of an automation test script that interacts with a web application. The method takes a `String` parameter `fieldLabel`, which is used to construct a specific XPath expression.\n\nThe method does the following:\n\n1. Waits for 5 seconds using the `waitTime(5)` method.\n2. Constructs an XPath expression by concatenating the `fieldLabel` with some fixed strings and XPath syntax.\n3. Waits for up to 30 seconds for the element identified by the constructed XPath expression to be displayed using the `waitForElement(editOption, 30)` method.\n4. Checks if the element is displayed within 5 seconds using the `isElementDisplayed(editOption, 5)` method. If it is, proceeds to:\n\t* Scroll to the element using the `scrollToWebElement(editOption)` method.\n\t* Click on the element using the `clickOnSpecialElement(editOption)` method.\n5. If the element is not displayed within the given time limit, marks the test step as failed with a message indicating that the edit button for the specified label is not present.\n\nThe method catches any exceptions that may occur during its execution and logs an informative message if an exception occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "toSelectCaseOwner",
        "code": "public void toSelectCaseOwner(String inputValue) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//input[contains(@class,'uiAutocomplete ')]\";\n\t\t\tString searchoption = \"#xpath=//div[contains(@class,'searchButton')]//span[contains(text(),'\" + inputValue\n\t\t\t\t\t+ \"')]\";\n\t\t\tString downArrow = \"Users, Pick an object down arrow #xpath=//a[contains(@aria-label,'Users, Pick an object')]\";\n\t\t\tString downArrowOption = \"Partner Users #xpath=//span[text()='Partner Users']/ancestor::a\";\n\t\t\tString selectValue = inputValue\n\t\t\t\t\t+ \"#xpath=//div[@class='modal-header slds-modal__header']//following::a[text()='\" + inputValue\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(downArrow, 15);\n\t\t\tclickOnSpecialElement(downArrow);\n\t\t\twaitForElement(downArrowOption, 15);\n\t\t\tclickOn(downArrowOption);\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tele.sendKeys(inputValue);\n\t\t\t\twaitForElement(searchoption, 5);\n\t\t\t\tif (isElementDisplayed(searchoption, 5)) {\n\t\t\t\t\tclickOnSpecialElement(searchoption);\n\t\t\t\t\twaitForElement(selectValue, 5);\n\t\t\t\t\tif (isElementDisplayed(selectValue, 5)) {\n\t\t\t\t\t\tclickOnSpecialElement(selectValue);\n\t\t\t\t\t\tmanualScreenshot(inputValue + \" is successfully selected \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(selectValue + \" is not displayed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(inputValue + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toSelectCaseOwner\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toSelectCaseOwner`, appears to be a part of an automated testing framework. Its primary function is to select a case owner from a dropdown menu on a web page.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for 5 seconds using the `waitTime` method.\n2. It defines several XPath expressions to locate specific HTML elements:\n\t* `Element`: an input field with a class containing the string \"uiAutocomplete\".\n\t* `searchoption`: a search option element containing the text that matches the `inputValue`.\n\t* `downArrow`: a down arrow button with an aria-label of \"Users, Pick an object\".\n\t* `downArrowOption`: an option within the dropdown menu labeled \"Partner Users\".\n\t* `selectValue`: an option within the dropdown menu containing the text that matches the `inputValue`.\n3. It waits for 15 seconds and then clicks on the down arrow button using the `clickOnSpecialElement` method.\n4. It waits again for 15 seconds and then clicks on the \"Partner Users\" option within the dropdown menu using the same method.\n5. It waits for 5 seconds and then checks if the `Element` is displayed using the `isElementDisplayed` method. If it is, it sends the `inputValue` to the input field using the `ele.sendKeys` method.\n6. It waits again for 5 seconds and then checks if the `searchoption` element is displayed. If it is, it clicks on it using the `clickOnSpecialElement` method.\n7. If the `selectValue` element is displayed (after clicking on `searchoption`), it clicks on it using the same method.\n8. It takes a manual screenshot if the selection was successful.\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "toSelectCaseOwnerInQCUAT",
        "code": "public void toSelectCaseOwnerInQCUAT(String inputValue) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//input[contains(@class,'uiAutocomplete ')]\";\n\t\t\tString searchoption = \"#xpath=//div[contains(@class,'searchButton')]//span[contains(text(),'\" + inputValue\n\t\t\t\t\t+ \"')]\";\n\t\t\tString downArrow = \"Users, Pick an object down arrow #xpath=//a[contains(@aria-label,'Users, Pick an object')]\";\n\t\t\tString downArrowOption = \"Partner Users #xpath=//span[text()='Users']/ancestor::a\";\n\t\t\tString selectValue = inputValue\n\t\t\t\t\t+ \"#xpath=//div[@class='modal-header slds-modal__header']//following::a[text()='\" + inputValue\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(downArrow, 15);\n\t\t\tclickOnSpecialElement(downArrow);\n\t\t\twaitForElement(downArrowOption, 15);\n\t\t\tclickOn(downArrowOption);\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tele.sendKeys(inputValue);\n\t\t\t\twaitForElement(searchoption, 5);\n\t\t\t\tif (isElementDisplayed(searchoption, 5)) {\n\t\t\t\t\tclickOnSpecialElement(searchoption);\n\t\t\t\t\twaitForElement(selectValue, 5);\n\t\t\t\t\tif (isElementDisplayed(selectValue, 5)) {\n\t\t\t\t\t\tclickOnSpecialElement(selectValue);\n\t\t\t\t\t\tmanualScreenshot(inputValue + \" is successfully selected \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(selectValue + \" is not displayed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(inputValue + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toSelectCaseOwner\" + e.getMessage());\n\t\t}\n\t}\n\n\t// public void scrollToElementTillPresent(String objectLocator) {\n\t// try {\n\t// boolean flag =false;;\n\t// int yaxis=3000;\n\t// JavascriptExecutor jse = (JavascriptExecutor) driver;\n\t// do {\n\t// try {\n\t//\n\t// parseidentifyByAndlocator(objectLocator);\n\t// flag = driver.findElement(By.xpath(locator)).isDisplayed();\n\t// flag =true;\n\t// } catch (org.openqa.selenium.NoSuchElementException e) {\n\t// flag= false;\n\t// }\n\t// if(!flag) {\n\t// jse.executeScript(\"window.scrollTo(0, \"+yaxis+\")\");\n\t// yaxis=yaxis+1500;\n\t// Thread.sleep(1000);\n\t// }\n\t//\n\t// } while (!flag);\n\t//\n\t// } catch (NoSuchElementException | InterruptedException e) {\n\t// e.printStackTrace();\n\t// }\n\t// }",
        "description": "This Java method, `toSelectCaseOwnerInQCUAT`, is used to select a case owner in the QCUAT system. It takes a string input value as a parameter.\n\nThe method first waits for 5 seconds and then performs several actions:\n\n1. Waits for an element with the specified XPath (`Element`) and clicks on it.\n2. Waits for another element with a specific XPath (`downArrow`) and clicks on it.\n3. Waits for a third element with a specific XPath (`downArrowOption`) and clicks on it.\n4. Waits for the `Element` again and checks if it's displayed. If it is, it sends the input value to the element using the `sendKeys` method.\n\nThe method then waits for another element with a specific XPath (`searchoption`) and clicks on it. It also waits for a fourth element with a specific XPath (`selectValue`) and clicks on it.\n\nIf any of these steps fail (i.e., the elements are not displayed or the expected actions cannot be performed), the method logs an error message using the `testStepFailed` method.\n\nThe method uses several helper methods, such as `waitTime`, `waitForElement`, `clickOnSpecialElement`, and `isElementDisplayed`, to perform these actions.",
        "input": [
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnFinnoneInterfaceLink1",
        "code": "public void clickOnFinnoneInterfaceLink1(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName + \" Value#xpath=(//span[text()='\" + headerName\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFinnoneInterfaceLink1`, clicks on a specific link within an interface. It takes a `headerName` as input and uses it to construct an XPath path to locate the link. The method:\n\n1. Waits for the page to load.\n2. Retrieves the text of the link using the constructed XPath path.\n3. Waits for the element to be present on the page (with a timeout of 24 seconds).\n4. If the element is present, it scrolls to and clicks on the link.\n5. If the element is not present, it marks the test step as failed.\n\nThe method catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnFirstRecordUnderCardBoundry",
        "code": "public void clickOnFirstRecordUnderCardBoundry(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = headerName + \" Value#xpath=(//span[text()='\" + headerName\n\t\t\t\t\t+ \"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[1]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFirstRecordUnderCardBoundry`, appears to be used for clicking on the first record under a specified card boundary. The method takes a `headerName` as input and performs the following actions:\n\n1. Constructs an XPath path using the provided header name.\n2. Waits for the page to load.\n3. Retrieves the text content of the element at the constructed path.\n4. Waits for the element at the path to be present (up to 24 seconds).\n5. Scrolls to and clicks on the special element at the path if it is present.\n6. If the element is not present, fails the test step with an error message.\n\nIf any exception occurs during these actions, the method catches it and reports a failure in clicking on the specified link card.",
        "input": [
            "String headerName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "checkCheckBoxStatus",
        "code": "public boolean checkCheckBoxStatus(String Labelname) {\n\t\tboolean status = false;\n\t\tint iterator = 1;\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Labelname + \"']/../following-sibling::div/span//input\";\n\n\t\t\tdo {\n\t\t\t\tList<WebElement> elements = findWebElements(Element);\n\t\t\t\tif (elements.size() > 1) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(5);\n\t\t\t\t}\n\n\t\t\t\titerator++;\n\t\t\t} while (iterator <= 3);\n\t\t\tif (isElementPresent(Element)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tif (!(isCheckBoxSelected(Element))) {\n\t\t\t\t\tmanualScreenshot(Labelname + \" Flag is false\");\n\t\t\t\t\tstatus = false;\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(Labelname + \" Flag is true\");\n\t\t\t\t\tstatus = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \"is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in check checkbox status. \" + e.getMessage());\n\t\t}\n\t\treturn status;\n\t}",
        "description": "This Java method, `checkCheckBoxStatus`, checks the status of a checkbox on a web page based on its label name. It uses Selenium WebDriver to interact with the web page and perform actions such as refreshing the page, waiting for certain conditions, and taking screenshots.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `Labelname`, which is used to identify the checkbox.\n2. It initializes a boolean variable `status` to `false`.\n3. It uses a do-while loop to repeatedly try to find the checkbox element on the page, up to 3 attempts.\n4. If the element is found, it checks if the checkbox is selected using the `isCheckBoxSelected` method.\n5. If the checkbox is not selected, it sets `status` to `false`.\n6. If the checkbox is selected, it sets `status` to `true`.\n7. If the element is not found after 3 attempts, it sets `status` to `false`.\n8. The method catches any exceptions that occur during execution and reports a test step failure.\n9. Finally, it returns the value of `status`, which indicates whether the checkbox is selected or not.\n\nThis method seems to be part of an automated testing framework for web applications, likely using Selenium WebDriver as the underlying technology.",
        "input": [
            "String Labelname"
        ],
        "output": "boolean"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyInfoPopupMessageInBranchWithoutFail",
        "code": "public boolean verifyInfoPopupMessageInBranchWithoutFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Message\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyInfoPopupMessageInBranchWithoutFail`, verifies that an error message is displayed in a popup when a specific condition is met. Here's a breakdown of what the method does:\n\n1. Waits up to 10 seconds for an element with the ID `errorTitle_Msg` to be displayed.\n2. Checks if the element is actually displayed within 7 seconds.\n3. If the element is displayed, checks if its text contains the string \"Message\".\n4. If the text contains \"Message\", checks if another element with the ID `error_Msg` is displayed within 4 seconds.\n5. If both conditions are met, takes a manual screenshot of the error message and sets a flag to true.\n6. If any of the above conditions fail, sets a flag to false and reports a test step failure.\n\nThe method catches any exceptions that may occur during execution and reports a test step failure if an exception is thrown. Finally, it returns the value of the `flag` variable, which indicates whether the error message was successfully verified.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyInfoPopupMessageInBranchWithoutFail",
        "code": "public boolean verifyInfoPopupMessageInBranchWithoutFail(String ExpectedError) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Message\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tString error = getText(error_Msg);\n\t\t\t\t\t\tif (error.contains(ExpectedError)) {\n\t\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyInfoPopupMessageInBranchWithoutFail`, verifies that a specific error message is displayed in a popup when an expected error occurs without failing the test. The method:\n\n1. Waits for an element to be displayed (errorTitle_Msg) with a timeout of 10 seconds.\n2. Checks if the element is actually displayed within 7 seconds.\n3. If the element is displayed, it checks if the text contains the string \"Message\".\n4. If the text contains \"Message\", it checks if another element (error_Msg) is displayed within 4 seconds.\n5. It then extracts the error message text and checks if it contains the expected error message provided as a parameter (ExpectedError).\n6. If the expected error message is found, it takes a manual screenshot with the error message text and sets a flag to true.\n7. If any of these steps fail, it calls `testStepFailed` to mark the test step as failed.\n\nThe method returns the value of the flag indicating whether the expected error message was found or not.",
        "input": [
            "String ExpectedError"
        ],
        "output": "boolean"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLinkUnderBitly",
        "code": "public void clickOnLinkUnderBitly(String ColumnName) {\n\t\ttry {\n\t\t\tString path = \" #xpath=//span[text()='\" + ColumnName + \"']//parent::div/following-sibling::div//a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollbycordinates(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on  card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkUnderBitly`, is used to click on a link under a Bitly link. It takes a `ColumnName` as input and attempts to find the corresponding link element on the page using XPath. The method performs the following actions:\n\n1. Waits for the page to load.\n2. Waits for the specified element (using the provided XPath) to be displayed within a certain time limit (10 seconds).\n3. If the element is displayed, it scrolls to the element and clicks on it.\n\nIf any exception occurs during these steps, the method catches it and reports a failure with an error message.",
        "input": [
            "String ColumnName"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyInfoPopupMessageInBranchWithFail",
        "code": "public boolean verifyInfoPopupMessageInBranchWithFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Message\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\ttestStepFailed(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\ttestStepFailed(\" Due to above errors. We cannot move further.\");\n\t\t\t\t\t\tflag = true;\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tmanualScreenshot(\"There is no error message is displayed in Popup\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyInfoPopupMessageInBranchWithFail`: This method verifies if an error message is displayed in a popup with a fail scenario. It waits for the error title and message elements to be displayed, checks if the error message contains \"Message\", and then fails the test step if the expected error message is not found. If no error message is found, it takes a manual screenshot. The method returns a boolean flag indicating whether the verification was successful or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnIRRecordType",
        "code": "public void clickOnIRRecordType(String LabelName, String RecordType) {\n\t\ttry {\n\t\t\tString path = LabelName + \" #xpath=//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//parent::a//ancestor::table//tbody//td//span//span[starts-with(text(),'\" + RecordType\n\t\t\t\t\t+ \"')]//parent::span//..//..//a[contains(@class,'forceOutputLookup')]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + RecordType);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on clickOnIRRecordType  . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnIRRecordType`, is used to simulate a mouse click on an element that matches the given `LabelName` and `RecordType` within a web page. It uses XPath expressions to locate the desired element, waits for the page to load and the element to be displayed before attempting to click on it. If the element is not found or the click operation fails, it reports a test step failure.",
        "input": [
            "String LabelName",
            "String RecordType"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnDocumentInRequiredDocumentsInQCUAT",
        "code": "public void clickOnDocumentInRequiredDocumentsInQCUAT(String Value) {\n\t\ttry {\n\t\t\tString document = Value + \"#xpath=//span[text()='Required Document Name']/following::span[text()='\" + Value\n\t\t\t\t\t+ \"']\";\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\tclickOn(document);\n\t\t\t\tmanualScreenshot(\"Successfully clicked \" + Value + \" in Required Documents\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + Value + \" in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to find waiver Reason :\" + e);\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method simulates clicking on a specific document in the \"Required Documents\" section of an application, using the provided `Value` as input. It uses XPath to locate the element and performs the following actions:\n\n1. Verifies if the element is displayed.\n2. Highlights the element (if it's displayed).\n3. Clicks on the element.\n4. Takes a manual screenshot upon successful click.\n\nIf the element is not displayed or any exception occurs during execution, the method will fail the test step and provide an error message.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyTheDocumentIsPrecentAndClick",
        "code": "public void verifyTheDocumentIsPrecentAndClick(String Value) {\n\t\ttry {\n\t\t\tString element = Value + \"#xpath=//span[text()='Required Documents Name']/following::span[text()='\" + Value\n\t\t\t\t\t+ \"']\";\n\t\t\tif (isElementDisplayed(element, 4)) {\n\t\t\t\tscrollbycordinates(element);\n\t\t\t\tmanualScreenshot(\"\" + Value + \" document is present \");\n\t\t\t\tclickOn(element);\n\t\t\t\tmanualScreenshot(\"Successfully clicked \" + Value + \" in Required Documents\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"The \" + Value + \" Is Not Precent in List\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to find waiver Reason :\" + e);\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Nov 24, 2023\n\t * @purpose :\n\t * @param headerLabel\n\t * @param flag\n\t *            :\n\t */",
        "description": "This Java method is used to verify if a specific document is present in the list of required documents and then click on it. \n\nThe method takes a `String` parameter `Value`, which likely represents the name of the document being verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `Value`. The XPath expression targets a specific span element that contains the text matching the provided `Value`.\n2. It checks if the element is displayed using the `isElementDisplayed` method, and waits for up to 4 seconds for the element to be visible.\n3. If the element is present, it scrolls to the element using the `scrollbycordinates` method, takes a manual screenshot with a message indicating that the document is present, clicks on the element using the `clickOn` method, and then takes another manual screenshot with a message indicating successful click.\n4. If the element is not present, it takes a manual screenshot with a message indicating that the document is not present in the list.\n5. The method also catches any exceptions that may occur during execution and logs an error message if one occurs.\n\nThe purpose of this method appears to be to automate the verification of required documents and their corresponding actions (in this case, clicking on them).",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyTableHeaderIsPresentOrNot",
        "code": "public void verifyTableHeaderIsPresentOrNot(String headerLabel, boolean flag) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//table/thead//tr/th/a/span[text()='\" + headerLabel + \"']\";\n\t\t\tif (flag) {\n\t\t\t\twaitForElement(field, pageLoadWaitTime);\n\t\t\t\tif (isElementDisplayed(field, pageLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + headerLabel + \" ] Header field is available.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(headerLabel + \" header field is not available in current page.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twaitForElement(field, 5);\n\t\t\t\tif (!(isElementDisplayed(field, 3))) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + headerLabel + \" ] Header field is not available.\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttestStepFailed(headerLabel + \" header field is available in current page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTableHeaderIsPresentOrNot. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @author : Gurumoorthy M\n\t * @since : Nov 24, 2023\n\t * @purpose :\n\t * @param HeaderLabel\n\t * @return :\n\t */",
        "description": "This Java method, `verifyTableHeaderIsPresentOrNot`, is used to verify the presence or absence of a table header with a given label. The method takes two parameters: `headerLabel` (the expected label of the table header) and `flag` (a boolean indicating whether the header should be present or not).\n\nThe method uses various Selenium WebDriver methods, such as `waitForElement`, `isElementDisplayed`, and `scrollToWebElement`, to interact with the web page. It also takes manual screenshots and logs test steps using `manualScreenshot` and `testStepFailed` respectively.\n\nIf the `flag` is true, the method verifies that the table header with the given label is present on the page. If it's not present, it fails the test step. If the `flag` is false, the method verifies that the table header with the given label is not present on the page. If it is present, it fails the test step.\n\nThe method also catches any exceptions that may occur during its execution and logs a failure message if an exception occurs.",
        "input": [
            "String headerLabel",
            "boolean flag"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "getTableHeaderCountInFileBatchPage",
        "code": "public int getTableHeaderCountInFileBatchPage(String HeaderLabel) {\n\t\tint headerColumnCount = 0;\n\t\ttry {\n\t\t\tString field = \"#xpath=//table/thead//tr/th/a/span\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tList<WebElement> listOfHeaders = findWebElements(field);\n\t\t\t\tfor (int i = 0; i < listOfHeaders.size(); i++) {\n\t\t\t\t\tif (listOfHeaders.get(i).getText().trim().equalsIgnoreCase(HeaderLabel)) {\n\t\t\t\t\t\theaderColumnCount = i + 1;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (headerColumnCount == 0) {\n\t\t\t\t\ttestStepFailed(\"Expected header [ \" + HeaderLabel + \" ] is not available in this table.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected Table is not available.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTableHeaderCountInFileBatchPage. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn headerColumnCount;\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Nov 24, 2023\n\t * @purpose :\n\t * @param HeaderLabel\n\t * @param expectedValue\n\t *            :\n\t */",
        "description": "This Java method, `getTableHeaderCountInFileBatchPage`, is used to retrieve the column count of a specific header label in a table. It takes a `String` parameter `HeaderLabel` and returns an `int` value representing the column index.\n\nThe method uses Selenium WebDriver to interact with the web page, waiting for the table's header row to be displayed and then iterating through the headers to find the one matching the provided label. If the header is not found, it fails the test step. The method also catches any exceptions that may occur during execution and reports them as test failures.\n\nThe purpose of this method appears to be to automate tests for a web application's table headers, allowing developers to write more efficient and reliable tests.",
        "input": [
            "String HeaderLabel"
        ],
        "output": "int"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyExpectedValueInTableRowInFileBatchPage",
        "code": "public void verifyExpectedValueInTableRowInFileBatchPage(String HeaderLabel, String expectedValue) {\n\t\ttry {\n\t\t\tint headerColumnCount = getTableHeaderCountInFileBatchPage(HeaderLabel);\n\t\t\tString tableData = \"#xpath=(//table/tbody/tr/td/span)[\" + headerColumnCount + \"]/span\";\n\t\t\twaitForElement(tableData, 25);\n\t\t\tif (isElementDisplayed(tableData, 20)) {\n\t\t\t\tscrollToWebElement(tableData);\n\t\t\t\tif (getText(tableData).equalsIgnoreCase(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Expected [\" + expectedValue + \"] value is present in this table.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected [\" + expectedValue + \"] value is not present in this table.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Table data is not available.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedValueInTableRowInFileBatchPage. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 24, 2023\n\t * @purpose : To update the new filebarcode value in filebarcode cell.\n\t */",
        "description": "This Java method verifies whether a specific expected value is present in a table row on a File Batch Page. \n\nThe method takes two parameters: `HeaderLabel` and `expectedValue`. It uses these values to locate the corresponding table header, then checks if the expected value is displayed in that column. If it is, the method takes a manual screenshot for verification. If not, it fails the test step with an error message.\n\nIf any exceptions occur during the execution of this method, it also fails the test step and logs the exception message.",
        "input": [
            "String HeaderLabel",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "updateFileBarcodeInFMS",
        "code": "public void updateFileBarcodeInFMS(String fileBarcodeValue) {\n\t\ttry {\n\t\t\tString editBtn = \"FileBarcode Edit button#xpath=(//table//tr//td[@data-aura-class='forceInlineEditCell'])[1]//button\";\n\t\t\tString inputField = \"FileBarcode input field#xpath=(//table//tr//td[@data-aura-class='forceInlineEditCell'])[1]//input\";\n\t\t\twaitForElement(editBtn, 15);\n\t\t\tif (isElementPresent(editBtn)) {\n\t\t\t\tclickOnSpecialElement(editBtn);\n\t\t\t\tif (isElementDisplayed(inputField, 5)) {\n\t\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t\ttypeIn(inputField, fileBarcodeValue);\n\t\t\t\t\tWebElement ele = findWebElement(inputField);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Filebarcode input field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Filebarcode edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateFileBarcodeInFMS. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 24, 2023\n\t * @purpose : To verify the expected filebarcode is present or not.\n\t */",
        "description": "This Java method, `updateFileBarcodeInFMS`, updates a file barcode value in an FMS (Financial Management System) application. It takes a `String` parameter `fileBarcodeValue` which represents the new file barcode value to be updated.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for 15 seconds for an element with the XPath `editBtn` to appear.\n2. If the edit button is present, it clicks on it using the `clickOnSpecialElement` method.\n3. It then checks if the input field with the XPath `inputField` is displayed within 5 seconds. If it is not, the test fails.\n4. If the input field is present, it highlights the field using the `highLighterMethod`, types in the new file barcode value using the `typeIn` method, and then simulates an Enter key press by sending the `ENTER` key to the input field.\n5. If any of these steps fail (i.e., the edit button is not present or the input field is not displayed), the test fails with a meaningful error message.\n\nThe method catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyExpectedFileBarcodeFieldValue",
        "code": "public void verifyExpectedFileBarcodeFieldValue(String value) {\n\t\ttry {\n\t\t\tString field = \"FileBarcode field#xpath=(//table//tr//td[@data-aura-class='forceInlineEditCell'])[1]//a\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field)) {\n\t\t\t\tString actualValue = getText(field);\n\t\t\t\tif (actualValue.equalsIgnoreCase(value)) {\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\tmanualScreenshot(\"Expected filebarcode value [\" + value + \"] is present.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected filebarcode value [\" + value + \"] is not present. Actual value is [\"\n\t\t\t\t\t\t\t+ actualValue + \"]\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Filebarcode field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedFileBarcodeFieldValue. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 24, 2023\n\t * @purpose : To verify the validation message is present in FMS section.\n\t */",
        "description": "This Java method, `verifyExpectedFileBarcodeFieldValue`, verifies that a specific file barcode value is displayed on the page. It takes a string parameter `value` which represents the expected file barcode value.\n\nHere's what the method does:\n\n1. It waits for an element with the specified XPath to be present on the page (timeout: 20 seconds).\n2. If the element is displayed, it extracts the actual value of the file barcode field using the `getText()` method.\n3. It compares the actual value with the expected value passed as a parameter. If they match, it highlights the element and takes a manual screenshot to confirm that the expected value is present.\n4. If the actual value does not match the expected value or if the element is not displayed, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during its execution and marks the test step as failed with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyExpectedFMSValidationMessage",
        "code": "public void verifyExpectedFMSValidationMessage(String validationMsg) {\n\t\ttry {\n\t\t\tString error_icn = \"Error Icon#xpath=//div[contains(@class,'cell-error')]//a[@role='button']\";\n\t\t\tString errorMsg = \"Error message#xpath=//strong[@class='genericNotification']/span\";\n\t\t\twaitForElement(error_icn, 15);\n\t\t\tif (isElementDisplayed(error_icn, 2)) {\n\t\t\t\tclickOnSpecialElement(error_icn);\n\t\t\t\tif (isElementDisplayed(errorMsg, 5)) {\n\t\t\t\t\tString actualMsg = getText(errorMsg);\n\t\t\t\t\tif (actualMsg.contains(validationMsg)) {\n\t\t\t\t\t\t// highLighterMethod(errorMsg);\n\t\t\t\t\t\tmanualScreenshot(\"Expected validation message [\" + validationMsg + \"] is present.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation message [\" + validationMsg\n\t\t\t\t\t\t\t\t+ \"] is not present. Actual message is [\" + actualMsg + \"]\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Validation message popup is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Validation message is not popuped up.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyExpectedFMSValidationMessage. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 24, 2023\n\t * @purpose :\n\t */",
        "description": "This Java method, `verifyExpectedFMSValidationMessage`, is used to verify if a specific error message is displayed in the UI after performing some validation. Here's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the specified XPath (`error_icn`) to be displayed within 15 seconds.\n2. If the element is displayed, it clicks on that element using `clickOnSpecialElement(error_icn)`.\n3. Then, it checks if another element with the specified XPath (`errorMsg`) is displayed within 5 seconds.\n4. If the element is displayed, it extracts the text content of that element using `getText(errorMsg)` and stores it in a variable called `actualMsg`.\n5. It then checks if the extracted text contains the expected validation message passed as a parameter to this method (`validationMsg`).\n6. If the expected message is found in the actual message, it takes a manual screenshot with a comment indicating that the expected message was present.\n7. If the expected message is not found or the elements are not displayed, it fails the test step and provides an error message.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step if an exception is thrown.",
        "input": [
            "String validationMsg"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "verifyFMSValidationMessage",
        "code": "public void verifyFMSValidationMessage() {\n\t\ttry {\n\t\t\tString error_icn = \"Error Icon#xpath=//div[contains(@class,'cell-error')]//a[@role='button']\";\n\t\t\tString errorMsg = \"Error message#xpath=//strong[@class='genericNotification']/span\";\n\t\t\twaitForElement(error_icn, 15);\n\t\t\tif (isElementDisplayed(error_icn, 2)) {\n\t\t\t\tclickOnSpecialElement(error_icn);\n\t\t\t\tif (isElementDisplayed(errorMsg, 5)) {\n\t\t\t\t\tString actualMsg = getText(errorMsg);\n\t\t\t\t\ttestStepFailed(\"Unexpected Error message [\" + actualMsg + \"] is displayed.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Validation message popup is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Successfully no error message has occurred.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFMSValidationMessage. Exception: \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Guru\n\t * @since : Jan 8, 2024\n\t * @purpose :\n\t */",
        "description": "This Java method, `verifyFMSValidationMessage`, is designed to verify the validation message displayed in a web application. It uses Selenium WebDriver and XPath expressions to locate specific elements on the page.\n\nHere's what the method does:\n\n1. It waits for an error icon element to be displayed within a certain time limit (15 seconds).\n2. If the error icon is displayed, it clicks on it.\n3. The method then checks if the error message element is displayed within another time limit (5 seconds). \n4. If the error message is displayed, it retrieves its text content and compares it to an expected value. If the actual message does not match the expected one, it marks the test as failed.\n5. If the error message is not displayed, it also marks the test as failed.\n6. If no error icon is displayed within the time limit, it takes a manual screenshot as evidence.\n\nThe method catches any exceptions that occur during its execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "updateFileBarcodeWithOppIdInFMS",
        "code": "public void updateFileBarcodeWithOppIdInFMS(String opportunityName, String fileBarcodeValue) {\n\t\ttry {\n\t\t\tString editBtn = \"FileBarcode Edit button#xpath=//tbody/tr/th//span[text()='\" + opportunityName\n\t\t\t\t\t+ \"']//..//../following-sibling::td//a[@data-recordid]//following-sibling::span//button\";\n\t\t\tString inputField = \"FileBarcode input field#xpath=//tbody/tr/th//span[text()='\" + opportunityName\n\t\t\t\t\t+ \"']//..//../following-sibling::td//a[@data-recordid]//..//following-sibling::div//input\";\n\t\t\twaitForElement(editBtn, 15);\n\t\t\tif (isElementPresent(editBtn)) {\n\t\t\t\tclickOnSpecialElement(editBtn);\n\t\t\t\tif (isElementDisplayed(inputField, 5)) {\n\t\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t\ttypeIn(inputField, fileBarcodeValue);\n\t\t\t\t\tWebElement ele = findWebElement(inputField);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Filebarcode input field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Filebarcode edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in updateFileBarcodeWithOppIdInFMS. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method updates a file barcode with an opportunity ID in FMS (a web-based application). It takes two parameters: `opportunityName` and `fileBarcodeValue`.\n\nThe method performs the following steps:\n\n1. Waits for and clicks on a \"FileBarcode Edit button\" associated with the given `opportunityName`.\n2. If the edit button is present, it checks if the corresponding \"FileBarcode input field\" is also present.\n3. If both are present, it:\n\t* Highlights the input field using a highligher method (not shown).\n\t* Types in the file barcode value into the input field.\n\t* Sends an ENTER key to submit the changes.\n\nIf either the edit button or input field is not present, or if any of these steps fail, the method reports a test step failure with a descriptive error message.",
        "input": [
            "String opportunityName",
            "String fileBarcodeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "BranchQC",
        "function_name": "pickRandomOppIdFromFMSSection",
        "code": "public String pickRandomOppIdFromFMSSection(String oppPosition) {\n\t\tString oppName = \"\";\n\t\ttry {\n\t\t\tString field = \"#xpath=(//tbody/tr/th)[\" + oppPosition + \"]/span/span[contains(@class,'uiOutputTextArea')]\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\toppName = getText(field);\n\t\t\t\tmanualScreenshot(\"Opportunity Record: \" + oppName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Issue: Either Opportunity records are not present or Locators changed.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in pickRandomOppIdFromFMSSection. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn oppName;\n\t}",
        "description": "This Java method, `pickRandomOppIdFromFMSSection`, is used to retrieve the name of a random opportunity record from a specified section (likely a table or list) in a web application. \n\nThe method takes a string parameter `oppPosition` which represents the position of the opportunity record in the list. It uses an XPath locator to locate the specific opportunity record, waits for it to be displayed, scrolls to it if necessary, and then extracts its name using a `getText()` method. If the opportunity record is not found or the locators have changed, the method fails the test step. \n\nThe method also takes a manual screenshot of the opportunity record if it's successfully retrieved. The method returns the name of the opportunity record as a string.",
        "input": [
            "String oppPosition"
        ],
        "output": "String"
    },
    {
        "class_name": "BranchQC",
        "function_name": "clickOnLinkForRequireDocuments",
        "code": "public String clickOnLinkForRequireDocuments(String paramValue) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString ClickOnLink = \"\" + paramValue\n\t\t\t\t\t+ \"#xpath=//div[contains(@class,'active')]//*[not(contains(@class,'marker'))]//table/tbody//th//span//a/span//span/slot[text()='\"+paramValue+\"']\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\twaitTime(6);\n\t\t\t\tmanualScreenshot(\"Successfully clicked :\" + value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}\n}",
        "description": "This Java method, `clickOnLinkForRequireDocuments`, is used to click on a specific link on a webpage that requires certain documents. The method takes a `String` parameter `paramValue` which is used to construct the XPath expression for the link.\n\nHere's what the method does:\n\n1. Waits for 5 seconds using the `waitTime(5)` method.\n2. Constructs an XPath expression by concatenating the `paramValue` with a predefined string.\n3. Uses the `isElementDisplayed` method to check if the element matching the XPath expression is displayed within 4 seconds.\n4. If the element is displayed, it highlights the element using the `highLighterMethod(ClickOnLink)` method.\n5. Gets the text of the element using the `getText(ClickOnLink)` method and stores it in the `value` variable.\n6. Clicks on the special element (likely a link) using the `clickOnSpecialElement(ClickOnLink)` method.\n7. Waits for 6 seconds using the `waitTime(6)` method.\n8. Takes a manual screenshot with the message \"Successfully clicked :<value>\".\n\nIf any exception occurs during these steps, it catches and logs the error using the `testStepFailed` method. The method returns the value obtained from step 5.",
        "input": [
            "String paramValue"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyCustomerIsCreated",
        "code": "public void verifyCustomerIsCreated(String customerName) {\n\n\t\ttry {\n\t\t\tString customerLabel = \"#xpath=//div[text()='Customer']/following-sibling::div/span[contains(text(),'\"\n\t\t\t\t\t+ customerName + \"')]\";\n\t\t\twaitForElement(customerLabel, 13);\n\t\t\tif (isElementDisplayed(customerLabel, 4)) {\n\t\t\t\tmanualScreenshot(\"Successfully '\" + getText(customerLabel) + \"' customer is created.\");\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to create the customer.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Customer Is Created. Exception.\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCustomerIsCreated`, is used to verify if a customer with a given name has been successfully created. It takes a `customerName` as input and uses it to construct an XPath expression that searches for the customer's label in the UI. The method then:\n\n1. Waits for the element to be displayed using the `waitForElement` method.\n2. Checks if the element is displayed using the `isElementDisplayed` method.\n3. If the customer is found, it takes a manual screenshot with a message indicating that the customer was successfully created.\n4. If the customer is not found, it marks the test step as failed and logs an error message.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if one occurs.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "RemoveCrossSignInZipCode",
        "code": "public void RemoveCrossSignInZipCode(String labelname) {\n\t\ttry {\n\t\t\tString btn_remove = \"Remove \" + labelname + \"#xpath=(//span[text()='\" + labelname\n\t\t\t\t\t+ \"'])[last()]//..//following-sibling::div//a[contains(@class,'delete')]\";\n\t\t\twaitForElement(btn_remove, 10);\n\t\t\tif (isElementDisplayed(btn_remove, 6)) {\n\t\t\t\tscrollToWebElement(btn_remove);\n\t\t\t\tclickOn(btn_remove);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Remove cross sign is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Remove cross sign Exception :\" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, named `RemoveCrossSignInZipCode`, removes a specific cross sign (represented by the given label name) from a web page. Here's a brief summary of its functionality:\n\n1. It constructs a string (`btn_remove`) that represents an XPath expression to locate the remove button for the specified label name.\n2. The method waits for the element with the constructed XPath expression to be displayed within a 10-second time frame using `waitForElement`.\n3. If the element is displayed, it checks if the element is visible on the screen within a 6-second time frame using `isElementDisplayed`. \n4. If the element is visible, it scrolls to the remove button and clicks on it using `scrollToWebElement` and `clickOn`, respectively.\n5. If the element is not present or not displayed after the specified time frames, the method logs an error message using `testStepInfo`.\n\nThe method also catches any exceptions that may occur during execution and logs them as a failure using `testStepFailed`.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "VerifyOCRRecordsAutopopulted_1",
        "code": "public String VerifyOCRRecordsAutopopulted_1(String labelName) {\n\t\tString text = null;\n\t\ttry {\n\t\t\tString label = labelName + \"#xpath=(//label[text()='\" + labelName + \"']/following::div//input)[1]\";\n\t\t\tWebElement element = findWebElement(label);\n\t\t\tif (isElementDisplayed(label, 3)) {\n\t\t\t\tscrollToWebElement(label);\n\t\t\t\thighLighterMethod(label);\n\t\t\t\ttext = element.getAttribute(\"value\");\n\t\t\t\ttestStepInfo(labelName + \" : \" + text);\n\t\t\t\tmanualScreenshot(labelName + \" has [ \" + text + \" ] value\");\n\t\t\t}\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\ttestStepFailed(labelName + \" is not autopopulated\");\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `VerifyOCRRecordsAutopopulted_1`, verifies the value of an input field that was supposed to be autopopulated by OCR (Optical Character Recognition) technology. It takes a `labelName` as input and attempts to:\n\n1. Construct an XPath expression based on the label name.\n2. Find the corresponding web element using the constructed XPath.\n3. Check if the element is displayed within 3 seconds.\n4. If displayed, scroll to the element, highlight it (using a highlighting method), get its current value, log a test step with the expected and actual values, and take a manual screenshot.\n5. If any of these steps fail or an exception occurs, log a test failure message.\n\nThe method returns the actual value of the input field if the verification is successful; otherwise, it returns `null`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "enterValueInPINTextField",
        "code": "public void enterValueInPINTextField(String inputValue) {\n\t\ttry {\n\t\t\tString inputField = \"#xpath=//label[contains(text(),'Enter PIN')]/parent::div/input\";\n\t\t\t// waitForElementUntilVisible(inputField);\n\t\t\tif (isElementDisplayed(inputField, 8)) {\n\n\t\t\t\ttypeIn(inputField, inputValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"PIN text Field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Enter Value In PIN Text Field. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `enterValueInPINTextField`, enters a given input value into a text field labeled \"Enter PIN\" on a web page. It uses an XPath expression to locate the input field, waits for it to be visible, and then types in the provided input value if the field is displayed. If the field is not present or displayed within a certain time limit (8 seconds), the method fails the test step. The method also logs any exceptions that occur during execution.",
        "input": [
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "GetAutopopultedValue",
        "code": "public String GetAutopopultedValue(String labelName) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString label = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\tWebElement ele = findWebElement(label);\n\n\t\t\tif (isElementDisplayed(label, 3)) {\n\t\t\t\tvalue = ele.getAttribute(\"value\");\n\t\t\t\tscrollToWebElement(label);\n\t\t\t\tmanualScreenshot(value + \" is autopopulated\");\n\t\t\t}\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\ttestStepFailed(labelName + \" is not autopopulated\");\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `GetAutopopultedValue`, takes a `String` parameter `labelName` and attempts to retrieve the value of an input element associated with that label. The method uses Selenium WebDriver to find the element using XPath, checks if it is displayed, and then retrieves its value attribute. If the element is not displayed or the operation fails for any reason, the method catches the exception and marks the test step as failed. Finally, it returns the autopopulated value as a `String`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "clickOnButtonInATOS",
        "code": "public void clickOnButtonInATOS(String value) {\n\n\t\ttry {\n\t\t\tString button = value + \"#xpath=//span[text()='\" + value + \"']\";\n\t\t\twaitForElement(button, 2);\n\t\t\tif (isElementDisplayed(button, 3)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On Button In ATOS. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInATOS`, attempts to click on a button with a specific text value within an ATOS (Automated Testing of Oracle Siebel) system.\n\nThe method takes a `String` parameter, `value`, which represents the expected text value of the button. It uses this value to construct an XPath expression that identifies the button element in the UI.\n\nHere's what the method does:\n\n1. Tries to create an XPath expression by concatenating the input `value` with a fixed string and the XPath syntax for selecting a span element with the given text.\n2. Waits for the button element to be present using the `waitForElement` method (timeout of 2 seconds).\n3. Checks if the button is displayed using the `isElementDisplayed` method (timeout of 3 seconds). If it's not, the test step fails.\n4. If the button is displayed, clicks on it using the `clickOn` method.\n\nIf any exception occurs during this process, the method catches it and reports a test failure with an error message containing the exception details.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "customerssearch",
        "code": "public void customerssearch(String Searchvalue) {\n\t\tString searchlist = \"#xpath=//div[@class='slds-form-element__control slds-grow slds-input-has-icon slds-input-has-icon_left-right']/input\";\n\t\tif (isElementDisplayed(searchlist, 15)) {\n\n\t\t\tWebElement ele = findWebElement(searchlist);\n\t\t\ttypeIn(searchlist, Searchvalue);\n\t\t\tele.sendKeys(Keys.ENTER);\n\t\t} else {\n\t\t\ttestStepFailed(\"SearchBox is not Displayed\");\n\t\t}\n\t}",
        "description": "This Java method, `customerssearch`, performs a search operation in a web application. It takes a `String` parameter `Searchvalue` which represents the search query.\n\nHere's what the method does:\n\n1. It checks if an element with the specified XPath (a path to locate an element on a webpage) is displayed within 15 seconds.\n2. If the element is displayed, it finds the web element using the provided XPath and types in the `Searchvalue` into the search box.\n3. After typing in the search query, it presses the Enter key to submit the search.\n4. If the search box is not displayed (i.e., the condition in step 1 fails), it logs a test failure with the message \"SearchBox is not Displayed\".",
        "input": [
            "String Searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorPopupMessage",
        "code": "public boolean verifyErrorPopupMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error!\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\" Due to above errors. We cannot move further.\");\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyErrorPopupMessage`, is designed to verify the presence and contents of an error popup message on a web page or application. Here's a brief breakdown:\n\n1. The method waits for up to 10 seconds for an element with the identifier `errorTitle_Msg` to be displayed.\n2. If the element is displayed, it checks if the text contains the string \"Error!\" and then verifies that another element with the identifier `error_Msg` is also displayed within a shorter timeout of 4 seconds.\n3. If both conditions are met, the method takes a manual screenshot with the error message as part of the file name.\n4. The method sets a boolean flag to `true` if all the above conditions are satisfied.\n5. If the flag is still `false`, it means that no error popup message was found or there were issues during the verification process, so the method logs a test step failure with an appropriate message.\n6. Finally, the method returns the value of the boolean flag.\n\nIn summary, this method is designed to verify the presence and contents of an error popup message on a web page or application, and it reports any failures or errors encountered during the verification process.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorIMPSPopupMessage",
        "code": "public boolean verifyErrorIMPSPopupMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(15);\n\t\t\twaitForElement(errorTitle_Msg, 15);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 10)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyErrorIMPSPopupMessage`, is used to verify if an error popup message is displayed after a certain amount of time has passed (15 seconds). \n\nIt first waits for 15 seconds using the `waitTime` method. Then it waits for an element to be displayed with a maximum wait time of 15 seconds using the `waitForElement` method.\n\nIf the element is displayed, it checks if the text of that element contains the word \"Error\". If it does, it then checks if another element (error_Msg) is also displayed within 4 seconds. \n\nIf both conditions are met, it takes a manual screenshot with the error message as part of the file name and sets a flag to `true`. \n\nHowever, if either condition fails, it logs an error message using the `testStepFailed` method.\n\nThe method returns a boolean value indicating whether the error popup message was displayed or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorIMPSPopupMessageWithFail",
        "code": "public boolean verifyErrorIMPSPopupMessageWithFail(String ExpectedError) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString actualError_Msg = null;\n\t\t\tif (isElementDisplayed(error_Msg, 10)) {\n\t\t\t\tactualError_Msg = getText(error_Msg).trim();\n\t\t\t\tif (actualError_Msg.equalsIgnoreCase(ExpectedError) || actualError_Msg.contains(ExpectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected Validation is not fired.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Expected Error Popup Message. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorIMPSPopupMessageWithFail`, verifies if an expected error popup message is displayed with a specific fail condition. Here's a brief summary:\n\n1. It checks if the element `error_Msg` is displayed within a specified time limit (10 seconds).\n2. If the element is displayed, it retrieves the actual error message text and trims any whitespace.\n3. The method then compares the actual error message with the expected error message provided as an input parameter (`ExpectedError`). It checks if they are equal or if the actual error message contains the expected error message (using `contains()`).\n4. If the expected error message is matched, it takes a manual screenshot to capture the validation message.\n5. If the expected error message is not matched or the element is not displayed within the specified time limit, the method fails the test step and logs an error message.\n\nThe method returns a boolean value (`flag`) which is always set to `false`, as its primary purpose is to verify and fail the test step if the expected error popup message is not displayed with the specific fail condition.",
        "input": [
            "String ExpectedError"
        ],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorIMPSPopupMessageWithFail",
        "code": "public boolean verifyErrorIMPSPopupMessageWithFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 8);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 10)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, named `verifyErrorIMPSPopupMessageWithFail`, is used to verify the presence of an error popup message with a failure scenario. Here's a brief description:\n\n1. The method waits for up to 8 seconds for an element with the ID `errorTitle_Msg` to be displayed.\n2. If the element is displayed, it checks if the text contains the word \"Error\".\n3. If the condition in step 2 is met and the error message is displayed (within a 4-second time frame), the method takes a manual screenshot of the error popup with the error message as its title.\n4. The method returns a boolean value indicating whether the verification was successful (`true`) or not (`false`).\n5. If any exception occurs during the execution of the method, it catches the exception and reports a test step failure with an error message.\n\nIn summary, this method verifies the presence of an error popup message with a specific text content and takes a screenshot if the condition is met. If the verification fails or an exception occurs, it reports a test step failure.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "getstatuscancelledCheque",
        "code": "public void getstatuscancelledCheque(String label, String Status) {\n\t\ttry {\n\t\t\tString StatusValue = \"#xpath=//span[text()='\" + label + \"']/following::div[@class='slds-tile__detail']/dl\";\n\t\t\tif (isElementDisplayed(StatusValue, 3)) {\n\t\t\t\thighLighterMethod(StatusValue);\n\t\t\t\tString status = \"#xpath=//span[text()='\" + label\n\t\t\t\t\t\t+ \"']/following::div[@class='slds-tile__detail']/dl/dd[text()='\" + Status + \"']\";\n\t\t\t\tif (isElementDisplayed(status, 3)) {\n\t\t\t\t\tmanualScreenshot(\"Status\" + getText(status) + \"is displayed\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Status is not visible\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getstatuscancelledCheque.Exception:\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getstatuscancelledCheque`, takes two string parameters: `label` and `Status`. It uses these values to search for an element on the page using XPath. The method attempts to:\n\n1. Check if the element with the given label is displayed (using `isElementDisplayed`).\n2. If the element is displayed, it highlights the element using `highLighterMethod`.\n3. Then, it checks if a specific status value (matching the provided `Status` parameter) is displayed within the same element.\n4. If the status value is displayed, it takes a manual screenshot with a descriptive name indicating that the status is visible.\n5. If the status value is not displayed, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String label",
            "String Status"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, elementLoadWaitTime)) {\n\t\t\t\t\tclickOn(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, is used to select a specific value from a dropdown list. It takes two parameters: the name of the dropdown and the value to be selected.\n\nThe method first constructs an XPath expression to locate the dropdown element. If the dropdown is displayed, it clicks on the dropdown to expand the list of options. Then, it constructs another XPath expression to locate the specific option to be selected. If this option is displayed, it clicks on it to select it. The method reports the result as a test step passed or failed.\n\nIf any exceptions occur during the execution of the method (e.g., if the dropdown is not present or the value is not found), the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t// waitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, selects a value from a dropdown list within an IMPSS popup. It takes two parameters: the name of the dropdown and the desired value to be selected. The method uses Selenium WebDriver commands to:\n\n1. Locate the dropdown element using its name and XPath.\n2. Check if the dropdown is displayed (with a timeout of 4 seconds).\n3. If the dropdown is present, click on it.\n4. Find the list of options within the dropdown that matches the desired value.\n5. Click on the selected value to select it.\n6. Verify that the selection was successful or not.\n\nIf any step fails, the method logs a test step failure with an appropriate message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "enterValueInFieldInIMPSPopup",
        "code": "public void enterValueInFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\ttypeIn(field, value);\n\n\t\t\t\t// String ele = value+\"#xpath=//span[@class='slds-listbox__option-meta\n\t\t\t\t// slds-listbox__option-meta_entity'][last()]\";\n\n\t\t\t\t// clickOn(ele);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldInIMPSPopup`, is used to input a given value into a field with a specific label name in an IMPSS popup. \n\nIt takes two parameters: `labelName` and `value`. The method first constructs an XPath locator for the field by combining the label name with an XPath expression. It then checks if the field is displayed using the `isElementDisplayed` method, which returns a boolean indicating whether the element is visible on the screen.\n\nIf the field is displayed, it calls another method (`typeIn`) to input the given value into the field. If the field is not displayed, it logs a failure message for the test step. \n\nThe method also includes error handling using a `try-catch` block. If any exception occurs during the execution of this method, it logs a failure message with the exception's message as part of the test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyStatusDropdownLabel",
        "code": "public void verifyStatusDropdownLabel(String dropdownName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tSystem.out.println();\n\t\t\tString dropdown = dropdownName + \"#xpath=(//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a)\";\n\t\t\twaitForElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyStatusDropdownLabel`, verifies the presence and functionality of a status dropdown label on a web page. \n\nHere's what it does:\n\n1. Waits for the page to load.\n2. Creates an XPath expression to locate the dropdown element with the specified name.\n3. Waits for the dropdown element to be present.\n4. Checks if the dropdown is displayed within the expected time frame (elementLoadWaitTime).\n5. If the dropdown is displayed, clicks on it.\n6. Waits again for the page to load after clicking the dropdown.\n\nIf any step fails (e.g., the dropdown is not present or not displayed), an error message is logged and the test is considered failed.",
        "input": [
            "String dropdownName"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectDateInPopup",
        "code": "public void selectDateInPopup(String labelName, String value) {\n\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::div/input\";\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\ttestStepPassed(\"POS able to entry data with \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"POS not able to entry data with out \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, named `selectDateInPopup`, is used to select a date value from a popup field with a specific label name. \n\nThe method takes two parameters: `labelName` and `value`. It first constructs an XPath expression based on the provided `labelName`, which is expected to be present in the UI. The XPath expression points to the input field that follows the label.\n\nThen, it checks if the element is displayed within a specified timeout (3 seconds). If the element is displayed, it enters the provided `value` into the field using the `typeIn` method. \n\nIf the element is not displayed, or if there's an exception during the process, the method reports a test step failure with a relevant message.\n\nOverall, this method seems to be part of a larger automation framework for testing a Point-of-Sale (POS) system, and it helps verify that the date selection popup works as expected.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "enterValueInLinkField",
        "code": "public void enterValueInLinkField(String Lable, String PartialValue, String ExpectedValue1) {\n\t\t{\n\t\t\ttry {\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString field = \"Field#xpath=//span[text()='\" + Lable + \"']/following::span[text()='\" + PartialValue\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(field);\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\ttypeIn(field, PartialValue);\n\t\t\t\t\tString clickInList = \"Option#xpath=(//a[text()='\" + ExpectedValue1 + \"'])[last()]\";\n\t\t\t\t\tscrollToElement(clickInList);\n\t\t\t\t\twaitForElement(clickInList, 5);\n\n\t\t\t\t\tif (isElementDisplayed(clickInList, 5)) {\n\t\t\t\t\t\tscrollToElement(clickInList);\n\t\t\t\t\t\tclickOn(clickInList);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(PartialValue + \" option is not present in the listbox\");\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(ExpectedValue1 + \" field is not present\");\n\t\t\t\t}\n\t\t\t\twaitForPageToLoad();\n\t\t\t} catch (Exception e) {\n\t\t\t\ttestStepFailed(\"Failed in enterConsignee. Exception - \" + e.getMessage());\n\t\t\t}\n\t\t}\n\n\t}",
        "description": "This Java method, named `enterValueInLinkField`, is used to interact with a link field on a web page. It takes three string parameters: `Lable`, `PartialValue`, and `ExpectedValue1`. \n\nThe method performs the following actions:\n\n1. Waits for the page to load.\n2. Locates an element on the page using XPath, which is constructed based on the provided label and partial value.\n3. Waits for the located element to be displayed.\n4. If the element is displayed, types in the partial value and scrolls to a specific option (ExpectedValue1) in a listbox.\n5. Waits for the option to be displayed and clicks on it if present.\n6. If the option is not present or any other exception occurs during the execution of these steps, the method fails the test step.\n\nThe method uses various helper methods like `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, `typeIn`, `scrollToElement`, and `clickOn` to perform these actions.",
        "input": [
            "String Lable",
            "String PartialValue",
            "String ExpectedValue1"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "enterFieldsInEdit",
        "code": "public void enterFieldsInEdit(String labelName, String inputValue) {\n\n\t\ttry {\n\n\t\t\tString field = labelName + \" #xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']//parent::label//following-sibling::div/div/div/div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollbycordinates(field);\n\t\t\t\ttypeIn(field, inputValue);\n\n\t\t\t\tString fieldOne = inputValue + \" #xpath=//a[@role='option']//div[@title='\" + inputValue + \"']\";\n\t\t\t\twaitForElement(fieldOne, 3);\n\n\t\t\t\tif (isElementDisplayed(fieldOne)) {\n\t\t\t\t\tclickOn(fieldOne);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Failed to select the \" + inputValue);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" button is not present\");\n\t\t\t\tSystem.out.println();\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(labelName + \" field is not present\");\n\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\n\t}",
        "description": "This Java method, `enterFieldsInEdit`, is used to enter a given value into an edit field with a specific label name. The method takes two parameters: `labelName` and `inputValue`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the edit field based on the provided `labelName`.\n2. It waits for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it scrolls down to the field if necessary and enters the `inputValue` into the field.\n4. After entering the value, it checks if an option with the same value exists and selects it if present.\n5. If any of these steps fail (e.g., the element is not found or the value cannot be entered), the method reports a test step failure and logs an error message.\n\nThe method also catches any exceptions that may occur during its execution, reporting a test step failure and logging the exception details.",
        "input": [
            "String labelName",
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyAlertMessage",
        "code": "public void verifyAlertMessage() {\n\t\ttry {\n\n\t\t} catch (Exception e) {\n\n\t\t}\n\t}\n\t/*\n\t * public void VerifyDateIsselected(String labelName, String value) {\n\t * \n\t * try { String field = labelName+\"#xpath=//span[text()='\"+labelName+\n\t * \"']//parent::label//following-sibling::div/input\"; waitTime(2); if\n\t * (isElementDisplayed(field, elementLoadWaitTime)) { typeIn(field, value);\n\t * if(Isd testStepPassed(\"POS able to entry data with \"+labelName); } else {\n\t * testStepFailed(\"POS not able to entry data with out \"+labelName); } } catch\n\t * (Exception e) {\n\t * testStepFailed(\"Failed in enterValueInField \"+e.getMessage()); }\n\t * \n\t * \n\t * }\n\t */",
        "description": "Here are brief descriptions for the two Java methods:\n\n**1. `verifyAlertMessage()`**\n\nThis method attempts to verify an alert message, but it does not specify what kind of verification or what type of alert message is being checked. The method has a try-catch block, but the code inside the try and catch blocks is empty.\n\n**2. `VerifyDateIsselected(String labelName, String value)`**\n\nThis method appears to be used for verifying that a specific date field on a web page has been selected with a given value. It uses Selenium WebDriver methods like `waitTime`, `isElementDisplayed`, and `typeIn` to interact with the element. The method also includes some test step logic using `testStepPassed` and `testStepFailed`. If the expected value is entered successfully, it marks the test step as passed; otherwise, it fails the test step.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "IsErrordisplayed",
        "code": "public void IsErrordisplayed(String labelname) {\n\n\t\ttry {\n\n\t\t\tString Error = \"xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(Error, 10)) {\n\n\t\t\t\tString Element = labelname + \"xpath=//span[text()='\" + labelname\n\t\t\t\t\t\t+ \"']/following::li[@class='form-element__help']\";\n\t\t\t\tif (isElementDisplayed(Element, 7)) {\n\t\t\t\t\tscrollToElement(Element);\n\t\t\t\t\tgetText(Element);\n\t\t\t\t\tmanualScreenshot(\"Validation message is displayed\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Validation message is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"'Review the errors on this page.' is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in IsErrordisplayed \" + e.getMessage());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `IsErrordisplayed`, checks if a specific error message is displayed on the page. It takes a string parameter `labelname` which is used to construct the XPath of the element.\n\nThe method:\n\n1. Checks if the error message \"Review the errors on this page.\" is displayed within 10 seconds.\n2. If it's displayed, it checks if another specific element (related to the given label name) is also displayed within 7 seconds.\n3. If both elements are displayed, it scrolls to the second element and retrieves its text content.\n4. It then takes a manual screenshot with a message indicating whether the validation message was successfully displayed.\n5. If either of these conditions fail (i.e., the error message or the related element is not displayed), it marks the test step as failed.\n\nIf any exception occurs during the execution, it catches the exception and marks the test step as failed with an error message.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "IsValueAutopopulted",
        "code": "public void IsValueAutopopulted(String labelName) {\n\t\ttry {\n\t\t\tString label = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\tif (isElementDisplayed(label, 3)) {\n\t\t\t\tscrollToElement(label);\n\t\t\t\tmanualScreenshot(labelName + \" is autopopulated\");\n\t\t\t}\n\n\t\t}\n\n\t\tcatch (Exception e) {\n\t\t\ttestStepFailed(labelName + \" is not autopopulated\");\n\t\t}\n\t}\n\n\t/*\n\t * public void IsElementChecked(String label) { try { String Element =\n\t * label+\"#xpath=//span[text()='\"+label+\"']//../following-sibling::input\";\n\t * if(isElementDisplayed(Element,4)) { scrollToElement(Element); if( } }\n\t * catch(Exception e) {\n\t * \n\t * } }\n\t */",
        "description": "This Java method, `IsValueAutopopulted`, checks whether a value is autopopulated in an application. \n\nIt takes a string parameter `labelName` which is used to construct an XPath expression to locate the element. The method then uses this XPath expression to search for the element and check if it's displayed within a certain timeout (3 seconds). If the element is displayed, it scrolls to that element and takes a manual screenshot with a filename based on the `labelName`. \n\nIf any exceptions occur during the execution of this method, it catches them and marks the test step as failed by calling the `testStepFailed` method.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "enabledOrDisabledCheckbox",
        "code": "public void enabledOrDisabledCheckbox(String checkboxLabel) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(checkbox, 3);\n\n\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\tscrollToElement(checkboxLabel);\n\t\t\t\tmanualScreenshot(checkboxLabel + \"check box is disabled\");\n\t\t\t\ttestStepPassed(checkboxLabel + \" check box disabled \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(checkboxLabel + \" checkbox is already checked\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`enabledOrDisabledCheckbox`: This method checks if a checkbox with a given label is enabled or disabled. It uses an XPath expression to locate the checkbox element, waits for it to be visible, and then verifies its selected state. If the checkbox is not selected (i.e., it's disabled), the method scrolls to the checkbox, takes a manual screenshot, and marks the test step as passed. If the checkbox is already selected, the method fails the test step. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String checkboxLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "clickOnSaveButtonInCKYCPopup",
        "code": "public void clickOnSaveButtonInCKYCPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::button[contains(@class,'publisher')]\";\n\t\t\twaitForElement(button, 2);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnSaveButtonInCKYCPopup`, simulates a click on a specific button with the given name within a CKY C Popup. It uses Selenium WebDriver to perform the action.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `buttonName`, which is used to construct an XPath expression for finding the desired button.\n2. It waits for the element to be present using `waitForElement`.\n3. If the element is displayed, it highlights the button using `highLighterMethod` and then clicks on it using `clickOn`.\n4. If the element is not displayed within a specified time (`elementLoadWaitTime`), it fails the test step with an error message.\n5. In case of any exceptions (e.g., due to network issues or element not found), it catches the exception, logs the error message, and fails the test step.\n\nIn summary, this method is designed to automate the process of clicking on a specific button within a CKY C Popup in a web application.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyCkycInitiated",
        "code": "public boolean verifyCkycInitiated(String optionValue, boolean flagValue) {\n\t\tboolean flag = false;\n\t\twaitForElement(downArrow_icn, 14);\n\t\tif (isElementDisplayed(downArrow_icn, 6)) {\n\t\t\tscrollToWebElement(downArrow_icn);\n\t\t\tclickOn(downArrow_icn);\n\t\t\twaitTime(2);\n\t\t\tflag = true;\n\t\t\tif (flagValue) {\n\t\t\t\tString option = optionValue + \"#xpath=//a//span[text()='\" + optionValue + \"']\";\n\t\t\t\tif (isElementDisplayed(option, 3)) {\n\t\t\t\t\tscrollToWebElement(option);\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\ttestStepInfo(\"CKYC is not Initiated.\");\n\t\t}\n\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, named `verifyCkycInitiated`, verifies if the CKYC (Customer Knowledge and You) initialization process has been completed. The method takes two parameters: `optionValue` (a string representing an option) and `flagValue` (a boolean flag).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the id `downArrow_icn` to be displayed (for 14 seconds).\n2. If the element is displayed, it scrolls to that element and clicks on it.\n3. After clicking, it waits for 2 seconds.\n4. It sets a local flag (`flag`) to `true`.\n5. If the `flagValue` parameter is `true`, it checks if an element with the specified `optionValue` exists (within 3 seconds). If it does, it scrolls to that element and clicks on it using a special click method.\n6. If the element is not found, it logs a test step failure message indicating that the option is not present.\n7. If the CKYC initialization process has not been completed (i.e., the element `downArrow_icn` is not displayed), it logs a test step info message stating that the CKYC is not initiated.\n8. Finally, the method returns the value of the local flag (`flag`).",
        "input": [
            "String optionValue",
            "boolean flagValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectOpportunitiesforDOPrint",
        "code": "public void selectOpportunitiesforDOPrint(String opportunity) {\n\t\ttry {\n\t\t\tString field = opportunity + \"#xpath=//a[text()='\" + opportunity\n\t\t\t\t\t+ \"']/ancestor::td/preceding-sibling::td//span[contains(@class,'checkbox')]\";\n\t\t\tif (isElementDisplayed(field, 30)) {\n\t\t\t\tclickOn(field);\n\t\t\t\ttestStepPassed(opportunity + \" Successfully selected \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + opportunity);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t}",
        "description": "This Java method, `selectOpportunitiesforDOPrint`, is used to select an opportunity for a DOP (Data Opportunity Profile) print. It takes a string parameter `opportunity` which represents the name of the opportunity.\n\nThe method attempts to locate an element on the page using XPath and clicks on it if it's displayed within 30 seconds. If the element is not found or cannot be clicked, the test step fails.\n\nHere are some key points about this method:\n\n1. It uses a try-catch block to handle any exceptions that might occur during execution.\n2. The XPath expression used to locate the element is dynamic and depends on the `opportunity` parameter.\n3. If the element is found and clickable, it calls another method (`clickOn`) to perform the click action.\n4. The method also logs test step results (pass or fail) based on whether the opportunity was successfully selected or not.\n\nOverall, this method appears to be part of a larger automation script for testing web-based applications, possibly related to data opportunities and printing profiles.",
        "input": [
            "String opportunity"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectValueFromDropdown1",
        "code": "public void selectValueFromDropdown1(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();;\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\"+dropdownName+\"']/parent::label//following-sibling::div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//option[text()='\"+value+\"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown1`, is used to select a specific value from a dropdown menu. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nThe method first waits for the page to load and then attempts to locate the specified dropdown using an XPath expression. If the dropdown is found, it then tries to select the desired value by clicking on the dropdown, waiting for the options to appear, and then selecting the correct option. The method keeps trying up to two times before giving up if the value is not present in the dropdown.\n\nIf the dropdown is not found or the value cannot be selected after multiple attempts, the method reports a failure with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectBankDetails",
        "code": "public boolean selectBankDetails(String optionValue, boolean flagValue) {\n\t\tboolean flag = false;\n\t\tString menu = \"#xpath=//span[text()='More']\";\n\t\twaitForElement(menu, 10);\n\t\tif (isElementDisplayed(menu, 6)) {\n\t\t\tclickOn(menu);\n\t\t\twaitTime(2);\n\t\t\t// manualScreenshot(\"CKYC is initiated Successfully.\");\n\t\t\tflag = true;\n\t\t\tif (flagValue) {\n\t\t\t\tString option = optionValue + \"#xpath=//a[@title='Banking Details']//span[text()='Banking Details']\";\n\t\t\t\tif (isElementDisplayed(option, 3)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\ttestStepInfo(\"CKYC is not Initiated.\");\n\t\t}\n\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, named `selectBankDetails`, appears to be a part of an automated testing framework. It takes two parameters: `optionValue` (a string) and `flagValue` (a boolean).\n\nThe method attempts to select banking details based on the provided option value. Here's a brief summary of its behavior:\n\n1. It waits for an element with the specified XPath (`menu`) to be displayed.\n2. If the element is displayed, it clicks on it and waits for 2 seconds.\n3. If the flag value is true, it attempts to find another element with the concatenated XPath (based on `optionValue` and a hardcoded string) and click on it if it's displayed.\n4. If the element is not displayed, it fails the test step.\n5. If the menu element is not displayed after 10 seconds, it reports that CKYC (likely \"Customer Knowledge Yearly Cycle\") is not initiated.\n6. The method returns a boolean indicating whether the banking details were successfully selected.\n\nIn summary, this method is used to select banking details based on an option value and verify if the selection was successful.",
        "input": [
            "String optionValue",
            "boolean flagValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectCentralizedDropDownValue",
        "code": "public void selectCentralizedDropDownValue(String dropdownName, String dropdownValue) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = dropdownValue + \"#xpath=//div[contains(@class,'uiMenu')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ dropdownValue + \"']\";\n\t\t\t\twaitForElement(dropdownList, 5);\n\t\t\t\tif (isElementDisplayed(dropdownList, 3)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(dropdownValue + \"is selected\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(dropdownValue + \"is not selected\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectCentralizedDropDownValue\" + e.getMessage());\n\t\t}\n\t}// div[contains(@class,'uiMenu')]//ul/li/a[text()='Address Change']",
        "description": "This Java method, `selectCentralizedDropDownValue`, is used to select a value from a centralized dropdown list on a web page. The method takes two parameters: `dropdownName` and `dropdownValue`. \n\nThe method first constructs an XPath expression to locate the dropdown element based on its name. It then checks if the element is displayed using a custom method `isElementDisplayed`. If the element is displayed, it clicks on the dropdown to open the list.\n\nNext, it constructs another XPath expression to locate the specific value in the dropdown list and waits for the element to be displayed using `waitForElement`. If the value is displayed, it clicks on the value to select it. \n\nIf any of these steps fail (i.e., the dropdown is not present or the value is not selected), the method calls a custom method `testStepFailed` to report a test failure. The method also takes a screenshot manually using `manualScreenshot` if the selection is successful.",
        "input": [
            "String dropdownName",
            "String dropdownValue"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "VerifyDropdownSelectedValue",
        "code": "public void VerifyDropdownSelectedValue(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 4);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 4);\n\t\t\t\tif (isElementDisplayed(dropdownList, elementLoadWaitTime)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\"POS Successfully selected \" + value + \" Language from \" + dropdownName + \" dropdown\");\n\t\t\t\t\ttestStepPassed(\n\t\t\t\t\t\t\t\"POS Successfully selected \" + value + \" Language from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDropdownSelectedValue`, verifies that a specific value has been selected from a dropdown menu. It takes two parameters: the name of the dropdown and the expected value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element.\n2. It waits for the dropdown element to be displayed.\n3. If the dropdown is displayed, it clicks on the dropdown to open its list.\n4. It then constructs another XPath expression to locate the specific value in the dropdown list.\n5. It waits for this value to be displayed in the list.\n6. If the value is displayed, it clicks on it to select it.\n7. It takes a screenshot and logs a test step as passed if the selection was successful.\n8. If any of these steps fail (e.g., the dropdown or value are not present), it logs a test step as failed with an appropriate error message.\n\nThe method also catches any exceptions that may occur during its execution and logs them as test failures.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "clickOnMultipleOppurtunityNameLink",
        "code": "public String clickOnMultipleOppurtunityNameLink(String number) {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a[contains(text(),'B')]\";\n\n\t\t\twaitForElement(oppurtunity, 5);\n\t\t\tif (isElementDisplayed(oppurtunity, 15)) {\n\t\t\t\tList<WebElement> listOfElement = findWebElements(oppurtunity);\n\t\t\t\t// String countOfElement = (listOfElement.size());\n\t\t\t\tString multipleOppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a[contains(text(),'B')])[\"\n\t\t\t\t\t\t+ number + \"]\";\n\n\t\t\t\twaitForElement(multipleOppurtunity, 3);\n\t\t\t\tif (isElementDisplayed(multipleOppurtunity, 10)) {\n\t\t\t\t\topportunityValue = getText(multipleOppurtunity);\n\t\t\t\t\tscrollToWebElement(multipleOppurtunity);\n\t\t\t\t\tclickOn(multipleOppurtunity);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnMultipleOppurtunityNameLink`, simulates a click on a specific link with an opportunity name containing the text \"B\" and located within a table. The method takes a string parameter `number` which is used to construct the XPath of the link.\n\nThe method first waits for the element to be displayed, then checks if it's present on the page. If it is, it retrieves the text value of the link and scrolls to it before clicking on it. If the element is not found or not displayed, the test step fails with an appropriate error message.\n\nThe method returns the text value of the clicked opportunity name link.",
        "input": [
            "String number"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectSales",
        "code": "public void selectSales(String sales) {\n\n\t\tString waffle = \"Waffle icon#xpath=//div[@class='slds-icon-waffle']\";\n\t\tString search = \"#xpath=//label[text()='Search apps and items...']/parent::lightning-input/div[@class='slds-form-element__control slds-grow slds-input-has-icon slds-input-has-icon_left-right']/input\";\n\n\t\tif (isElementDisplayed(waffle, 4)) {\n\n\t\t\tclickOn(waffle);\n\t\t\twaitForElement(waffle, 2);\n\t\t\tif (isElementDisplayed(search, 4)) {\n\t\t\t\ttypeIn(search, sales);\n\t\t\t\tWebElement ele = findWebElement(search);\n\t\t\t\twaitTime(2);\n\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t}\n\t\t}\n\n\t}",
        "description": "This Java method, `selectSales`, appears to be a part of a Selenium WebDriver automation script. The method takes a `String` parameter called `sales`.\n\nThe method's primary function is to interact with a Salesforce Lightning page and select a sales opportunity from a list of options. Here's a step-by-step breakdown:\n\n1. It checks if an element with the XPath locator `//div[@class='slds-icon-waffle']` (a waffle icon) is displayed after a 4-second wait.\n2. If the waffle icon is displayed, it clicks on that element and then waits for another 2 seconds for the element to be processed.\n3. It checks if an element with the XPath locator `//label[text()='Search apps and items...']/parent::lightning-input/div[@class='slds-form-element__control slds-grow slds-input-has-icon slds-input-has-icon_left-right']/input` (a search input field) is displayed after a 4-second wait.\n4. If the search input field is displayed, it types in the `sales` string into that field using the `typeIn` method.\n5. It then waits for 2 seconds and simulates an Enter key press on the search input field using the `ele.sendKeys(Keys.ENTER)` method.\n\nThe method does not return any value (it's declared as `void`). Its purpose is to automate the selection of a sales opportunity in Salesforce Lightning.",
        "input": [
            "String sales"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectLeads",
        "code": "public void selectLeads(String sales) {\n\t\tString waffle = \"Waffle icon#xpath=//div[@class='slds-icon-waffle']\";\n\t\tString search = \"#xpath=//label[text()='Search apps and items...']/parent::lightning-input/div[@class='slds-form-element__control slds-grow slds-input-has-icon slds-input-has-icon_left-right']/input\";\n\t\tString element = \"#xpath=(//b[text()='Leads'])[last()]\";\n\t\tif (isElementDisplayed(waffle, 4)) {\n\t\t\tclickOn(waffle);\n\t\t\twaitForElement(waffle, 2);\n\t\t\tif (isElementDisplayed(search, 4)) {\n\t\t\t\ttypeIn(search, sales);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOn(element);\n\t\t\t}\n\t\t}\n\n\t}",
        "description": "This Java method is used to select leads in a Salesforce application. It first checks if the \"Waffle icon\" element is displayed and then clicks on it. After waiting for 2 seconds, it checks if the \"Search apps and items...\" label is displayed and types in some text (represented by the `sales` parameter). Finally, it clicks on the last \"Leads\" element that is displayed.\n\nThe method uses several WebDriver methods such as `isElementDisplayed`, `clickOn`, `typeIn`, `waitForElement`, and `waitTime` to interact with the Salesforce application. The `#xpath=` syntax is used to specify the XPath of the elements being targeted.",
        "input": [
            "String sales"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "clickOnDocumentsLinkUnderRelatedTab",
        "code": "public String clickOnDocumentsLinkUnderRelatedTab(String ColumnName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString path = \" #xpath=//span[text()='\" + ColumnName\n\t\t\t\t\t+ \"']//parent::a//parent::div//parent::th//parent::tr//parent::thead//parent::table//tbody//tr//th//span//a[text()='Customer Photo']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollbycordinates(path);\n\t\t\t\tValue = getText(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on  card . Exception : \" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `clickOnDocumentsLinkUnderRelatedTab`, is used to interact with a specific link on a web page. The method takes a `String` parameter `ColumnName` which is used to construct an XPath expression that identifies the element to be clicked.\n\nThe method first waits for the page to load and then uses the constructed XPath expression to wait for the element to appear on the page. If the element is displayed, it scrolls to the element, retrieves its text value, clicks on a specific part of the element (likely a link), and returns the text value as a `String`.\n\nIf any exception occurs during the execution of the method, it catches the exception and marks the test step as failed with an error message.",
        "input": [
            "String ColumnName"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "togetCloneRecord",
        "code": "public void togetCloneRecord(String optionValue) {\n\t\ttry {\n\t\t\tString cloneElement = \"#xpath=//li[contains(@class,'overflow')]//button[contains(@class,'filled')]\";\n\t\t\twaitForElement(cloneElement, 14);\n\t\t\tif (isElementDisplayed(cloneElement, 6)) {\n\t\t\t\tscrollToWebElement(cloneElement);\n\t\t\t\tclickOn(cloneElement);\n\t\t\t\tString option = optionValue + \"#xpath=//a//span[text()='\" + optionValue + \"']\";\n\t\t\t\twaitForElement(option, 5);\n\t\t\t\tif (isElementDisplayed(option, 3)) {\n\t\t\t\t\tscrollToWebElement(option);\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in togetCloneRecord \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toGetCloneRecord`, appears to be a part of an automation test script. Its primary function is to clone a record based on the value passed as an argument (`optionValue`).\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the specified XPath (`cloneElement`) to appear, allowing up to 14 seconds for the element to load.\n2. If the element is displayed, it scrolls to that element and clicks on it.\n3. The method then constructs a new XPath string (`option`) by appending the `optionValue` to a base XPath. This new XPath targets an `<a>` element with a child `<span>` containing the `optionValue`.\n4. It waits for this new element (`option`) to appear, allowing up to 5 seconds.\n5. If the element is displayed, it scrolls to that element and clicks on it (using a special click method).\n6. If the element is not displayed, the method fails the test step with an error message indicating that the `optionValue` is not present.\n\nThe method also includes exception handling to catch any errors that may occur during execution.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "toRemoveCrossSignInAdminLogin",
        "code": "public void toRemoveCrossSignInAdminLogin(String labelname) {\n\t\ttry {\n\t\t\tString btn_remove = \"#xpath=(//label[text()='\" + labelname\n\t\t\t\t\t+ \"'])[last()]//..//following-sibling::div//button[@title='Clear Selection']\";\n\t\t\twaitForElement(btn_remove, 10);\n\t\t\tif (isElementDisplayed(btn_remove, 6)) {\n\t\t\t\tscrollbycordinates(btn_remove);\n\t\t\t\tclickOn(btn_remove);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelname + \"Remove cross sign is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Remove cross sign Exception :\" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `toRemoveCrossSignInAdminLogin`, attempts to remove a cross sign associated with a specific label name in an admin login page. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the button that removes the cross sign based on the given `labelname`. The XPath expression searches for the last label element with the specified text, then moves up the DOM tree to find the parent element and its next sibling (which should be a div), and finally finds the button with the title \"Clear Selection\" within that div.\n\n2. It waits for this button to be displayed using `waitForElement`.\n\n3. If the button is displayed, it scrolls the page to bring the button into view using `scrollbycordinates` and then clicks on the button using `clickOn`.\n\n4. If the button is not displayed (i.e., the cross sign is not present), it logs a test step failure with an informative message.\n\n5. The method catches any exceptions that might occur during these operations and logs them as failures if they do.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "chooseValueFromCloneRecord",
        "code": "public void chooseValueFromCloneRecord(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tSystem.out.println();\n\t\t\t\tString searchField = labelName + \" #xpath=//label[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\twaitTime(4);\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\n\t\t\t\t\tString search_icn = \"search tab#xpath=(//span[contains(text(),'Show All Results for')])[last()]\";\n\n\t\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOn(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\n\t\t\t\t\tclickOn(lnk_zipCity);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromCloneRecord`, takes two string parameters: `labelName` and `value`. It appears to be a part of an automation test for a web application. \n\nThe method attempts to interact with the web page by:\n\n1. Searching for a specific label on the page using XPath.\n2. If the label is found, it types the provided value into the associated input field.\n3. It then clicks on a \"search\" button to trigger the search functionality.\n4. After the search results are loaded, it clicks on the link corresponding to the provided `value`.\n\nThe method also includes error handling using try-catch blocks to catch any exceptions that may occur during execution. If an exception is caught, the test step fails and an error message is logged.\n\nOverall, this method seems to be designed to automate a process of searching for and selecting a value from a dropdown list or similar UI element on a web page.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "clickOnLinkUnderRelatedTab",
        "code": "public String clickOnLinkUnderRelatedTab(String ColumnName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString path = \" #xpath=//span[text()='\" + ColumnName\n\t\t\t\t\t+ \"']//parent::a//parent::div//parent::th//parent::tr//parent::thead//parent::table//tbody//tr//th//span//a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 6)) {\n\t\t\t\tscrollbycordinates(path);\n\t\t\t\tValue = getText(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on  card . Exception : \" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, named `clickOnLinkUnderRelatedTab`, is designed to interact with a specific link under a related tab. The method takes one parameter, `ColumnName`, which is used to construct an XPath path to locate the desired element.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It sets up a variable `Value` to store the text value of the link.\n2. It attempts to execute the following steps:\n\t* Constructs an XPath path using the provided `ColumnName`.\n\t* Waits for the page to load using the `waitForPageToLoad()` method.\n\t* Waits for the element located by the constructed XPath path to be displayed within a certain time limit (10 seconds).\n\t* Checks if the element is actually displayed after waiting. If it is, the method proceeds.\n3. If the element is displayed:\n\t* Scrolls the page to bring the element into view using `scrollbycordinates(path)`.\n\t* Retrieves the text value of the link using `getText(path)` and stores it in `Value`.\n\t* Clicks on the special element (likely a link) located by the XPath path using `clickOnSpecialElement(path)`.\n4. If any exceptions occur during these steps, the method catches them and logs an error message using `testStepFailed()`. The method returns the stored text value (`Value`) regardless of whether the click operation was successful.\n\nThe method is designed to handle errors and provide some basic logging functionality. However, it's important to note that the exact behavior and potential issues may depend on the specific implementation details and the context in which this method is used.",
        "input": [
            "String ColumnName"
        ],
        "output": "String"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorMessageInAlertPopup",
        "code": "public boolean verifyErrorMessageInAlertPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div/span[contains(text(),'Review')]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorMessageInAlertPopup`, verifies if there are any error messages displayed in an alert popup and takes a screenshot of each error message. If errors are found, it marks the test step as failed due to these errors. The method returns a boolean value indicating whether errors were found or not.\n\nHere's a high-level overview of what the method does:\n\n1. It waits for the page to load and then waits for an element with the specified XPath (`error`) to be displayed.\n2. If the element is displayed, it sets a flag to `true`.\n3. It retrieves the list of error messages (in the form of `<ul>` elements) and iterates over each error message.\n4. For each error message, it takes a manual screenshot with the error message's text as the filename.\n5. If errors were found, it marks the test step as failed due to these errors.\n6. If no errors were found, it takes a manual screenshot indicating that there are no errors.\n\nThe method returns the value of the `flag` variable, which indicates whether errors were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "selectValueFromDropdownInIRRecord",
        "code": "public void selectValueFromDropdownInIRRecord(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t// waitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=(//span[text()='\" + value + \"'])[1]\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIRRecord`, selects a value from a dropdown list in an IR record. It takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression for the dropdown element based on its name.\n2. It checks if the dropdown is displayed within 4 seconds using the `isElementDisplayed` method.\n3. If the dropdown is displayed, it clicks on the dropdown button using the `clickOnSpecialElement` method.\n4. It then constructs an XPath expression for the value to be selected in the dropdown list.\n5. It checks if the selected value is displayed within 4 seconds using the `isElementDisplayed` method.\n6. If the value is displayed, it clicks on the value to select it using the `clickOnSpecialElement` method and takes a manual screenshot as proof of successful selection.\n7. If the value is not displayed or the dropdown is not present, the method fails the test step with an error message.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, it catches the exception and fails the test step with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorIMPSPopupMessage1",
        "code": "public boolean verifyErrorIMPSPopupMessage1(String exceptedvalidation) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg1, 15);\n\t\t\tif (isElementDisplayed(errorTitle_Msg1, 10)) {\n\t\t\t\tif (getText(errorTitle_Msg1).contains(\"rror\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tString text = getText(error_Msg);\n\t\t\t\t\t\tif(text.equals(exceptedvalidation));\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + text + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, named `verifyErrorIMPSPopupMessage1`, is used to verify the presence and content of an error popup message on a GUI application. The method takes one input parameter, `exceptedvalidation`, which is expected to match the actual text displayed in the error message.\n\nHere's a step-by-step breakdown:\n\n1. It waits for a specified element (`errorTitle_Msg1`) to be visible for 15 seconds.\n2. If the element is displayed within 10 seconds, it checks if the text of that element contains the word \"rror\".\n3. If the text contains \"rror\", it then checks if another element (`error_Msg`) is displayed within 4 seconds.\n4. If `error_Msg` is displayed, it retrieves its text and compares it with the expected validation text passed as a parameter (`exceptedvalidation`). If they match, it takes a manual screenshot of the error message.\n5. The method returns a boolean flag indicating whether the error popup message was verified successfully.\n\nIf any exceptions occur during execution, the method catches them and reports a test step failure with an error message.",
        "input": [
            "String exceptedvalidation"
        ],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorPopup",
        "code": "public boolean verifyErrorPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div/span[text()='Review the errors on this page.']\";\n\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\tif (isElementDisplayed(error, 10)) {\n\t\t\t\tif (getText(error).contains(\"error\")) {\n\t\t\t\t\tif (isElementDisplayed(errorList, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(errorList) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyErrorPopup()`, is used to verify if an error popup message is displayed on the page and its content matches certain conditions. \n\nHere's a step-by-step breakdown:\n\n1. It first sets a boolean variable `flag` to `false`.\n\n2. Then it tries to perform the following operations:\n   - Checks if an element with the given XPath (`error`) is displayed within 10 seconds.\n   - If the element is displayed, it gets the text of that element and checks if it contains the word \"error\".\n   - If both conditions are met, it then checks if another element with a specific XPath (`errorList`) is displayed within 4 seconds. \n   - If `errorList` is displayed, it takes a manual screenshot with a message containing the text of `errorList`.\n   - Sets `flag` to `true`.\n\n3. If any exception occurs during these operations (like if the elements are not found or there's an issue taking the screenshot), it catches the exception and logs a failure message.\n\n4. Finally, it returns the value of `flag`, which indicates whether the error popup was verified successfully or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifySchemeInitiatedInDOStage",
        "code": "public boolean verifySchemeInitiatedInDOStage(String optionValue, boolean flagValue) throws InterruptedException {\n\t\tboolean flag = false;\n\t\twaitTime(10);\n\t\tString ckyclabel = \"#xpath=//div[@title='\" + optionValue + \"']\";\n\n\t\tif (isElementDisplayed(ckyclabel, 8)) {\n\t\t\tscrollToWebElement(downArrow_icn);\n\t\t\tclickOnSpecialElement(ckyclabel);\n\t\t} else if (isElementDisplayed(downArrow_icn, 6)) {\n\t\t\tscrollToWebElement(downArrow_icn);\n\t\t\tString option = optionValue + \"#xpath=//a//div[text()='\" + optionValue + \"']\";\n\t\t\tfor (int i = 0; i < 2; i++) {\n\t\t\t\tclickOnSpecialElement(downArrow_icn);\n\t\t\t\twaitTime(2);\n\t\t\t\tif (isElementDisplayed(option, 10)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!flag) {\n\t\t\t\ttestStepFailed(optionValue + \" button is not Present.\");\n\t\t\t}\n\n\t\t} else {\n\t\t\ttestStepFailed(optionValue + \" button is not Present.\");\n\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifySchemeInitiatedInDOStage`, verifies if a scheme has been initiated in a specific stage (DO Stage) of a workflow. It takes two parameters: `optionValue` and `flagValue`. The method first waits for 10 seconds using the `waitTime(10)` function.\n\nIt then checks if an element with the specified `ckyclabel` is displayed within 8 seconds. If it is, it scrolls to the element and clicks on it using the `clickOnSpecialElement` function.\n\nIf the element is not found, it checks for the presence of a different element (`downArrow_icn`) and if it's displayed within 6 seconds. If it is, it scrolls to this element and repeatedly clicks on it until an option with the specified `optionValue` is displayed within 10 seconds. Once the option is displayed, it clicks on it and sets the `flag` variable to `true`.\n\nIf the option is not found after repeated attempts or if the initial checks fail, the method calls a test step failure function with a message indicating that the option button is not present.\n\nFinally, the method returns the value of the `flag` variable.",
        "input": [
            "String optionValue",
            "boolean flagValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "verifyErrorPopupMessageWithOutFail",
        "code": "public boolean verifyErrorPopupMessageWithOutFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyErrorPopupMessageWithOutFail`, is designed to verify the presence of an error popup message and its contents. The method waits for a specified time (10 seconds) for the error title message (`errorTitle_Msg`) to appear. If the message appears within 7 seconds, it checks if the text contains the word \"Error\". If this condition is met, it further verifies that the error message itself (`error_Msg`) is displayed and takes a manual screenshot of the error message. The method returns a boolean value indicating whether the verification was successful or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "CustomerPage",
        "function_name": "gettextValueFromDocLib",
        "code": "public String gettextValueFromDocLib(String Labelname) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString LabelName = \"#xpath=(//div//h3//span[text()='\"+Labelname+\"']//following::div//dt[text()='Status:'])[1]//..//dd[2]\";\n\t\t\tif (isElementDisplayed(LabelName, 35)) {\n\t\t\t\tscrollToWebElement(LabelName);\n\t\t\t\ttext = getText(LabelName);\n\t\t\t\thighLighterMethod(LabelName);\n\t\t\t\ttestStepInfo(Labelname + \" : \" + text);\n\t\t\t\tmanualScreenshot(Labelname + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}\n\n}",
        "description": "This Java method, named `gettextValueFromDocLib`, is used to retrieve the text value of an element with a specific label name from a document library (DocLib). \n\nThe method takes a `String` parameter `Labelname`, which represents the label name of the element to be retrieved. It uses XPath to locate the element, checks if it's displayed on the screen using the `isElementDisplayed` method, and then scrolls to that element using the `scrollToWebElement` method. If the element is found, it retrieves its text value using the `getText` method, highlights the element with a method named `highLighterMethod`, logs test step information with the `testStepInfo` method, and takes a manual screenshot of the element's value with the `manualScreenshot` method. \n\nIf the element is not displayed on the screen, it reports a test failure with the `testStepFailed` method. In case of any exception during the execution of this method, it also reports a test failure with the `testStepFailed` method and returns an empty string.",
        "input": [
            "String Labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "FMS",
        "function_name": "enterValueInSearchFMS",
        "code": "public void enterValueInSearchFMS(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchFMS`, is used to enter a given value into a search field on a web page. The method takes a string parameter `value` which represents the input value to be entered in the search field.\n\nHere's what the method does:\n\n1. It defines a search XPath expression to locate the search field.\n2. It checks if the search field is displayed using the `isElementDisplayed` method, and waits for a specified time (`elementLoadWaitTime`) before considering it as not present.\n3. If the search field is found, it enters the given value into the field using the `sendKeys` method of the underlying web element.\n4. It then simulates pressing the Enter key to submit the search query.\n5. Finally, it waits for the page to load completely using the `waitForPageToLoad` method.\n\nIf any exception occurs during these steps, it catches and logs the error as a test step failure.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "FMS",
        "function_name": "changeStageInFMS",
        "code": "public void changeStageInFMS(String stageOption) {\n\t\ttry {\n\t\t\tString readyForDispatch_btn = \"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\";\n\n\t\t\tString field = stageOption + \"#xpath=//div[@class='select-options']//li/a[contains(text(),'\" + stageOption\n\t\t\t\t\t+ \"')]\";\nwaitForElement(readyForDispatch_btn, 5);\n\t\t\tif (isElementDisplayed(readyForDispatch_btn, 10)) {\n\t\t\t\tWebElement button = findWebElement(readyForDispatch_btn);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(button).doubleClick().perform();\n\t\t\t\tif (isElementPresent(field)) {\n\t\t\t\t\tActions action1 = new Actions(driver);\n\t\t\t\t\taction1.moveToElement(button).click().perform();\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tclickOn(field);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(stageOption + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on Ready For Dispatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate Ready For Dispatch \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `changeStageInFMS`, is used to change the stage option in a system called FMS (likely a Financial Management System). \n\nThe method takes a string parameter `stageOption` which represents the new stage option to be selected. It first tries to find an element with the XPath locator `readyForDispatch_btn`. If this element is displayed within 10 seconds, it then moves the mouse to this button and double-clicks on it.\n\nIf the element with the XPath locator `field` (which corresponds to the selected stage option) is present, it moves the mouse to this field and clicks on it. However, if this field is not present, the method fails the test step and highlights the missing field using a high-lighter method.\n\nIf any of these steps fail or an exception occurs, the method fails the test step with a corresponding error message.",
        "input": [
            "String stageOption"
        ],
        "output": "void"
    },
    {
        "class_name": "FMS",
        "function_name": "clickOnButton1",
        "code": "public void clickOnButton1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\n\t\t\twaitForElement(button, 8);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}\n\n\n}",
        "description": "This Java method, `clickOnButton1`, is used to click on a specific button with the given name. The method takes a `String` parameter `buttonName` which represents the name of the button to be clicked.\n\nHere's what it does:\n\n- It constructs an XPath expression by concatenating the provided `buttonName` with an XPath locator that matches an HTML element (in this case, a button) with the same text as the `buttonName`.\n- It uses a `findWebElement` method to locate the button based on the constructed XPath.\n- The method then waits for the button to be displayed using the `waitForElement` method.\n- If the button is displayed, it performs an action to move the mouse cursor to the button and click it using the `Actions` class from Selenium WebDriver.\n- If the button is not present or not displayed within a certain time limit (6 seconds), the method logs a test step failure with a message indicating that the button was not found.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and logging a test step failure with a message describing the error.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnLoginButton",
        "code": "public void clickOnLoginButton() {\n\t\ttry {\n\t\t\tif (isElementDisplayed(btn_login, elementLoadWaitTime)) {\n\t\t\t\tclickOn(btn_login);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Login button is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLoginButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLoginButton`, attempts to click on a login button element after waiting for the expected time. It first checks if the login button is displayed using the `isElementDisplayed` method and waits for the specified `elementLoadWaitTime`. If the button is displayed, it then clicks on the button using the `clickOn` method. If the button is not displayed or an exception occurs during the process, the test step fails with a corresponding error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnCardBoundary",
        "code": "public void clickOnCardBoundary(String cardName) {\n\t\ttry {\n\t\t\tString path = cardName + \"#xpath=(//article//a/span[text()='\" + cardName + \"'])[last()]\";\n\n\t\t\twaitForPageToLoad();\n\t\t\tscrollToElementTillPresent(path);\n\t\t\twaitForElement(path, 10);\n\t\t\tif (isElementDisplayed(path, 7)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on \" + cardName + \" card \");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + cardName + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCardBoundary`, attempts to click on a specific card boundary element with the given `cardName`. The method uses various Selenium WebDriver methods to:\n\n1. Wait for the page to load\n2. Scroll to the element until it's present\n3. Wait for the element to be displayed\n4. If the element is displayed, scroll to it and click on a special element (likely an anchor tag)\n5. If the element is not displayed or any step fails, the method marks the test step as failed with an appropriate error message.\n\nThe method catches any exceptions that may occur during execution and logs the failure accordingly.",
        "input": [
            "String cardName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "scrollToElementTillPresent",
        "code": "public void scrollToElementTillPresent(String objectLocator) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\t;\n\t\t\tint yaxis = 3000;\n\t\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\t\t\tdo {\n\t\t\t\ttry {\n\n\t\t\t\t\tparseidentifyByAndlocator(objectLocator);\n\t\t\t\t\tflag = driver.findElement(By.xpath(locator)).isDisplayed();\n\t\t\t\t\tflag = true;\n\t\t\t\t} catch (org.openqa.selenium.NoSuchElementException e) {\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\tjse.executeScript(\"window.scrollTo(0, \" + yaxis + \")\");\n\t\t\t\t\tyaxis = yaxis + 1500;\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t} while (!flag);\n\n\t\t} catch (NoSuchElementException | InterruptedException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, `scrollToElementTillPresent`, attempts to scroll the browser window until an element with a specified locator is visible and displayed on the screen. The method uses a loop that continues scrolling down the page in 1500 pixel increments until the element is found and displayed.\n\nHere's a step-by-step breakdown:\n\n1. It initializes a `boolean` flag to track whether the element has been found.\n2. It sets an initial y-axis value of 3000 pixels.\n3. It uses a `JavascriptExecutor` to execute JavaScript code that scrolls the browser window to the specified y-axis position.\n4. The loop continues until the element is found and displayed (i.e., the flag becomes `true`).\n5. If the element is not found, it increases the y-axis value by 1500 pixels and waits for 1 second before trying again.\n6. If an exception occurs during the process (e.g., `NoSuchElementException` or `InterruptedException`), it prints the error message to the console.\n\nNote that this method assumes that the element's locator is valid and can be used to find the element using Selenium's `findElement` method.",
        "input": [
            "String objectLocator"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectvaluefromdropdownAdminlogin",
        "code": "public void selectvaluefromdropdownAdminlogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\twaitForElement(dropdown, 12);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \"#xpath=//div//span[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\twaitForElement(dropdownList, 5);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdropdownAdminlogin`, selects a value from a dropdown menu on an admin login page. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression for the dropdown element using the provided dropdown name.\n2. It waits for the dropdown element to be displayed, then scrolls down to it if necessary.\n3. If the dropdown is displayed, it clicks on the dropdown element to expand its options.\n4. It constructs another XPath expression for the desired value in the dropdown list.\n5. The method checks if the desired value is present in the dropdown list and waits for it to be displayed.\n6. If the value is present, it selects the value by clicking on it.\n7. If any of these steps fail (e.g., the dropdown or value are not present), the method reports a test step failure with an appropriate error message.\n\nThe method also takes manual screenshots at each successful step and logs failures if anything goes wrong.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectvaluefromdropdownAdminlogin1",
        "code": "public void selectvaluefromdropdownAdminlogin1(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']//following-sibling::div//input\";\n\t\t\twaitForElement(dropdown, 12);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \"#xpath=(//div//span[@title='\" + value + \"'])[2]\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\twaitForElement(dropdownList, 5);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdropdownAdminlogin1`, selects a value from a drop-down menu by its name and the desired value. It uses Selenium WebDriver to perform the following actions:\n\n1. Waits for the drop-down menu element to be displayed.\n2. Scrolls down to the drop-down menu if it's not visible in the current view.\n3. Clicks on the drop-down menu to open it.\n4. Waits for the desired value option to be displayed in the drop-down list.\n5. Clicks on the desired value option.\n\nThe method also takes screenshots and logs test steps as they are executed or failed. If an exception occurs during execution, the method will log the failure and terminate.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectOrDeselectCheckBoxInMasterPage",
        "code": "public void selectOrDeselectCheckBoxInMasterPage(String labelname, String status) {\n\n\t\ttry {\n\t\t\tString checkBox = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/../following-sibling::div/span//input\";\n\t\t\twaitForElement(checkBox, 6);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInMasterPage`, is used to select or deselect a checkbox in the Master page of an application based on the provided label name and status.\n\nThe method takes two parameters:\n\n* `labelname`: The name of the checkbox.\n* `status`: A string indicating whether the checkbox should be selected (\"check\") or deselected (\"uncheck\").\n\nThe method first constructs an XPath expression to locate the checkbox element, then waits for the element to appear, scrolls to it if necessary, and performs the desired action (selecting or deselecting) based on the status parameter. If the operation is successful, a manual screenshot is taken; otherwise, a test step failure message is logged.\n\nIf any exception occurs during the execution of this method, it will be caught and written to the log file, along with a test step failure message.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnButtonOnMasterPage",
        "code": "public void clickOnButtonOnMasterPage(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(button, 15);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 15)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\tmanualScreenshot(\"Click On : \" + buttonLabel);\n//\t\t\t\tif (isElementDisplayed(button, 7)) {\n//\t\t\t\t\taction.moveToElement(element).click().perform();\n//\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonOnMasterPage`, simulates a click on a button with the specified label (`buttonLabel`) on the master page. It uses Selenium WebDriver and its associated libraries (e.g., `Actions` class) to perform the following actions:\n\n1. Waits for the page to load.\n2. Waits for the button element to be displayed within a certain time frame (15 seconds).\n3. Scrolls to the button if it's not already visible.\n4. Simulates a mouse hover and click action on the button using the `Actions` class.\n5. Takes a manual screenshot of the page after clicking the button.\n\nIf the button is not present or displayed, the method will fail the test step. If an exception occurs during execution, the method will also fail the test step with an error message containing the exception details.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "enterValueInFieldMasterField",
        "code": "public void enterValueInFieldMasterField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//following-sibling::div//textarea\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(field);\n\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldMasterField`, enters a given value into a text area field on a webpage. The method takes two parameters: `labelName` and `value`. \n\nIt first constructs an XPath string to locate the text area field based on the provided label name. It then checks if the element is displayed using a specified timeout. If the element is present, it scrolls the page to bring the element into view, enters the given value into the text area, highlights the entered text (using `highLighterMethod`), and logs success. \n\nIf the element is not found within the specified timeout, or if any exception occurs during the process, the method logs a failure message with the provided label name or error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickEditOptionWithLabelInMasterPage",
        "code": "public void clickEditOptionWithLabelInMasterPage(String fieldLabel) {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div[contains(@class,'active')]//span[text()='\"+fieldLabel+\"']/parent::div/../..//div/button\";\n\t\t\twaitForElement(editOption, 30);\n\t\t\tif (isElementDisplayed(editOption, 3)) {\n\t\t\t\tscrollbycordinates(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPage`, attempts to click on an edit button with a specific label in the master page of a web application. The method takes a string parameter `fieldLabel` which is used to construct the XPath locator for the edit button.\n\nThe method first waits for the page to load, then constructs the XPath locator by combining the provided field label with a predefined XPath expression. It then waits for the element to be displayed and checks if it's present on the page. If the element is found, it scrolls to the element and clicks on it. If not, it logs a failure message.\n\nThe method also includes error handling using a `try-catch` block. If an exception occurs during execution, it logs an information message with the exception message.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickEditOptionWithLabelInMasterPageInQCUAT",
        "code": "public void clickEditOptionWithLabelInMasterPageInQCUAT(String fieldLabel) {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/button\";\n\t\t\twaitForElement(editOption, 30);\n\t\t\tif (isElementDisplayed(editOption, 3)) {\n\t\t\t\tscrollbycordinates(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method clicks on an edit option with a specified label in the master page of QCUAT application. It waits for the page to load, then searches for the edit button based on the provided field label and performs the following actions: \n\n1. Waits for the edit button to be displayed.\n2. Scrolls to the edit button if it's not visible.\n3. Clicks on the edit button.\n\nIf the edit button is not present or cannot be clicked, the method reports a test step failure.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "deleteDocumentsInAdmin",
        "code": "public void deleteDocumentsInAdmin(String label) {\n\t\ttry {\n\t\t\tString document_arrow_Btn = \"down arrow button #xpath=//span[text()='\" + label\n\t\t\t\t\t+ \"']/ancestor::thead/following-sibling::tbody//td//span[text()='Show Actions']\";\n\t\t\tString delete_Btn = \"Delete option#xpath=//a[@role='menuitem']//div[text()='Delete']\";\n\t\t\tString delete_Btn_popup = \"Delete button#xpath=//span[text()='Delete']//parent::button\";\n\t\t\twaitForElement(document_arrow_Btn, 5);\n\t\t\tif (isElementDisplayed(document_arrow_Btn, 4)) {\n\t\t\t\tif (isElementDisplayed(document_arrow_Btn, 3)) {\n\t\t\t\t\tclickOnSpecialElement(document_arrow_Btn);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\twaitForElement(delete_Btn, 5);\n\t\t\t\t\tif (isElementDisplayed(delete_Btn, 5)) {\n\t\t\t\t\t\tclickOnSpecialElement(delete_Btn);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\twaitForElement(delete_Btn_popup, 5);\n\t\t\t\t\t\tif (isElementDisplayed(delete_Btn_popup, 6)) {\n\t\t\t\t\t\t\tclickOn(delete_Btn_popup);\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Documents are not present.\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in Delete All Documents In Admin. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `deleteDocumentsInAdmin`, is used to delete documents labeled with a specific string (`label`) from an administrative interface. Here's a step-by-step breakdown:\n\n1. It uses XPath expressions to locate three elements:\n\t* `document_arrow_Btn`: the down arrow button next to the document label\n\t* `delete_Btn`: the \"Delete\" option menu item\n\t* `delete_Btn_popup`: the actual \"Delete\" button that appears in a popup dialog\n2. The method waits for each element to be displayed, using various timeouts (e.g., 5 seconds).\n3. If all elements are displayed, it clicks on the down arrow button and then the \"Delete\" option menu item.\n4. It waits again for the delete button popup to appear and clicks on it.\n5. The method takes a manual screenshot if no documents are present.\n6. If an exception occurs during execution, the method logs a failure message with the exception's message.\n\nIn summary, this method automates the process of deleting all documents labeled with a specific string in an administrative interface.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnBankdetails",
        "code": "public void clickOnBankdetails() {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path = \"Banking Details Name #xpath=(//span[text()='Banking Details Name']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t}\n\t/**\n\t * @author Vetri\n\t * @CreatedDate 11/11/2019\n\t * @param buttonName - provide the name of the button\n\t * @Description - This method is used to click button in Home page\n\t */",
        "description": "This Java method, `clickOnBankdetails()`, is designed to simulate a user clicking on a specific link related to \"Banking Details Name\" on a webpage. The method uses various Selenium WebDriver methods and assertions to ensure the expected behavior:\n\n1. It waits for the page to load.\n2. It extracts the text of the desired link using an XPath expression.\n3. It waits for the element to be present on the page (with a timeout of 24 seconds).\n4. If the element is present, it scrolls to the element and clicks on it.\n5. If the element is not present, it reports a test step failure.\n\nThe method also includes error handling using a `try-catch` block, which logs an error message if any exception occurs during the execution of the method.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\n\t\t\twaitForElement(profileLink, implicitlyWaitTime);\n\t\t\tif (isElementPresent(profileLink)) {\n\t\t\t\tclickOn(profileLink);\n\t\t\t\tif (isElementDisplayed(btn_logout, 3)) {\n\t\t\t\t\tclickOn(btn_logout);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, named `logout()`, performs a logout operation in an application. Here's a brief description of what it does:\n\n1. Waits for the profile link element to be present and visible (using the `waitForElement()` method).\n2. If the profile link is present, it clicks on it.\n3. If the logout button (`btn_logout`) is displayed within 3 seconds, it clicks on that button as well.\n4. If the logout operation is successful, it reports a test step as passed using the `testStepPassed()` method.\n5. If the profile link is not present or the logout button is not displayed, it reports a test step failure using the `testStepFailed()` method.\n6. In case of any exception during the execution of this method, it writes an error message to the log file using the `writeToLogFile()` method.\n\nIn summary, this method attempts to log out of an application by clicking on the profile link and then the logout button, if present. It also reports the outcome of the operation as a test step pass or fail.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton`, attempts to click on a button with the specified name. It uses XPath to locate the button and then performs the following steps:\n\n1. Waits for the element to be displayed.\n2. Highlights the element (if it's not already highlighted).\n3. Waits for 2 seconds.\n4. Clicks on the special element (likely a WebDriver-based click operation).\n\nIf the button is not present, or if any step fails, the method will report a test failure.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "verifyAutoPopulatedLinkValueInMaster",
        "code": "public String verifyAutoPopulatedLinkValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\t\t\tString labelElement = moveToElement + \"//slot/span\";\n\t\t\tString labelElement1 = moveToElement + \"/slot//slot\";\n\t\t\tString labelElement2 = moveToElement + \"//slot//a\";\n\t\t\tif (isElementDisplayed(labelElement, 40)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tString Date = Label\n\t\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//lightning-formatted-text\";\n\t\t\t\tif (isElementDisplayed(Date, 5)) {\n\t\t\t\t\tString date = getText(Date);\n\t\t\t\t\ttext = text + \" \" + date;\n\t\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedLinkValueInMaster`, is used to verify the value of an auto-populated link field in a master record. It takes a `Label` parameter, which is likely the name or ID of the field.\n\nThe method uses various XPath expressions to locate the field elements and then performs actions such as scrolling to the element, getting the text value, highlighting the element, and taking a manual screenshot if the test passes. The method also checks if the field is displayed within a certain time limit (40 seconds for the main element and 10 seconds for alternative elements).\n\nIf the field is not present or an exception occurs during execution, the method will fail the test step and report an error message.\n\nThe method returns the text value of the auto-populated link field.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOncustomerLinkInAdmin",
        "code": "public void clickOncustomerLinkInAdmin() {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//p[text()='Customer']//..//a//span\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On customer Link In Admin\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOncustomerLinkInAdmin()`, is designed to simulate a mouse click on the \"Customer\" link within an admin interface. The method attempts to:\n\n1. Wait for 5 seconds using the `waitTime(5)` function.\n2. Locate an element with the specified XPath: `//p[text()='Customer']//..//a//span`.\n3. Wait up to 10 seconds for the element to be displayed using the `waitForElement(Element, 10)` function.\n4. Check if the element is displayed within a 6-second timeframe using the `isElementDisplayed(Element, 6)` function.\n5. If the element is displayed, scroll to it and click on it using the `scrollToWebElement(Element)` and `clickOnSpecialElement(Element)` functions, respectively.\n6. Wait for the page to load completely using the `waitForPageToLoad()` function.\n7. Pause for 3 seconds before completing the method.\n\nThe method also includes error handling, catching any exceptions that may occur during execution and reporting a test step failure with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnButtonInMasterPopup",
        "code": "public void clickOnButtonInMasterPopup(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName\n\t\t\t\t\t+ \"#xpath=//div[@class='modal-header slds-modal__header']//following::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']//parent::lightning-button\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\twaitTime(2);\n\t\t\t\tmanualScreenshot(\"Click on \" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInMasterPopup`, simulates a click on a button with the specified name within a master popup. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression to locate the button based on its text and parent elements.\n2. Waits for the element to be displayed using a timeout of 5 seconds.\n3. If the button is present, highlights it using a highlighting method, waits for 2 seconds, takes a manual screenshot with the button name as the filename, and then clicks on the button.\n4. If the button is not present, fails the test step.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnButtonInSalesHelpLine",
        "code": "public void clickOnButtonInSalesHelpLine(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//footer[@class='slds-modal__footer']//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tmanualScreenshot(\"Click on:\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInSalesHelpLine`, simulates a user clicking on a specific button within the Salesforce Sales Help Line page. \n\nThe method takes one parameter, `buttonName`, which is the name of the button to be clicked. It first constructs an XPath locator for the button using the provided `buttonName`. \n\nIt then uses a try-catch block to attempt to click on the button. The steps involved are:\n\n1. Wait up to 5 seconds for the element (button) to be present.\n2. Check if the element is displayed and not hidden or disabled.\n3. If the element is present, scroll to it and click on it.\n4. Take a manual screenshot of the button being clicked.\n\nIf any exception occurs during this process, the method catches it and marks the test step as failed with an appropriate error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[@title='\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 11/11/2019\n\t * @param dealerName - provide the name of the Dealer name\n\t * @return String - This method returns the selected dealer from the dropdown\n\t * @Description - This method is used to select Dealer from the Select Dealer\n\t *              dropdown\n\t */\n\n\t/*\n\t * public String selectDealer(String dealerName) { String selectedOption = null;\n\t * try { waitTime(2); String dealer =\n\t * \"Dealer#xpath=//select[@name='dealerList']\"; String dealerOption\n\t * =dealerName+\"#xpath=//select[@name='dealerList']/option[text()='\"+dealerName+\n\t * \"']\"; if (isElementDisplayed(dealer, 3)) { scrollToWebElement(dealer); Select\n\t * select = new Select(findWebElement(dealer)); clickOn(dealer);\n\t * \n\t * if(isElementDisplayed(dealerOption,3)) { clickOnSpecialElement(dealerOption);\n\t * }else {\n\t * testStepFailed(dealerName+\" Value is not present in Dealer dropdown.\"); }\n\t * \n\t * //selectFromDropdown(dealer, dealerName); selectedOption =\n\t * select.getFirstSelectedOption().getText(); } else {\n\t * testStepFailed(\"Select Dealer dropdown is not present\"); }\n\t * \n\t * } catch (Exception e) { testStepFailed(\"Failed in selectDealer \"\n\t * +e.getMessage()); } return selectedOption; }\n\t */\n\t/**\n\t * @author Gurumoorthy\n\t * @createddate - 03/03/2020\n\t * \n\t *              Description - This method is used for verify the dealer change\n\t *              fle\n\t * \n\t */",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, is used to select a value from a dropdown list in an IMPSS popup. The method takes two parameters: `dropdownName` and `value`. \n\nHere's what the method does:\n\n1. It constructs an XPath expression for the dropdown element based on the provided `dropdownName`.\n2. It waits for the dropdown element to be displayed.\n3. If the dropdown is displayed, it scrolls to the element and clicks on it to open the dropdown list.\n4. It then searches for the specified `value` in the dropdown list using an XPath expression.\n5. If the value is found, it scrolls to the value and clicks on it to select it.\n6. The method logs a test step as passed if the selection is successful or failed if the value is not present in the dropdown.\n\nThe method also has error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "verifySelectDealer",
        "code": "public void verifySelectDealer() {\n\n\t\tif (isElementDisplayed(dealerChange_btn, 3)) {\n\t\t\tscrollToWebElement(dealerChange_btn);\n\n\t\t\tmanualScreenshot(\"'\" + getText(dealerChange_btn) + \"' is verified successfully.\");\n\n\t\t} else {\n\t\t\ttestStepFailed(\"'Change Dealer' button is not present.\");\n\t\t}\n\t}",
        "description": "This Java method, `verifySelectDealer()`, verifies the presence and visibility of a \"Change Dealer\" button on a UI element. \n\n- It first checks if the \"Change Dealer\" button (`dealerChange_btn`) is displayed within 3 seconds using the `isElementDisplayed()` method.\n- If the button is displayed, it then scrolls to the button using the `scrollToWebElement()` method and takes a manual screenshot with a message indicating that the verification was successful. The message includes the text of the \"Change Dealer\" button.\n- If the button is not displayed within 3 seconds or is not present at all, the test fails with an error message \"'Change Dealer' button is not present.\"",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectDealer",
        "code": "public String selectDealer(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\tString dealer = \"Dealer#xpath=//select[@name='dealerList']\";\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//select[@name='dealerList']/option[text()='\"\n\t\t\t\t\t\t+ dealerName + \"']\";\n\t\t\t\twaitForElement(dealer, 5);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tSelect select = new Select(findWebElement(dealer));\n\t\t\t\t\thighLighterMethod(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tselectedOption = select.getFirstSelectedOption().getText();\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 4)) {\n\t\t\t\t\t\thighLighterMethod(dealerOption);\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDealer \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealer`, is used to select a dealer from a dropdown list. It takes a string parameter `dealerName` which represents the name of the dealer to be selected.\n\nThe method first checks if the `dealerName` is not empty and contains the \"#\" symbol. If it does, it replaces the \"#\" with a space. Then it constructs two strings: `dealer` and `dealerOption`. The `dealer` string represents the XPath for the dropdown list, while the `dealerOption` string represents the XPath for the specific dealer option to be selected.\n\nThe method then waits for the `dealer` element to be displayed, scrolls to it if necessary, selects the first available option that matches the provided `dealerName`, and highlights the selected option. If the dealer option is present in the dropdown list, it also clicks on it. The method returns the text of the selected option.\n\nIf an exception occurs during the execution of this method, it catches the exception and reports a failure test step with the error message.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnFMSButton",
        "code": "public void clickOnFMSButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=////li[@class='slds-list__item']//a[@title='FMS']//span[text()='\"\n\t\t\t\t\t+ buttonName + \"']\";\n\t\t\twaitForElement(button, 5);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFMSButton`, is used to simulate a click on an FMS (Financial Management System) button with the specified name. \n\nThe method first constructs a unique XPath expression based on the provided button name and some common elements in the FMS UI. It then waits for the element to be displayed within a certain time limit.\n\nIf the element is present, it simulates a click on the button. If not, it marks the test step as failed. \n\nIn case of any exception during the execution of this method, it also marks the test step as failed and provides the error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectDealerInDealerLookupField",
        "code": "public String selectDealerInDealerLookupField(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\tString dealerFinnoneCode = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']/..//input\";\n\t\t\t\tdealerFinnoneCode = dealerName.split(\"-\")[0].trim();\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerFinnoneCode + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\n\t\t\t\t\ttypeIn(dealer, dealerFinnoneCode);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Dealer in Search page. Exception :\" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerInDealerLookupField`, is used to select a dealer from a dropdown list in a web application. The method takes a `dealerName` as input and attempts to find the corresponding dealer option in the dropdown list.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the `dealerName` is not empty.\n2. If it's not empty, it replaces any \"#\" characters with spaces and stores the result in `dealerNameDesc`.\n3. It waits for 2 seconds using the `waitTime(2)` method.\n4. It uses a FinnOne code to locate the dealer dropdown list element.\n5. It extracts the first part of the `dealerName` (before the first \"-\") and trims any whitespace, storing it in `dealerFinnoneCode`.\n6. It constructs a new string (`dealerOption`) that combines `dealerNameDesc` with `dealerFinnoneCode` and an XPath expression to locate the desired dealer option.\n7. It waits for the dealer dropdown list element to be visible using the `waitForElementUntilVisible(dealer)` method.\n8. If the element is displayed, it scrolls to the element using `scrollToWebElement(dealer)`.\n9. It types in the value of `dealerFinnoneCode` into the dropdown list using `typeIn(dealer, dealerFinnoneCode)`.\n10. If the desired dealer option is displayed within 10 seconds, it clicks on that option using `clickOn(dealerOption)`. Otherwise, it reports a failure.\n11. If the element is not displayed or the click fails, it reports a failure and ends the test step.\n\nThe method returns an empty string (`selectedOption`) as there is no specific value to return for selecting a dealer.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "customerSearchInSalesForce",
        "code": "public String customerSearchInSalesForce(String searchValue) {\n\t\ttry {\n\t\t\tString search = searchValue + \"#xpath=//input[@title='Search Salesforce']\";\n\t\t\tif (isElementDisplayed(search, 3)) {\n\t\t\t\tWebElement element = findWebElement(search);\n\n\t\t\t\ttypeIn(search, searchValue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Customer Search \" + e.getMessage());\n\n\t\t}\n\t\treturn searchValue;\n\t}",
        "description": "This Java method, `customerSearchInSalesForce`, searches for a customer in Salesforce using the provided search value. It attempts to find and interact with the search input field on the Salesforce page.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `searchValue` as an input parameter.\n2. It constructs a search query by concatenating the input `searchValue` with a specific XPath expression that targets the search input field in Salesforce.\n3. It checks if the search input field is displayed using the `isElementDisplayed` method, with a timeout of 3 seconds.\n4. If the field is displayed, it finds the web element using the constructed search query and stores it in the `element` variable.\n5. It then simulates typing the original `searchValue` into the search input field using the `typeIn` method.\n6. After typing the search value, it simulates pressing the Enter key on the keyboard to submit the search query.\n7. If the search input field is not displayed within the specified timeout (3 seconds), or if any exceptions occur during the search process, the method calls a `testStepFailed` method to report a failure.\n\nThe method returns the original `searchValue` as a string.",
        "input": [
            "String searchValue"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "selectDealerUAT",
        "code": "public String selectDealerUAT(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']//ancestor::div//div//button[contains(@aria-label,'Select Dealer')]\";\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerName + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 4)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDealer \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerUAT`, is used to select a dealer from a dropdown list based on the provided dealer name. The method takes a `dealerName` as input and attempts to select the corresponding dealer option in the dropdown.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It checks if the `dealerName` is not empty.\n2. If the `dealerName` contains the \"#\" character, it replaces the \"#\" with a space.\n3. It waits for 2 seconds (using the `waitTime(2)` method).\n4. It constructs a dealer XPath expression based on the provided `dealerName`.\n5. It waits for the dealer dropdown element to be visible using the `waitForElementUntilVisible` method.\n6. If the dealer dropdown is displayed, it scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOn` methods respectively.\n7. If the dealer option is displayed within 4 seconds, it clicks on that option; otherwise, it logs a test step failure with an error message indicating that the value is not present in the dropdown.\n8. If the dealer dropdown is not displayed, it logs a test step failure with an error message indicating that the dropdown is not present.\n\nThe method returns a `selectedOption` string, although its value is always `null`, as it's not assigned anywhere in the method.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnTextLink",
        "code": "public void clickOnTextLink(String linkName) {\n\t\ttry {\n\t\t\tString link = linkName + \"#xpath=//a[text()='\" + linkName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnTextLink`, simulates a user clicking on a text-based link on a web page. It takes a `linkName` as input and performs the following actions:\n\n1. Creates an XPath expression to locate the link element with the given `linkName`.\n2. Waits for the link element to be present using the `waitForElement` method.\n3. If the link is present, it highlights the link using the `highLighterMethod`, clicks on it using the `clickOnSpecialElement`, and then waits for 3 seconds.\n4. If the link is not present, it fails the test step with a message indicating that the link was not found.\n\nThe method also catches any exceptions that may occur during execution and reports them as a failed test step.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "GetProspectSourceNameValue",
        "code": "public String GetProspectSourceNameValue(String value) {\n\t\tString ProspectSourceNameValue = null;\n\t\ttry {\n\t\t\tvalue = value.replaceAll(\",\", \"\");\n\t\t\tlong Integervalue = Long.parseLong(value);\n\t\t\tif (Integervalue == 6000000001L) {\n\t\t\t\tProspectSourceNameValue = \"Prospect Base\";\n\t\t\t}\n\t\t\tif (Integervalue >= 6000000002L && Integervalue <= 6000000005L) {\n\t\t\t\tProspectSourceNameValue = \"Other SUD\";\n\t\t\t} else if (Integervalue >= 6000000006L && Integervalue <= 6000000020L) {\n\t\t\t\tProspectSourceNameValue = \"RETAILER ACTIVATE\";\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in GetProspectSourceNameValue \" + e.getMessage());\n\t\t}\n\t\treturn ProspectSourceNameValue;\n\t}",
        "description": "This Java method, `GetProspectSourceNameValue`, takes a String `value` as input and returns a String representing the name of a prospect source. The method attempts to parse the input value as a long integer and then uses conditional statements to determine which prospect source name corresponds to the parsed value. If the parsing fails or the value does not match any of the expected ranges, the method calls a `testStepFailed` method with an error message and returns null.",
        "input": [
            "String value"
        ],
        "output": "String"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnNewButtonOnRelaterOppPage",
        "code": "public void clickOnNewButtonOnRelaterOppPage(String buttonLabel) {\n        try {\n            String button = buttonLabel + \"#xpath=//li[@class='\"+buttonLabel+\"']//button[text()='New']\";\n            waitForPageToLoad();\n            waitForElement(button, 15);\n            WebElement element = findWebElement(button);\n            if (isElementDisplayed(button, 15)) {\n                scrollToWebElement(button);\n                waitTime(1);\n                Actions action = new Actions(driver);\n                action.moveToElement(element).click().perform();\n                manualScreenshot(\"Click On : \" + buttonLabel);\n\n            } else {\n                testStepFailed(buttonLabel + \"  is not present.\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\n                    \"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n        }\n    }",
        "description": "This Java method, named `clickOnNewButtonOnRelaterOppPage`, is used to simulate a mouse click on a button labeled \"New\" within an element with the same label (e.g., \"Related Opp\"). The method takes one parameter, `buttonLabel`, which represents the text of the button.\n\nThe method performs the following steps:\n\n1. Constructs a unique XPath expression based on the provided `buttonLabel` and the expected HTML structure.\n2. Waits for the page to load using the `waitForPageToLoad()` method.\n3. Waits up to 15 seconds for the element to appear using the `waitForElement()` method.\n4. Finds the WebElement corresponding to the constructed XPath expression using the `findWebElement()` method.\n5. Checks if the element is displayed within 15 seconds using the `isElementDisplayed()` method.\n6. If the element is displayed, simulates a mouse hover and click on it using the `Actions` class from Selenium WebDriver.\n7. Captures a manual screenshot with the label \"Click On : [buttonLabel]\" to verify the action.\n8. If the element is not displayed within the expected time, marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it catches and logs the error message using the `testStepFailed()` method, which likely indicates a failure in the test case.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "HomePage",
        "function_name": "clickOnLinkValueInCardBoundary",
        "code": "public String clickOnLinkValueInCardBoundary(String headerName) {\n\t\tString link = \"\";\n\t\ttry {\n\t\t\tString path =headerName+ \"#xpath=(//span[text()='\"+headerName+\"']/following::lightning-primitive-cell-factory//records-hoverable-link//a//span)[last()]\";\n\t\t\twaitForPageToLoad();\n\t\t\tlink = getText(path);\n\t\t\twaitForElement(path, 24);\n\t\t\tif (isElementPresent(path)) {\n\t\t\t\tscrollToWebElement(path);\n\t\t\t\tclickOnSpecialElement(path);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click on \" + link + \" card . Exception : \" + e.getMessage());\n\t\t}\n\t\treturn link;\n\t}\n\n\n}",
        "description": "This Java method, `clickOnLinkValueInCardBoundary`, is used to click on a specific link value within a card boundary. The method takes a `headerName` as input and performs the following actions:\n\n1. Constructs an XPath path based on the provided `headerName`.\n2. Waits for the page to load.\n3. Retrieves the text content of the element at the constructed path using the `getText` method.\n4. Waits for the element at the path to be present within a specified time limit (24 seconds).\n5. If the element is present, scrolls to it and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods respectively.\n6. If the element is not present, fails the test step with an error message indicating that the link is not present.\n\nThe method returns the value of the clicked link. It also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String headerName"
        ],
        "output": "String"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "login",
        "code": "public void login(String userName, String password) {\n\n\t\ttry {\n\t\t\tclickOnLoginButton();\n\t\t\ttypeIn(txt_userName, userName);\n\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\tclickOn(btn_login);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Login in to application failed :\" + e.getClass());\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @createdDate - 11/11/2019\n\t * @description - This method is used to login into the POS application\n\t */",
        "description": "This Java method, `login`, attempts to log in to a Point of Sale (POS) application using the provided username and password. It first clicks on the login button, then enters the username and password, and finally clicks on the login button again. If any exceptions occur during this process, it catches them and marks the test step as failed with an error message indicating the type of exception that occurred.",
        "input": [
            "String userName",
            "String password"
        ],
        "output": "void"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToFOSApplication",
        "code": "public boolean loginToFOSApplication(String appURL_Fos, String userName, String password) {\n\t\t\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_Fos);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(appURL_Fos)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttestStepInfo(\"FOS Application Login Page\");\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(8);\n\t\t\tif (appURL_Fos.contains(\"DealerRevamp\")||appURL_Fos.contains(\"dealerRevamp\")||appURL_Fos.contains(\"SalesRevamp\")||appURL_Fos.contains(\"login\")) {\n\t\t\t\twaitForElement(dealerRevamp_txt_userName, 20);\n\t\t\t\tif (isElementDisplayed(dealerRevamp_txt_userName)) {\n\t\t\t\t\ttypeIn(dealerRevamp_txt_userName, userName);\n\t\t\t\t\ttypeInMaskedData(dealerRevamp_txt_passWord, password);\n\t\t\t\t\tif (isElementDisplayed(dealerRevamp_btn_login)) {\n\t\t\t\t\t\tclickOn(dealerRevamp_btn_login);\n\t\t\t\t\t\tif (isElementDisplayed(dealerRevampLoginError, 5)) {\n\t\t\t\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Dealer Revamp Login page is not available.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttypeIn(txt_userName, userName);\n\t\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\t\tclickOn(btn_login);\n\t\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (isElementDisplayed(Remind_me_later, 5)) {\n\t\t\t\tclickOnSpecialElement(Remind_me_later);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in loginToFOSApplication. Error\" + e.getClass());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method is used to log into a FOS application. It takes three parameters: `appURL_Fos`, the URL of the application, `userName`, and `password`. The method attempts to navigate to the application's login page, waits for the page to load, and then enters the provided username and password. If the login is successful, it continues with the test case. However, if the login fails or an error occurs, it marks the test step as failed and sets a flag to indicate that the login attempt was unsuccessful. The method also handles a special element called \"Remind me later\" and clicks on it if it's displayed within 5 seconds.",
        "input": [
            "String appURL_Fos",
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToApp",
        "code": "public void loginToApp(String userName, String password) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(txt_userName, 5)) {\n\t\t\t\ttypeIn(txt_userName, userName);\n\t\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\t\tclickOn(btn_login);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Login in to application failed :\" + e.getClass());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @createdDate - 19/11/2019\n\t * @description - This method is used to login into the Sales Force application\n\t */",
        "description": "Here is a brief description of the Java method:\n\n**loginToApp**\n\nLogs in to the Salesforce application using the provided `userName` and `password`. The method attempts to enter the user name and password, then clicks the \"Login\" button. If any exceptions occur during this process, it logs an error message indicating that the login failed.",
        "input": [
            "String userName",
            "String password"
        ],
        "output": "void"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToSalesForce",
        "code": "public boolean loginToSalesForce(String appURL_SalesForce, String SalesforceuserName, String Salesforcepassword) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Sales Forced Login Page\");\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_SalesForce);\n\t\t\t\twaitTime(4);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(appURL_SalesForce)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttypeIn(txt_userName, SalesforceuserName);\n\t\t\ttypeInMaskedData(txt_passWord, Salesforcepassword);\n\t\t\tclickOn(btn_login);\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t\t// System.out.println();\n\t\t}\n\t\treturn flag;\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @createdDate - 11/11/2019\n\t * @description This method is used to logout of the application\n\t */",
        "description": "This Java method, `loginToSalesForce`, is used to login to Salesforce using a provided app URL, username, and password. The method attempts to navigate to the Salesforce login page, enters the username and password, and clicks the login button. If the login is successful, it returns `false`. If there's an error during the login process (e.g., invalid credentials), it sets a flag to `true` and returns it. The method also includes logging and reporting features for testing purposes.",
        "input": [
            "String appURL_SalesForce",
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\tif (isElementDisplayed(FOS_profileLink, 15)) {\n\t\t\t\tclickOnSpecialElement(FOS_profileLink);\n\t\t\t\tif (isElementDisplayed(FOS_btn_logout, 3)) {\n\t\t\t\t\tclickOnSpecialElement(FOS_btn_logout);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else if (isElementDisplayed(profileLink, 15)) {\n\t\t\t\tclickOnSpecialElement(profileLink);\n\t\t\t\tif (isElementDisplayed(btn_logout, 3)) {\n\t\t\t\t\tclickOnSpecialElement(btn_logout);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `logout()`, is used to log out of an application. It attempts to refresh the page, then checks if a specific profile link or button is displayed within a certain time limit (15 seconds). If the link/button is found, it clicks on it and verifies that a logout button is also present, which it then clicks as well. The method logs a success message if the logout process is successful. If the profile link/button is not found, it logs an error message indicating that the profile link is missing. Finally, it catches any exceptions that may occur during execution and writes them to a log file.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToWorkBench",
        "code": "public void loginToWorkBench(String userName, String password) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tif (isElementDisplayed(txt_userName, 5)) {\n\t\t\t\ttypeIn(txt_userName, userName);\n\t\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\t\tclickOn(btn_login);\n\t\t\t}\n\t\t\tString applicationErrorPath = \"UserName#xpath=//iframe[@src='//www.herokucdn.com/error-pages/application-error.html']\";\n\t\t\tString utilities = \"utilities#xpath=//span[text()='utilities']/parent::a\";\n\t\t\tfor (int iterator = 0; iterator <= 10; iterator++) {\n\t\t\t\tif (isElementDisplayed(applicationErrorPath, 5)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(10);\n\t\t\t\t} else if (isElementDisplayed(utilities, 5)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (isElementDisplayed(applicationErrorPath, 4))\n\t\t\t\t;\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Login in to application failed :\" + e.getClass());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 11/11/2019\n\t * @Description - This method is used to click on the Login button\n\t */",
        "description": "This Java method, `loginToWorkBench`, is used to login to a workbench application using a provided username and password. The method attempts to:\n\n1. Refresh the page.\n2. Wait for the page to load.\n3. Check if an element with the ID `txt_userName` is displayed within 5 seconds. If it is, enter the provided username into that field.\n4. Enter the provided password into a masked data field (likely a password input field).\n5. Click on the login button (`btn_login`).\n6. Wait for up to 10 iterations of refreshing the page and waiting for 10 seconds if an application error path is displayed, or until the \"utilities\" link is displayed.\n7. If the application error path is still displayed after 4 seconds, it will continue to wait indefinitely.\n\nIf any exception occurs during this process, the method catches the exception and reports a test step failure with the error message.",
        "input": [
            "String userName",
            "String password"
        ],
        "output": "void"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "clickOnLoginButton",
        "code": "public void clickOnLoginButton() {\n\t\ttry {\n\t\t\tif (isElementDisplayed(btn_loginOnTop, elementLoadWaitTime)) {\n\t\t\t\tclickOn(btn_loginOnTop);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Login button is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLoginButton \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @createdDate - 22/11/2019\n\t * @description - This method is used to login into the Operation Community\n\t *              application\n\t */",
        "description": "This Java method, `clickOnLoginButton()`, attempts to click on a login button in an Operation Community application. The method first checks if the login button is displayed using the `isElementDisplayed()` method. If the button is displayed, it clicks on it using the `clickOn()` method. If the button is not displayed, the method reports a test failure with a message indicating that the login button is not displayed. If any exception occurs during this process, the method also reports a test failure with the exception message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToOperationCommunity",
        "code": "public boolean loginToOperationCommunity(String appURL_OperationCommunity, String userName, String password) {\n\t\tboolean flag = false;\n\t\tboolean check = false;\n\t\ttry {\n\t\t\t/*\n\t\t\t * String appURL_OperationCommunity =\n\t\t\t * getConfigProperty(\"AppURL_OperationCommunity\");//https://uatnew-bflconsumer.\n\t\t\t * cs109.force.com/Operations String userName =\n\t\t\t * getConfigProperty(\"UserName_OperationCommunity\"); String password =\n\t\t\t * getConfigProperty(\"Password_OperationCommunity\");\n\t\t\t */\n\t\t\twaitTime(5);\n\t\t\trefreshPage();\n\t\t\twaitTime(6);\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_OperationCommunity);\n\t\t\t\twaitTime(4);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\n\t\t\t\tif (URL.contains(appURL_OperationCommunity)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttestStepInfo(\"Login Page\");\n\t\t\twaitTime(8);\n\t\t\ttypeIn(txt_userName, userName);\n\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\tclickOn(btn_login);\n\n\t\t\tif (isElementDisplayed(error, elementLoadWaitTime)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `loginToOperationCommunity`, is used to login to an Operation Community application. It takes three parameters: the URL of the application, the username, and the password.\n\nThe method first attempts to navigate to the application's URL up to 3 times, with a short wait time in between each attempt. Once it successfully navigates to the page, it logs in using the provided credentials.\n\nAfter logging in, the method checks if an error message is displayed on the page. If an error occurs during the login process, the method sets a `flag` variable to `true`, indicating that the login was unsuccessful.\n\nThe method also includes some additional functionality:\n\n* It uses a `waitTime` method to pause the execution of the code for a specified amount of time.\n* It uses a `refreshPage` method to refresh the current page.\n* It uses a `testStepInfo` and `testStepFailed` methods to record information about the test step's outcome.\n\nThe method returns a boolean value indicating whether the login was successful or not.",
        "input": [
            "String appURL_OperationCommunity",
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToWorkBench",
        "code": "public boolean loginToWorkBench(String appURL_Workbench) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_Workbench);\n\t\t\t\twaitTime(4);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(appURL_Workbench)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twaitTime(4);\n\t\t\ttestStepInfo(\"Workbench Application Login Page\");\n\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToFOSApplication failed.Error\" + e.getClass());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method is used to perform a login operation on the WorkBench application. It takes a URL as an input parameter and attempts to navigate to that URL, wait for 4 seconds, and then verify if it has successfully landed on the expected page. If the login is successful, it logs a test step with the message \"Workbench Application Login Page\". If any error occurs during this process, it logs a test step failure with an appropriate error message. The method returns a boolean value indicating whether the login was successful or not.",
        "input": [
            "String appURL_Workbench"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToSalesForceInWorkBenchRESTExplorer",
        "code": "public boolean loginToSalesForceInWorkBenchRESTExplorer(String SalesforceuserName, String Salesforcepassword) {\n\t\tboolean flag = false;\n\t\tboolean check = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Sales Forced Login Page\");\n\t\t\tdo {\n\t\t\t\twaitTime(4);\n\t\t\t\tString URL = driver.getCurrentUrl();\n\t\t\t\tif (URL.contains(\"https://test.salesforce.com/\")) {\n\t\t\t\t\tcheck = true;\n\t\t\t\t}\n\t\t\t} while (!check);\n\t\t\ttypeIn(txt_userName, SalesforceuserName);\n\t\t\ttypeInMaskedData(txt_passWord, Salesforcepassword);\n\t\t\tclickOn(btn_login);\n\t\t\twaitTime(5);\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepInfo(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t\t// System.out.println();\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `loginToSalesForceInWorkBenchRESTExplorer`, attempts to log in to Salesforce using the provided username and password. The method uses a combination of WebDriver methods (e.g., `typeIn`, `clickOn`, `waitTime`) and assertions (e.g., `isElementDisplayed`) to verify that the login process is successful or failed.\n\nHere's a brief summary:\n\n1. Waits for the Salesforce login page to load.\n2. Enters the provided username and password.\n3. Clicks the \"Login\" button.\n4. Waits for 5 seconds to allow any post-login processes to complete.\n5. Checks if an error message is displayed within 3 seconds. If an error occurs, it records a test step failure and sets a flag indicating that the login failed.\n\nThe method returns a boolean value (`flag`) indicating whether the login was successful or not.",
        "input": [
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginWorkBench",
        "code": "public boolean loginWorkBench(String SalesforceuserName, String Salesforcepassword) {\n\t\tboolean flag = false;\n\n\t\ttry {\n\n\t\t\ttestStepInfo(\"Sales Forced Login Page\");\n\t\t\tif (isElementDisplayed(txt_userName, 4)) {\n\t\t\t\ttypeIn(txt_userName, SalesforceuserName);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Already entered UserName\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(txt_passWord, 7)) {\n\t\t\t\ttypeInMaskedData(txt_passWord, Salesforcepassword);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Already Entered Password\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(btn_login, 8)) {\n\t\t\t\tclickOn(btn_login);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Already Logged In\");\n\t\t\t}\n\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepInfo(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t\t// System.out.println();\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `loginWorkBench`, is used to perform a login operation in Salesforce using the provided username and password. The method attempts to:\n\n1. Navigate to the Salesforce login page\n2. Enter the provided username\n3. Enter the provided password (using masked input)\n4. Click the \"Login\" button\n\nThe method also checks for any error messages that may appear during the login process. If an error occurs, it will log a test step failure and set a flag to `true`. The method returns this flag, which can be used to indicate whether the login was successful or not.",
        "input": [
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "isAlertPresent",
        "code": "public boolean isAlertPresent() {\n\t\ttry {\n\t\t\tdriver.switchTo().alert();\n\t\t\treturn true;\n\t\t} catch (NoAlertPresentException e) {\n\t\t\treturn false;\n\t\t}\n\n\t}",
        "description": "This Java method, `isAlertPresent`, checks if an alert or confirmation dialog is present in the current browser window. It attempts to switch to the alert using WebDriver's `switchTo().alert()` method. If the alert is successfully switched to, the method returns `true`. If a `NoAlertPresentException` is thrown (i.e., there is no alert present), the method catches the exception and returns `false`.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Login_Logout",
        "function_name": "loginToSalesForceForLSFProfile",
        "code": "public boolean loginToSalesForceForLSFProfile(String appURL_SalesForce, String userName, String password) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\t// need to delete\n\t\t\tif (isAlertPresent()) {\n\t\t\t\tAlert alert = driver.switchTo().alert();\n\t\t\t\talert.accept();\n\t\t\t\twaitTime(2);\n\t\t\t\tnavigateTo(appURL_SalesForce);\n\t\t\t\twaitTime(2);\n\t\t\t}\n\n\t\t\tif (isElementDisplayed(closePopUp, 5)) {\n\t\t\t\tclickOnSpecialElement(closePopUp);\n\t\t\t\twaitTime(4);\n\t\t\t}\n\n\t\t\tif (isElementDisplayed(cancelBtnAdmin, 5)) {\n\t\t\t\tclickOnSpecialElement(cancelBtnAdmin);\n\t\t\t\twaitTime(4);\n\t\t\t\ttestStepPassed(\"Successfully Click Cancel Button For Login\");\n\t\t\t}\n\n\t\t\t// need to delete\n\n\t\t\tfor (int i = 0; i <= 2; i++) {\n\t\t\t\tnavigateTo(appURL_SalesForce);\n\t\t\t\twaitTime(4);\n\n\t\t\t\tString URL = driver.getCurrentUrl();\n\n\t\t\t\tif (URL.contains(appURL_SalesForce)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\twaitTime(4);\n\t\t\ttestStepPassed(\"Sales Forced Login Page\");\n\t\t\tif (isElementDisplayed(txt_userName, 5)) {\n\t\t\t\ttypeIn(txt_userName, userName);\n\t\t\t\ttypeInMaskedData(txt_passWord, password);\n\t\t\t\tclickOnSpecialElement(btn_login);\n\t\t\t\twaitTime(4);\n\t\t\t\tmanualScreenshot(\"Login Status\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"UserName field is not present.\");\n\t\t\t}\n\t\t\tif (isElementDisplayed(error, 6)) {\n\t\t\t\ttestStepInfo(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\twaitForElement(user_Icn, 10);\n\t\t\t\tif (isElementDisplayed(user_Icn, 15)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully login to Admin page \");\n\t\t\t\t} else if (isElementDisplayed(siteIssue, 10)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\tmanualScreenshot(\"Got Site issue refreshed page.\");\n\t\t\t\t\twaitTime(4);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t}\n\t\treturn flag;\n\t}\n\n}",
        "description": "This Java method is used to login to SalesForce using a LSF profile. It takes three parameters: `appURL_SalesForce`, `userName`, and `password`. The method performs the following steps:\n\n1. Waits for 4 seconds.\n2. If an alert is present, it accepts the alert and waits for 2 seconds before navigating to the SalesForce application URL.\n3. If a close popup is present, it clicks on the special element (close button) and waits for 4 seconds.\n4. If a cancel button is present in the admin section, it clicks on the special element (cancel button) and waits for 4 seconds.\n5. It navigates to the SalesForce application URL up to 3 times until the correct URL is found.\n6. It enters the username, password, and clicks the login button if the username field is present.\n7. If an error message is displayed, it takes a manual screenshot of the failed login attempt.\n8. If the user icon is displayed, it takes a manual screenshot of the successful login to the admin page.\n9. If a site issue is displayed, it refreshes the page and takes a manual screenshot.\n\nThe method returns a boolean value indicating whether the login was successful or not. If an exception occurs during the execution of the method, it fails the test step with an error message.",
        "input": [
            "String appURL_SalesForce",
            "String userName",
            "String password"
        ],
        "output": "boolean"
    },
    {
        "class_name": "MarketPlace",
        "function_name": "selectValueFromDropdownInIMPSPopup1",
        "code": "public void selectValueFromDropdownInIMPSPopup1(String dropdownName, String value) {\n        try {\n            waitForPageToLoad();\n            String dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName + \"']//..//input)[2]\";\n            waitForElement(dropdown, 10);\n            scrollbycordinates(dropdown);\n            scrollToWebElement(dropdown);\n            if (isElementDisplayed(dropdown, 4)) {\n\n \n\n                scrollToWebElement(dropdown);\n                clickOnSpecialElement(dropdown);\n                String dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n                if (isElementDisplayed(dropdownList, 4)) {\n                    scrollbycordinates(dropdownList);\n                    clickOnSpecialElement(dropdownList);\n                    testStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n                } else {\n                    testStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n                }\n            } else {\n                testStepFailed(dropdownName + \" dropdown is not present\");\n            }\n\n \n\n        } catch (Exception e) {\n            testStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n        }\n    }",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup1`, is used to select a value from a dropdown list in an IMPSS popup. The method takes two parameters: `dropdownName` and `value`. \n\nIt first waits for the page to load, then locates the dropdown element by its name and scrolls to it if necessary. If the dropdown is displayed, it selects the specified value from the dropdown list. If the value is not present in the dropdown, or if the dropdown itself is not present, the method reports a failure.\n\nThe method uses various helper methods such as `waitForPageToLoad`, `waitForElement`, `scrollbycordinates`, `scrollToWebElement`, and `clickOnSpecialElement` to perform these actions. It also uses test step passing/failing methods (`testStepPassed` and `testStepFailed`) to report the outcome of the selection operation.\n\nThe method catches any exceptions that may occur during its execution and reports a failure with an error message if one occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "MarketPlace",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tscrollToWebElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollbycordinates(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, selects a value from a dropdown menu within an IMPSPopup. Here's what it does:\n\n1. Waits for the page to load.\n2. Locates the dropdown menu by its name and XPath expression.\n3. Scrolls to the dropdown menu and clicks on it.\n4. If the selected dropdown is displayed, scrolls to the value to be selected (e.g., a specific option).\n5. Clicks on that value to select it.\n6. Verifies the selection was successful or reports an error if the value is not present in the dropdown.\n\nThe method also includes some basic error handling using a `try-catch` block, where any exceptions thrown during execution are caught and reported as test failures.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "MarketPlace",
        "function_name": "verifyMarketPlaceDoIsDisplayed",
        "code": "public void verifyMarketPlaceDoIsDisplayed(String marketPlaceDOLabel) {\n\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString marketPlaceDoloc = marketPlaceDOLabel + \"#xpath=//span[@title='Marketplace DO']\";\n\t\t\twaitForElement(marketPlaceDoloc, 2);\n\t\t\tif (isElementDisplayed(marketPlaceDoloc, 5)) {\n\t\t\t\tscrollToWebElement(marketPlaceDoloc);\n\t\t\t\thighLighterMethod(marketPlaceDoloc);\n\t\t\t\tString labelValue = getText(marketPlaceDoloc);\n\t\t\t\tif (labelValue.equals(marketPlaceDOLabel)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully Market Place DO Section is present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Market Place DO Section is Not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Market Place Do Section Is Not Available. Exception :\" + e.getMessage());\n\t\t}\n\n\t}\n\n}",
        "description": "This Java method, named `verifyMarketPlaceDoIsDisplayed`, verifies whether the \"Marketplace DO\" section is displayed on a web page. It takes a string parameter `marketPlaceDOLabel` which represents the expected label value of the Marketplace DO section.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 2 seconds using the `waitTime(2)` method.\n2. Creates an XPath locator by concatenating the input `marketPlaceDOLabel` with a fixed XPath expression (`//span[@title='Marketplace DO']`) and stores it in the `marketPlaceDoloc` variable.\n3. Waits for the element located at `marketPlaceDoloc` to be displayed using the `waitForElement(marketPlaceDoloc, 2)` method.\n4. Checks if the element is actually displayed using the `isElementDisplayed(marketPlaceDoloc, 5)` method and waits up to 5 seconds for it to appear.\n5. If the element is displayed, scrolls to it using the `scrollToWebElement(marketPlaceDoloc)` method and highlights it using the `highLighterMethod(marketPlaceDoloc)` method.\n6. Retrieves the text value of the element using the `getText(marketPlaceDoloc)` method and compares it with the input `marketPlaceDOLabel` value.\n7. If the values match, takes a manual screenshot using the `manualScreenshot(\"Successfully Market Place DO Section is present\")` method to capture evidence of the successful verification.\n8. If the element is not displayed or any other exception occurs, calls the `testStepFailed()` method with an error message to indicate that the test step failed.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures using the `testStepFailed()` method.",
        "input": [
            "String marketPlaceDOLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "chooseValueFromListbox",
        "code": "public void chooseValueFromListbox(String listBoxName, String searchValue) {\n\t\ttry {\n\t\t\tString inputField = listBoxName + \"#xpath=//span[contains(text(),'\" + listBoxName + \"')]//..//input\";\n\t\t\twaitForElement(inputField, 10);\n\t\t\tif (isElementDisplayed(inputField, 5)) {\n\t\t\t\ttypeIn(inputField, searchValue);\n\t\t\t\tString listBox = listBoxName\n\t\t\t\t\t\t+ \" listbox#xpath=//ul[contains(@class,'visible')]//mark//..//..//parent::a\";\n\t\t\t\twaitForElement(listBox, 10);\n\t\t\t\tif (isElementDisplayed(listBox, 5)) {\n\t\t\t\t\tclickOn(listBox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(listBoxName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromListbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromListbox`, is used to select a value from a list box (dropdown list) on a web page. It takes two parameters: the name of the list box and the search value to be selected.\n\nThe method first checks if the input field associated with the list box is present on the page. If it is, it types in the search value into the input field. Then, it checks if the list box itself is displayed. If it is, it clicks on the selected value from the list box.\n\nIf any step fails (e.g., the input field or list box is not present), the method reports a test step failure with an error message.",
        "input": [
            "String listBoxName",
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAutoPopulatedText",
        "code": "public String verifyAutoPopulatedText(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input|//label[text()='\"\n\t\t\t\t\t+ labelName + \"']//../input\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tvalue = getAttributeValue(field, \"value\");\n\t\t\t\thighLighterMethod(field);\n\t\t\t\t;\n\t\t\t\tmanualScreenshot(\"[\" + value + \"] is autopopulated in \" + labelName);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"\" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}\n\n\t@SuppressWarnings(\"unused\")",
        "description": "This Java method, named `verifyAutoPopulatedText`, is used to verify if a specific text field is autopopulated with a certain value. The method takes a `String` parameter `labelName`, which represents the label name of the text field.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName`. This expression is used to locate the corresponding text field.\n2. It waits for the element (text field) to be displayed using the `waitForElement` method.\n3. If the element is displayed, it checks if the text field contains a value using the `isElementDisplayed` method with a timeout of 3 seconds.\n4. If the text field has a value, it retrieves the value using the `getAttributeValue` method and highlights the field using the `highLighterMethod`.\n5. It takes a manual screenshot to capture the autopopulation status.\n6. If the element is not displayed or does not contain a value, it takes another manual screenshot with only the label name as the filename.\n\nThe method returns the autopopulated text value if found, and an empty string (`null`) otherwise.\n\nNote that this method also includes error handling using a `try-catch` block. If any exception occurs during the execution of the method, it will be caught and the test step will be marked as failed using the `testStepFailed` method.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "GetPicklistValuesFromDropDown",
        "code": "public void GetPicklistValuesFromDropDown(String labelName) {\n\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/following-sibling::select//option\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tList<WebElement> elements = findWebElements(field);\n\t\t\t\tfor (int i = 1; i <= elements.size(); i++) {\n\t\t\t\t\tString element = labelName + \"#xpath=(//label[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']/following-sibling::select//option)[\" + i + \"]\";\n\t\t\t\t\tString text_values = getText(element);\n\t\t\t\t\tclickOn(element);\n\t\t\t\t\t;\n\t\t\t\t\ttestStepInfo(labelName + \" has [ \" + text_values + \" ] picklist value\");\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\ttestStepFailed(\"\" + labelName + \" is not available\");\n\t\t\t}\n\t\t\tmanualScreenshot(labelName);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in GetPicklistValuesFromDropDown\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `GetPicklistValuesFromDropDown`, retrieves the picklist values from a dropdown list with the given label name. \n\nIt first constructs an XPath expression to locate the dropdown element based on its label text. Then it waits for the element to be visible and checks if it is displayed. If the element is displayed, it iterates over each option in the dropdown, retrieves the text value of each option, clicks on it, and logs a test step with the selected value. \n\nIf the element is not displayed, it fails the test step. In either case, it takes a manual screenshot for debugging purposes. If any exception occurs during the execution, it also fails the test step and logs the error message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonclosebutton1",
        "code": "public void clickonclosebutton1(String label) {\n\t\ttry {\n\t\t\tString labelname = \"#xpath=//button[@title='\" + label + \"']\";\n\t\t\twaitForElement(labelname, 5);\n\t\t\tif (isElementDisplayed(labelname, 3)) {\n\t\t\t\tclickOn(labelname);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonclosebutton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonclosebutton1`, attempts to click on a button with the given label within a specified time frame. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be present and visible before clicking on it. If the element is not found or displayed, it logs an error message indicating that the button is not present. If any exception occurs during the execution of this method, it logs a failed test step with the error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickEditOptionWithLabelInDEC",
        "code": "public void clickEditOptionWithLabelInDEC(String fieldLabel) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/button\";\n\t\t\twaitForElement(editOption, 4);\n\t\t\tscrollToWebElement(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInDEC`, simulates a click on an edit button with a specific label within a DEC (Data Entry Console) master page. It takes one parameter, `fieldLabel`, which is the text label of the edit button to be clicked.\n\nThe method first waits for a short period of time using the `waitTime` method, then constructs an XPath expression to locate the edit button based on its label and parent element structure. It then waits for the element to be present using the `waitForElement` method, scrolls into view if necessary using the `scrollToWebElement` method, and checks if the element is displayed within a specified time limit (10 seconds) using the `isElementDisplayed` method.\n\nIf the edit button is displayed, it simulates a click on the element using the `clickOnSpecialElement` method. If the edit button is not present or does not display within the specified time limit, the method reports a test step failure with an error message including the label of the missing edit button.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectBypassCheckBoxInDEC",
        "code": "public void selectOrDeselectBypassCheckBoxInDEC(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input\";\n\t\t\t;\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectBypassCheckBoxInDEC`, is used to select or deselect a bypass checkbox in a DEC (Decision Engine Console) application. It takes two parameters: `labelname` and `status`. \n\n- `labelname`: The name of the checkbox label.\n- `status`: A string indicating whether to check (\"check\") or uncheck (\"uncheck\") the checkbox.\n\nThe method performs the following actions:\n1. Creates an XPath expression for the checkbox based on the provided `labelname`.\n2. Waits for the element to be present and visible (using `waitForElement`).\n3. Scrolls to the element if it's not already visible (using `scrollToWebElement`).\n4. Checks the status of the checkbox.\n5. If the status is \"check\" and the checkbox is not selected, selects it; otherwise, logs a message indicating that the checkbox is already checked.\n6. If the status is \"uncheck\" and the checkbox is selected, deselects it; otherwise, logs a message indicating that the checkbox is already unchecked.\n\nIf an exception occurs during these actions, the method catches it, writes the error to a log file, and reports a test step failure.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnSaveInDEC",
        "code": "public void clickOnSaveInDEC(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 6);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnSaveInDEC`, simulates a mouse click on a specific button with the given name (`buttonName`) in a DEC (Decision Engine Console) application. \n\nHere's what it does:\n\n1. It constructs an XPath string to locate the button by its text content and adds it to the `button` variable.\n2. It waits for the button to be displayed using the `waitForElement` method, with a timeout of 6 seconds.\n3. If the button is displayed, it highlights the button using the `highLighterMethod`, clicks on the button using the `clickOn` method, and then continues with the test execution.\n4. If the button is not displayed after waiting for `elementLoadWaitTime`, it fails the test step.\n5. If any exception occurs during these steps, it catches the exception and fails the test step with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "openComponentsInRelatedTabs",
        "code": "public void openComponentsInRelatedTabs(String ComponentLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString Value = ComponentLabel + \" component#xpath=//span[text()='\" + ComponentLabel + \"']/parent::a\";\n\t\t\twaitForElement(Value, 15);\n\t\t\tif (isElementDisplayed(Value, 8)) {\n\t\t\t\tscrollToWebElement(Value);\n\t\t\t\twaitTime(2);\n\t\t\t\tWebElement ele = findWebElement(Value);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\ttestStepPassed(\"Click on :\" + ComponentLabel);\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Opportunity Charges is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Open Components In Related Tabs. Exception :\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `openComponentsInRelatedTabs`, opens components related to the specified label in a new tab. Here's a brief summary:\n\n1. Waits for 4 seconds.\n2. Creates an XPath expression based on the provided `ComponentLabel` and waits up to 15 seconds for the element to be displayed.\n3. If the element is displayed, scrolls to it, waits for 2 seconds, and then clicks on it using mouse actions.\n4. Verifies that the click was successful by taking a manual screenshot (if the component is not displayed).\n5. Catches any exceptions that occur during execution and reports the failure.\n\nThe method takes a `ComponentLabel` as input and attempts to open related components in new tabs, logging success or failure accordingly.",
        "input": [
            "String ComponentLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickDECRecordLinkValueWithCheckedBox",
        "code": "public String clickDECRecordLinkValueWithCheckedBox(String labelName) {\n\t\tString Value = null;\n\t\ttry {\n\t\t\tString tableHeader = \"#xpath=//span[text()='Digital EMI Card Name']/ancestor::thead/following::th//a\";\n\t\t\tList<WebElement> listOfTableHeading = findWebElements(tableHeader);\n\t\t\tfor (int iterator = 1; iterator <= listOfTableHeading.size(); iterator++) {\n\t\t\t\tif (isElementDisplayed(tableHeader, 5)) {\n\t\t\t\t\tString currentParth = \"#xpath=(//span[text()='Digital EMI Card Name']/ancestor::thead/following::th//a)[\"\n\t\t\t\t\t\t\t+ iterator + \"]\";\n\t\t\t\t\tValue = getText(currentParth);\n\t\t\t\t\t;\n\t\t\t\t\tmanualScreenshot(Value + \" Link is displayed\");\n\t\t\t\t\tclickOn(currentParth);\n\t\t\t\t\tString IsAddOnCard = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']/parent::div//following-sibling::div//img[@alt='True']\";\n\t\t\t\t\tString IsAddOnCard1 = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']/parent::div//following-sibling::div//img[@alt='False']\";\n\t\t\t\t\tif (isElementDisplayed(IsAddOnCard, 5)) {\n\t\t\t\t\t\tclickEditOptionWithLabelInDEC(\"OTP Agreement Check\");\n\t\t\t\t\t\tselectOrDeselectBypassCheckBoxInDEC(\"OTP Agreement Check\", \"check\");\n\t\t\t\t\t\tclickOnSaveInDEC(\"Save\");\n\t\t\t\t\t\twaitTime(6);\n\t\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t} else if (isElementDisplayed(IsAddOnCard1, 5)) {\n\t\t\t\t\t\twaitTime(4);\n\t\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" is not displayed\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click Card Boundary Link Value With Checked Box. Exception :\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\n\t}",
        "description": "This Java method, `clickDECRecordLinkValueWithCheckedBox`, appears to be part of a web automation testing script for a Digital EMI Card (DEC) application. \n\nThe method takes a string parameter `labelName` and attempts to click on the DEC record link with a checked box based on that label name. It does this by:\n\n1. Locating table headers using an XPath expression.\n2. Iterating through each table heading element.\n3. For each element, it checks if the element is displayed within a certain time limit (5 seconds).\n4. If the element is displayed, it extracts the text value of the link and takes a manual screenshot for verification.\n5. It then clicks on the link and verifies that an \"OTP Agreement Check\" checkbox exists.\n6. If the checkbox is present, it enables it by clicking on the edit option and selecting the \"check\" option.\n7. It then saves the changes and navigates back to the previous page.\n\nThe method also includes error handling to catch any exceptions that may occur during execution. If an exception occurs, the test step fails with a message indicating the failure. The method returns the extracted text value of the link as a string.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCloseButton",
        "code": "public void clickOnCloseButton(String label) {\n\t\ttry {\n\t\t\tString labelname = label + \"#xpath=//button[@title='\" + label + \"']\";\n\t\t\tpageScrollDown();\n\t\t\twaitForElement(labelname, 15);\n\t\t\tif (isElementDisplayed(labelname, 3)) {\n\t\t\t\tscrollToWebElement(labelname);\n\t\t\t\tclickOnSpecialElement(labelname);\n\t\t\t\t// manualScreenshot(\"Click on\" + label);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelname + \" Button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonclosebutton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCloseButton`, simulates a click on a close button with the specified label. It attempts to find the button by its title and performs the following steps:\n\n1. Scrolls down the page using `pageScrollDown`.\n2. Waits for up to 15 seconds for the element to be displayed using `waitForElement`.\n3. Checks if the element is displayed within 3 seconds using `isElementDisplayed`. If it is, then:\n\t* Scrolls to the element using `scrollToWebElement`.\n\t* Simulates a click on the element using `clickOnSpecialElement`.\n4. If the element is not found or displayed, logs an error message using `testStepInfo` with the label name.\n5. If any exception occurs during these steps, logs the failure and the exception message using `testStepFailed`.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnChildComponent",
        "code": "public void clickOnChildComponent(String LabelName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString Element = \"LabelName#xpath=//h2[contains(@class,'heading')]//span[text()='\" + LabelName\n\t\t\t\t\t+ \"']//ancestor::button\";\n\t\t\twaitForElement(Element, 30);\n\t\t\tscrollToElement(Element);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tValue = getAttributeValue(Element, \"aria-expanded\");\n\t\t\t\tif (Value.equalsIgnoreCase(\"true\")) {\n\t\t\t\t\tscrollToWebElement(Element);\n\t\t\t\t\tmanualScreenshot(LabelName + \"is in Expand Mode\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(Element);\n\t\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyComponentStatus\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnChildComponent`, is used to interact with a child component of an element on a web page that has the specified label name. \n\nThe method first constructs an XPath expression to locate the element based on its label and class. It then waits for this element to be displayed, scrolls into view if necessary, and checks if it's in an expanded state or not.\n\nIf the element is already expanded, it takes a manual screenshot with the label name and the message \"is in Expand Mode\". If the element is not expanded, it clicks on the element.\n\nThe method also includes error handling to catch any exceptions that may occur during execution. If an exception occurs, it fails the test step with a message indicating what went wrong.",
        "input": [
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "chooseInsuranceValueFromSearchAndListField",
        "code": "public void chooseInsuranceValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tvalue = \"INS/HLGS/SA-700000/T-1/P-3077\";\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//div[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString search_icn = \"search tab#xpath=//div[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div//following::div//span/span[text()='\" + value + \"']\";\n\n\t\t\t\t// String lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\t\twaitForElement(search_icn, 8);\n\t\t\t\t\t\tif (isElementDisplayed(search_icn, 10)) {\n\t\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\t\tclickOnSpecialElement(search_icn);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tmanualScreenshot(value + \" is successfully selected in\" + labelName + \"Insurance\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present in\" + labelName + \"Insurance\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method, `chooseInsuranceValueFromSearchAndListField`, is used to select an insurance value from a search field and list. It takes two parameters: `labelName` (the label associated with the search field) and `value` (the value to be selected). The method attempts to find the search field by its label name, enter the value into it, and then click on the resulting element to select the value. If the selection is successful, a manual screenshot is taken; if not, a test step failure message is logged. The method also includes error handling for any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "chooseInsuranceValueFromSearchAndListFieldInFOS",
        "code": "public void chooseInsuranceValueFromSearchAndListFieldInFOS(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString searchField = labelName + \" #xpath=//b[contains(text(),'\"+labelName+\"')]/ancestor::div[@class='slds-grid']//div//input[@placeholder='Search Insurance EW Premium Masters...']\";\n\t\t\t\tString search_icn = value+\"#xpath=//span[text()='\"+value+\"']\";\n\n\t\t\t\twaitForElement(searchField, 10);\n\t\t\t\tif (!value.isEmpty()) {\n\t\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\t\twaitForElement(search_icn, 8);\n\t\t\t\t\t\tif (isElementDisplayed(search_icn, 10)) {\n\t\t\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\t\t\tclickOnSpecialElement(search_icn);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\tmanualScreenshot(value + \" is successfully selected in \" + labelName + \"Insurance\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(value + \" is not present in\" + labelName + \"Insurance\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseInsuranceValueFromSearchAndListFieldInFOS`, is used to select an insurance value from a search field and list in the FOS (Field of Study) application. \n\nThe method takes two parameters: `labelName` and `value`. It first checks if the `value` parameter is not empty. If it's not, it constructs two XPath expressions: one for the search field and another for the search result element with the given value.\n\nThe method then waits for the search field to be displayed, scrolls to the element, types in the value, and waits for the search result element to be displayed. If the search result is found, it highlights the element, clicks on it, and takes a manual screenshot to confirm the selection was successful. \n\nIf any of these steps fail (e.g., the search field or result is not present), the method reports a test step failure with an appropriate message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdownInIMPSPopupInUAT",
        "code": "public void selectValueFromDropdownInIMPSPopupInUAT(String dropdownName, String value) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\t// waitForPageToLoad();\n\t\t\t\twaitTime(2);\n\t\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//..//../parent::lightning-input-field//button\";\n\t\t\t\twaitForElement(dropdown, 10);\n\t\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\n\t\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\t\t// waitForPageToLoad();\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\t\t\tif (isElementDisplayed(dropdownList, elementLoadWaitTime)) {\n\t\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\t\ttestStepPassed(\n\t\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag) {\n\t\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopupInUAT`, selects a value from a dropdown list in an IMPs popup in UAT. \n\nThe method takes two parameters: the name of the dropdown and the value to be selected. It first waits for the page to load and then checks if the dropdown is present on the page. If it is, it clicks on the dropdown and then iterates up to 2 times to select the desired value from the list. \n\nIf the value is successfully selected, the method logs a test step as passed. If not, it logs a test step as failed with an error message indicating that the option was not present in the dropdown. \n\nIn case of any exception during the execution of this method, it also logs a test step as failed with the error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInZBB",
        "code": "public void enterValueInZBB(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInZBB`, enters a given value into a specific field on a web page. The field is identified by its label name and an XPath expression that searches for the label containing the specified text.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs an XPath expression based on the provided `labelName` to locate the corresponding input field.\n2. It waits for the element to be present using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the element is displayed within the specified `elementLoadWaitTime`, it:\n\t* Highlights the field using the `highLighterMethod`.\n\t* Enters the provided `value` into the field using the `typeIn` method.\n4. If the element is not present or does not meet the display condition, it marks the test step as failed with an error message indicating that the field was not found.\n\nThe method also catches any exceptions that may occur during execution and reports a failure in entering the value into the field, along with the exception message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInZBBAddressField",
        "code": "public void enterValueInZBBAddressField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../..//div//textarea\";\n\t\t\twaitForElementToDisplay(field, 9);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInAddressField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInZBBAddressField`, enters a given value into a text area field labeled with the provided `labelName` on a webpage. It uses Selenium WebDriver to interact with the browser.\n\nHere's a step-by-step breakdown:\n\n1. The method constructs an XPath expression by concatenating the `labelName` with a fixed string that targets the text area field.\n2. It waits for the element to be displayed using `waitForElementToDisplay`.\n3. If the element is displayed, it checks if the element is actually visible on the page using `isElementDisplayed`. If it is, it enters the provided `value` into the text area field using `typeIn`.\n4. If the element is not displayed or not visible, it fails the test step with a message indicating that the field is not present.\n5. If any exception occurs during the process (e.g., network error), it catches the exception and fails the test step with an error message.\n\nThe method seems to be part of a larger testing framework that uses Selenium WebDriver and has some custom methods like `waitForElementToDisplay`, `isElementDisplayed`, and `typeIn`.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnSaveInZBB",
        "code": "public void clickOnSaveInZBB(String ButtonName, String Component) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString Element = ButtonName + \" button#xpath=//span[text()='\" + Component + \"']//following::button[text()='\"\n\t\t\t\t\t+ ButtonName + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(ButtonName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in clickOnSaveInZBB\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveInZBB`, is used to simulate a click on a specific button with the given name and component in a web page. The method takes two parameters: `ButtonName` and `Component`. \n\nHere's what it does:\n\n1. It waits for the page to load.\n2. It constructs an XPath expression based on the provided `ButtonName`, `Component`, and its own internal logic.\n3. It waits for the element identified by this XPath expression to be displayed within a certain time limit (10 seconds).\n4. If the element is displayed, it scrolls to that element and simulates a click on it using `clickOnSpecialElement`.\n5. If the element is not displayed, it marks the test step as failed.\n6. If any exception occurs during these operations, it catches the exception and marks the test step as failed with an error message including the exception's message.\n\nThis method seems to be part of a larger automation framework for testing web applications, likely using Selenium WebDriver.",
        "input": [
            "String ButtonName",
            "String Component"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyandreturnCurrentStageOfOpportunity",
        "code": "public String verifyandreturnCurrentStageOfOpportunity() {\n\t\tString stagevalue = \"\";\n\t\ttry {\n\t\t\twaitForElement(currentStage_Opp, 13);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 6)) {\n\t\t\t\tstagevalue = getText(currentStage_Opp);\n\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stagevalue + \" stage.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn stagevalue;\n\t}",
        "description": "This Java method, `verifyandreturnCurrentStageOfOpportunity`, is used to verify the current stage of an opportunity and return its value as a string. It uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `getText`, and `scrollToWebElement` to interact with the opportunity's stage element. If the stage is displayed, it takes a manual screenshot and returns the stage value. If there's an exception or the stage is not displayed, it fails the test step.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "CardsValidation",
        "code": "public boolean CardsValidation() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"#xpath=//div[@data-key='error']//div[contains(@class,'toastTitle')]\";\n\t\t\twaitForElement(error, 10);\n\t\t\tif (isElementDisplayed(error, 1)) {\n\t\t\t\tflag = true;\n\t\t\t\tString ErrorList = \"#xpath=//div[@data-key='error']//span[@class='toastMessage forceActionsText']\";\n\t\t\t\tList<WebElement> errors = findWebElements(ErrorList);\n\t\t\t\tArrayList<String> error_Msg = new ArrayList<>();\n\t\t\t\tfor (int i = 0; i < errors.size(); i++) {\n\t\t\t\t\terror_Msg.add(errors.get(i).getText());\n\t\t\t\t}\n\t\t\t\tfor (int i = 0; i < errors.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error\" + (i + 1) + \":\" + error_Msg.get(i));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error displayed\");\n\t\t\t}\n\t\t\twaitTime(4);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in CardsValidation\" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `CardsValidation`, validates whether there are any errors present on a webpage. It uses Selenium WebDriver to perform the validation.\n\nHere's what it does:\n\n1. It waits for an element with the specified XPath (`#xpath=//div[@data-key='error']//div[contains(@class,'toastTitle')]`) to be displayed within a certain time limit (10 seconds).\n2. If the element is displayed, it sets a flag to `true`.\n3. If the element is displayed, it extracts the error messages from the webpage and stores them in an ArrayList.\n4. It then takes manual screenshots of each error message with a prefix \"ErrorX: ErrorMessage\", where X is the error number.\n5. If there are no errors displayed, it logs a test step info saying so.\n6. The method waits for 4 seconds before returning.\n7. If any exception occurs during the execution of this method, it logs a test step failure with the error message.\n\nThe method returns a boolean value indicating whether an error was found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "compareBankDetails",
        "code": "public void compareBankDetails(String fieldName, String expectedValue) {\n\t\ttry {\n\t\t\tString getValue = driver\n\t\t\t\t\t.findElement(By.xpath(\n\t\t\t\t\t\t\t\"//label[normalize-space(text())='\" + fieldName + \"']//following-sibling::div//input\"))\n\t\t\t\t\t.getAttribute(\"Value\");\n\t\t\tif (getValue.equals(expectedValue)) {\n\t\t\t\tmanualScreenshot(\"Bank Details are same\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"bank Details are Different\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, named `compareBankDetails`, compares the value of a specific field in a web page with an expected value. The method takes two parameters: `fieldName` and `expectedValue`. \n\nIt uses Selenium WebDriver to find the element on the webpage corresponding to the given `fieldName`. It then retrieves the value of that element using its `getAttribute(\"value\")` method.\n\nThe method then compares this retrieved value with the `expectedValue`. If they are equal, it takes a manual screenshot and logs \"Bank Details are same\". If they are not equal, it also takes a manual screenshot but logs \"Bank Details are Different\".\n\nIf any exception occurs during the execution of this method (e.g., if the element is not found), it catches the exception and prints its stack trace.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getTextFromDisabledfield",
        "code": "public void getTextFromDisabledfield(String Labelname) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[text()='\" + Labelname + \"']//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(getText(field) + \"value is displayed in \" + Labelname);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(Labelname + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextFromDisabledfield\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `getTextFromDisabledfield`, is used to retrieve the text from a disabled input field on a web page. \n\nThe method takes a `String` parameter `Labelname`, which is expected to match the label of the desired input field.\n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `Labelname`.\n2. It waits for the element matching this XPath expression to be present (up to 10 seconds).\n3. If the element is displayed, it highlights it using a `highLighterMethod`, takes a manual screenshot of the text value in the field and the label name, and logs that the value is displayed.\n4. If the element is not displayed, it takes a manual screenshot with the message stating that the label name is not present.\n\nIf any exception occurs during these steps, it calls `testStepFailed` to mark the test step as failed and provides an error message.",
        "input": [
            "String Labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInFieldInIMPSPopup",
        "code": "public void enterValueInFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 34);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldInIMPSPopup`, is used to enter a given value into a field with a specific label name within an IMPSPopup (likely an Internet Media Presentation System Protocol popup). \n\nThe method takes two parameters: `labelName` and `value`. It attempts to locate the field by its label name, wait for it to be displayed, scroll to it if necessary, and then enter the provided value. If the field is not present or any other exception occurs during this process, the test step fails with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInTextAreaFieldInIMPSPopup",
        "code": "public void enterValueInTextAreaFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/textarea\";\n\t\t\twaitForElement(field, 34);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInTextAreaFieldInIMPSPopup`, enters a given value into a text area field within an IMP (Integrated Medical Productivity Suite) popup. \n\nHere's how it works:\n\n- It constructs an XPath for the text area field based on the provided label name.\n- It waits for the field to be present and then checks if it is displayed.\n- If the field is displayed, it scrolls to the field and enters the given value into it.\n- If the field is not displayed, it fails the test step.\n- If any exception occurs during these operations, it also fails the test step.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "checkChangeECSInBankIMPS",
        "code": "public void checkChangeECSInBankIMPS(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = \"#xpath=//span[text()='\" + labelname + \"']//parent::label//parent::span/input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `checkChangeECSInBankIMPS`, is used to check or uncheck a checkbox on a web page based on the provided label name and status (\"check\" or \"uncheck\"). \n\nHere's a step-by-step breakdown:\n\n1. It first constructs an XPath expression to locate the checkbox element based on the given `labelname`.\n\n2. Then, it waits for the element to be present and visible using the `waitForElement` method.\n\n3. The method then scrolls to the element so that it is fully visible in the browser window.\n\n4. If the status is \"check\", it checks if the checkbox is not already selected. If it's not selected, it clicks on the checkbox to select it. If the checkbox is already selected, it logs a message indicating that the checkbox is already checked.\n\n5. Similarly, if the status is \"uncheck\", it checks if the checkbox is already selected. If it's selected, it unchecks the checkbox by clicking on it. If the checkbox is not selected, it logs a message indicating that the checkbox is already unchecked.\n\n6. The method also catches any exceptions that may occur during execution and writes them to a log file along with a failed test step message if an exception occurs.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "removeValueInFieldInIMPSPopup",
        "code": "public void removeValueInFieldInIMPSPopup(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\t;\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tString s = Keys.chord(Keys.CONTROL, \"a\");\n\t\t\t\tele.sendKeys(Keys.DELETE);\n\t\t\t\tele.clear();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `removeValueInFieldInIMPSPopup`, removes the value from a specific input field within an IMP's popup. \n\nThe method takes a string parameter `labelName` which is used to construct the XPath of the input field. It then waits for the element to be displayed, scrolls to it if necessary, and clears its contents by deleting and re-clearing the text. If the element is not present or any exception occurs during the process, the method fails the test step.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getBankValues",
        "code": "public String getBankValues(String labelName) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tmanualScreenshot(getText(field) + \"Value is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t\treturn labelName;\n\t}\n\n\t/**\n\t * @author Sundarrajan\n\t * @Description - This method is used to- Check OR Uncheck the Check Box.\n\t * @status : give check or uncheck.\n\t */",
        "description": "This Java method, `getBankValues`, takes a string parameter `labelName` and performs the following actions:\n\n1. It constructs an XPath expression based on the input `labelName`.\n2. It waits for the element identified by the constructed XPath expression to be displayed (timeout: 10 seconds).\n3. If the element is displayed, it checks if the checkbox is checked or not (timeout: 3 seconds). \n   - If the checkbox is checked, it takes a manual screenshot with the text \"Value is displayed\".\n   - If the checkbox is not present, it logs an error message stating that the field is not present.\n4. If any exception occurs during these operations, it logs an error message indicating that the method failed.\n\nThe method returns the input `labelName` as a string.\n\nThis method appears to be part of a test automation framework and is used to interact with checkboxes on a web page or application.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckBox",
        "code": "public void selectOrDeselectCheckBox(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \" checkBox#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/preceding-sibling::span/input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBox`, is used to select or deselect a checkbox on a web page based on the provided label name and status (either \"check\" or \"uncheck\"). \n\nThe method first constructs an XPath string to locate the checkbox element using the given label name. It then waits for the element to be present, scrolls to it if necessary, and checks the current state of the checkbox.\n\nIf the status is \"check\", the method will check if the checkbox is currently unchecked and, if so, click on it to select it. If the checkbox is already selected, it will log a message indicating that.\n\nSimilarly, if the status is \"uncheck\", the method will check if the checkbox is currently checked and, if so, click on it to deselect it. If the checkbox is already unchecked, it will log a message indicating that.\n\nIf any exception occurs during the process, it will be logged in the log file and the test step will fail.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyfieldIsenabled",
        "code": "public void verifyfieldIsenabled(String labelname) {\n\t\tString field = \"#xpath=//label[text()='\" + labelname + \"']//..//div/input\";\n\t\twaitForElement(field, 10);\n\t\tif (isElementDisplayed(field, 3)) {\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tmanualScreenshot(labelname + \"is Enabled\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelname + \"is diabled\");\n\t\t\t}\n\t\t}\n\t}",
        "description": "This Java method is used to verify if a specific field with the given label name is enabled or disabled. \n\nThe method uses Selenium WebDriver's `findWebElement` and `isElementDisplayed` methods to locate and check if the element is displayed. If it is, it then checks if the element is enabled using the `isEnabled` method. \n\nIf the field is enabled, a manual screenshot is taken with the label name as part of the filename. If the field is disabled, another manual screenshot is taken with the label name and \"is disabled\" added to the filename.\n\nThe method also uses a wait for the element to be displayed before attempting to verify its state, which helps prevent errors if the element takes some time to load.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectcheckbox",
        "code": "public boolean selectcheckbox(String DocumentName, boolean check) {\n\t\tString select = \"#xpath=//span[text()='\" + DocumentName + \"']/preceding::span[@class='checkbox-custom']/input\";\n\t\twaitForElement(select, 10);\n\t\ttry {\n\t\t\tif (check) {\n\t\t\t\tif (!isCheckBoxSelected(select)) {\n\t\t\t\t\tclickOn(select);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Check box is checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isCheckBoxSelected(select)) {\n\t\t\t\t\tclickOn(select);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Checkbox is already unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectcheckbox\" + e.getMessage());\n\t\t}\n\t\treturn check;\n\t}",
        "description": "This Java method, `selectcheckbox`, is used to select or unselect a checkbox based on the provided `DocumentName` and `check` boolean value. \n\nThe method uses an XPath expression to locate the checkbox element in the UI. It then waits for the element to be present before attempting to interact with it.\n\nIf `check` is `true`, the method will try to select the checkbox if it's not already selected. If `check` is `false`, the method will try to unselect the checkbox if it's currently selected.\n\nThe method returns the value of the `check` boolean, indicating whether the checkbox was successfully selected or unselected.\n\nIf any exceptions occur during execution (e.g., the element is not found), the method will log a failure message and return the original value of `check`.",
        "input": [
            "String DocumentName",
            "boolean check"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCustomerLink",
        "code": "public void clickOnCustomerLink(String OpportunityName) {\n\t\ttry {\n\t\t\tString link = OpportunityName + \"#xpath=//a[normalize-space()='\" + OpportunityName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(OpportunityName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerLink`, attempts to click on a customer link with the given `OpportunityName`. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be present and displayed within a certain time frame. If the element is not found or not displayed after 10 seconds, it fails the test step. If an exception occurs during execution, it also fails the test step with the error message.",
        "input": [
            "String OpportunityName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnExpandDocument",
        "code": "public void clickOnExpandDocument() {\n\t\ttry {\n\t\t\tString expandIcon = \"Expand Icon#xpath=//button[@title='Click to Open']\";\n\t\t\twaitForElement(expandIcon, 5);\n\t\t\tif (isElementPresent(expandIcon)) {\n\t\t\t\tclickOn(expandIcon);\n\t\t\t\twaitForPageToLoad();\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click Expand Icon\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnExpandDocument()`, attempts to click on an expand icon button with the title \"Click to Open\". It uses Selenium WebDriver's `waitForElement()` and `isElementPresent()` methods to wait for the element to be present and then clicks on it. If any exceptions occur during this process, it catches them and logs a failure message using the `testStepFailed()` method.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonclosebutton",
        "code": "public void clickonclosebutton(String label) {\n\t\ttry {\n\t\t\tString labelname = \"#xpath=//button[@title='\" + label + \"']\";\n\t\t\twaitForElement(labelname, 5);\n\t\t\tif (isElementDisplayed(labelname, 3)) {\n\t\t\t\tclickOn(labelname);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonclosebutton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonclosebutton`, attempts to click on a button with the specified title (label) using Selenium WebDriver. \n\nThe method first constructs an XPath expression to locate the button based on its title. It then waits for up to 5 seconds for the element to be present and visible. If the element is displayed within the given time limit, it will click on the button. If not, it will report that the button is not present.\n\nIf any exceptions occur during the execution of this method, it will catch them and record a test step failure with an error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "checkToUploadDocuments",
        "code": "public void checkToUploadDocuments() {\n\t\ttry {\n\t\t\tString color = \"Card Color #xpath=//ul//li//h3//img\";\n\t\t\tList<WebElement> chechboxColors = findWebElements(color);\n\t\t\tList<WebElement> checkbox = driver.findElements(By.xpath(\"//ul//li//h3//input\"));\n\t\t\tfor (int i = 0; i < chechboxColors.size(); i++) {\n\t\t\t\tif (chechboxColors.get(i).getAttribute(\"alt\").contains(\"yellow\")) {\n\t\t\t\t\tcheckbox.get(i).click();\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkToUploadDocuments \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Author - Vetri\n\t * \n\t * @createdDate 26/11/2019 Description of method - document upload button\n\t * @param - provide the file name\n\t * \n\t */",
        "description": "This Java method, `checkToUploadDocuments()`, appears to be a part of an automated testing script for a web application. The method's purpose is to check if there are any checkboxes with yellow-colored cards and then click on them.\n\nHere's a step-by-step breakdown:\n\n1. It tries to retrieve a list of WebElements using the provided XPath expression (`\"Card Color #xpath=//ul//li//h3//img\"`).\n2. Then, it finds all input elements (checkboxes) with the same XPath expression (`\"//ul//li//h3//input\"`).\n3. It loops through the list of checkboxes and checks if each checkbox's alt attribute contains the string \"yellow\".\n4. If a checkbox has an alt attribute containing \"yellow\", it clicks on that checkbox.\n5. If any exceptions occur during this process, the method catches them and reports a test failure with the error message.\n\nThis method seems to be checking for specific conditions related to uploading documents in a web application.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "documentToUpload",
        "code": "public void documentToUpload(String fileName) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(btn_upload, 5)) {\n\t\t\t\twaitTime(8);;\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\t// System.out.println(filePath+\"\\\\UploadDocuments\\\\PANNumber.png\");\n\t\t\t\tfindWebElement(btn_upload).sendKeys(filePath + \"\\\\UploadDocuments\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded \" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Upload Button Exception :\" + e.toString());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`documentToUpload(String fileName)` is a method that uploads a file with the given `fileName` to a web application. It uses a combination of Selenium WebDriver and custom utility methods (e.g., `isElementDisplayed`, `waitTime`, `findWebElement`) to interact with the application.\n\nHere's what the method does:\n\n1. Waits up to 5 seconds for an \"Upload\" button to be displayed.\n2. If the button is present, waits for 8 seconds before attempting to upload the file.\n3. Constructs a full path to the file using the `File` class and extracts the directory path from the file's absolute path.\n4. Uses Selenium WebDriver to send keys (i.e., upload) the file with the specified name.\n5. If the file is uploaded successfully, marks the test step as passed. Otherwise, fails the test step if the \"Upload\" button is not present or an exception occurs during the upload process.\n\nIn summary, this method automates the process of uploading a file to a web application using Selenium WebDriver and custom utility methods.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "crossCellSSToUpload",
        "code": "public void crossCellSSToUpload(String fileName) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(btn_upload, 5)) {\n\t\t\t\twaitTime(8);\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\t// System.out.println(filePath+\"\\\\UploadDocuments\\\\PANNumber.png\");\n\t\t\t\tfindWebElement(btn_upload).sendKeys(filePath + \"\\\\ScreenShot\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded \" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Upload Button Exception :\" + e.toString());\n\t\t}\n\t}\n\n\t/**\n\t * Author - Vishnu\n\t * \n\t * @createdDate 02/12/2019 Description of method - To remove cross sign\n\t * @param - provide the file name\n\t * \n\t */",
        "description": "This Java method, named `crossCellSSToUpload`, is used to upload a file from the local system to an application or website. The method takes a `String` parameter `fileName` which represents the name of the file to be uploaded.\n\nHere's what the method does:\n\n1. It checks if the \"Upload\" button is displayed on the screen within a specified time limit (5 seconds). If it is, then it proceeds with the upload process.\n2. It waits for 8 seconds before attempting to upload the file.\n3. It constructs the full path of the file by combining the absolute path of the file with the folder path where the uploaded files are stored (`\\\\UploadDocuments\\\\PANNumber.png`).\n4. It uses the `findWebElement` method to locate the \"Upload\" button and then sends the file path as input to that button.\n5. If the upload is successful, it marks the test step as passed. If not, or if an exception occurs during the process, it fails the test step with a relevant error message.\n\nNote: The `testStepPassed` and `testStepFailed` methods are likely custom methods used to log the outcome of each test step in the testing framework being used.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnRemoveCrossSign",
        "code": "public void clickOnRemoveCrossSign(String value) {\n\t\ttry {\n\t\t\tString btn_remove = \"Remove \" + value + \"#xpath=//span[text()='\" + value + \"']/following-sibling::a\";\n\t\t\twaitForElement(btn_remove, 5);\n\t\t\tif (isElementDisplayed(btn_remove, 5)) {\n\t\t\t\tclickOn(btn_remove);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Remove cross sign is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Remove cross sign Exception :\" + e.toString());\n\t\t}\n\t}\n\n\t/**\n\t * Author - vetri\n\t * \n\t * @createdDate 16/12/2019 Description of method - To verify the text is present\n\t *              or not.\n\t * @param -\n\t * \n\t */",
        "description": "This Java method, `clickOnRemoveCrossSign`, simulates a click on an HTML element with a specific XPath expression. The method takes a `String` parameter `value` which is used to construct the XPath expression.\n\nHere's what the method does:\n\n1. It constructs an XPath expression that targets an HTML element (an `<a>` tag) that has a sibling `<span>` tag with text equal to the input `value`.\n2. It uses a `try-catch` block to wait for the element to be present on the page using the `waitForElement` method, and then checks if the element is displayed using the `isElementDisplayed` method.\n3. If the element is found and displayed, it simulates a click on the element using the `clickOn` method.\n4. If the element is not found or displayed, it fails the test step with an error message indicating that the \"Remove cross sign\" is not present.\n5. If any exception occurs during the execution of this method, it catches and reports the exception as a test failure.\n\nThe author of this method is `vetri`, and the creation date is December 16th, 2019.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyText",
        "code": "public void verifyText(String headerText, String text) {\n\t\ttry {\n\t\t\tString headerTextLabel = headerText + \"#xpath=//span[contains(text(),'\" + headerText\n\t\t\t\t\t+ \"')]/parent::div//span[contains(text(),'\" + text + \"')]\";\n\t\t\twaitForElement(headerTextLabel, 10);\n\t\t\tif (isElementDisplayed(headerTextLabel, 3)) {\n\t\t\t\tString textLabel = text + \"#xpath=//div//span[contains(text(),'\" + text + \"')]\";\n\t\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\t\tif (isElementDisplayed(textLabel, 5)) {\n\t\t\t\t\t\tif (getText(textLabel).contains(text)) {\n\t\t\t\t\t\t\ttestStepPassed(\"Successfully '\" + text + \"' is Present under'\" + headerText + \"'\");\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(300);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Waited for 20 Mintues still not approved by CD Line on Opportunity Page \" + e);\n\t\t}\n\t}\n\n\t/**\n\t * Author - vetri\n\t * \n\t * @createDate 16/12/2019 Description of method - To click the opportunity Name.\n\t * @param value\n\t */",
        "description": "This Java method, `verifyText`, is used to verify if a specific text is present under a header text in a web page. It takes two parameters: `headerText` and `text`. \n\nThe method first constructs an XPath expression by concatenating the `headerText` with the `text`. It then uses this XPath expression to wait for the element to be displayed (up to 10 seconds). If the element is displayed, it then checks if the specified `text` is present within the element. If the text is found, the method marks a test step as passed.\n\nIf the element is not displayed initially, the method will refresh the page and wait for up to 15 seconds before retrying the check. This process repeats up to 5 times.\n\nIf any exceptions occur during this process (e.g., if the element takes too long to load), the method catches the exception and marks a test step as failed with an error message.",
        "input": [
            "String headerText",
            "String text"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnOpportunityName",
        "code": "public void clickOnOpportunityName(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString link = value + \"#xpath=//span[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 50);\n\t\t\tif (isElementDisplayed(link, 6)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOpportunityName`, simulates a click on an opportunity name element in a web page. Here's a brief description of what it does:\n\n1. Waits for the page to load.\n2. Waits for 5 seconds.\n3. Creates a link string by concatenating the given `value` with an XPath expression that searches for a span element containing the same text as the `value`.\n4. Waits up to 50 seconds for the element to be displayed.\n5. If the element is displayed, it scrolls to the element, highlights it (using a highlighting method), clicks on it, and waits for the page to load again.\n6. If the element is not displayed after 6 seconds, the test step fails with an error message indicating that the opportunity name is not present.\n\nThe method also catches any exceptions that occur during execution and reports them as test step failures.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInLookUPFieldInIMPSPopup",
        "code": "public void enterValueInLookUPFieldInIMPSPopup(String labelName, String value) {\n\t\ttry {\n\t\t\twaitTime(15);\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 40);\n\t\t\tWebElement ele = findWebElement(field);\n\t\t\tele.clear();\n\t\t\tif (ele.isEnabled()) {\n\t\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\tString lookupValue = value + \"#xpath=//span[contains(text(),'\" + value + \"')]/parent::span\";\n\t\t\t\t\tif (isElementDisplayed(lookupValue, 20)) {\n\t\t\t\t\t\tclickOn(lookupValue);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelName + \"is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(value + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInLookUPFieldInIMPSPopup`, is used to enter a value into a lookup field in an IMPSS popup. The method takes two string parameters: `labelName` and `value`. \n\nHere's what the method does:\n\n1. Waits for 15 seconds.\n2. Creates a string representing the XPath of the lookup field based on the provided label name.\n3. Waits for the lookup field to be displayed for up to 40 seconds.\n4. Finds the WebElement corresponding to the lookup field and clears its text.\n5. If the element is enabled, it checks if the element is displayed within 7 seconds. \n   - If the element is displayed, it scrolls to the element, enters the provided value using the `typeIn` method, waits for 5 seconds, and then looks up the entered value in the popup.\n     - If the looked-up value is found, it clicks on that value.\n6. If the element is not enabled or not displayed within the specified time, it logs an error message.\n\nThe method also includes exception handling to catch any errors that may occur during its execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInOffersComponent",
        "code": "public void enterValueInOffersComponent(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\"+labelName+\"']//..//div/input\";\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tif (isElementDisplayed(field, 25)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInOffersComponent`, allows you to enter a value into an input field on a web page. It takes two parameters: `labelName` and `value`. \n\n- `labelName`: The name of the label associated with the input field.\n- `value`: The value to be entered into the input field.\n\nThe method attempts to find the input field corresponding to the given `labelName`, enter the provided `value` if it's not empty, and then press Enter. If the input field is not present or there's an issue during the process, the test step fails with a relevant error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getTextInEMandate",
        "code": "public String getTextInEMandate(String LabelName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString Element = \"Order Status#xpath=//span[text()='EMandate']/ancestor::div/following-sibling::div//label[text()='\"\n\t\t\t\t\t+ LabelName + \"']//..//input\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getAttributeValue(Element, \"value\");\n\t\t\t\tmanualScreenshot(Value + \" is displayed in \" + LabelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextInMarketPlaceDO\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getTextInEMandate`, is used to retrieve the text value of a specific input field labeled with the given `LabelName` within an EMandate section. \n\nHere's what it does:\n\n1. It first initializes an empty string variable `Value`.\n2. It then attempts to locate an element using XPath, waits for the element to be displayed, and scrolls to it.\n3. If the element is found and displayed, it highlights the element, retrieves its value attribute, and stores it in the `Value` variable. \n4. Additionally, it takes a manual screenshot with the text value and label name as part of the file name.\n5. If the element is not displayed within the given time limit (5 seconds), it marks the test step as failed.\n6. In case of any exception during execution, it also marks the test step as failed with an error message.\n7. Finally, it returns the retrieved text value.\n\nThis method seems to be part of a larger automation framework for testing web applications.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonPopupButton",
        "code": "public void clickonPopupButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@class='modal-footer slds-modal__footer']//span[text()='Save']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 3)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `clickonPopupButton`, simulates a click on a popup button with the specified name. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression for the button based on its name and the class of the modal footer.\n2. Waits up to 10 seconds for the element to be present using `waitForElement`.\n3. Checks if the element is displayed within 3 seconds using `isElementDisplayed`. If it's not, the method fails with a test step failure message.\n4. If the element is displayed, simulates a click on it using `clickOn`.\n5. Waits for the page to load completely after clicking the button using `waitForPageToLoad`.\n\nIf any of these steps fail (e.g., if the button is not present or cannot be clicked), the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnOppurtunityNameLink",
        "code": "public String clickOnOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=//span[text()='Opportunities']//ancestor::div//following-sibling::div/table/tbody/tr/td/a[starts-with(text(),'B')]\";\n\t\t\twaitForElement(oppurtunity, 15);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, named `clickOnOppurtunityNameLink`, simulates a click on an HTML element with the XPath expression specified. The method attempts to find the element, wait for it to be displayed, and then scroll to and click on it if it is present within the given time limits (15 seconds for finding the element and 5 seconds for displaying). If the element is not found or is not displayed after the given time limits, the test fails. The method returns the text value of the clicked element.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[contains(text(),'\" + value + \"')]\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tscrollToElement(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, is used to select a specific value from a dropdown list within an IMPSS popup. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nThe method first constructs an XPath expression to locate the dropdown element based on its name. It then waits for the dropdown to appear, scrolls to it if necessary, and clicks on it to open the dropdown list.\n\nOnce the dropdown list is open, the method locates the specific value using another XPath expression and waits for it to appear. If the value is found, it scrolls to it and clicks on it to select it. The method then reports whether the selection was successful or not through test step passing or failing.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAutoPopulatedValueInInstaHeader",
        "code": "public void verifyAutoPopulatedValueInInstaHeader(String Label, String Value) {\n\t\tString labelElement = Label+ \"#xpath=//span[text()='\"+Label+\"']/ancestor::button//..//..//..//div//b\";\n \n\t\ttry {\n\t\t\twaitForElement(labelElement, 20);\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(labelElement);\n\t\t\t\tString text = getText(labelElement);\n\t\t\t\tif (text.equalsIgnoreCase(Value)) {\n\t\t\t\t\thighLighterMethod(labelElement);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + Value + \" is reflected in \" + Label + \" field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not reflected in \" + Label + \" field. Instead of we get \" + text);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAutoPopulatedValueInInstaHeader`, is used to verify that an auto-populated value in a specific label field matches the expected value. \n\nThe method takes two string parameters: `Label` and `Value`. It first constructs an XPath expression based on the provided `Label` to locate the corresponding label element.\n\nIt then waits for the element to be displayed, scrolls to the element if necessary, and retrieves the text of the element. If the retrieved text matches the expected `Value`, it highlights the element and takes a manual screenshot as proof of successful verification. \n\nIf the retrieved text does not match the expected `Value`, it marks the test step as failed. In case of any exception during the process, it also marks the test step as failed with an error message containing the exception details.",
        "input": [
            "String Label",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCallCustomerButton",
        "code": "public void clickOnCallCustomerButton(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString button = buttonLabel\n\t\t\t\t\t+ \"#xpath=//span[text()='NSDL PAN Validation']/ancestor::div[contains(@class,'summary')]/following-sibling::div//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Exception: \" + e.getClass());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCallCustomerButton`, simulates a click on a button with the specified label (`buttonLabel`) in a web application. The method:\n\n1. Waits for 3 seconds using the `waitTime` method.\n2. Creates an XPath expression to locate the button with the given label and its parent elements.\n3. Waits up to 10 seconds for the button to be displayed using the `waitForElement` method.\n4. Scrolls the button into view using the `scrollbycordinates` method.\n5. Checks if the button is displayed after a certain load time (`elementLoadWaitTime`) using the `isElementDisplayed` method.\n6. If the button is displayed, highlights it using the `highLighterMethod`, clicks on it using the `clickOnSpecialElement`, and logs a test step pass with the button label.\n7. If the button is not displayed, logs a test step failure with an error message indicating that the button is not present.\n8. Catches any exceptions that occur during execution and logs a test step failure with the exception class.\n\nIn summary, this method automates clicking on a specific button in a web application, handling potential delays and errors along the way.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonbankpopbutton",
        "code": "public void clickonbankpopbutton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@class='c-container']/following::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tscrollToWebElement(button);\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tscrollToElement(button);\n\t\t\t\t// Actions action = new Actions(driver);\n\t\t\t\t// action.click(findWebElement(button)).build().perform();\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `clickonbankpopbutton`, simulates a mouse click on a specific button with the given name within 30 seconds. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression to locate the button based on its text and class.\n2. Waits for the element to be displayed using `waitForElement`.\n3. Scrolls the button into view using `scrollToWebElement`.\n4. Scrolls the button into view again if it's not already visible.\n5. Checks if the button is displayed using `isElementDisplayed`. If it is, it simulates a click on the button using `clickOnSpecialElement` (which is likely a custom method).\n6. If the button is not displayed, takes a manual screenshot with a failure message.\n\nIf any exceptions occur during these steps, it catches them and logs an error message using `testStepFailed`.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String linkName) {\n\t\ttry {\n\t\t\tboolean loopFlag = false;\n\t\t\twaitTime(6);\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//button[text()='\" + linkName + \"']\";\n\t\t\tString link1 = linkName + \"#xpath=//a[@title='\" + linkName + \"']\";\n\t\t\tif (linkName.contains(\"Generate DO\") || linkName.contains(\"DO EDIT\")) {\n\t\t\t\tdo {\n\t\t\t\t\tif (isElementDisplayed(link, 4)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(10);\n\t\t\t\t\t}\n\t\t\t\t} while (loopFlag);\n\t\t\t}\n\t\t\twaitForElement(link, 14);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(5);\n\t\t\t\tif (linkName.contains(\"Generate DO\")) {\n\t\t\t\t\twaitTime(10);\n\t\t\t\t} else if (linkName.contains(\"DO EDIT\")) {\n\t\t\t\t}\n\t\t\t} else if (isElementPresent(link1)) {\n\t\t\t\tscrollToWebElement(link1);\n\t\t\t\thighLighterMethod(link1);\n\t\t\t\tclickOnSpecialElement(link1);\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLink`, attempts to click on a link with the given name (`linkName`) using various methods and wait times. The method first waits for 6 seconds, then checks if the page has loaded. It then constructs two different XPath expressions based on the link name: one for a button element and another for an anchor (`a`) tag.\n\nIf the link name contains specific strings (\"Generate DO\" or \"DO EDIT\"), it will repeatedly refresh the page and wait for 10 seconds until the element is displayed, then break out of the loop. It will then wait for 14 seconds before attempting to click on the link.\n\nThe method will attempt to click on either the button or anchor tag depending on which one is present. If neither is found, it will fail the test step with an error message. The method also includes various utility methods like `waitTime`, `waitForPageToLoad`, `scrollToWebElement`, `highLighterMethod`, and `clickOnSpecialElement` that are not shown in this snippet.\n\nThe method catches any exceptions that may occur during its execution and reports them as test step failures.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdownInDoEditDetailsPopup",
        "code": "public void selectValueFromDropdownInDoEditDetailsPopup(String dropdownName, String value, String number,\n\t\t\tString numbers) {\n\t\ttry {\n\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName + \"']//..//span)[\" + number\n\t\t\t\t\t+ \"]\";\n\t\t\twaitForElement(dropdown, 15);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=(//span[text()='\" + value + \"'])[\" + numbers + \"]\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInDoEditDetailsPopup`, is used to select a specific value from a dropdown list within a popup window. It takes four parameters: the name of the dropdown, the desired value to be selected, and two numbers.\n\nThe method first waits for the page to load, then it waits for the specified dropdown element to appear on the page. If the dropdown is present, it then attempts to select the desired value by clicking on the dropdown and then clicking on the value within the list. It does this twice, with a one-second wait in between each iteration.\n\nIf the value is successfully selected, the method takes a manual screenshot as proof of success. However, if the value is not present in the dropdown or the dropdown itself is not present, the method fails the test step and provides an error message.\n\nThe method also includes some error handling to catch any exceptions that may occur during its execution. If an exception occurs, it will fail the test step with a message indicating what went wrong.",
        "input": [
            "String dropdownName",
            "String value",
            "String number",
            "String numbers"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInFieldDoEditDetailsNumber",
        "code": "public void enterValueInFieldDoEditDetailsNumber(String labelName, String value, String number) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString field = labelName + \"#xpath=(//label[text()='\" + labelName + \"']//..//div/input)[\" + number + \"]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\twaitTime(1);\n\t\t\t\tmanualScreenshot(\"Enter\" + value + \"in\" + labelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldDoEditDetailsNumber`, enters a given value into an edit field with a specific label name and number. It uses WebDriverWait to ensure the element is present and visible before attempting to interact with it. The method also takes manual screenshots of the process for testing purposes.\n\nHere's a breakdown of what the method does:\n\n1. Waits for 2 seconds using `waitTime(2)`.\n2. Creates an XPath expression to locate the edit field based on the provided label name and number.\n3. Waits up to 10 seconds for the element to be present using `waitForElement(field, 10)`.\n4. Checks if the element is displayed within 3 seconds using `isElementDisplayed(field, 3)`. If it is not displayed, the method fails with a test step failure message.\n5. Scrolls the element into view using `scrollToWebElement(field)`.\n6. Enters the given value into the edit field using `typeIn(field, value)`.\n7. Waits for 1 second before taking a manual screenshot of the process using `manualScreenshot(\"Enter\" + value + \"in\" + labelName)`.\n8. If any exceptions occur during execution, the method catches them and fails with a test step failure message.\n\nThis method appears to be part of an automation framework designed for testing web applications.",
        "input": [
            "String labelName",
            "String value",
            "String number"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyCurrentStageOfOpportunityMaster",
        "code": "public String verifyCurrentStageOfOpportunityMaster() {\n\t\tString stageValue = null;\n\t\ttry {\n\t\t\twaitForElement(currentStage_Opp, 5);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 6)) {\n\t\t\t\tstageValue = getText(currentStage_Opp);\n\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn stageValue;\n\t}",
        "description": "This Java method, `verifyCurrentStageOfOpportunityMaster`, is used to verify the current stage of an opportunity master. It waits for a specific element (identified by `currentStage_Opp`) to be displayed, then checks if the element is actually displayed and retrieves its text value. If the element is displayed, it takes a manual screenshot with the stage value as part of the filename. If not, it fails the test step. The method also catches any exceptions that may occur during execution and reports them as test failures. Finally, it returns the retrieved stage value.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndPrintErrorGenerateDOWithoutFail",
        "code": "public boolean verifyAndPrintErrorGenerateDOWithoutFail(String expectedValidation) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString error = \"Error Header#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(error, 8)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString error_Msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (error_Msg.contains(expectedValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + error_Msg);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not get fired. Instead of we got : \" + error_Msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected validation message is not fired.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorGenerateDOWithoutFail`, verifies if a specific error message is displayed on the UI and takes a screenshot of it. It also checks if the expected validation message is contained within the error message. If the expected validation message is found, the method will take a screenshot and break out of the loop. If not, it will mark the test step as failed. The method returns a boolean value indicating whether the verification was successful or not.",
        "input": [
            "String expectedValidation"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyFieldEnabledOrDisabled",
        "code": "public String verifyFieldEnabledOrDisabled(String labelName, String Field) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//div[text()='\" + labelName + \"']//..//div/input[@disabled]\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (Field.equals(\"Disabled\")) {\n\t\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tmanualScreenshot(\"[\" + labelName + \"] field is disabled\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is editable\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Field.equals(\"enable\")) {\n\t\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\ttestStepFailed(labelName + \" field is disabled\");\n\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelName + \" field is editable\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ATOSStatus\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyFieldEnabledOrDisabled`, verifies the enabled or disabled status of a field based on its label name and the expected state (\"Disabled\" or \"enable\"). \n\nIt uses Selenium WebDriver to interact with the web element. The method:\n\n1. Creates an XPath expression for the field based on the label name.\n2. Waits up to 20 seconds for the element to be displayed.\n3. If the field is expected to be disabled, it checks if the element is displayed and takes a screenshot if it's not. If the field is editable (i.e., not disabled), it fails the test step.\n4. If the field is expected to be enabled, it does the opposite: checks if the element is displayed and highlights it if it's not; otherwise, it takes a screenshot.\n\nThe method returns no value (`String value = null;`) as its primary purpose is to verify the state of the field rather than return any specific information. It catches any exceptions that may occur during execution and fails the test step with an error message if one occurs.",
        "input": [
            "String labelName",
            "String Field"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getsublink",
        "code": "public void getsublink(String SubLink) {\n\t\ttry {\n\t\t\tString link = SubLink + \"#xpath=//label[text()='\" + SubLink + \"'] | //div[text()='\" + SubLink + \"']| //span[text()='\" + SubLink + \"']\";\n\t\t\tString link1 = SubLink + \"#xpath=//span[contains(text(),'\" + SubLink\n\t\t\t\t\t+ \"')]//ancestor::a|//span[contains(text(),'\" + SubLink + \"')]//ancestor::button\";\n\t\t\tif (isElementDisplayed(link, 25)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else if (isElementDisplayed(link1, 15)) {\n\t\t\t\tclickOnSpecialElement(link1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getsublink\" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`getSubLink(String SubLink)` attempts to click on an element with the specified `SubLink` text. It uses Selenium's XPath syntax to construct two possible link paths: one for a label, div, or span containing the `SubLink` text, and another for a span containing the `SubLink` text and its ancestor elements (either an anchor tag `<a>` or a button). If either of these links is displayed within a certain time limit (25 seconds), it will be clicked using the `clickOnSpecialElement` method. If neither link is found, the test step fails with an error message. The method also catches any exceptions that may occur during execution and reports them as a test failure.",
        "input": [
            "String SubLink"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyClubNotAllowedTag",
        "code": "public void VerifyClubNotAllowedTag(String OfferName) {\n\t\ttry {\n\t\t\tString element = OfferName + \"#xpath=//div[text()='\" + OfferName\n\t\t\t\t\t+ \"']/following-sibling::div[text()='club not allowed']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\tif (isElementDisplayed(element, 25)) {\n\t\t\t\thighLighterMethod(element);\n\t\t\t\tmanualScreenshot(\"Club not allowed tag is visible against \" + OfferName + \" Offer\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Club not allowed tag is not visible against \" + OfferName + \" Offer\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyClubNotAllowedTag\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyClubNotAllowedTag`, verifies whether the \"club not allowed\" tag is displayed for a given offer name. It uses an XPath expression to locate the element and then checks if it's displayed within 25 seconds. If the element is found, it takes a manual screenshot and highlights the element. If the element is not found or there's an exception, the method fails the test step. The method accepts a `String` parameter, `OfferName`, which represents the name of the offer being verified.",
        "input": [
            "String OfferName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyPromoCodeRequiredTag",
        "code": "public void VerifyPromoCodeRequiredTag(String OfferName) {\n\t\ttry {\n\t\t\tString element = OfferName + \"#xpath=//div[text()='\" + OfferName\n\t\t\t\t\t+ \"']/following-sibling::div[text()='Promo Code Required']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\tif (isElementDisplayed(element, 25)) {\n\t\t\t\thighLighterMethod(element);\n\t\t\t\tmanualScreenshot(\"Promo Code Required tag is visible against \" + OfferName + \" Offer\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Promo Code Required tag is not visible against \" + OfferName + \" Offer\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyClubNotAllowedTag\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyPromoCodeRequiredTag`, verifies whether the \"Promo Code Required\" tag is displayed for a given offer name. \n\nThe method takes an `OfferName` as input and uses it to construct an XPath expression that locates the required tag. It then checks if the element is displayed within 25 seconds using the `isElementDisplayed` method. If the element is displayed, it highlights the element using the `highLighterMethod`, takes a manual screenshot with the message \"Promo Code Required tag is visible against <OfferName> Offer\", and considers the test step as passed. \n\nIf the element is not displayed, or if an exception occurs during the execution of this method, the test step fails with an appropriate error message.",
        "input": [
            "String OfferName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyClubNotAllowedTagIsNotPresent",
        "code": "public void VerifyClubNotAllowedTagIsNotPresent(String OfferName) {\n\t\ttry {\n\t\t\tString element = OfferName + \"#xpath=//div[text()='\" + OfferName\n\t\t\t\t\t+ \"']/following-sibling::div[text()='club not allowed']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\tif (isElementDisplayed(element, 15)) {\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\tscrollbycordinates(element);\n\t\t\t\thighLighterMethod(element);\n\t\t\t\ttestStepFailed(\"Club not allowed tag is visible against \" + OfferName + \" Offer\");\n\t\t\t} else {\n\t\t\t\tString tag = OfferName + \"#xpath=//div[text()='\"+OfferName+\"']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\t\tscrollToWebElement(tag);\n\t\t\t\tscrollbycordinates(tag);\n\t\t\t\thighLighterMethod(tag);\n\t\t\t\tmanualScreenshot(\"Club not allowed tag is not visible against \" + OfferName + \" Offer\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyClubNotAllowedTagIsNotPresent\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyClubNotAllowedTagIsNotPresent`, is used to verify that a specific tag (\"club not allowed\") is either present or not present for a given offer name. The method takes an `OfferName` as input and attempts to locate the tag using XPath expressions.\n\nIf the tag is found within 15 seconds, the method will scroll to the element, highlight it, and then mark the test step as failed since the \"club not allowed\" tag should not be present for that offer. If the tag is not found, the method will still scroll to the offer's element, highlight it, and take a manual screenshot to capture the result.\n\nIf any exceptions occur during the execution of this method, the test step will fail with an error message indicating the failure in the `VerifyClubNotAllowedTagIsNotPresent` method.",
        "input": [
            "String OfferName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyPromoCodeRequiredTagIsNotPresent",
        "code": "public void VerifyPromoCodeRequiredTagIsNotPresent(String OfferName) {\n\t\ttry {\n\t\t\tString element = OfferName + \"#xpath=//div[text()='\" + OfferName\n\t\t\t\t\t+ \"']/following-sibling::div[text()='Promo Code Required']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\tif (isElementDisplayed(element, 25)) {\n\t\t\t\thighLighterMethod(element);\n\t\t\t\ttestStepFailed(\"Promo Code Required tag is visible against \" + OfferName + \" Offer\");\n\t\t\t} else {\n\t\t\t\tString tag = OfferName + \"#xpath=//div[text()='\"+OfferName+\"']/ancestor::div[@class='slds-col offer-box']\";\n\t\t\t\thighLighterMethod(tag);\n\t\t\t\tmanualScreenshot(\"Promo Code Required tag is not visible against \" + OfferName + \" Offer\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyClubNotAllowedTagIsNotPresent\" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method verifies that the \"Promo Code Required\" tag is not present for a given offer named `OfferName`. It uses XPath expressions to locate the relevant HTML elements and checks if the tag is displayed. If it is, the method highlights the element, reports a test failure, and takes a manual screenshot. If the tag is not displayed, it still takes a manual screenshot but does not report a test failure. The method also catches any exceptions that may occur during execution.",
        "input": [
            "String OfferName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getColourOfText",
        "code": "public void getColourOfText(String Xpath, String label) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(Xpath, 25)) {\n\t\t\t\tWebElement element = findWebElement(Xpath);\n\t\t\t\tString color = element.getCssValue(\"color\");\n\t\t\t\tmanualScreenshot(\"The color of the [ \" + label + \" ] text is : \" + color);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getColourOfText\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getColourOfText`, retrieves the color of a specific text element on a web page. It takes two input parameters: an XPath expression and a label for the text element.\n\nHere's what the method does:\n\n1. It checks if the element specified by the XPath is displayed using the `isElementDisplayed` method.\n2. If the element is displayed, it uses the XPath to find the corresponding web element using the `findWebElement` method.\n3. It then retrieves the color of the text element using its CSS property \"color\" and stores it in a string variable named `color`.\n4. The method takes a manual screenshot with a caption that includes the label and the retrieved color.\n5. If the element is not displayed, it fails the test step with an error message indicating that the element is not present.\n6. If any exception occurs during the execution of the method, it catches the exception and fails the test step with an error message containing the exception's message.\n\nIn summary, this method helps in verifying the color of a specific text element on a web page by taking a manual screenshot and reporting the result.",
        "input": [
            "String Xpath",
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getBackgroundColourOfText",
        "code": "public void getBackgroundColourOfText(String Xpath, String label) {\n\t\ttry {\n\t\t\tif (isElementDisplayed(Xpath, 25)) {\n\t\t\t\tWebElement element = findWebElement(Xpath);\n\t\t\t\tString color = element.getCssValue(\"background-color\");\n\t\t\t\tmanualScreenshot(\"The background-color of the [ \" + label + \" ] is : \" + color);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getColourOfText\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getBackgroundColourOfText`, takes two input parameters: `Xpath` and `label`. It attempts to retrieve the background color of an element located by the provided XPath. \n\nHere's a step-by-step breakdown:\n\n1. It checks if the element is displayed using the `isElementDisplayed` method with a timeout of 25 seconds.\n2. If the element is displayed, it finds the WebElement using the `findWebElement` method and then gets its background color using the `getCssValue` method.\n3. It takes a manual screenshot with a comment indicating the background color of the specified label.\n4. If the element is not displayed, it marks the test step as failed with an error message including the label.\n5. The method also includes try-catch block to handle any exceptions that might occur during execution. If an exception occurs, it marks the test step as failed with an error message including the exception's message.",
        "input": [
            "String Xpath",
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnOfferRadioButton",
        "code": "public void clickOnOfferRadioButton(String button) {\n\t\ttry {\n\t\t\tString Button = \"#xpath=//span[text()='\"+button+\"']/preceding-sibling::input\";\n\t\t\twaitForElement(Button, 30);\n\t\t\tif (isElementDisplayed(Button, 5)) {\n\t\t\t\tclickOnSpecialElement(Button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(button + \" radio button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOfferRadioButton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOfferRadioButton`, attempts to click on a specific radio button with the given label (`button`) on an offer page. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the radio button based on its text content.\n2. It waits for up to 30 seconds for the element to be present and visible (using `waitForElement`).\n3. If the element is displayed within a 5-second time frame, it clicks on the radio button using `clickOnSpecialElement`.\n4. If the element is not displayed or takes longer than expected to appear, it marks the test step as failed with an error message.\n\nIf any exception occurs during this process (e.g., if the element cannot be found), it catches the exception and marks the test step as failed with a more detailed error message.",
        "input": [
            "String button"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckBoxInOffer",
        "code": "public boolean selectOrDeselectCheckBoxInOffer(String labelname, String status) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString checkBox = labelname+\" Checkbox\"+\"#xpath=//div[text()='\"+labelname+\"']/ancestor::div[@class='slds-col offer-box']/preceding-sibling::div//input[@type='checkbox']\";\n\t         waitForElement(checkBox, 6);\n\t\t\t scrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to True\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already True\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to False\");\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tscrollbycordinates(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already False\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInOffer`, is used to select or deselect a checkbox in an offer section based on the provided label name and status.\n\nThe method takes two parameters:\n\n* `labelname`: The label name of the checkbox to be selected or deselected.\n* `status`: A string indicating whether the checkbox should be checked (\"check\") or unchecked (\"uncheck\").\n\nThe method first constructs a unique XPath for the checkbox based on the provided label name. It then uses this XPath to locate the checkbox, scroll to it if necessary, and select or deselect it accordingly.\n\nIf the status is \"check\", the method checks if the checkbox is not already selected, and if not, selects it. If the status is \"uncheck\", the method checks if the checkbox is currently selected, and if so, deselects it.\n\nThe method also includes error handling to catch any exceptions that may occur during execution, and logs information about the outcome of the operation.\n\nFinally, the method returns a boolean flag (which is always `false` in this implementation), indicating whether the operation was successful or not.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "CheckOrUnCheckOfferButton",
        "code": "public void CheckOrUnCheckOfferButton(String button) {\n\t\ttry {\n\t\t\tString Button = button+\" Checkbox\"+\"#xpath=//div[text()='\"+button+\"']/ancestor::div[@class='slds-col offer-box']/preceding-sibling::div//input[@type='checkbox']\";\n\t\t\twaitForElement(Button, 30);\n\t\t\tif (isElementDisplayed(Button, 5)) {\n\t\t\t\tclickOnSpecialElement(Button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(button + \" radio button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOfferRadioButton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `CheckOrUnCheckOfferButton`, takes a string parameter `button` and performs the following actions:\n\n1. It constructs an XPath expression based on the input `button` value to locate a specific checkbox element.\n2. It waits for the element to be present using the `waitForElement` method with a timeout of 30 seconds.\n3. If the element is displayed, it clicks on the checkbox using the `clickOnSpecialElement` method.\n4. If the element is not displayed, it fails the test step with an error message indicating that the radio button is not present.\n\nThe method also catches any exceptions that may occur during execution and reports a failure with a generic error message if an exception occurs.",
        "input": [
            "String button"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getErrorTextInDOStage",
        "code": "public boolean getErrorTextInDOStage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above error,cannot proceed further\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getErrorTextInDOStage\" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `getErrorTextInDOStage`, checks if an element with a specific XPath is displayed on the page. If it is, it retrieves the text content of the element and takes manual screenshots for each error message found. If no errors are present, it takes a screenshot indicating that there were no errors. The method also logs test step failures if any exceptions occur during execution or if an error is detected. The method returns a boolean value indicating whether an error was found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckBoxInBank",
        "code": "public void selectOrDeselectCheckBoxInBank(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = \"#xpath=//span[text()='\" + labelname + \"']/..//../input\";\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInBank`, is used to select or deselect a checkbox in a banking application based on the provided label name and status (either \"check\" or \"uncheck\"). \n\nThe method first constructs an XPath string to locate the checkbox element using the given label name. It then scrolls to this element if necessary, and checks its current status.\n\nIf the status is \"check\", it will check the box if it's not already checked; if the status is \"uncheck\", it will uncheck the box if it's currently checked. \n\nIn either case, it logs a test step message indicating whether the operation was successful or not. If an exception occurs during the process, it writes the error to a log file and marks the test step as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "workAroundForBankNameField",
        "code": "public void workAroundForBankNameField() {\n\t\ttry {\n\t\t\ttestStepInfo(\"****** Workaround for Freezed Bank name field ******\");\n\t\t\twaitTime(6);\n\t\t\tString Field = \"#xpath=//label[text()='Bank Name']/following-sibling::div//input[@name='searchText' and @disabled]\";\n\t\t\tif (isElementDisplayed(Field, 10)) {\n\t\t\t\tclickonbankpopbutton(\"Edit\");\n\t\t\t\tselectOrDeselectCheckBoxInBank(\"Change ECS\", \"check\");\n\t\t\t\tselectOrDeselectCheckBoxInBank(\"Change ECS\", \"uncheck\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, `workAroundForBankNameField()`, is used to work around an issue where the \"Bank Name\" field becomes frozen and unresponsive. The method attempts to resolve this by performing a series of actions:\n\n1. It logs a test step information message indicating that it's working around the frozen bank name field.\n2. It waits for 6 seconds to allow any previous operations to complete.\n3. It checks if an XPath-based element (the \"Bank Name\" field) is displayed within 10 seconds. If it is, the method proceeds to:\n\t* Click on the \"Edit\" button.\n\t* Select or deselect a checkbox labeled \"Change ECS\".\n\t* Repeat step 2 to toggle the checkbox.\n\nThe method catches any exceptions that may occur during these operations and prints the error message to the console.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityDOStage",
        "code": "public void opportunityDOStage(String InitiateBankingDetailsFlag, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel, String bankAccounttypeValue,\n\t\t\tString initiateIMPSLabel, String saveBankDetails, String GenerateDOLabel) {\n\t\ttry {\n\t\t\tworkAroundForBankNameField();\n\t\t\ttestStepInfo(\"[ Update Banking details ]\");\n\t\t\tgetsublink(\"Banking-IMPS Validation\");\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!url.contains(\"preprod\")) {\n\t\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\t\t\t}\n\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTime(50);\n\t\t\t\twaitTillSpinnerDisappear();\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t}\n\t\t\twaitTime(5);\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\ttestStepInfo(\"[ Complete NSDL PAN Validation  ]\");\n\t\t\tgetsublink(\"NSDL PAN Validation\");\n\t\t\tselectValueFromDropdownInIMPSPopup(\"NSDL Document Type\", \"Form60\");\n\t\t\tclickonbankpopbutton(\"Submit\");\n\t\t\twaitTime(3);\n\t\t\ttestStepInfo(\"Do Preparation Stage\");\n\t\t\tclickOnLink(GenerateDOLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tflag = getErrorTextInDOStage();\n\t\t\tif (flag) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityDOStage`, appears to be a part of an automation testing framework for a banking or financial application. The method is designed to perform various actions related to updating banking details and initiating the Do Preparation Stage (DOL) in the system.\n\nHere's a brief summary of what the method does:\n\n1. It attempts to work around a specific issue with the bank name field.\n2. It logs a test step information message indicating that it is updating banking details.\n3. It navigates to a sub-link called \"Banking-IMPS Validation\".\n4. It enters values in various fields, such as the bank account number and type, using methods like `enterValueInLookUPFieldInIMPSPopup` and `selectValueFromDropdownInIMPSPopup`.\n5. If the `InitiateBankingDetailsFlag` is set to \"Yes\", it initiates the IMPS (Immediate Payment Service) process by clicking a button.\n6. It waits for certain actions to complete, such as the spinner to disappear.\n7. It saves the banking details by clicking on a pop-up button.\n8. It performs an NSDL PAN validation by selecting a document type and submitting it.\n9. It initiates the Do Preparation Stage (DOL) by clicking a link.\n10. It waits for the DOL stage to complete and then checks if there are any errors.\n\nIf an error is encountered during the execution of this method, it logs a test step failure message with the corresponding exception message.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails",
            "String GenerateDOLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityDOStageForPANNSDL",
        "code": "public void opportunityDOStageForPANNSDL(String InitiateBankingDetailsFlag, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel, String bankAccounttypeValue,\n\t\t\tString initiateIMPSLabel, String saveBankDetails, String GenerateDOLabel) {\n\t\ttry {\n\t\t\tworkAroundForBankNameField();\n\t\t\ttestStepInfo(\"############### Update Banking details  ###############\");\n\t\t\ttestStepInfo(\"Initiate Banking IMPS\");\n\t\t\tString url=driver.getCurrentUrl();\n\t\t\tif(url.contains(\"preprod\")) {\n\t\t\tgetsublink(\"Banking-IMPS Validation\");\n\t\t\t}\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\n\t\t\turl = driver.getCurrentUrl();\n\t\t\tif (!url.contains(\"preprod\")) {\n\t\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\t\t\t}\n\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTillSpinnerDisappear();\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t}\n\t\t\twaitTime(5);\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\ttestStepInfo(\"############### Complete NSDL PAN Validation  ###############\");\n\t\t\tgetsublink(\"NSDL PAN Validation\");\n\t\t\tselectValueFromDropdownInIMPSPopup(\"NSDL Document Type\", \"PAN\");\n\t\t\tclickonbankpopbutton(\"Submit\");\n\t\t\twaitTime(3);\n\t\t\ttestStepInfo(\"Do Preparation Stage\");\n\t\t\tclickOnLink(GenerateDOLabel);\n\t\t\twaitTillSpinnerDisappear();\n\t\t\tflag = getErrorTextInDOStage();\n\t\t\tif (flag) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\twaitTillSpinnerDisappear();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `opportunityDOStageForPANNSDL` that appears to be part of an automation test script. The method performs the following tasks:\n\n1. Calls another method `workAroundForBankNameField()` to handle some bank name field-related workarounds.\n2. Logs test step information for updating banking details and initiating IMPS (Immediate Payment Service).\n3. Verifies if the current URL contains \"preprod\" and, if so, navigates to a sub-link called \"Banking-IMPS Validation\".\n4. Enters values in various fields in an IMPs popup window:\n\t* Bank name\n\t* Account number\n\t* Re-enter account number (twice)\n\t* Account type\n5. Selects a value from a dropdown list in the IMPs popup window.\n6. Initiates IMPS if the `InitiateBankingDetailsFlag` is \"Yes\", waits for the spinner to disappear, and then saves the banking details.\n7. Logs test step information for completing NSDL PAN validation and selects the PAN document type.\n8. Submits the NSDL validation form and waits for 3 seconds.\n9. Performs a preparation stage by clicking on a link labeled `GenerateDOLabel`.\n10. Waits for the spinner to disappear, checks for any errors in the DO stage, and returns if an error is found.\n\nThe method also catches any exceptions that may occur during its execution and logs an error message with the exception's message.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails",
            "String GenerateDOLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCustomerNameInOppPage",
        "code": "public void clickOnCustomerNameInOppPage() {\n\t\ttry {\n\t\t\tString customerNameLink = \"Customer Name#xpath=//span[@title='Customer']//following-sibling::div//a\";\n\t\t\twaitForElement(customerNameLink, 30);\n\t\t\tif (isElementDisplayed(customerNameLink, 3)) {\n\t\t\t\tscrollToWebElement(customerNameLink);\n\t\t\t\tmanualScreenshot(\"Customer Name: \" + getText(customerNameLink));\n\t\t\t\tclickOn(customerNameLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Customer Name hyperlink is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCustomerNameInOppPage. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerNameInOppPage`, attempts to click on a hyperlink with the customer name in an opposing page. It waits for the element to be displayed and then scrolls to it if necessary. If the element is not present, it fails the test step. The method also takes a manual screenshot of the customer name before clicking on it.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPostDOStageDocumentLibWithoutPOA",
        "code": "public void opportunityPostDOStageDocumentLibWithoutPOA(String DocumentlibLabel, String CustomerPhotoLabel,\n\t\t\tString ECSLabel, String LTSLabel, String InvoiceLabel, String applicationFormLabel,\n\t\t\tString cancelledchequeLabel, String poiImageLabel, String uploadCustomerPhoto, String saveButtonLabel) {\n\t\ttry {\n\n\t\t\tclickOnLink(DocumentlibLabel);\n\t\t\twaitTime(2);\n\t\t\tString[] arr = { CustomerPhotoLabel, ECSLabel, LTSLabel, InvoiceLabel, \"Opp Application Form\",\n\t\t\t\t\tcancelledchequeLabel, poiImageLabel, \"PAN/Form60\",\"POA\" };\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\twaitTime(2);\n\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\tclickOnButton(saveButtonLabel);\n\t\t\twaitTime(3);\n\t\t\tverifyErrorIMPSPopupMessage();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityPostDOStageDocumentLibWithoutPOA`, appears to be a part of an automation test script for a web application. The method performs the following actions:\n\n1. Clicks on a link with the specified label (`DocumentlibLabel`).\n2. Waits for 2 seconds.\n3. Iterates through an array of labels and selects or deselects checkboxes under the \"Document Lib\" section, printing each label to the console.\n4. Uploads a customer photo using the `documentToUpload` method (not shown in this code snippet).\n5. Clicks on a button with the specified label (`saveButtonLabel`).\n6. Waits for 3 seconds.\n7. Verifies an error message popup is displayed using the `verifyErrorIMPSPopupMessage` method (not shown in this code snippet).\n\nIf any exception occurs during these actions, the method catches it and reports a test step failure with the exception message.",
        "input": [
            "String DocumentlibLabel",
            "String CustomerPhotoLabel",
            "String ECSLabel",
            "String LTSLabel",
            "String InvoiceLabel",
            "String applicationFormLabel",
            "String cancelledchequeLabel",
            "String poiImageLabel",
            "String uploadCustomerPhoto",
            "String saveButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnSave",
        "code": "public void clickOnSave(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']|//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSave`, attempts to click on a button with the specified name. It uses Selenium WebDriver to perform the following actions:\n\n1. Creates an XPath expression to locate the button based on its text.\n2. Waits for the element to be visible (up to 15 seconds).\n3. Scrolls the element into view using `scrollbycordinates`.\n4. Checks if the element is displayed within a timeout of 5 seconds. If it is, it:\n\t* Highlights the element using `highLighterMethod`.\n\t* Clicks on the element using `clickOn`.\n5. If the element is not present or any exception occurs during these steps, it fails the test step with an error message.\n\nThe method uses try-catch blocks to handle any exceptions that may occur during execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPostDOStageDocumentLib",
        "code": "public void opportunityPostDOStageDocumentLib(String DocumentlibLabel, String CustomerPhotoLabel, String ECSLabel,\n\t\t\tString LTSLabel, String InvoiceLabel, String applicationFormLabel, String cancelledchequeLabel,\n\t\t\tString poiImageLabel, String poaImageLabel, String uploadCustomerPhoto, String saveButtonLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"############### Upload Documents in Document Lib  ###############\");\n\n\t\t\tclickOnSave(DocumentlibLabel);\n\t\t\twaitTime(2);\n\n\n\t\t\tString[] arr = {ECSLabel, LTSLabel, InvoiceLabel, applicationFormLabel,\n\t\t\t\t\tcancelledchequeLabel,  \"PAN/Form60\",CustomerPhotoLabel,poiImageLabel ,poaImageLabel,\"Key Fact Statement\"};\n//,\"Delivery POA\"\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\twaitTime(2);\n\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\tclickOnButton(saveButtonLabel);\n\t\t\twaitTime(3);\n\t\t\tflag = verifyErrorIMPSPopupMessage();\n\t\t\tif (flag) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityPostDOStageDocumentLib`, is used to upload various documents in a Document Library for an opportunity. The method takes nine input parameters: labels for different document types and buttons.\n\nHere's what the method does:\n\n1. It logs a test step message indicating that it's uploading documents in the Document Library.\n2. It clicks on the \"Save\" button with the given label.\n3. It waits for 2 seconds.\n4. It selects or deselects checkboxes under the Document Library for various document types (ECS, LTS, Invoice, application form, cancelled cheque, PAN/Form60, customer photo, POI image, and POA image).\n5. It uploads a customer photo file using the `documentToUpload` method.\n6. It clicks on the \"Save\" button with the given label again.\n7. It waits for 3 seconds.\n8. It verifies if an error message is displayed in the IMPSPopup (a popup used to display error messages). If an error is found, it sets a flag and returns.\n\nThe method catches any exceptions that occur during execution and logs a test step failure message with the exception message.",
        "input": [
            "String DocumentlibLabel",
            "String CustomerPhotoLabel",
            "String ECSLabel",
            "String LTSLabel",
            "String InvoiceLabel",
            "String applicationFormLabel",
            "String cancelledchequeLabel",
            "String poiImageLabel",
            "String poaImageLabel",
            "String uploadCustomerPhoto",
            "String saveButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPostDOStageDocumentLibforETB",
        "code": "public void opportunityPostDOStageDocumentLibforETB(String DocumentlibLabel, String CustomerPhotoLabel, String ECSLabel,\n\t\t\tString LTSLabel, String InvoiceLabel, String applicationFormLabel, String cancelledchequeLabel,\n\t\t\tString poiImageLabel, String poaImageLabel, String uploadCustomerPhoto, String saveButtonLabel) {\n\t\ttry {\n\t\t\ttestStepInfo(\"############### Upload Documents in Document Lib  ###############\");\n\n\t\t\tclickOnSave(DocumentlibLabel);\n\t\t\twaitTime(2);\n\n\n\t\t\tString[] arr = {\"Charge Slip / Cross Sell\", InvoiceLabel, applicationFormLabel,\n\t\t\t\t\tcancelledchequeLabel,  \"PAN/Form60\",CustomerPhotoLabel,poiImageLabel ,poaImageLabel,\"Key Fact Statement\",\"KYC POI\",\"ECS Mandate\"};\n//,\"Delivery POA\"\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\twaitTime(2);;\n\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\tclickOnButton(saveButtonLabel);\n\t\t\twaitTime(3);\n\t\t\tflag = verifyErrorIMPSPopupMessage();\n\t\t\tif (flag) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to upload documents in a Document Library for an ETB (Electronic Trading Business) opportunity. The method takes 12 string parameters: labels for the document library, customer photo, ECS, LTS, invoice, application form, cancelled cheque, POI image, POA image, and save button.\n\nThe method performs the following actions:\n\n1. It logs a test step information message indicating that it is uploading documents in the Document Library.\n2. It clicks on the \"Save\" button with the specified label.\n3. It waits for 2 seconds.\n4. It selects or deselects checkboxes under the Document Library for each of the specified document types (Charge Slip / Cross Sell, Invoice, Application Form, Cancelled Cheque, PAN/Form60, Customer Photo, POI Image, POA Image, Key Fact Statement, KYC POI, ECS Mandate).\n5. It waits again for 2 seconds.\n6. It uploads a customer photo with the specified label.\n7. It clicks on the \"Save\" button with the specified save button label.\n8. It waits for 3 seconds.\n9. If an error message appears in the IMP (Internal Message Processing) popup, it sets a flag to true and returns from the method.\n\nIf any exception occurs during the execution of this method, it logs a test step failure message with the exception message.",
        "input": [
            "String DocumentlibLabel",
            "String CustomerPhotoLabel",
            "String ECSLabel",
            "String LTSLabel",
            "String InvoiceLabel",
            "String applicationFormLabel",
            "String cancelledchequeLabel",
            "String poiImageLabel",
            "String poaImageLabel",
            "String uploadCustomerPhoto",
            "String saveButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPostDOStageDocumentLib",
        "code": "public void opportunityPostDOStageDocumentLib(String DocumentlibLabel, String CustomerPhotoLabel, String ECSLabel,\n\t\t\tString LTSLabel, String InvoiceLabel, String applicationFormLabel, String cancelledchequeLabel,\n\t\t\tString poiImageLabel, String poaImageLabel, String ovdLabel, String uploadCustomerPhoto,\n\t\t\tString saveButtonLabel) {\n\t\ttry {\n\n\t\t\tclickOnLink(DocumentlibLabel);\n\t\t\twaitTime(2);\n\n\t\t\tString[] arr = { CustomerPhotoLabel, ECSLabel, LTSLabel, InvoiceLabel, applicationFormLabel,\n\t\t\t\t\tcancelledchequeLabel, poiImageLabel, poaImageLabel, \"PAN/Form60\", ovdLabel };\n\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\n\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\tclickOnButton(saveButtonLabel);\n\t\t\twaitTime(3);\n\t\t\tflag = verifyErrorIMPSPopupMessage();\n\t\t\tif (flag) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityPostDOStageDocumentLib`, appears to be a part of an automated testing framework. The method performs the following actions:\n\n1. Clicks on a link labeled with the provided `DocumentlibLabel` parameter.\n2. Waits for 2 seconds using the `waitTime(2)` method.\n3. Iterates through an array of strings containing various document labels (e.g., customer photo, ECS, LTS, etc.). For each label:\n\t* Prints the label to the console using `System.out.println`.\n\t* Selects or deselects a checkbox labeled with the current label under the \"Document Lib\" section using the `selectOrDeselectCheckBoxUnderDocumentLib` method.\n4. Uploads a file with the provided `uploadCustomerPhoto` parameter using the `documentToUpload` method.\n5. Clicks on a button labeled with the provided `saveButtonLabel` parameter.\n6. Waits for 3 seconds using the `waitTime(3)` method.\n7. Verifies if an error popup message is displayed using the `verifyErrorIMPSPopupMessage` method, and sets a flag (`flag`) accordingly.\n8. If the flag is set to true, the method returns immediately.\n\nThe method also includes exception handling, which catches any exceptions that occur during its execution. If an exception occurs, the method logs an error message with the provided `testStepFailed` method.",
        "input": [
            "String DocumentlibLabel",
            "String CustomerPhotoLabel",
            "String ECSLabel",
            "String LTSLabel",
            "String InvoiceLabel",
            "String applicationFormLabel",
            "String cancelledchequeLabel",
            "String poiImageLabel",
            "String poaImageLabel",
            "String ovdLabel",
            "String uploadCustomerPhoto",
            "String saveButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityDOStage",
        "code": "public void opportunityDOStage(String InitiateBankingDetailsFlag, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel, String bankAccounttypeValue,\n\t\t\tString initiateIMPSLabel, String saveBankDetails, String GenerateDOLabel, String NSDLDocumentTypeValue) {\n\t\ttry {\n\t\t\twaitTime(7);\n\t\t\ttestStepInfo(\"Initiate Banking IMPS\");\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTime(50);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t}\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\n\t\t\twaitTime(10);\n\n\t\t\tgetsublink(\"NSDL PAN Validation\");\n\t\t\tselectValueFromDropdownInIMPSPopup(\"NSDL Document Type\", NSDLDocumentTypeValue);\n\t\t\tclickonbankpopbutton(\"Submit\");\n\t\t\twaitForPageToLoad();\n\n\t\t\ttestStepInfo(\"Do Preparation Stage\");\n\t\t\tpageScrollUp();\n\t\t\tclickOnLink(GenerateDOLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Opportunity DO Stage\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityDOStage`, is used to perform a series of actions related to initiating an IMPS (Immediate Payment Service) banking transaction. The method takes 11 input parameters:\n\n* Three string parameters for bank name and account details\n* Four boolean/flag parameters: `InitiateBankingDetailsFlag`, `saveBankDetails`, and two unnamed flags\n\nThe method performs the following steps:\n\n1. Waits for 7 seconds.\n2. Logs a test step information message with the label \"Initiate Banking IMPS\".\n3. Enters bank name, account details, and account type into popup fields.\n4. If the `InitiateBankingDetailsFlag` is set to \"Yes\", initiates the IMPS transaction by clicking on a button and waits for 50 seconds.\n5. Saves bank details if required.\n6. Waits for 10 seconds.\n7. Navigates to an NSDL (National Securities Depository Limited) PAN validation sublink.\n8. Selects the document type from a dropdown menu.\n9. Submits the form and waits for the page to load.\n10. Logs a test step information message with the label \"Do Preparation Stage\".\n11. Scrolls up the page and clicks on a link labeled \"Generate DO\".\n\nThe method catches any exceptions that occur during execution and logs an error message if one is thrown.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails",
            "String GenerateDOLabel",
            "String NSDLDocumentTypeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInFieldIMPSBankNumber",
        "code": "public void enterValueInFieldIMPSBankNumber(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tString ele = value\n\t\t\t\t\t\t+ \"#xpath=//span[@class='slds-listbox__option-meta slds-listbox__option-meta_entity'][last()]\";\n\t\t\t\tif (isElementDisplayed(ele, 3)) {\n\t\t\t\t\tdoubleClick(ele);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldIMPSBankNumber`, enters a given value into an input field with the specified label name on an IMPS Bank application. It uses various methods to interact with the UI elements, such as waiting for the element, scrolling to it, highlighting it, typing in the value, and double-clicking the selected option (if applicable). The method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../following-sibling::div//input\";\n\t\t\twaitForElement(field, 45);\n\t\t\tscrollToWebElement(field);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToElement(field);\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, takes two string parameters: `labelName` and `value`. It attempts to:\n\n1. Construct an XPath expression to locate the input field associated with the given `labelName`.\n2. Wait for up to 45 seconds for the element to be present.\n3. Scroll the element into view if it's not already visible.\n4. If a value is provided, attempt to enter that value into the field:\n\t* Check if the element is displayed within 5 seconds.\n\t* If it is, scroll to and type in the value.\n\t* If it's not, mark the test step as failed due to the field being absent.\n\nIf any exceptions occur during this process, the method will catch them and fail the test step with a descriptive message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 6);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDob`, enters a given value into a specific field on a web page. \n\nIt takes two parameters: `labelName` and `value`. The `labelName` is used to construct an XPath expression that identifies the desired field (based on its label text). The `value` parameter is the actual value to be entered into the field.\n\nThe method attempts to:\n\n1. Construct the XPath expression for the field.\n2. Wait for the field to be displayed (up to 6 seconds).\n3. Check if the field is actually displayed (up to 5 seconds).\n4. If the field is present, enter the given value and highlight the entered text.\n5. If the field is not present, report a test step failure.\n\nIf any exception occurs during these steps, it reports another test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//ul[contains(@class,'slds-button')]/following::li//button[text()='Save']\";\n\t\t\twaitForElement(button, 20);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton`, attempts to click on a specific \"Save\" button on a web page. Here's what it does:\n\n1. It defines the XPath locator for the \"Save\" button.\n2. It uses a `waitForElement` method to wait up to 20 seconds for the element to be present.\n3. If the element is displayed within 5 seconds, it clicks on the element using another method called `clickOn`.\n4. After clicking, it waits for the page to load completely using `waitForPageToLoad`.\n5. If the button is not found or an error occurs during any of these steps, it fails the test step and reports an error message.\n\nIn summary, this method is designed to interact with a \"Save\" button on a web page by waiting for its presence, clicking it if it's displayed, and verifying that the page loads successfully.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndPrintErrorMessageInPopup1",
        "code": "public boolean verifyAndPrintErrorMessageInPopup1() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tscrollToElementTillPresent(error);\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\tmanualScreenshot(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopup1`, verifies if an error message is displayed on the page and prints the error messages in a popup. It takes two approaches to achieve this:\n\n1. If the error message is displayed, it scrolls to the error list, retrieves the error messages, and takes manual screenshots of each error.\n2. If no error message is displayed, it marks the test step as failed with a message indicating that there are no errors.\n\nThe method also includes some error handling using try-catch blocks, where if any exception occurs during execution, it will mark the test step as failed with an error message. The method returns a boolean value `flag`, which seems to be set to `false` but is not used anywhere in this specific method.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndPrintErrorMessageInPopup",
        "code": "public boolean verifyAndPrintErrorMessageInPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(10);\n\t\t\tString error = \"Error Header#xpath=//strong[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]//li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing\");\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\ttestStepFailed(\" Due to above errors. We cannot move further.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopup`, verifies if an error message is displayed on the page and takes a screenshot of each error message. If the error messages are found, it also marks the test step as failed due to the errors. The method returns a boolean value indicating whether the error messages were found or not.\n\nHere's a brief summary:\n\n1. Waits for 10 seconds using the `waitTime(10)` method.\n2. Verifies if an error message with the specified XPath is displayed on the page within 2 seconds using the `isElementDisplayed(error, 2)` method.\n3. If the error message is found, it takes a screenshot of each error message in the list using the `manualScreenshot()` method.\n4. Marks the test step as failed if any errors are found.\n5. Catches any exceptions that occur during the execution and marks the test step as failed with an error message.\n6. Returns a boolean value indicating whether the error messages were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndReturnErrorMessageInPopup",
        "code": "public String verifyAndReturnErrorMessageInPopup() {\n\t\tString Error = \"\";\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//strong[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 10)) {\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]//li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tError = errorsList.get(i).getText().trim();\n\t\t\t\t\tmanualScreenshot(\"Error : \"+Error);\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn Error;\n\t}",
        "description": "This Java method, `verifyAndReturnErrorMessageInPopup`, attempts to verify if there are any errors on a webpage and returns the error message(s) as a string. \n\nIt first checks if an element with a specific XPath is displayed within a certain time limit (10 seconds). If it is, it then finds all list items containing class 'error' and iterates over them. For each item, it extracts the text content, trims any whitespace, and stores it in the `Error` variable. \n\nIf no error message is found, it takes a manual screenshot with the caption \"There is no error while editing\". \n\nIn case of an exception during this process, it logs the failure as a test step failure. Finally, it returns the accumulated error message(s) as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndReturnErrorMessageInPopup",
        "code": "public String verifyAndReturnErrorMessageInPopup(String expectedValidation) {\n\t\tString Error = \"\";\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//strong[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 10)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]//li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tError = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (Error.contains(expectedValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + Error);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not get fired. Instead of we got : \" + Error);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while editing\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn Error;\n\t}",
        "description": "This Java method, `verifyAndReturnErrorMessageInPopup`, verifies the presence of an expected validation error message and returns it if found. Here's a brief summary:\n\n1. It tries to find an element with the specified XPath (`error`) and waits for up to 10 seconds for it to be displayed.\n2. If the element is displayed, it extracts the list of errors from the page using another XPath expression (`errorList`).\n3. It then iterates through the error list and checks if any of the errors contain the expected validation message (`expectedValidation`).\n4. If a matching error is found, it takes a manual screenshot with the error text as the filename and breaks out of the loop.\n5. If no matching error is found or if there's an exception during the process, it marks the test step as failed and returns an empty string.\n\nThe method returns the first error message that matches the expected validation, or an empty string if no match is found.",
        "input": [
            "String expectedValidation"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyErrorIMPSPopupMessage",
        "code": "public boolean verifyErrorIMPSPopupMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 10);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"There is no error message is displayed in Popup\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyErrorIMPSPopupMessage()`, verifies the presence of an error popup message with a specific title and content. It waits for up to 10 seconds for the element to appear, then checks if it's displayed within 7 seconds. If the error message is found, it takes a manual screenshot with the error message text and sets a flag to `true`. If the error message is not found or there is no error message displayed in the popup, it logs an error and sets the flag to `false`. The method returns the value of the flag.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPagePostDO",
        "code": "public void opportunityPagePostDO(String AssetValidationLabel, String IMEILabel, String IMEIValue,\n\t\t\tString EditBankDetails, String ECSBarcodeLabel, String ECSBarcodeValue, String saveBankDetails,\n\t\t\tString editLabel, String InvoiceNumberLabel, String InvoiceNumberValue, String InvoiceDateLabel,\n\t\t\tString InvoiceDateValue, String FileBarCodeLabel, String FileBarCodeValue,\n\t\t\tString WalletNolinkingReasonLabel, String WalletNolinkingReasonValue,\n\t\t\tString StagechangeFromDO_IssuetoQCLabel, String StahechangeFromDO_IssuetoQCValue) {\n\t\tBoolean flag = false;\n\t\ttry {\n\t\t\tselectToggleFromAssetValidationUnderPostDoTab(AssetValidationLabel);\n\t\t\tString URL = driver.getCurrentUrl();\n\t\t\tif (!URL.contains(\"lsf\")) {\n\t\t\t\ttestStepInfo(\"############### Complete Asset Validation  ###############\");\n\t\t\t\tenterValueInTextFieldFromAssetValidationUnderPostDo(IMEILabel, IMEIValue);\n\n\t\t\twaitTillSpinnerDisappear();\n\t\t\t}\n\t\t\tclickonbankpopbutton(EditBankDetails);\n\t\t\tenterValueInFieldIMPSBankNumber(ECSBarcodeLabel, ECSBarcodeValue);\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\tECSBarcodeValue = generateRandomBarcode();\n\t\t\tflag = verifyErrorIMPSPopupMessage();\n\t\t\tif (flag) {\n\t\t\t\tenterValueInFieldIMPSBankNumber(ECSBarcodeLabel, ECSBarcodeValue);\n\t\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\t}\n\t\t\ttestStepInfo(\"############### Move Opportunity to SQC Stage  ###############\");\n\t\t\tclickOnLink(editLabel);\n\t\t\tenterValueInField(InvoiceNumberLabel, InvoiceNumberValue);\n\t\t\tenterDob(InvoiceDateLabel, InvoiceDateValue);\n\t\t\tenterValueInField(FileBarCodeLabel, FileBarCodeValue);\n\t\t\tselectValueFromDropdown1(WalletNolinkingReasonLabel, WalletNolinkingReasonValue);\n\t\t\tselectValueFromDropdown1(StagechangeFromDO_IssuetoQCLabel, StahechangeFromDO_IssuetoQCValue);\n\n\t\t\tclickOnSaveButton();\n\t\t\twaitTime(5);\n\t\t\tString Validation = verifyAndReturnErrorMessageInPopup();\n\t\t\tif (Validation.contains(\"This File Barcode is already used for another customer.\")\n\t\t\t\t\t|| Validation.contains(\"File Barcode Validation Failed\")) {\n\t\t\t\tFileBarCodeValue = generateRandomBarcode();\n\t\t\t\tenterValueInField(FileBarCodeLabel, FileBarCodeValue);\n\t\t\t\tclickOnSaveButton();\n\t\t\t\twaitTime(5);\n\t\t\t\tflag = verifyAndPrintErrorMessageInPopup();\n\t\t\t\tif (flag) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityPagePostDO`, appears to be a part of an automation test script for a web-based application. The method is designed to perform various actions on the \"Opportunity Page\" and verify the results.\n\nHere's a brief summary of what the method does:\n\n1. It takes 17 string parameters that represent different labels, values, and button names used in the application.\n2. The method starts by selecting a toggle from an asset validation page under the \"Post DO\" tab based on the `AssetValidationLabel` parameter.\n3. It then checks if the current URL does not contain the string \"lsf\". If not, it performs some actions:\n\t* Enters values in text fields for IMEI and ECS barcode (if applicable).\n\t* Waits until a spinner disappears.\n4. The method then clicks on bank-related buttons and pop-ups to perform various operations:\n\t* Saves bank details.\n\t* Generates a random ECS barcode value if necessary.\n5. It verifies an error message popup and retries the operation if necessary.\n6. The method then moves the opportunity to the SQC stage by clicking on links, entering values in fields, selecting dropdown values, and saving changes.\n7. If there's an error message indicating that the file barcode is already used or validation failed, it generates a new random file barcode value and retries the operation.\n8. Finally, the method catches any exceptions that may occur during execution and reports them as test failures.\n\nOverall, this method seems to be designed to automate a series of steps on the \"Opportunity Page\" in a web-based application, with error handling and retry mechanisms to ensure that the tests are robust and reliable.",
        "input": [
            "String AssetValidationLabel",
            "String IMEILabel",
            "String IMEIValue",
            "String EditBankDetails",
            "String ECSBarcodeLabel",
            "String ECSBarcodeValue",
            "String saveBankDetails",
            "String editLabel",
            "String InvoiceNumberLabel",
            "String InvoiceNumberValue",
            "String InvoiceDateLabel",
            "String InvoiceDateValue",
            "String FileBarCodeLabel",
            "String FileBarCodeValue",
            "String WalletNolinkingReasonLabel",
            "String WalletNolinkingReasonValue",
            "String StagechangeFromDO_IssuetoQCLabel",
            "String StahechangeFromDO_IssuetoQCValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "bankingWithOutGenerateDO",
        "code": "public void bankingWithOutGenerateDO(String InitiateBankingDetailsFlag, String bankNameLabel, String bankNameValue,\n\t\t\tString bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel, String bankAccounttypeValue,\n\t\t\tString initiateIMPSLabel, String saveBankDetails) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tworkAroundForBankNameField();\n\t\t\twaitTime(7);\n\t\t\ttestStepInfo(\"Initiate Banking IMPS\");\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\n\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTime(50);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t}\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\n\t\t\twaitTime(10);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Opportunity DO Stage\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `bankingWithOutGenerateDO`, appears to be a part of a banking application's user interface testing. The method takes 9 parameters:\n\n1. `InitiateBankingDetailsFlag`: a string indicating whether the banking details should be initiated or not.\n2. `bankNameLabel` and `bankNameValue`: labels and values for the bank name field.\n3. `bankAccountLabel`, `bankAccountValue`, and `bankAccountTypeLabel`: similar parameters for the bank account number and type fields.\n4. `initiateIMPSLabel`: a label for the initiate IMPS button.\n5. `saveBankDetails`: a string indicating whether to save the bank details or not.\n\nThe method performs the following actions:\n\n1. Waits for 5 seconds using the `waitTime` method.\n2. Calls the `workAroundForBankNameField` method (not shown in this snippet).\n3. Waits again for 7 seconds.\n4. Logs a test step information message indicating that the \"Initiate Banking IMPS\" test step is being performed.\n5. Enters values into various fields using methods like `enterValueInLookUPFieldInIMPSPopup`, `enterValueInFieldInIMPSPopup`, and `selectValueFromDropdownInIMPSPopup`.\n6. If the `InitiateBankingDetailsFlag` parameter indicates that banking details should be initiated, clicks on the \"Initiate IMPS\" button and waits for 50 seconds.\n7. Logs a test step information message indicating whether IMPS was initiated or not.\n8. Clicks on the \"Save Bank Details\" button using the `clickonbankpopbutton` method.\n9. Waits again for 10 seconds.\n\nThe method also includes an exception handling block that logs a failure message and re-throws the exception if any error occurs during execution.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityDOStageWithNSDL",
        "code": "public void opportunityDOStageWithNSDL(String InitiateBankingDetailsFlag, String bankNameLabel,\n\t\t\tString bankNameValue, String bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel,\n\t\t\tString bankAccounttypeValue, String initiateIMPSLabel, String saveBankDetails, String GenerateDOLabel,\n\t\t\tString DOProcessCrossSellLabel, String NSDLPANValidationLabel, String NSDLDocumentTypeLabel,\n\t\t\tString NSDLDocumentTypeValue, String SubmitLabel, String bankNameWithoutIMPSValue) {\n\t\ttry {\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\ttestStepInfo(\"Initiate Banking IMPS\");\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\t\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTime(50);\n\t\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameWithoutIMPSValue);\n\t\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\t}\n\t\t\twaitTime(10);\n\t\t\twaitForPageToLoad();\n\t\t\tNSDLPANValidation(DOProcessCrossSellLabel, NSDLPANValidationLabel, NSDLDocumentTypeLabel,\n\t\t\t\t\tNSDLDocumentTypeValue, SubmitLabel);\n\t\t\twaitTime(10);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\t\t\ttestStepInfo(\"Do Preparation Stage\");\n\t\t\tclickOnLink(GenerateDOLabel);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityDOStageWithNSDL`, appears to be part of a financial application's workflow. It performs several actions related to initiating banking details and processing a document (DOL) using the National Settlements Development Limited (NSDL) system.\n\nThe method takes 14 parameters:\n\n1-3: Initial banking details flag, bank name label, and bank name value\n4-6: Bank account label, bank account value, and bank account type label\n7: Initialize IMPS label\n8: Save bank details flag\n9: Generate DO label\n10: DO process cross-sell label\n11: NSDL PAN validation label\n12: NSDL document type label and value\n13: Submit label\n14: Bank name without IMPS value (used in a specific scenario)\n\nThe method does the following:\n\n1. If the initial banking details flag is \"Yes\", it initiates the banking process, entering values into look-up fields and selecting options from dropdown menus.\n2. It then waits for 5 seconds, loads the page, and clicks on the \"Initiate IMPS\" button.\n3. If the flag is not \"Yes\", it enters values without initiating IMPS.\n4. The method then performs NSDL PAN validation using the provided labels and values.\n5. After validation, it refreshes the page, waits for 10 seconds, and marks the \"Do Preparation Stage\" as complete by clicking on the \"Generate DO\" link.\n\nThe method catches any exceptions that occur during its execution and reports them as test step failures.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails",
            "String GenerateDOLabel",
            "String DOProcessCrossSellLabel",
            "String NSDLPANValidationLabel",
            "String NSDLDocumentTypeLabel",
            "String NSDLDocumentTypeValue",
            "String SubmitLabel",
            "String bankNameWithoutIMPSValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "NSDLPANValidation",
        "code": "public void NSDLPANValidation(String DOProcessCrossSellLabel, String NSDLPANValidationLabel,\n\t\t\tString NSDLDocumentTypeLabel, String NSDLDocumentTypeValue, String SubmitLabel) {\n\t\ttry {\n\t\t\tclickOnLink(DOProcessCrossSellLabel);\n\t\t\tclickOnChildComponent(NSDLPANValidationLabel);\n\t\t\tselectValueFromDropdownInIMPSPopup(NSDLDocumentTypeLabel, NSDLDocumentTypeValue);\n\t\t\tclickOnButton(SubmitLabel);\n\t\t\twaitTime(5);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in NSDLPANValidation\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used for validating the NSDLPAN process. It performs a series of actions:\n\n1. Clicks on a link with the label \"DOProcessCrossSellLabel\".\n2. Clicks on a child component with the label \"NSDLPANValidationLabel\".\n3. Selects a value from a dropdown list in an IMPSPopup, using the labels \"NSDLDocumentTypeLabel\" and \"NSDLDocumentTypeValue\".\n4. Clicks on a button labeled \"SubmitLabel\".\n5. Waits for 5 seconds before completing the method.\n\nIf any of these actions fail, the method will catch the exception and log a failure message with the test step name \"Failed in NSDLPANValidation\" followed by the error message.",
        "input": [
            "String DOProcessCrossSellLabel",
            "String NSDLPANValidationLabel",
            "String NSDLDocumentTypeLabel",
            "String NSDLDocumentTypeValue",
            "String SubmitLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndPrintErrorGenerateDOWithFail",
        "code": "public boolean verifyAndPrintErrorGenerateDOWithFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString error = \"Error Header#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(error, 8)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\ttestStepFailed(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorGenerateDOWithFail`, attempts to verify if an error message is displayed within a certain time frame and then prints the error messages. If the error message is not displayed, it takes a manual screenshot. The method returns a boolean value indicating whether the verification was successful or not.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 5 seconds using the `waitTime` method.\n2. Checks if an element with the specified XPath and class name (`error`) is displayed within 8 seconds using the `isElementDisplayed` method. If it is, sets a boolean flag to `true`.\n3. If the error message is displayed, retrieves a list of web elements matching the XPath (`errorList`) and iterates through them.\n4. For each error message, calls the `testStepFailed` method with the error message text (trimmed) as an argument.\n5. If the error message is not displayed or if any exception occurs during the verification process, catches the exception using a catch block and calls the `testStepFailed` method with an error message indicating that the verification failed.\n6. Returns the boolean flag indicating whether the verification was successful or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyDocumentStatusUnderDocumentLib",
        "code": "public void verifyDocumentStatusUnderDocumentLib(String labelName, String StatusLabel, String StatusValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString status = \"#xpath=//span[text()='\"+labelName+\"']/parent::h3/parent::div/following-sibling::div//dt[text()='\"+StatusLabel+\"']/following-sibling::dd[text()='\"+StatusValue+\"']\";\n\t\t\twaitForElement(status, 7);\n\t\t\tif (isElementDisplayed(status, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(status);\n\t\t\t\thighLighterMethod(status);\n\t\t\t\ttext = getText(status);\n\t\t\t\tStatusLabel=StatusLabel.replace(\":\", \"\");\n\t\t\t\tif (text.contains(StatusValue)) {\n\t\t\t\t\tmanualScreenshot(StatusLabel + \" of \" + labelName + \" document is [ \"+text+\" ]. \");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(text + \" is displayed in \" + StatusLabel + \" Intead of \" + StatusValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Verify Status Value Under Document Lib failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method verifies the status value under a specific document label in a web page. It takes three parameters: `labelName`, `StatusLabel`, and `StatusValue`. The method uses XPath to locate the element containing the status value, waits for it to be displayed, scrolls to the element if necessary, highlights it, gets the text of the element, and then checks if the text contains the expected `StatusValue`. If the text matches, a successful test step is recorded; otherwise, a failed test step is recorded with an error message. The method also handles exceptions by writing them to a log file and reporting a failed test step.",
        "input": [
            "String labelName",
            "String StatusLabel",
            "String StatusValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonuploadDocument",
        "code": "public void clickonuploadDocument() {\n\t\ttry {\n\t\t\tString image = \"#xpath=//span[@class='disable-image']/img\";\n\t\t\twaitForElement(image, 10);\n\t\t\tif (isElementDisplayed(image, 3)) {\n\t\t\t\thighLighterMethod(image);\n\t\t\t\tclickOn(image);\n\t\t\t\tmanualScreenshot(\"Able to view Uploaded Image\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Not able to view Uploaded Image\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonuploadDocument\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonuploadDocument`, attempts to click on an uploaded document image element. It uses a combination of Selenium WebDriver methods and custom utility methods to achieve this.\n\nHere's what the method does:\n\n1. It tries to locate an `<img>` element with a specific XPath: `//span[@class='disable-image']/img`.\n2. If the element is displayed within a certain time limit (10 seconds), it:\n\t* Highlights the element using a custom `highLighterMethod`.\n\t* Clicks on the element using Selenium's `clickOn` method.\n\t* Takes a manual screenshot with the message \"Able to view Uploaded Image\".\n3. If the element is not displayed within the time limit, it takes a manual screenshot with the message \"Not able to view Uploaded Image\".\n4. If any exception occurs during this process, it catches and logs the error using `testStepFailed` method.\n\nIn summary, this method attempts to click on an uploaded document image, handles potential timeouts or errors, and provides manual screenshots for verification purposes.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getDocuments",
        "code": "public String getDocuments(String LabelName) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + LabelName + \"']\";\n\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \"Documents is displayed\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"No documents is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getDocuments\" + e.getMessage());\n\t\t}\n\t\treturn LabelName;\n\t}",
        "description": "This Java method, `getDocuments`, retrieves the list of documents associated with a given label name. It uses XPath to locate an element on the page with text matching the provided label name. If the element is displayed, it highlights the element and takes a manual screenshot; if not, it takes a screenshot indicating that no documents are present. The method returns the original `LabelName` input.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "checkvaluepopulated",
        "code": "public String checkvaluepopulated(String labelName) {\n\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//div/input\";\n\t\twaitForElement(field, 10);\n\t\tif (isElementDisplayed(field, 3)) {\n\t\t\tmanualScreenshot(getText(field) + \"is populated\");\n\t\t} else {\n\t\t\ttestStepFailed(labelName + \" field is not populated\");\n\t\t}\n\t\treturn field;\n\t}",
        "description": "This Java method, `checkvaluepopulated`, checks if a specific input field on a web page is populated with data. It takes a `labelName` as an input parameter and performs the following steps:\n\n1. Creates a XPath expression to locate the input field based on the provided label name.\n2. Waits for the element to be present on the page using the `waitForElement` method (with a timeout of 10 seconds).\n3. Checks if the element is displayed on the page using the `isElementDisplayed` method (with a timeout of 3 seconds). If it's not displayed, the method fails.\n4. If the field is populated, takes a manual screenshot with a comment indicating that the field is populated.\n5. Returns the XPath expression used to locate the input field.\n\nThe method can be used in test automation scenarios to verify that specific fields on a web page are correctly populated with data.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getCDAppScoreValue",
        "code": "public String getCDAppScoreValue(int value) {\n\t\tString cdappScore = \"\";\n\t\tint cdAppScore;\n\t\ttry {\n\t\t\tif (value <= 420) {\n\t\t\t\tcdAppScore = 1;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t\tif ((value >= 421 && value <= 550)) {\n\t\t\t\tcdAppScore = 2;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t\tif ((value >= 551 && value <= 610)) {\n\t\t\t\tcdAppScore = 3;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t\tif ((value >= 611 && value <= 675)) {\n\t\t\t\tcdAppScore = 4;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t\tif ((value >= 676 && value <= 714)) {\n\t\t\t\tcdAppScore = 5;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t\tif ((value >= 715 && value <= 726)) {\n\t\t\t\tcdAppScore = 6;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t} else if ((value >= 727)) {\n\t\t\t\tcdAppScore = 7;\n\t\t\t\tcdappScore = Integer.toString(cdAppScore);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCDAppScoreValue \" + e.getMessage());\n\t\t}\n\t\treturn cdappScore;\n\t}",
        "description": "This Java method, `getCDAppScoreValue`, takes an integer value as input and returns a string representation of a CD App score based on the given value. The score is determined by checking if the value falls within certain ranges (420-550, 551-610, etc.). If the value does not fall within any of these ranges, it will return a default score of 1. The method also includes error handling using a try-catch block to catch any exceptions that may occur during execution.",
        "input": [
            "int value"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getDigitalAppScoreValue",
        "code": "public String getDigitalAppScoreValue(int value) {\n\t\tint digitalAppScore;\n\t\tString digitalappScore = \"\";\n\t\ttry {\n\t\t\tif (value <= 612) {\n\t\t\t\tdigitalAppScore = 1;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t\tif ((value >= 612 && value <= 650)) {\n\t\t\t\tdigitalAppScore = 2;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t\tif ((value >= 651 && value <= 667)) {\n\t\t\t\tdigitalAppScore = 3;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t\tif ((value >= 668 && value <= 701)) {\n\t\t\t\tdigitalAppScore = 4;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t\tif ((value >= 702 && value <= 716)) {\n\t\t\t\tdigitalAppScore = 5;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t\tif ((value >= 717 && value <= 738)) {\n\t\t\t\tdigitalAppScore = 6;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t} else if ((value >= 739)) {\n\t\t\t\tdigitalAppScore = 7;\n\t\t\t\tdigitalappScore = Integer.toString(digitalAppScore);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getCDAppScoreValue \" + e.getMessage());\n\t\t}\n\t\treturn digitalappScore;\n\t}",
        "description": "This Java method, `getDigitalAppScoreValue`, takes an integer value as input and returns a string representing the corresponding digital app score. The method uses a series of if-else statements to determine the score based on the input value. The scores are assigned values from 1 to 7, with different ranges for each score. If the input value falls within one of these ranges, the corresponding score is assigned and converted to a string using `Integer.toString()`. The method also includes error handling in case an exception occurs during execution.",
        "input": [
            "int value"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyStatus",
        "code": "public String verifyStatus(String Label, String Status) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + Label + \"']/following::dd[text()='\" + Status + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 4)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \" Status is displayed in\" + Label);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(getText(Element) + \" Status is not displayed in\" + Label);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyStatus\" + e.getMessage());\n\t\t}\n\t\treturn Status;\n\t}",
        "description": "This Java method, `verifyStatus`, verifies the status of an element on a web page based on the given label and status. It uses an XPath expression to locate the element, waits for it to be displayed, and then checks if it is visible. If the element is displayed, it highlights the element using a separate method (`highLighterMethod`) and takes a manual screenshot with the text of the element and its label. If the element is not displayed, it also takes a manual screenshot but with an error message indicating that the status is not displayed. The method returns the verified status as a string.",
        "input": [
            "String Label",
            "String Status"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnFetchInvoiceSave",
        "code": "public void clickOnFetchInvoiceSave() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//input[@value='Save']\";\n\t\t\tString button1 = \"Save button#xpath=(//button[text()='Save'])[2]\";\n\t\t\tString frame = \"Message#xpath=//iframe\";\n\t\t\tif (isElementDisplayed(frame, 10)) {\n\t\t\t\tswitchToFrame(frame);\n\t\t\t\tif (isElementDisplayed(button, 10)) {\n\t\t\t\t\tscrollToWebElement(button);\n\t\t\t\t\tclickOn(button);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(button1, 10)) {\n\t\t\t\tscrollToWebElement(button1);\n\t\t\t\tclickOn(button1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnFetchInvoiceSave \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnFetchInvoiceSave`, attempts to simulate a user clicking the \"Save\" button on a web page. It uses Selenium WebDriver's methods for interacting with the browser and its elements.\n\nHere are the key steps:\n\n1. The method tries to locate two different \"Save\" buttons using XPath expressions: one by value (\"Save\") and another by text (\"Save\") with an index of 2.\n2. If the first frame (identified by the `frame` variable) is displayed within a certain time limit, it switches to that frame.\n3. Within the frame, it checks if either of the two \"Save\" buttons are displayed. If one is found, it scrolls to that button and clicks on it.\n4. After clicking the button, it waits for the page to load completely before proceeding.\n5. If neither of the two buttons are found or the first frame is not present, it reports a test failure.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyFetchInvoiceMessage",
        "code": "public void verifyFetchInvoiceMessage(String expectedMessage) {\n\t\ttry {\n\t\t\tString message = \"Message#xpath=//form//p\";\n\t\t\tif (isElementDisplayed(message, 30)) {\n\t\t\t\tWebElement msg = findWebElement(message);\n\t\t\t\tString Msg = msg.getText().trim();\n\t\t\t\tif (Msg.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(Msg);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Getting \" + Msg + \" error message instead of \" + expectedMessage);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no expected validation displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFetchInvoiceMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFetchInvoiceMessage`, verifies that a specific message is displayed on the UI after a fetch invoice operation. Here's a breakdown of what it does:\n\n1. It attempts to retrieve a message from an XPath expression (`\"Message#xpath=//form//p\"`).\n2. If the message is displayed within 30 seconds, it extracts the text content and trims any whitespace.\n3. The method then compares the extracted message with the expected message passed as a parameter (`expectedMessage`).\n4. If the messages match (case-insensitive), it takes a manual screenshot.\n5. If the messages do not match or if the expected message is not displayed, it fails the test step and logs an error message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyForm1",
        "code": "public void verifyForm1(String Label, String Form) {\n\t\ttry {\n\t\t\tif (Form.equalsIgnoreCase(\"\")) {\n\t\t\t\tif (!isElementDisplayed(\"Waffle icon#xpath=//div[@class='slds-icon-waffle']\", 2)) {\n\t\t\t\t\tif (isElementDisplayed(GOR.img_user, 2)) {\n\t\t\t\t\t\ttestStepPassed(\"Already present in lightining mode\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclickOn(GOR.lnk_switchToLightning);\n\t\t\t\t\t\tif (isElementDisplayed(GOR.txt_salesForceSearchbox, 2)) {\n\t\t\t\t\t\t\ttestStepPassed(\"Successfully navigated to application lightning mode\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(\"Failed to navigate application lightning mode\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepPassed(\"Already present in lightining mode\");\n\n\t\t\t\t}\n\t\t\t} else if (Form.equals(\"Classic\")) {\n\n\t\t\t\tif (isElementDisplayed(GOR.lnk_switchToLightning, 3)) {\n\t\t\t\t\ttestStepPassed(\"Already present in classic mode\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOnSpecialElement(GOR.img_user);\n\t\t\t\t\tclickOn(GOR.lnk_switchToClassic);\n\t\t\t\t\tif (isElementDisplayed(GOR.lnk_switchToLightning, 2)) {\n\t\t\t\t\t\ttestStepPassed(\"Successfully navigated application to Classic mode\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Failed to navigate to application Classic mode\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\twaitForPageToLoad();\n\t\t} catch (Exception e) {\n\t\t}\n\t}",
        "description": "This Java method, `verifyForm1`, is used to verify the form of a web page. It takes two string parameters: `Label` and `Form`. The method checks if the `Form` parameter is empty or not.\n\nIf the `Form` is empty, it tries to check if the \"Waffle icon\" is displayed (indicating Lightning mode). If it's not displayed, it navigates to the Lightning mode by clicking on the \"Switch to Lightning\" link. It then checks if the Salesforce search box is displayed in Lightning mode.\n\nIf the `Form` is not empty and equals \"Classic\", it checks if the \"Switch to Lightning\" link is displayed (indicating Classic mode). If it's not displayed, it navigates to Classic mode by clicking on the user icon and then the \"Switch to Classic\" link. It then checks if the \"Switch to Lightning\" link is displayed in Classic mode.\n\nFinally, the method waits for the page to load before completing its execution.",
        "input": [
            "String Label",
            "String Form"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyForm",
        "code": "public String verifyForm(String Label, String Status) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + Label + \"']/following::dd[text()='\" + Status + \"']\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 4)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \" Form is displayed in\" + Label);\n\t\t\t} else {\n\t\t\t\tString Elem = \"#xpath=//span[text()='\" + Label\n\t\t\t\t\t\t+ \"']/following::select[@class='slds-select select uiInput uiInputSelect uiInput--default uiInput--select']\";\n\t\t\t\twaitForElement(Elem, 3);\n\t\t\t\t{\n\t\t\t\t\thighLighterMethod(Elem);\n\t\t\t\t\tmanualScreenshot(getText(Elem) + \" Form is displayed in\" + Label);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyStatus\" + e.getMessage());\n\t\t}\n\t\treturn Status;\n\t}",
        "description": "This Java method, `verifyForm`, verifies the status of a form element on a web page. It takes two parameters: `Label` and `Status`. The method uses XPath expressions to locate the form element based on the provided label and status. If the element is displayed within a certain time frame (10 seconds), it highlights the element using a high-lighting method, captures a manual screenshot with a message indicating that the form is displayed for the given label, and returns the status of the form. If the element is not displayed within the specified time frame, it attempts to locate an alternative form element (a select dropdown) and performs the same actions if found. If any exceptions occur during the process, it logs a failure message and returns the status.",
        "input": [
            "String Label",
            "String Status"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "takeEMIAmount",
        "code": "public void takeEMIAmount() {\n\t\ttry {\n\t\t\tString EMI = \"#xpath=//span[text()='Opportunities']//ancestor::header//following-sibling::div/table/tbody/tr[last()]/td[contains(text(),'EMI')]\";\n\t\t\tif (isElementDisplayed(EMI, 3)) {\n\t\t\t\thighLighterMethod(EMI);\n\t\t\t\tmanualScreenshot(getText(EMI));\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"EMI is not Visible\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to TakeEMI AMount\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `takeEMIAmount()`, attempts to retrieve the EMI (Equal Monthly Installment) amount from a web page. It uses an XPath expression to locate the element containing the EMI information and then:\n\n1. Verifies if the element is displayed within a certain time limit (3 seconds).\n2. If the element is displayed, it highlights the element using `highLighterMethod()` and takes a manual screenshot of the highlighted element.\n3. If the element is not displayed, it fails the test step with an error message \"EMI is not Visible\".\n\nIf any exception occurs during the execution of this method (e.g., network error or XPath expression issue), it catches the exception and fails the test step with an error message including the caught exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCustomerNameLink",
        "code": "public void clickOnCustomerNameLink(String value) {\n\t\ttry {\n\t\t\tString customerNameLink = value + \"#xpath=//li//a[text()='\" + value + \"']\";\n\t\t\twaitForElement(customerNameLink, 30);\n\t\t\tif (isElementDisplayed(customerNameLink, 3)) {\n\t\t\t\tscrollToWebElement(customerNameLink);\n\t\t\t\tclickOn(customerNameLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerNameLink`, is used to click on a link with a customer name in a web application. \n\nThe method takes a string parameter `value` which represents the customer name. It constructs an XPath expression by appending the `value` to a predefined path and uses it to locate the element. The method then waits for the element to be displayed, scrolls to it if necessary, and clicks on it.\n\nIf the element is not found or the click operation fails, the method reports a test step failure with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnOpportunityLink",
        "code": "public void clickOnOpportunityLink(String value) {\n\t\ttry {\n\t\t\tString customerNameLink = value + \"#xpath=//a[text()='\" + value + \"']\";\n\t\t\twaitForElement(customerNameLink, 10);\n\t\t\tif (isElementDisplayed(customerNameLink, 3)) {\n\t\t\t\tclickOn(customerNameLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOpportunityLink`, attempts to click on a link with the given `value` in a web page. The method:\n\n1. Concatenates the `value` with an XPath expression to create a unique link locator.\n2. Waits for the element to be displayed using the `waitForElement` method.\n3. Checks if the element is displayed within a certain time limit (3 seconds).\n4. If the element is displayed, it clicks on it using the `clickOn` method.\n5. If the element is not displayed or an exception occurs during the click operation, it fails the test step and reports an error message.\n\nThe method takes a `String value` as input, which represents the link text or value to be clicked.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName + \"']/..//..//select\";\n\t\t\twaitForElement(dropdown, 4);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, selects a value from a dropdown list on a web page. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element by combining the provided dropdown name with an XPath query.\n2. It waits for the dropdown element to be present using the `waitForElement` method, allowing a maximum timeout of 4 seconds.\n3. If the dropdown is displayed within the given timeout (5 seconds), it attempts to select the specified value from the dropdown using the `selectFromDropdown` method.\n4. If the dropdown is not present or the selection fails, it reports a test step failure with an error message.\n\nThe method also catches any exceptions that may occur during its execution and reports a test step failure with the exception's message if one occurs.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnSaveButtonPopup",
        "code": "public void clickOnSaveButtonPopup(String Header, String button) {\n\t\ttry {\n\t\t\tString Button = button + \" #xpath=//span[text()='\" + Header\n\t\t\t\t\t+ \"']/ancestor::h2/parent::div/following-sibling::div//lightning-button/button[@aria-disabled='false' and text()='\"\n\t\t\t\t\t+ button + \"']\";\n\t\t\tString Button1 = button + \" #xpath=//label[text()='\"+Header+\"']/following-sibling::div//slot//lightning-button//button[@aria-disabled='false' and text()='\"+button+\"']\";\n\t\t\tif (isElementDisplayed(Button, 25)) {\n\t\t\t\tclickOn(Button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else if (isElementDisplayed(Button1, 25)) {\n\t\t\t\tclickOn(Button1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else{\n\t\t\t\ttestStepFailed(button+\" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButtonPopup \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonPopup`, simulates a click on a specific button with the given header and button text. It uses XPath expressions to locate the button(s) based on the provided header and button text. The method attempts to find the button using two different XPath expressions (`Button` and `Button1`) and clicks on it if found. If neither button is found, it fails the test step with an error message. Additionally, it waits for the page to load after clicking the button.",
        "input": [
            "String Header",
            "String button"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "checkOpportunityLink",
        "code": "public String checkOpportunityLink(String customerlink) {\n\t\tString LinkText = null;\n\t\ttry {\n\t\t\tString link = customerlink + \"#xpath=//th[normalize-space()='\" + customerlink\n\t\t\t\t\t+ \"']/../../..//tbody/tr/td[1]/a\";\n\t\t\twaitForElement(link, 4);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tLinkText = getText(link);\n\t\t\t\tmanualScreenshot(LinkText + \"Opportunity Id is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerlink + \" Opportunity Id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t\treturn LinkText;\n\t}",
        "description": "This Java method, named `checkOpportunityLink`, checks if a specific link opportunity exists on a webpage. It takes a string parameter `customerlink` which is the URL of the customer's link.\n\nThe method attempts to locate the link using an XPath expression that includes the provided `customerlink`. If the link is found and displayed within a certain time frame (4 seconds), it extracts the text from the link and returns it. If the link is not found or displayed, the method logs a failure message and does not return any value.\n\nThe method also takes screenshots manually if the link is present, which suggests that this method is part of an automated testing process.\n\nIf any exception occurs during the execution of the method (e.g., timeout, element not found), it catches the exception and logs a failure message with the error message.",
        "input": [
            "String customerlink"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdown1",
        "code": "public void selectValueFromDropdown1(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString dropdown = dropdownName + \"#xpath= //label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/..//div[contains(@class,'dropdown')]\";\n\t\t\twaitTime(5);\n\t\t\twaitForElement(dropdown, 10);\n\t\t\t// scrolltowebelements(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']/following::span[@title='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown1`, is used to select a value from a dropdown menu. It takes two parameters: `dropdownName` and `value`. The method attempts to find the dropdown menu with the given name, click on it, wait for the list of options to appear, and then clicks on the option that matches the given value.\n\nHere's a step-by-step breakdown:\n\n1. Waits for the page to load.\n2. Waits for 5 seconds.\n3. Locates the dropdown menu using XPath and waits for it to be displayed.\n4. Scrolls to the dropdown menu (commented out, so this step is not actually executed).\n5. Checks if the dropdown menu is displayed.\n6. If the dropdown menu is displayed:\n\t* Clicks on the dropdown menu.\n\t* Waits for 1 second.\n\t* Waits for the list of options to appear.\n\t* Iterates up to 2 times, clicking on the dropdown menu and waiting for the options to appear each time.\n\t* If the desired value is found in the options, clicks on it and waits for 1 second. Then, sets a flag to `true` and logs that the selection was successful.\n\t* Breaks out of the loop if the value is selected successfully.\n7. If the dropdown menu is not displayed or the value cannot be selected:\n\t* Logs an error message indicating that the dropdown menu is not present or the value is not available.\n\nThe method also catches any exceptions that occur during execution and logs a failure message with the exception message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "searchOpportunities",
        "code": "public void searchOpportunities(String customerlink, String TabLabel) {\n\t\ttry {\n\t\t\tString link = customerlink + \"#xpath=//th[normalize-space()='\" + customerlink\n\t\t\t\t\t+ \"']/../../..//tbody/tr/td[1]/a\";\n\t\t\twaitForElement(link, 4);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\tString SearchValue = getText(link);\n\t\t\t\tclickOnNavigationmenu(TabLabel);\n\t\t\t\tString SearchText = SearchValue\n\t\t\t\t\t\t+ \"#xpath=//input[@id='input-361' or @placeholder ='Search this list...']\";\n\t\t\t\tif (isElementDisplayed(SearchText, 4)) {\n\t\t\t\t\tWebElement element = findWebElement(SearchText);\n\t\t\t\t\ttypeIn(SearchText, SearchValue);\n\t\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tmanualScreenshot(\"Successfully value Searched\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(SearchText + \" is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerlink + \" Opportunity Id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchOpportunities`, searches for opportunities based on a given customer link and tab label. It takes two parameters: `customerlink` and `TabLabel`. \n\nHere's what the method does:\n\n1. Creates a link by concatenating the `customerlink` with an XPath expression that targets the opportunity ID.\n2. Waits for the element to be displayed using the `waitForElement` method, and then checks if it is actually displayed using the `isElementDisplayed` method.\n3. If the element is displayed, extracts the text from it using the `getText` method, which will contain the opportunity ID.\n4. Navigates to a specific tab (identified by `TabLabel`) using the `clickOnNavigationmenu` method.\n5. Creates another link that targets a search input field with the opportunity ID as the search value.\n6. Waits for this element to be displayed and then types in the search value and presses Enter.\n7. Waits for 3 seconds and takes a manual screenshot if the search is successful.\n8. If any of these steps fail, it reports an error using the `testStepFailed` method.\n\nThe method also catches any exceptions that may occur during its execution and reports them as failures.",
        "input": [
            "String customerlink",
            "String TabLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAndPrintErrorMessage",
        "code": "public boolean verifyAndPrintErrorMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='invalid cross reference id']\";\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(error);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing Asset cart\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessage`, attempts to find an element on a web page with the specified XPath and checks if it is displayed. If the element is found and displayed, it takes a manual screenshot of each error message and returns a boolean value indicating whether the errors were found or not. If no errors are found, it also takes a manual screenshot with a specific message. The method catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "checkOpportunityDetailsIsDisplayed",
        "code": "public void checkOpportunityDetailsIsDisplayed(String OpportunityLabel, String OpportunityText) {\n\t\ttry {\n\t\t\tString Element = OpportunityText + \"#xpath=//span[text()='\" + OpportunityLabel + \"']/following::a[text()='\"\n\t\t\t\t\t+ OpportunityText + \"']\";\n\t\t\twaitForElement(Element, 4);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \"is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(getText(Element) + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Model is not visible\");\n\t\t}\n\t}",
        "description": "This Java method, named `checkOpportunityDetailsIsDisplayed`, checks if a specific opportunity details element is displayed on the page. It takes two input parameters: `OpportunityLabel` and `OpportunityText`. \n\nThe method uses XPath to locate an HTML element that contains the provided label and text. It then waits for this element to be visible (up to 4 seconds), and if it's displayed, scrolls to the element and captures a manual screenshot of the text contained within the element. If the element is not displayed after 5 seconds, the test step fails.\n\nIf any exception occurs during the execution of the method, the test step will fail with the message \"Model is not visible\".",
        "input": [
            "String OpportunityLabel",
            "String OpportunityText"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyIscheckboxenabled",
        "code": "public void verifyIscheckboxenabled(String Checkfield) {\n\t\ttry {\n\t\t\tString check = \"#xpath=//span[text()='\" + Checkfield + \"']\";\n\t\t\twaitForElement(check, 4);\n\t\t\tif (isElementDisplayed(check, 3)) {\n\t\t\t\tscrollbycordinates(check);\n\t\t\t\tmanualScreenshot(Checkfield + \"is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"checkbox is not visible\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyIscheckboxenabled`, is used to verify if a checkbox with the given text (`Checkfield`) is enabled and displayed on the page. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the checkbox element based on its text content.\n2. It waits for up to 4 seconds for the checkbox element to be present and visible.\n3. If the checkbox is displayed, it scrolls to that location using `scrollbycordinates`.\n4. It takes a manual screenshot with the name of the checkbox text followed by \"is displayed\".\n5. If any exception occurs during this process (e.g., the checkbox is not found or is not displayed), it marks the test step as failed and provides an error message.",
        "input": [
            "String Checkfield"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyLabelText",
        "code": "public void verifyLabelText(String Assertlabel, String Assertdetail) {\n\t\ttry {\n\t\t\tString Element = Assertdetail + \"#xpath=//span[text()='\" + Assertlabel + \"']/following::span[text()='\"\n\t\t\t\t\t+ Assertdetail + \"']\";\n\t\t\twaitForElement(Element, 4);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tmanualScreenshot(getText(Element) + \"is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(getText(Element) + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Model is not visible\");\n\t\t}\n\t}",
        "description": "This Java method, `verifyLabelText`, verifies the display of a specific label and detail text on a web page. It takes two string parameters: `Assertlabel` and `Assertdetail`. The method uses these strings to construct an XPath expression that locates the element containing the expected label and detail text.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `Assertdetail`, `#xpath=`, `//span[text()='` (the label), `']]/following::span[text()='` (the detail), and `\"` strings.\n2. It waits for the element to be present using the `waitForElement` method, with a timeout of 4 seconds.\n3. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method.\n4. It takes a manual screenshot of the element's text (the label and detail) using the `manualScreenshot` method.\n5. If the element is not displayed, it fails the test step with an error message using the `testStepFailed` method.\n\nIf any exception occurs during the execution of this method, it catches the exception and fails the test step with a generic error message (\"Model is not visible\").",
        "input": [
            "String Assertlabel",
            "String Assertdetail"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromEditDropdown",
        "code": "public void selectValueFromEditDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tscrollToElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[@class='select-options']//ul/li/a[@title='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Sundarrajan\n\t * @Description - This method is used to 1. checking that toggle whether\n\t *              selected or not 2. Then if it is not selected it will select the\n\t *              toggle\n\t */\n\n\t/**\n\t * @author Sundarrajan\n\t * @Description - This method is used to 1. checking that toggle whether\n\t *              selected or not 2. Then if it is not selected it will select the\n\t *              toggle\n\t */",
        "description": "This Java method, `selectValueFromEditDropdown`, is used to select a specific value from an edit dropdown (a type of dropdown menu) in a web application.\n\nThe method takes two parameters: `dropdownName` and `value`. It uses these values to:\n\n1. Locate the edit dropdown using an XPath expression.\n2. Wait for the dropdown to be displayed, scroll to it if necessary, and check if it's visible.\n3. If the dropdown is present, click on it to expand its options.\n4. Wait for the page to load again.\n5. Find the specific value in the dropdown list using another XPath expression.\n6. Click on the selected value to select it.\n\nThe method also includes some error handling and logging mechanisms:\n\n* It uses a try-catch block to catch any exceptions that may occur during the execution of the method.\n* If an exception is caught, the method logs a failure message with the exception's message as part of the test step.\n\nOverall, this method is used to automate the process of selecting a specific value from an edit dropdown in a web application.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectToggleFromAssetValidationUnderPostDoTab",
        "code": "public void selectToggleFromAssetValidationUnderPostDoTab(String labelName) {\n\n\t\ttry {\n\t\t\twaitTime(10);\n//\t\t\tString doProcessTab = \"#xpath=//a[contains(@title,'DO Process and Cross Sale')]\";\n\t\t\t String doProcessTab = \"#xpath=//a[contains(@title,'Do Process And Cross Sell')]\";\n\t\t\t\n\t\t\tif (isElementDisplayed(doProcessTab, 35)) {\n\t\t\t\tclickOnSpecialElement(doProcessTab);\n\t\t\t\tgetsublink(\"Asset Validation\");\n\t\t\t\tString toggle = \"#xpath=//span[text()='\" + labelName + \"']/../following::div/label//input\";\n\t\t\t\tString chk_toggle = \"Toggle Button#xpath=//span[contains(@id,'toggle')]\";\n\t\t\t\tif (isElementDisplayed(chk_toggle, 20)) {\n\t\t\t\t\tif (!findWebElement(chk_toggle).isSelected()) {\n\t\t\t\t\t\tclickOnSpecialElement(chk_toggle);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmanualScreenshot(labelName + \" is already selected\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelName + \" is not present\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tmanualScreenshot(\"Do Process And Cross Sell tab is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"select Toggle Under Post Do Tab failed. Exception: \" + e.toString());\n\t\t}\n\n\t}",
        "description": "This Java method, `selectToggleFromAssetValidationUnderPostDoTab`, is designed to select a toggle button with a specific label name from the \"Asset Validation\" tab under the \"DO Process and Cross Sell\" tab in an application.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. Waits for 10 seconds using the `waitTime(10)` method.\n2. Checks if the \"DO Process And Cross Sell\" tab is displayed within 35 seconds using the `isElementDisplayed` method. If it is, proceed to the next steps; otherwise, take a manual screenshot and report that the tab is not present.\n3. Clicks on the \"Asset Validation\" sublink to navigate to the relevant page.\n4. Checks if the toggle button with the specified label name (`labelName`) is displayed within 20 seconds using the `isElementDisplayed` method. If it is, proceed to the next steps; otherwise, take a manual screenshot and report that the toggle is not present.\n5. If the toggle button is displayed and not selected, clicks on it to select it. If it's already selected, takes a manual screenshot with a message indicating that the toggle is already selected.\n6. If any exceptions occur during the execution of these steps, catches them and writes an error log entry with the exception details, then reports the test step as failed.\n\nIn summary, this method is designed to automate the selection of a specific toggle button from the \"Asset Validation\" tab under the \"DO Process and Cross Sell\" tab in an application.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectValueFromDropdownInKYCPopup",
        "code": "public void selectValueFromDropdownInKYCPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 15);\n\t\t\tif (isElementDisplayed(dropdown, 10)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']//following-sibling::div//div//span/span[text()='\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Sundarrajan\n\t * @Description - This method is used to 1. labelName : IMEI/Serial 2. enter\n\t *              value in the text field and click on Validation button\n\t */",
        "description": "This Java method, `selectValueFromDropdownInKYCPopup`, is used to select a specific value from a dropdown menu in a KYC (Know Your Customer) popup. The method takes two parameters: `dropdownName` and `value`. \n\nHere's what the method does:\n\n1. It constructs an XPath expression for the dropdown element based on the provided `dropdownName`.\n2. It waits for the dropdown element to be displayed.\n3. If the dropdown is displayed, it scrolls to the element, clicks on it, and then selects the specified `value` from the dropdown list.\n4. It verifies that the selected value is displayed correctly.\n5. If any of these steps fail (e.g., the dropdown is not present or the value is not found in the list), the method reports a failure.\n\nThe method uses various utility methods like `waitForElement`, `isElementDisplayed`, `scrollToElement`, and `clickOnSpecialElement` to perform these actions. It also logs test step results using `testStepPassed` and `testStepFailed` methods.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInTextFieldFromAssetValidationUnderPostDo",
        "code": "public void enterValueInTextFieldFromAssetValidationUnderPostDo(String labelName, String labelValue) {\n\t\ttry {\n\t\t\tString assetTextField = labelName + \" Field#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]/following-sibling::div/input\";\n\t\t\tString btn_validate = \"Validate button#xpath=//button[text()='Validate']\";\n\t\t\twaitForElement(assetTextField, 30);\n\t\t\tif (isElementDisplayed(assetTextField, 10)) {\n\t\t\t\ttypeIn(assetTextField, labelValue);\n\t\t\t\thighLighterMethod(assetTextField);\n\t\t\t\tif (isElementDisplayed(btn_validate, 10)) {\n\t\t\t\t\tscrollToWebElement(btn_validate);\n\t\t\t\t\twaitTime(8);\n\t\t\t\t\tmanualScreenshot(\"Validate button is present\");\n\t\t\t\t\tclickOnSpecialElement(btn_validate);\n\t\t\t\t\twaitTime(4);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Validate button is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"enter Value In Text Field From Asset Validation Under Post Do failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method is used to enter a value in a text field that is located under an asset validation post-do step in a testing scenario. The method takes two string parameters: `labelName` and `labelValue`. \n\nHere's what the method does:\n\n1. It constructs a string for the XPath of the text field based on the provided `labelName`.\n2. It waits for the text field to be displayed, then enters the provided `labelValue` into it.\n3. If the \"Validate\" button is also present, it scrolls to that button, takes a manual screenshot (to capture the state of the page), and then clicks on it.\n4. If either the text field or the \"Validate\" button is not present, the method fails the test step with an appropriate error message.\n\nThe method uses various utility methods like `waitForElement`, `isElementDisplayed`, `typeIn`, `highLighterMethod`, `scrollToWebElement`, `waitTime`, and `testStepFailed` to perform these actions. It also includes exception handling to log any errors that may occur during the execution of the method.",
        "input": [
            "String labelName",
            "String labelValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectToggleFromAssetValidationUnderZBBPostDoTab",
        "code": "public void selectToggleFromAssetValidationUnderZBBPostDoTab(String labelName) {\n\t\ttry {\n\t\t\t// String toggle = \"#xpath=//span[text()='\" + labelName +\n\t\t\t// \"']/../following::div/label//input\";\n\t\t\t// String chk_toggle = \"Toggle Button#xpath=//span[contains(@id,'toggle')]\";\n\t\t\t// waitForElement(chk_toggle, 30);\n\t\t\t// if (isElementDisplayed(chk_toggle, 20)) {\n\t\t\t// if (!findWebElement(chk_toggle).isSelected()) {\n\t\t\t// clickOnSpecialElement(chk_toggle);\n\t\t\t// } else {\n\t\t\t// manualScreenshot(labelName + \" is already selected\");\n\t\t\t// }\n\t\t\t// } else {\n\t\t\t// manualScreenshot(labelName + \" is not present\");\n\t\t\t// }\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"select Toggle Under Post Do Tab failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, named `selectToggleFromAssetValidationUnderZBBPostDoTab`, appears to be a part of an automated testing script. Its primary function is to select a toggle button with a specific label name from an asset validation under the ZBB Post Do tab.\n\nHere's a breakdown of what the method does:\n\n1. It takes a `String` parameter, `labelName`, which represents the label name of the toggle button to be selected.\n2. The method attempts to execute a series of actions:\n\t* It waits for an element with a specific XPath (not shown in this code snippet) to be displayed within a certain time frame (30 seconds).\n\t* If the element is displayed, it checks if the toggle button is not already selected.\n\t* If the toggle button is not selected, it clicks on the toggle button.\n\t* If the toggle button is already selected or not present, it takes a manual screenshot with a descriptive message.\n3. The method catches any exceptions that may occur during execution and logs an error message to a log file. It also marks the test step as failed.\n\nIn summary, this method is designed to automate the process of selecting a toggle button with a specific label name from an asset validation under the ZBB Post Do tab.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "retrieveColumnPosition",
        "code": "public int retrieveColumnPosition(String objectLocator, String headerName) {\n\t\tint columnPosition = 0;\n\t\ttry {\n\t\t\tif (driver.findElement(By.xpath(objectLocator)).isDisplayed()) {\n\t\t\t\tList<WebElement> headerValues = driver.findElements(By.xpath(objectLocator));\n\t\t\t\tfor (int i = 0; i < headerValues.size(); i++) {\n\t\t\t\t\tJavascriptExecutor jscript = (JavascriptExecutor) driver;\n\t\t\t\t\tjscript.executeScript(\"arguments[0].scrollIntoView(true);\", headerValues.get(i));\n\t\t\t\t\tString headervalue = headerValues.get(i).getText().trim();\n\t\t\t\t\tif (headervalue.toUpperCase().contains(headerName.toUpperCase())) {\n\t\t\t\t\t\tcolumnPosition = i;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (i == (headerValues.size() - 1)) {\n\t\t\t\t\t\t\tSystem.out.println(\"Table does not contain the header value - \" + headerName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"retrieveColumnPosition Failed. Exception: \" + e.getMessage());\n\t\t}\n\t\treturn columnPosition + 1;\n\t}",
        "description": "This Java method, `retrieveColumnPosition`, is used to find the position of a specific header value in a table. It takes two parameters: `objectLocator` (the XPath locator of the table headers) and `headerName` (the name of the header value to search for).\n\nThe method first checks if the element located by the `objectLocator` is displayed. If it is, it then iterates through each header value in the table using a loop. For each header value, it scrolls into view and extracts the text content. It then checks if this text contains the `headerName` (case-insensitive). If it finds a match, it returns the position of that header value (plus 1, since positions are usually 0-based).\n\nIf no match is found after iterating through all header values, it prints an error message indicating that the table does not contain the specified header value. In any case where an exception occurs during execution (e.g., if the element cannot be located or scrolled), it catches the exception and prints an error message with the exception's message.\n\nFinally, the method returns the column position as an integer (plus 1).",
        "input": [
            "String objectLocator",
            "String headerName"
        ],
        "output": "int"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getInvoiceData",
        "code": "public int getInvoiceData(String tabName, String headerName) {\n\t\tString[] splitedData = null;\n\t\tint invoice_iterator = 0;\n\t\tint invoiceValue = 0;\n\t\ttry {\n\t\t\tint count = retrieveColumnPosition(\"//span[text()='\" + tabName\n\t\t\t\t\t+ \"']//ancestor::div[contains(@class,'uiTabset--base')]//table//thead//th\", headerName);\n\t\t\tList<WebElement> elements = driver.findElements(By.xpath(\"//span[text()='\" + tabName\n\t\t\t\t\t+ \"']//ancestor::div[contains(@class,'uiTabset--base')]//tbody//tr//td[\" + count + \"]\"));\n\t\t\tfor (int i = 1; i <= elements.size(); i++) {\n\t\t\t\tString current_Text = driver.findElement(By.xpath(\"(//span[text()='\" + tabName\n\t\t\t\t\t\t+ \"']//ancestor::div[contains(@class,'uiTabset--base')]//tbody//tr//td[\" + count + \"])[\" + i\n\t\t\t\t\t\t+ \"]\")).getText();\n\t\t\t\tsplitedData = current_Text.split(\"Invoice Price :\");\n\t\t\t\tinvoice_iterator = Integer.parseInt(splitedData[1].trim());\n\t\t\t\tinvoiceValue = invoiceValue + invoice_iterator;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn invoiceValue;\n\t}",
        "description": "This Java method, named `getInvoiceData`, retrieves the total value of invoices from a web page. It takes two parameters: `tabName` and `headerName`. \n\nThe method uses Selenium WebDriver to interact with the webpage. It first tries to find the column position of a specific header using an XPath expression. Then it finds all the table cells in that column using another XPath expression.\n\nIt then iterates over each cell, extracts the text content, splits it into two parts (using \"Invoice Price :\" as the separator), converts the second part to an integer, and adds it to the total invoice value.\n\nIf any exceptions occur during this process, they are caught and printed to the console. Finally, the method returns the total invoice value.",
        "input": [
            "String tabName",
            "String headerName"
        ],
        "output": "int"
    },
    {
        "class_name": "Opportunity",
        "function_name": "get_CD_Data",
        "code": "public int get_CD_Data(String header, String cdRequiredData) {\n\t\tString[] splitedData = null;\n\t\tboolean flag = false;\n\t\tString returnData = \"\";\n\t\tString[] data = null;\n\t\ttry {\n\t\t\tString current_Text = driver\n\t\t\t\t\t.findElement(By.xpath(\"//span[text()='\" + header + \"']//following-sibling::div//span\")).getText();\n\t\t\tsplitedData = current_Text.split(\"\\n\");\n\t\t\tfor (int i = 0; i < splitedData.length; i++) {\n\t\t\t\tif (splitedData[i].toUpperCase().contains(cdRequiredData.toUpperCase())) {\n\t\t\t\t\tdata = splitedData[i].split(\"-\");\n\t\t\t\t\tflag = true;\n\t\t\t\t\treturnData = data[data.length - 1].trim();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!flag) {\n\t\t\t\tSystem.out.println(\"testStepFailed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn Integer.parseInt(returnData.trim());\n\n\t}",
        "description": "This Java method, `get_CD_Data`, is used to extract specific data from a web page based on a given header and CD required data. It uses Selenium WebDriver to interact with the webpage and retrieve the necessary information.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It takes two string parameters: `header` and `cdRequiredData`.\n2. It initializes several variables: `splitedData`, `flag`, `returnData`, and `data`. \n3. It uses Selenium WebDriver to find an element on the webpage that matches the given `header`.\n4. It retrieves the text of the element's following sibling div, splits it into an array using newline characters (`\\n`) as separators.\n5. It then iterates through this array to find a string that contains the `cdRequiredData` (case-insensitive).\n6. If such a string is found, it extracts the last part of the string (assuming it's in the format \"some-text--more-text\"), trims any whitespace from both ends, and sets `returnData` to this value.\n7. It also sets `flag` to `true` to indicate that the required data was found.\n8. If no matching string is found after iterating through the entire array, it prints a message indicating that the test step failed (but does not throw an exception).\n9. Finally, it returns the integer value of `returnData`, parsed from a string using `Integer.parseInt`.",
        "input": [
            "String header",
            "String cdRequiredData"
        ],
        "output": "int"
    },
    {
        "class_name": "Opportunity",
        "function_name": "reduceApprovedWithInvoice",
        "code": "public void reduceApprovedWithInvoice(String tabName, String headerName, String header, String Approved,\n\t\t\tString balanced) {\n\t\ttry {\n\t\t\tint invoiceValue = getInvoiceData(tabName, headerName);\n\t\t\tint Approved_Value = get_CD_Data(header, Approved);\n\t\t\tint Balanced_Value = Approved_Value - invoiceValue;\n\t\t\tint expectedValue = get_CD_Data(header, balanced);\n\t\t\tif (Balanced_Value == expectedValue) {\n\t\t\t\tmanualScreenshot(\"CD Balance is displayed Correctly\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"CD Balance is not displayed Correctly\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t}",
        "description": "This Java method, named `reduceApprovedWithInvoice`, appears to be a part of an automated testing framework. It takes five parameters:\n\n1. `tabName`: the name of a table\n2. `headerName`: the name of a header or column in the table\n3. `header`: likely the header or column name that contains approval data\n4. `Approved`: the value associated with \"approved\" status\n5. `balanced`: the value associated with a balanced status\n\nThe method performs the following actions:\n\n1. Retrieves an invoice value from a database or data source using the `getInvoiceData` method.\n2. Retrieves two values from another data source using the `get_CD_Data` method:\n\t* The first value is associated with the \"approved\" status (Approved_Value).\n\t* The second value is associated with the \"balanced\" status (expectedValue).\n3. Calculates a balanced value by subtracting the invoice value from the approved value.\n4. Compares the calculated balanced value to the expected value.\n5. If the values match, it takes a manual screenshot using the `manualScreenshot` method with a message indicating that the CD balance is displayed correctly. Otherwise, it takes a manual screenshot with a message indicating that the CD balance is not displayed correctly.\n\nThe method catches any exceptions that may occur during its execution and does not handle them in any specific way.",
        "input": [
            "String tabName",
            "String headerName",
            "String header",
            "String Approved",
            "String balanced"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectDropdownValueUnderDocumentLib",
        "code": "public void selectDropdownValueUnderDocumentLib(String dropdownName, String dropdownValue) {\n\t\ttry {\n\t\t\tString drpDown = \"#xpath=(//span[text()='\" + dropdownName + \"']/../following::div//dd/select)[1]\";\n\t\t\twaitForElement(drpDown, 6);\n\t\t\tif (isElementDisplayed(drpDown, 5)) {\n\t\t\t\tscrollToWebElement(drpDown);\n\t\t\t\tselectFromDropdown(drpDown, dropdownValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"select Dropdown Value Under Document Lib failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, named `selectDropdownValueUnderDocumentLib`, is used to select a specific value from a dropdown menu that is located under a document library in a web application. \n\nThe method takes two parameters: `dropdownName` and `dropdownValue`. It uses an XPath expression to locate the dropdown element, waits for it to be displayed, scrolls to it if necessary, and then selects the specified value from the dropdown list.\n\nIf the dropdown is not present or any other exception occurs during execution, the method will fail the test step and log the error.",
        "input": [
            "String dropdownName",
            "String dropdownValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectBypassCheckBox",
        "code": "public void selectOrDeselectBypassCheckBox(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectBypassCheckBox`, is used to select or deselect a checkbox element on a web page based on the provided label name and status (\"check\" or \"uncheck\"). \n\nThe method first constructs an XPath expression to locate the checkbox element using its label name. It then uses this expression to find the checkbox, scroll into view if necessary, and check or uncheck it depending on the specified status.\n\nIf the operation is successful, a test step passes message is logged; otherwise, an error message is logged with details of the exception that occurred.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getStageInOppertuinitySearch",
        "code": "public String getStageInOppertuinitySearch(String OppertuinityNumber) {\n\t\tString Text = null;\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\tString stage = OppertuinityNumber + \" Stage#xpath=//tbody/tr/td[1]/a[text()='\" + OppertuinityNumber\n\t\t\t\t\t+ \"']//../following-sibling::td[1]/span\";\n\t\t\twaitForElement(stage, 10);\n\t\t\tif (isElementDisplayed(stage, 5)) {\n\t\t\t\tText = findWebElement(stage).getText();\n\t\t\t\tmanualScreenshot(OppertuinityNumber + \" is in \" + Text + \" Stage.\");\n\t\t\t\treturn Text;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(stage + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"failed to get stage. Exception: \" + e.toString());\n\t\t}\n\t\treturn Text;\n\t}",
        "description": "This Java method, `getStageInOppertuinitySearch`, takes a String parameter `OppertuinityNumber` and returns the corresponding stage as a String. The method attempts to:\n\n1. Refresh the current page using the `refreshPage()` method.\n2. Construct an XPath expression to locate an element containing the provided `OppertuinityNumber`.\n3. Wait for the element to be displayed using the `waitForElement()` method with a timeout of 10 seconds.\n4. Check if the element is displayed within 5 seconds using the `isElementDisplayed()` method.\n5. If the element is displayed, retrieve its text content using the `findWebElement()` method and return it as the stage name.\n6. If the element is not displayed or an exception occurs during the process, the method returns null and logs a test step failure.\n\nThe method also takes manual screenshots when the expected stage is found, logging the OppertuinityNumber and the corresponding stage name.",
        "input": [
            "String OppertuinityNumber"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnAssetCart",
        "code": "public void clickOnAssetCart() {\n\t\ttry {\n\t\t\tString link = \"Assert Cart #xpath=//span[text()='Assert Cart']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 6)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnAssetCart()`, attempts to click on an \"Assert Cart\" element in a web page. It uses Selenium WebDriver's `waitForElement()` and `isElementDisplayed()` methods to wait for the element to load and then check if it is displayed within a certain time frame (10 seconds). If the element is not displayed, the method fails the test step with an error message \"Assert Cart #xpath=//span[text()='Assert Cart'] is not present.\" If the element is displayed, it uses `clickOnSpecialElement()` to perform the actual click action. If any exception occurs during this process, the method fails the test step with an error message \"Failed to click the Assert Cart\".",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckBoxUnderDocumentLib",
        "code": "public void selectOrDeselectCheckBoxUnderDocumentLib(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = \"#xpath=//span[text()='\" + labelname + \"']/preceding-sibling::span/input\";\n\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (isElementDisplayed(checkBox, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToElement(checkBox);\n\t\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" check box is not available\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tscrollToElement(checkBox);\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxUnderDocumentLib`, is used to select or deselect a checkbox under a document library with the given label name and status (either \"check\" or \"uncheck\"). \n\nThe method uses Selenium WebDriver commands to:\n\n1. Check if the checkbox exists on the page.\n2. If it does, scroll to the element, check its current state, and then perform the desired action (checking or unchecking) based on the provided status.\n3. Log test results as either passed or failed.\n\nIf an exception occurs during the execution of this method, it will be logged in a log file and the test step will fail.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterRemarkValueInHoldDocument",
        "code": "public void enterRemarkValueInHoldDocument(String holdDocument, String remarkValue) {\n\t\ttry {\n\t\t\tString remarkTextfield = holdDocument + \" remark textfield #xpath=//span[text()='\" + holdDocument\n\t\t\t\t\t+ \"']//..//..//..//div[contains(@class,'tile__detail')]//textarea\";\n\t\t\twaitForElement(remarkTextfield, 20);\n\t\t\tif (isElementDisplayed(remarkTextfield, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(remarkTextfield);\n\t\t\t\ttypeIn(remarkTextfield, remarkValue);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(holdDocument + \" remark textfield is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Enter Remark Value In Hold Document. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterRemarkValueInHoldDocument`, is used to enter a remark value into a text field associated with a specific hold document. The method takes two parameters: the name of the hold document and the remark value to be entered.\n\nThe method first constructs an XPath expression to locate the text field based on the provided hold document name. It then waits for the element to be displayed, scrolls to it if necessary, enters the remark value, and finally verifies that the page has loaded successfully.\n\nIf any of these steps fail (e.g., the text field is not present), the method will report a test step failure with an error message indicating what went wrong.",
        "input": [
            "String holdDocument",
            "String remarkValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInFieldInTextAreaHoldDocUpload",
        "code": "public void enterValueInFieldInTextAreaHoldDocUpload(String labelName, String value) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../../../div//textarea\";\n\t\t\tString field1 = labelName + \"#xpath=(//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]/parent::div/following-sibling::div//textarea)[last()]\";\n\t\t\tif (isElementDisplayed(field, 20)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else if (isElementDisplayed(field1, 10)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\ttypeIn(field1, value);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a specified value into a text area field with the given label name. It uses two different XPath expressions to locate the textarea element, and attempts to scroll to and type the value into the first element it finds that matches either of these XPaths. If neither element is found, it reports an error. The method also includes try-catch logic to handle any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "enterValueInFieldInSubTabTextAreaHoldDocUpload",
        "code": "public void enterValueInFieldInSubTabTextAreaHoldDocUpload(String labelName, String Holdtype, String value) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString field = labelName + \"#xpath=(//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//a[text()='\" + Holdtype\n\t\t\t\t\t+ \"']/ancestor::div//textarea)[last()]\";\n\t\t\tif (isElementDisplayed(field, 20)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" field is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `enterValueInFieldInSubTabTextAreaHoldDocUpload`, enters a given value into a text area field within a sub-tab. The method takes three parameters: the label name of the field, the hold type (presumably to identify the correct field), and the value to be entered.\n\nHere's a step-by-step breakdown:\n\n1. It waits for 5 seconds using the `waitTime(5)` method.\n2. It constructs an XPath expression based on the provided label name and hold type to locate the text area field.\n3. It checks if the element is displayed within 20 seconds using the `isElementDisplayed` method. If it's not present, it logs a test step failure with the message \"LabelName field is not present\".\n4. If the element is displayed, it scrolls to the element using the `scrollToWebElement` method and then enters the provided value into the text area using the `typeIn` method.\n5. If any exception occurs during these steps, it catches the exception and logs a test step failure with the message \"Failed in enterValueInField [exception message]\".",
        "input": [
            "String labelName",
            "String Holdtype",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectvaluefromSaleHelpLineAdminlogin",
        "code": "public void selectvaluefromSaleHelpLineAdminlogin(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//div[@data-aura-class='forcePageBlockSectionRow']//span[text()='\"\n\t\t\t\t\t+ dropdownName + \"']//following::a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//a[@title='\" + value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromSaleHelpLineAdminlogin`, selects a value from a dropdown menu on a webpage. It takes two parameters: the name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method waits for 3 seconds using the `waitTime(3)` method.\n2. It then waits for the page to load completely using the `waitForPageToLoad()` method.\n3. The method constructs an XPath expression to locate the dropdown menu based on its name and the text within the dropdown.\n4. It waits for the dropdown menu to be displayed using the `waitForElement(dropdown, 10)` method with a timeout of 10 seconds.\n5. If the dropdown is displayed, it scrolls down to the dropdown menu using the `scrollbycordinates(dropdown)` method.\n6. The method then constructs an XPath expression to locate the desired value within the dropdown menu.\n7. It iterates up to 2 times:\n\t* Clicks on the dropdown menu using the `clickOnSpecialElement(dropdown)` method.\n\t* Waits for 1 second using the `waitTime(1)` method.\n\t* Waits for the desired value to be displayed within the dropdown menu using the `waitForElement(dropdownList, 6)` method with a timeout of 6 seconds.\n\t* If the value is displayed, it clicks on the value using the `clickOnSpecialElement(dropdownList)` method and sets a flag to true.\n8. If the flag remains false after the iterations, it means that the desired value was not found in the dropdown menu, so it fails the test step with an error message.\n9. If the flag is true, it passes the test step with a success message indicating that the value was successfully selected from the dropdown menu.\n\nIf any exception occurs during the execution of the method, it catches the exception and fails the test step with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckbox1",
        "code": "public void selectOrDeselectCheckbox1(String checkboxLabel, String checkBoxFlag) {\n\t\ttry {\n\t\t\tboolean check = Boolean.parseBoolean(checkBoxFlag);\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (check) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Gurumoorthy M\n\t * @created Date - May 09,2020\n\t * \n\t *          Description : This methos is used to verify the current stage of the\n\t *          opportunity\n\t * \n\t */",
        "description": "This Java method, `selectOrDeselectCheckbox1`, is used to select or deselect a checkbox based on the provided label and flag. \n\nThe method takes two parameters: `checkboxLabel` (the text label of the checkbox) and `checkBoxFlag` (a boolean value indicating whether the checkbox should be selected (`true`) or deselected (`false`)). \n\nIt first parses the boolean value from the `checkBoxFlag`. Then, it constructs an XPath expression to locate the checkbox element based on its label. It then waits for the checkbox element to be present and visible before performing the selection or deselection action.\n\nIf the `checkBoxFlag` is `true`, the method checks if the checkbox is already selected. If not, it selects the checkbox; otherwise, it logs a message indicating that the checkbox is already checked. \n\nIf the `checkBoxFlag` is `false`, the method does the opposite: it checks if the checkbox is already deselected and then deselects it if necessary.\n\nThe method also includes error handling to catch any exceptions that may occur during its execution.",
        "input": [
            "String checkboxLabel",
            "String checkBoxFlag"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyCurrentStageOfOpportunity",
        "code": "public void verifyCurrentStageOfOpportunity() {\n\t\ttry {\n\t\t\twaitTime(10);\n\t\t\t// refreshPage();\n\t\t\twaitTime(10);\n\t\t\twaitForElement(currentStage_Opp, 60);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 30)) {\n\t\t\t\tString stageValue = getText(currentStage_Opp);\n\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCurrentStageOfOpportunity`, is used to verify the current stage of an opportunity in a system. The method attempts to:\n\n1. Wait for 10 seconds.\n2. Refresh the page (commented out).\n3. Wait for 10 seconds again.\n4. Wait up to 60 seconds for an element `currentStage_Opp` to be displayed.\n5. If the element is displayed within 30 seconds, it retrieves the text value of the element and takes a manual screenshot with a message indicating the current stage.\n6. If the element is not displayed or an exception occurs, the method fails the test step.\n\nThe method catches any exceptions that may occur during its execution and reports them as a failed test step.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyCurrentStageOfOpportunityWithoutRefresh",
        "code": "public void verifyCurrentStageOfOpportunityWithoutRefresh() {\n\t\ttry {\n\t\t\twaitTime(20);\n\t\t\twaitForElement(currentStage_Opp, 60);\n\t\t\tif (isElementDisplayed(currentStage_Opp, 30)) {\n\t\t\t\tString stageValue = getText(currentStage_Opp);\n\t\t\t\tscrollToWebElement(currentStage_Opp);\n\t\t\t\tmanualScreenshot(\"Opportunity Currently in \" + stageValue + \" stage.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to display the stage.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Current Stage Of Opportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCurrentStageOfOpportunityWithoutRefresh`, is used to verify the current stage of an opportunity without refreshing the page. Here's a brief summary:\n\n1. It waits for 20 seconds using the `waitTime` method.\n2. Then, it waits for up to 60 seconds for the element `currentStage_Opp` to be displayed using the `waitForElement` method with a timeout of 30 seconds if the element is not displayed within that time.\n3. If the element is displayed, it extracts the text value from the element and scrolls to that element using the `scrollToWebElement` method.\n4. It takes a manual screenshot with a message indicating the current stage of the opportunity (e.g., \"Opportunity Currently in [stageValue] stage.\").\n5. If any exception occurs during this process, it catches the exception and marks the test step as failed, reporting the error message.\n\nIn summary, this method is used to verify the current stage of an opportunity without refreshing the page, and if successful, takes a manual screenshot with the stage value.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyDealerCharge",
        "code": "public String VerifyDealerCharge(String label, String Opportunity) {\n\t\tString Charge = \"\";\n\t\ttry {\n\t\t\tString charge = label + \"#xpath=//a[text()='\" + label\n\t\t\t\t\t+ \"']/following::span[@class='slds-truncate forceOutputCurrency']\";\n\t\t\tString link = \"OpportunityCharges#xpath=//span[text()='Opportunity Charges']/parent::a\";\n\t\t\twaitForElement(link, 5);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForElement(charge, 5);\n\t\t\t\tif (isElementDisplayed(charge, 4)) {\n\t\t\t\t\tscrollToWebElement(charge);\n\t\t\t\t\thighLighterMethod(charge);\n\t\t\t\t\tCharge = getText(charge);\n\t\t\t\t\tmanualScreenshot(label + \" has a value of Rs, [\" + Charge + \"]\");\n\t\t\t\t\t// waitForElement(opportunity, 5);\n\t\t\t\t\twaitTime(4);\n\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t;\n\t\t\t\t\twaitTime(4);\n\t\t\t\t\t// clickOn(opportunity);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"There is no \" + label + \" charges\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn Charge;\n\t}",
        "description": "This Java method, named `VerifyDealerCharge`, appears to be used for verifying the dealer charge associated with a specific opportunity in a web application. The method takes two parameters: `label` and `Opportunity`.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the dealer charge element on the page.\n2. It waits for the Opportunity Charges link to be displayed, then clicks on it.\n3. It waits for the dealer charge element to be displayed, then scrolls to it and highlights it using a highlighting method (not shown in this code snippet).\n4. It extracts the value of the dealer charge from the web page using `getText(charge)`.\n5. If the dealer charge is found, it takes a manual screenshot with the label and the charge value.\n6. It then navigates back to the previous page and waits for 4 seconds before returning control.\n\nIf the dealer charge is not found, it fails the test step by calling `testStepFailed(\"There is no \" + label + \" charges\")`.\n\nThe method returns the extracted dealer charge value as a string.",
        "input": [
            "String label",
            "String Opportunity"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyDealerChargewithoutvalidation",
        "code": "public String VerifyDealerChargewithoutvalidation(String label, String Opportunity) {\n\t\tString Charge = \"\";\n\t\ttry {\n\t\t\tString charge = label + \"#xpath=//a[text()='\" + label\n\t\t\t\t\t+ \"']/following::span[@class='slds-truncate forceOutputCurrency']\";\n\t\t\tString link = \"OpportunityCharges#xpath=//span[text()='Opportunity Charges']/parent::a\";\n\t\t\tString opportunity = Opportunity + \"#xpath=//span[text()='\" + Opportunity + \"']/parent::a\";\n\t\t\twaitForElement(link, 5);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForElement(charge, 5);\n\t\t\t\tif (isElementDisplayed(charge, 4)) {\n\t\t\t\t\tscrollToWebElement(charge);\n\t\t\t\t\thighLighterMethod(charge);\n\t\t\t\t\tCharge = getText(charge);\n\t\t\t\t\tmanualScreenshot(label + \" has a value of Rs, [\" + Charge + \"]\");\n\t\t\t\t\t// waitForElement(opportunity, 5);\n\t\t\t\t\t// clickOn(opportunity);\n\t\t\t\t\tdriver.navigate().back();\n\t\t\t\t\t;\n\t\t\t\t\twaitTime(4);\n\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"There is no \" + label + \" charges\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t}\n\t\treturn Charge;\n\t}",
        "description": "This Java method, `VerifyDealerChargewithoutvalidation`, appears to be a part of an automation script that interacts with a web application. The method takes two string parameters: `label` and `Opportunity`. Its primary function is to verify the charges associated with the given `label` and `Opportunity`.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It initializes an empty string variable `Charge`.\n2. It attempts to execute a series of actions:\n\t* It constructs three XPath expressions: one for the label, one for the Opportunity Charges link, and another for the opportunity itself.\n\t* It waits for the Opportunity Charges link to be displayed (up to 5 seconds) and then clicks on it.\n\t* It waits for the charge associated with the given `label` to be displayed (up to 5 seconds).\n\t* If the charge is displayed, it scrolls to the element, highlights it using a custom method (`highLighterMethod`), extracts the text content of the charge, and stores it in the `Charge` variable.\n\t* It takes a manual screenshot with a message indicating that the label has a value of the extracted charge amount.\n\t* It navigates back to the previous page (using `driver.navigate().back()`).\n3. If the charge is not displayed, it takes a manual screenshot with a message indicating that there are no charges for the given label.\n\nThe method returns the extracted `Charge` value as a string. Note that the catch block is empty, which means that any exceptions thrown during the execution of the method will be silently ignored.",
        "input": [
            "String label",
            "String Opportunity"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyButtonisEnabledOrNot",
        "code": "public void VerifyButtonisEnabledOrNot(String buttonName) {\n\t\ttry {\n\t\t\tString enabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\tString disabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"' and @disabled='true']\";\n\t\t\twaitForElement(enabledbutton, 10);\n\t\t\tWebElement findWebElement = findWebElement(enabledbutton);\n\t\t\tif (findWebElement.isEnabled()) {\n\t\t\t\tscrollbycordinates(enabledbutton);\n\t\t\t\thighLighterMethod(enabledbutton);\n\t\t\t\tmanualScreenshot(buttonName + \" Is Enabled\");\n\t\t\t} else if (isElementDisplayed(disabledbutton, 4)) {\n\t\t\t\ttestStepInfo(disabledbutton + \" Field is disabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Checking visibility of element \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `VerifyButtonisEnabledOrNot`, is used to verify the enabled or disabled state of a button with a given name. The method uses Selenium WebDriver and Automation Anywhere tools to perform the verification.\n\nHere's what it does:\n\n1. It constructs two XPath expressions: one for an enabled button and another for a disabled button, based on the provided `buttonName`.\n2. It waits for the enabled button to be present using `waitForElement` method.\n3. If the button is found and enabled, it scrolls to the button, highlights it (using `highLighterMethod`), and takes a manual screenshot with a message indicating that the button is enabled.\n4. If the button is not enabled, but is displayed (i.e., it's disabled), it checks if the disabled button is present using `isElementDisplayed` method and logs a test step information for the disabled state.\n5. If any exception occurs during the verification process, it catches the exception and marks the test as failed with an error message.\n\nIn summary, this method verifies whether a button with a given name is enabled or not, and provides feedback on its state through screenshots and log messages.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyButtonisEnabledOrNotInPopup",
        "code": "public void VerifyButtonisEnabledOrNotInPopup(String buttonName) {\n\t\ttry {\n\t\t\tString enabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\tString disabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"' and @disabled]\";\n\t\t\twaitForElement(enabledbutton, 10);\n\t\t\tWebElement findWebElement = findWebElement(enabledbutton);\n\t\t\tif (findWebElement.isEnabled()) {\n\t\t\t\tscrollbycordinates(enabledbutton);\n\t\t\t\thighLighterMethod(enabledbutton);\n\t\t\t\tmanualScreenshot(buttonName + \" button is enabled\");\n\t\t\t} else if (isElementDisplayed(disabledbutton, 4)) {\n\t\t\t\tmanualScreenshot(disabledbutton + \" Field is disabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Checking visibility of element \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `VerifyButtonisEnabledOrNotInPopup`, verifies whether a button with the given name is enabled or disabled in a popup. Here's a brief summary:\n\n1. It constructs two XPath expressions: one for an enabled button and another for a disabled button.\n2. It waits for the enabled button to be visible using `waitForElement`.\n3. If the enabled button is found, it:\n\t* Scrolls the button into view using `scrollbycordinates`.\n\t* Highlights the button using `highLighterMethod`.\n\t* Takes a manual screenshot with a message indicating that the button is enabled.\n4. If the disabled button is displayed instead (after waiting for 4 seconds), it takes a manual screenshot with a message indicating that the button is disabled.\n5. If any exception occurs during this process, it logs an error and marks the test step as failed using `testStepFailed`.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyButtonisPresentOrNot",
        "code": "public void VerifyButtonisPresentOrNot(String buttonName) {\n\t\ttry {\n\t\t\tString enabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(enabledbutton, 10);\n\t\t\tif (isElementDisplayed(enabledbutton, 5)) {\n\t\t\t\tscrollbycordinates(enabledbutton);\n\t\t\t\thighLighterMethod(enabledbutton);\n\t\t\t\tmanualScreenshot(buttonName + \" button is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not Present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Checking visibility of element \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyButtonisPresentOrNot`, checks if a specific button with the given name is present on the UI. It uses an XPath expression to locate the button and then performs the following actions:\n\n1. Waits for the element to be displayed (up to 10 seconds).\n2. If the button is displayed, it scrolls to the button, highlights it using `highLighterMethod`, and takes a manual screenshot with a message indicating that the button is present.\n3. If the button is not displayed within the given time limit (5 seconds), it marks the test step as failed.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyButtonisEnabledOrNotInBankingIMPS",
        "code": "public boolean VerifyButtonisEnabledOrNotInBankingIMPS(String buttonName) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString enabledbutton = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(enabledbutton, 10);\n\t\t\tWebElement findWebElement = findWebElement(enabledbutton);\n\t\t\tif (findWebElement.isEnabled()) {\n\t\t\t\tscrollbycordinates(enabledbutton);\n\t\t\t\thighLighterMethod(enabledbutton);\n\t\t\t\tflag = true;\n\t\t\t\tmanualScreenshot(buttonName + \" Is Enabled\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(enabledbutton + \" Field is disabled\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Checking visibility of element \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `VerifyButtonisEnabledOrNotInBankingIMPS`, checks whether a button with the given name is enabled or not in a Banking IMPS (Internet Mobile Payment System) application. \n\nThe method takes a string parameter `buttonName` which represents the name of the button to be checked. It uses Selenium WebDriver methods such as `waitForElement` and `findWebElement` to locate the element, and then checks if it is enabled using the `isEnabled()` method. If the button is enabled, it performs some additional actions like scrolling to the element, highlighting it, and taking a manual screenshot. \n\nIf the button is not enabled, it logs a test step failure message. The method returns a boolean value indicating whether the button was found and its state (enabled or disabled).",
        "input": [
            "String buttonName"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Opportunity",
        "function_name": "editOrChooseValueFromSearchAndListField",
        "code": "public void editOrChooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\tString deleteIcon = \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::label//following-sibling::div//a[@class='deleteAction']\";\n\t\t\twaitForElement(deleteIcon, 10);\n\t\t\tif (isElementDisplayed(deleteIcon, 5)) {\n\t\t\t\tscrollToElement(deleteIcon);\n\t\t\t\thighLighterMethod(deleteIcon);\n\t\t\t\tclickOnSpecialElement(deleteIcon);\n\t\t\t}\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div[@role='option'][1]/span[contains(text(),'\" + value + \"')] \";\n\t\t\t\twaitForElement(search_icn);\n\t\t\t\tclickOn(search_icn);\n\t\t\t\twaitForElement(lnk_zipCity, 10);\n\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `editOrChooseValueFromSearchAndListField`, appears to be a part of an automation test script. It takes two parameters: `labelName` and `value`. The method attempts to edit or choose a value from a search field and list field based on the provided label name and value.\n\nHere's what the method does:\n\n1. It constructs three XPath expressions:\n\t* `searchField`: A search field with the given label name.\n\t* `lnk_zipCity`: A link with the given value.\n\t* `deleteIcon`: An icon for deleting an item with the given label name.\n2. It waits for the delete icon to be displayed and then performs a series of actions:\n\t* Scrolls to the delete icon.\n\t* Highlights the element using a highlighting method (not shown).\n\t* Clicks on the delete icon.\n3. If the search field is displayed, it types in the value, searches for the value, clicks on the search result, and then clicks on the link with the given value.\n4. If the search field is not present, it fails the test step.\n\nThe method also includes error handling using a `try`-`catch` block. If an exception occurs, it fails the test step with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifySubFieldValueUnderDocumentLib",
        "code": "public String verifySubFieldValueUnderDocumentLib(String labelName, String subFieldLabel) {\n\t\tString returnValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString status = \"#xpath=(//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/preceding-sibling::span/following::div//dt[text()='\" + subFieldLabel\n\t\t\t\t\t+ \"']/following-sibling::dd)[1]\";\n\t\t\twaitForElement(status, 10);\n\t\t\tif (isElementDisplayed(status, 5)) {\n\t\t\t\tscrollToWebElement(status);\n\t\t\t\tif (!getText(status).isEmpty()) {\n\t\t\t\t\treturnValue = getText(status);\n\t\t\t\t\thighLighterMethod(status);\n\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\tsubFieldLabel + \" of \" + labelName + \" field is having value : \" + getText(status));\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(subFieldLabel + \" of \" + labelName + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Verify Status Value Under Document Lib failed. Exception: \" + e.toString());\n\t\t}\n\t\treturn returnValue;\n\t}",
        "description": "This Java method, named `verifySubFieldValueUnderDocumentLib`, is used to verify the value of a sub-field under a specific label in a document library. The method takes two parameters: `labelName` and `subFieldLabel`. \n\nIt first waits for the page to load, then uses an XPath expression to locate the element containing the sub-field with the given label. It then verifies if this element is displayed, scrolls to it, and checks if its value is not empty. If all these conditions are met, it returns the value of the sub-field, highlights it on the screen, and takes a screenshot. \n\nIf any of these conditions fail (e.g., the element is not displayed or its value is empty), it reports a test step failure with an appropriate error message. In case of any exceptions during this process, it logs the exception to a log file and also reports a test step failure.",
        "input": [
            "String labelName",
            "String subFieldLabel"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityPostDOStageDocumentLib1",
        "code": "public void opportunityPostDOStageDocumentLib1(String DocumentlibLabel, String CustomerPhotoLabel, String ECSLabel,\n\t\t\tString LTSLabel, String InvoiceLabel, String applicationFormLabel, String cancelledchequeLabel,\n\t\t\tString poiImageLabel, String poaImageLabel, String OVDPOA, String uploadCustomerPhoto,\n\t\t\tString saveButtonLabel) {\n\t\ttry {\n\t\t\tclickOnLink(DocumentlibLabel);\n\t\t\twaitTime(2);\n\t\t\tString[] arr = { CustomerPhotoLabel, ECSLabel, LTSLabel, InvoiceLabel, applicationFormLabel, \"OVD POA\",\n\t\t\t\t\tcancelledchequeLabel, poiImageLabel, poaImageLabel, \"PAN/Form60\" };\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t}\n\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\tclickOnButton(saveButtonLabel);\n\t\t\twaitTime(5);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `opportunityPostDOStageDocumentLib1`, appears to be a part of an automation script for a web-based application. The method takes 14 string parameters and performs the following actions:\n\n1. Clicks on a link with the label provided in the `DocumentlibLabel` parameter.\n2. Waits for 2 seconds using the `waitTime(2)` method.\n3. Iterates over an array of labels (provided in the `arr` variable) and:\n\t* Prints each label to the console.\n\t* Selects or deselects a checkbox under the document library with the same label, using the `selectOrDeselectCheckBoxUnderDocumentLib` method.\n4. Uploads a customer photo using the `documentToUpload` method, passing in the `uploadCustomerPhoto` parameter.\n5. Clicks on a button with the label provided in the `saveButtonLabel` parameter.\n6. Waits for 5 seconds using the `waitTime(5)` method.\n\nIf any exceptions occur during these actions, the method catches them and calls the `testStepFailed` method to report the failure.",
        "input": [
            "String DocumentlibLabel",
            "String CustomerPhotoLabel",
            "String ECSLabel",
            "String LTSLabel",
            "String InvoiceLabel",
            "String applicationFormLabel",
            "String cancelledchequeLabel",
            "String poiImageLabel",
            "String poaImageLabel",
            "String OVDPOA",
            "String uploadCustomerPhoto",
            "String saveButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "ClickSubTabInDoclib",
        "code": "public void ClickSubTabInDoclib(String labelName, String SubTab) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString field = SubTab + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//dl//a[text()='\" + SubTab + \"']\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToElement(field);\n\t\t\t\tclickOnSpecialElement(field);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(labelName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickSubTabInDoclib \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `ClickSubTabInDoclib`, simulates a click on a specific subtab within the Doclib application. It takes two parameters: `labelName` and `SubTab`. \n\nThe method first waits for 5 seconds using the `waitTime(5)` function. Then it constructs an XPath expression to locate the desired subtab based on the provided `labelName` and `SubTab`.\n\nIt then waits for the element to be displayed within 20 seconds using the `waitForElement(field, 20)` function. If the element is displayed, it scrolls to the element using the `scrollToElement(field)` function and simulates a click on the element using the `clickOnSpecialElement(field)` function.\n\nIf the element is not displayed after waiting for 3 seconds, it logs an error message stating that the link is not present. If any exception occurs during the execution of this method, it logs the failure message with the exception message.",
        "input": [
            "String labelName",
            "String SubTab"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "SeleckCheckBoxInPopup",
        "code": "public void SeleckCheckBoxInPopup(String Label) {\n\t\ttry {\n\t\t\tString button = \"checkbox#xpath=//span[text()='\" + Label + \"']/preceding-sibling::span\";\n\t\t\tString button1 = \"checkbox#xpath=//label[text()='\" + Label + \"']/preceding-sibling::input\";\n\n\t\t\tif (isElementDisplayed(button, 20)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepPassed(Label + \"is marked as True\");\n\t\t\t} else if (isElementDisplayed(button1, 5)) {\n\t\t\t\tclickOnSpecialElement(button1);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepPassed(Label + \"is marked as True\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to check \" + Label + \" checkbox\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `SeleckCheckBoxInPopup`, is used to select a checkbox with the given label in a popup. It uses XPath expressions to locate the checkbox and its corresponding label. The method attempts to click on the checkbox or its label if it's displayed within a certain time limit (20 seconds for the first expression and 5 seconds for the second). If successful, it logs a test step as passed; otherwise, it fails the test step with an error message. If any exception occurs during execution, it also logs a test step failure with the exception message.",
        "input": [
            "String Label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickonbankpopbuttonFOS",
        "code": "public void clickonbankpopbuttonFOS(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString button = buttonName + \"#xpath=//div[@class='c-container']/following::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\tscrollToElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `clickonbankpopbuttonFOS`, simulates a click on a specific bank pop-up button with the given name. It uses Selenium WebDriver to:\n\n1. Wait for 5 seconds using the `waitTime` method.\n2. Create an XPath expression to locate the button with the specified name and class `c-container`.\n3. Check if the element is displayed using the `isElementDisplayed` method.\n4. If the element is displayed, scroll to it using `scrollToElement` and then click on it using `clickOnSpecialElement`.\n5. If the element is not displayed, take a manual screenshot with the button name as the file name.\n\nIf any exception occurs during this process, it will be caught and the test step will fail with an error message containing the exception's message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "workAroundForBankNameFieldWithOutBankDetails",
        "code": "public void workAroundForBankNameFieldWithOutBankDetails() {\n\t\ttry {\n\t\t\ttestStepInfo(\"****** Workaround for Freezed Bank name field ******\");\n\t\t\twaitTime(6);\n\t\t\tclickonbankpopbutton(\"Edit\");\n\t\t\t// selectOrDeselectCheckBoxInBank(\"Change ECS\",\"check\");\n\t\t\twaitTime(2);\n\t\t\tclickonbankpopbuttonFOS(\"Save\");\n\t\t\twaitTime(9);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method is a work-around for a specific issue related to the \"Bank Name\" field in a banking application. The method performs the following steps:\n\n1. It displays a test step info message indicating that it's working around an issue with the \"Bank Name\" field.\n2. It waits for 6 seconds.\n3. It clicks on the \"Edit\" button in the bank popup.\n4. It waits for another 2 seconds.\n5. It clicks on the \"Save\" button in the bank popup (FOS stands for Full Online Statement, likely referring to a specific feature or mode in the application).\n6. Finally, it waits for 9 seconds before completing.\n\nThe method uses try-catch block to handle any exceptions that might occur during its execution and prints the stack trace of the exception if one occurs.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "editPencilIconOnField",
        "code": "public void editPencilIconOnField(String fieldName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(2);\n\t\t\tString link = fieldName + \"#xpath=//div//span[text()='\" + fieldName\n\t\t\t\t\t+ \"']//../following-sibling::div//button//span\";\n\t\t\tscrollbycordinates(link);\n\t\t\twaitForElement(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tscrollbycordinates(link);\n\t\t\t\t// manualScreenshot(\"Click on\" + fieldName);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(3);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(fieldName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 6, 2022\n\t * @purpose : This method is used to capture the Ocr hold message in FOS Opp\n\t *          page.\n\t */",
        "description": "This Java method, `editPencilIconOnField`, appears to be a part of an automated testing framework. Its purpose is to edit the pencil icon on a specific field (identified by the `fieldName` parameter) within a web page.\n\nThe method first waits for the page to load and then navigates to the desired field using XPath expressions. It then verifies if the element is present, and if so, clicks on it. If the element is not present, it takes a manual screenshot with a failure message.\n\nThe method also includes error handling using a `try-catch` block, which will catch any exceptions that occur during the execution of the method and report them as test failures.\n\nIn summary, this method is used to interact with a specific field on a web page by clicking on its pencil icon.",
        "input": [
            "String fieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyOCRHoldMessageInOppPage",
        "code": "public void verifyOCRHoldMessageInOppPage() {\n\t\ttry {\n\t\t\tString messagefield = \"OCR hold message#xpath=//p[text()='This opportunity is hold by OCR.']\";\n\t\t\twaitForElement(messagefield, 15);\n\t\t\tif (isElementDisplayed(messagefield, 10)) {\n\t\t\t\tscrollToWebElement(messagefield);\n\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\"Successfully [ \" + getText(messagefield) + \" ] message is present on opportunity page.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected [This opportunity is hold by OCR.] message is not present in FOS.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyOCRHoldMessageInOppPage. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 6, 2022\n\t * @purpose : This method is used to maintain the colour value with Hex value.\n\t * @param hexColor : Need to pass the argument as hex colour value in String\n\t *                 format.\n\t * @return : It will return the colour name based on the Hex value.\n\t */",
        "description": "This Java method, `verifyOCRHoldMessageInOppPage`, is used to verify if a specific message (\"This opportunity is hold by OCR.\") is present on an Opportunity page. \n\nHere's what it does:\n\n1. It waits for 15 seconds for the specified element (message) to be loaded.\n2. If the element is displayed, it scrolls down to that element and takes a manual screenshot with a log message indicating that the expected message is present on the opportunity page.\n3. If the element is not displayed within 10 seconds, it fails the test step with an error message indicating that the expected message is not present in the FOS (Field of Study).\n\nThe method also includes exception handling to catch any unexpected errors and report them as test failures.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "getColorName",
        "code": "public String getColorName(String hexColor) {\n\t\tString name = \"\";\n\t\tswitch (hexColor.toLowerCase()) {\n\t\tcase \"#ff0000\":\n\t\t\tname = \"Red\";\n\t\t\tbreak;\n\t\tcase \"#13a026\":\n\t\t\tname = \"Green\";\n\t\t\tbreak;\n\t\tcase \"#0000ff\":\n\t\t\tname = \"Blue\";\n\t\t\tbreak;\n\t\tcase \"#ffffff\":\n\t\t\tname = \"White\";\n\t\t\tbreak;\n\t\tcase \"#000000\":\n\t\t\tname = \"Black\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tname = \"Unknown\";\n\t\t\tbreak;\n\t\t}\n\t\treturn name;\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 6, 2022\n\t * @purpose : This method is used to select the checkbox in OCR Screen layout in\n\t *          FOS.\n\t * @param checkboxLabel : Label to provide into STRING format.\n\t * @param check         : Check value should be in boolean format.\n\t */",
        "description": "This Java method, `getColorName`, takes a hexadecimal color code as input and returns the corresponding color name (e.g., \"Red\", \"Green\", \"Blue\", etc.) in string format. The method uses a switch statement to match the input hex color code with its corresponding color name. If the input hex color code does not match any of the predefined cases, the method returns \"Unknown\".",
        "input": [
            "String hexColor"
        ],
        "output": "String"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectOrDeselectCheckboxInOCRScreen",
        "code": "public void selectOrDeselectCheckboxInOCRScreen(String checkboxLabel, boolean check) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//div[normalize-space()='\" + checkboxLabel\n\t\t\t\t\t+ \"']/following-sibling::input\";\n\t\t\twaitForElement(checkbox, 15);\n\t\t\tif (isElementDisplayed(checkbox, 10)) {\n\t\t\t\tif (check) {\n\t\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\t\tscrollToWebElement(checkbox);\n\t\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already checked\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\t\tscrollToWebElement(checkbox);\n\t\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already unchecked\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(checkboxLabel + \" checkbox is present in this page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckboxInOCRScreen. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 6, 2022\n\t * @purpose : To verify the colour of the element in OCR screen layout in FOS\n\t *          page.\n\t * @param docName            : Need to pass document name in this argument.\n\t * @param fieldName          : Need to pass field name in this argument.\n\t * @param expectedColorValue : Need to pass the expected colour name.\n\t */",
        "description": "This Java method, `selectOrDeselectCheckboxInOCRScreen`, is used to select or deselect a checkbox in an OCR (Optical Character Recognition) screen layout. The method takes two parameters: `checkboxLabel` (the label of the checkbox) and `check` (a boolean indicating whether to check or uncheck the box).\n\nThe method attempts to locate the checkbox using XPath, waits for it to be displayed, and then checks if it is already checked or unchecked based on the value of the `check` parameter. If the checkbox is not present in the page, the test fails. If an exception occurs during execution, the test also fails.\n\nThis method appears to be part of a larger automation framework designed to test a specific application (FOS) and its OCR screen layout.",
        "input": [
            "String checkboxLabel",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyFieldColorInOCRScreen",
        "code": "public void verifyFieldColorInOCRScreen(String docName, String fieldName, String expectedColorValue) {\n\t\ttry {\n\t\t\tString field = docName + \"#xpath=//div[text()='\" + docName + \"']/following-sibling::div//span[text()='\"\n\t\t\t\t\t+ fieldName + \"']/following-sibling::span\";\n\t\t\twaitForElement(field, 15);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tWebElement element = findWebElement(field);\n\t\t\t\tString cssValue = element.getCssValue(\"background\").split(\" none\")[0];\n\t\t\t\tString actualHexColourValue = Color.fromString(cssValue).asHex();\n\t\t\t\tString actualColourValue = getColorName(actualHexColourValue);\n\t\t\t\tif (actualColourValue.equalsIgnoreCase(expectedColorValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + fieldName + \" ] field colour is updated into [ \"\n\t\t\t\t\t\t\t+ actualColourValue + \" ] colour.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(fieldName + \" field colour is not updated in [ \" + expectedColorValue + \" ]\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field is present under [ \" + docName + \" ] in OCR screen\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldColorInOCRScreen. Exception : \" + e.getMessage());\n\t\t}\n\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Dec 26, 2022\n\t * @purpose : To select all checkbox in newQC popup.\n\t */",
        "description": "This Java method is used to verify the color of a specific field on an OCR (Optical Character Recognition) screen. It takes three parameters: `docName`, `fieldName`, and `expectedColorValue`. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided `docName` and `fieldName`.\n2. It waits for the element to be displayed, then scrolls to that element if necessary.\n3. It gets the CSS value of the background color of the field and converts it into a hexadecimal color code.\n4. It compares this actual color with the expected color value provided as an input parameter.\n5. If the colors match, it takes a manual screenshot to confirm the successful verification. \n6. If the colors do not match or if the field is not displayed, it fails the test step and provides an error message.\n\nThis method catches any exceptions that may occur during its execution and reports them as failed test steps.",
        "input": [
            "String docName",
            "String fieldName",
            "String expectedColorValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectAllCheckboxInQCPopup",
        "code": "public void selectAllCheckboxInQCPopup() {\n\t\ttry {\n\t\t\tString listOfCheckbox = \"#xpath=((//div[@class='cuf-content']//input[@type='checkbox'])/following::label/span/following-sibling::span)\";\n\t\t\twaitForElement(listOfCheckbox, 15);\n\t\t\tif (isElementDisplayed(listOfCheckbox, 15)) {\n\t\t\t\tList<WebElement> listOfWebelements = findWebElements(listOfCheckbox);\n\t\t\t\tfor (int iteration = 0; iteration < listOfWebelements.size(); iteration++) {\n\t\t\t\t\tif (listOfWebelements.get(iteration).isEnabled()) {\n\t\t\t\t\t\tint count = iteration + 1;;\n\t\t\t\t\t\tString checkboxField = \"#xpath=((//div[@class='cuf-content']//input[@type='checkbox'])/following::label/span/following-sibling::span)\" + \"[\" + count + \"]\";\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\tString text=getText(checkboxField);\n\t\t\t\t\t\ttext=text.split(\":\")[0];\n\t\t\t\t\t\tcheckboxField = text+\"#xpath=((//div[@class='cuf-content']//input[@type='checkbox'])/following::label/span/following-sibling::span)\" + \"[\" + count + \"]\";\n\t\t\t\t\t\tclickOn(checkboxField);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\t// listOfWebelements.get(iteration).click();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Checkbox is not present in QC popup.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectAllCheckboxInQCPopup. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectAllCheckboxInQCPopup`, is designed to interact with a set of checkboxes within a Quality Control (QC) popup. Here's a brief overview of what the method does:\n\n1. It waits for an element with the specified XPath (`#xpath=((//div[@class='cuf-content']//input[@type='checkbox'])/following::label/span/following-sibling::span)`) to be displayed within 15 seconds.\n2. If the element is displayed, it retrieves a list of web elements that match the XPath.\n3. The method then loops through each checkbox in the list and:\n\t* Checks if the checkbox is enabled (i.e., can be clicked).\n\t* Scrolls to the checkbox, gets its text, extracts the checkbox label, and constructs a new XPath string based on the label.\n\t* Clicks on the checkbox using the constructed XPath.\n4. If any of these steps fail or an exception occurs, the method reports a test step failure with an appropriate error message.\n\nIn summary, this method is designed to select all checkboxes within a QC popup that are enabled and can be clicked.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "selectdeclarationCheckboxInQCPopup",
        "code": "public void selectdeclarationCheckboxInQCPopup(String label) {\n\t\ttry {\n\t\t\tString listOfCheckbox = \"#xpath=(//div[@class='cuf-content']//input[@type='checkbox'])/following::label[text()='\"\n\t\t\t\t\t+ label + \"']\";\n\t\t\twaitForElement(listOfCheckbox, 15);\n\t\t\tif (isElementDisplayed(listOfCheckbox, 15)) {\n\t\t\t\tscrollToElement(listOfCheckbox);\n\t\t\t\tclickOnSpecialElement(listOfCheckbox);\n\t\t\t\tString text = getText(listOfCheckbox);\n\t\t\t\ttestStepPassed(\"Click On : \" + text);\n\t\t\t\twaitTime(1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Checkbox is not present in QC popup.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectAllCheckboxInQCPopup. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectdeclarationCheckboxInQCPopup`, is used to select a specific checkbox with the given label from a Quality Center (QC) popup. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the checkbox element based on its class and type.\n2. It waits for the checkbox element to be displayed within a certain time limit (15 seconds).\n3. If the checkbox is found, it scrolls to the element, clicks on it, and verifies that the action was successful by checking if the text of the label matches the given label.\n4. If the checkbox is not present in the popup, it fails the test step.\n5. In case an exception occurs during the execution of this method, it also fails the test step with a descriptive error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "verifyAllCheckboxInQCPopupFreeze",
        "code": "public void verifyAllCheckboxInQCPopupFreeze() {\n\t\ttry {\n\t\t\tString listOfCheckbox = \"#xpath=((//div[@class='cuf-content']//input[@type='checkbox' and @disabled])/following::label/span/following-sibling::span)\";\n\t\t\twaitForElement(listOfCheckbox, 15);\n\t\t\tif (isElementDisplayed(listOfCheckbox, 15)) {\n\t\t\t\tList<WebElement> listOfWebelements = findWebElements(listOfCheckbox);\n\t\t\t\tfor (int iteration = 0; iteration < listOfWebelements.size(); iteration++) {\n\t\t\t\t\tif (listOfWebelements.get(iteration).isEnabled()) {\n\t\t\t\t\t\tint count = iteration + 1;\n\t\t\t\t\t\tString checkboxField = listOfCheckbox + \"[\" + count + \"]\";\n\t\t\t\t\t\tString text=getText(checkboxField);\n\t\t\t\t\t\ttext=text.replace(\":\", \"\");\n\t\t\t\t\t\tscrollToElement(checkboxField);\n\t\t\t\t\t\ttestStepPassed(text + \" checkbox is disabled\");\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\t// listOfWebelements.get(iteration).click();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Checkbox is not present in QC popup.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectAllCheckboxInQCPopup. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyAllCheckboxInQCPopupFreeze`, is used to verify that all checkboxes in a Quality Control (QC) popup are disabled. \n\nHere's what it does:\n\n1. It waits for an element with the specified XPath to be displayed within a certain time limit.\n2. If the element is displayed, it finds all web elements matching that XPath and iterates over them.\n3. For each checkbox, it checks if the checkbox is enabled (i.e., not disabled). \n4. If a checkbox is enabled, it scrolls to that checkbox, verifies that it's still disabled, and logs a success message.\n5. If no checkboxes are found or if any of these steps fail, it logs an error message.\n\nThis method appears to be part of a larger test suite for a web application, likely verifying the functionality of a Quality Control popup.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnPopupButtonOnFOS",
        "code": "public void clickOnPopupButtonOnFOS(String linkName) {\n\t\ttry {\n\t\t\t// waitForElement(linkName);\n\t\t\twaitTime(6);\n\t\t\tString link = linkName + \"#xpath=(//div//button/span[text()='\" + linkName + \"'])[2]\";\n\t\t\twaitForElement(link, 30);\n\t\t\tif (isElementDisplayed(link)) {\n\t\t\t\tscrollToWebElement(link);\n\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t// manualScreenshot(\"Click on:\"+linkName);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnPopupButtonOnFOS`, simulates a click on a specific popup button with the given name (`linkName`) on a webpage. Here's a brief summary of its functionality:\n\n1. Waits for 6 seconds using `waitTime(6)`.\n2. Creates an XPath expression to locate the button element based on the provided link name.\n3. Waits up to 30 seconds for the button to be displayed using `waitForElement(link, 30)`.\n4. If the button is displayed, scrolls to it and simulates a click using `clickOnSpecialElement(link)`.\n5. Takes a manual screenshot (commented out) with a descriptive name.\n6. Waits again for 6 seconds before proceeding.\n\nIf the button is not found or an exception occurs during the process, the method catches the error and marks the test step as failed using `testStepFailed()` methods.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "opportunityDOStageVerifyValidation",
        "code": "public void opportunityDOStageVerifyValidation(String InitiateBankingDetailsFlag, String bankNameLabel,\n\t\t\tString bankNameValue, String bankAccountLabel, String bankAccountValue, String bankAccountTypeLabel,\n\t\t\tString bankAccounttypeValue, String initiateIMPSLabel, String saveBankDetails, String GenerateDOLabel) {\n\t\ttry {\n\t\t\tworkAroundForBankNameField();\n\t\t\twaitTime(7);\n\t\t\ttestStepInfo(\"Initiate Banking IMPS\");\n\t\t\tenterValueInLookUPFieldInIMPSPopup(bankNameLabel, bankNameValue);\n\t\t\tenterValueInFieldInIMPSPopup(bankAccountLabel, bankAccountValue);\n\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!url.contains(\"preprod\")) {\n\t\t\t\tenterValueInFieldInIMPSPopup(\"Re-Enter Bank Account Number\", bankAccountValue);\n\t\t\t}\n\t\t\tselectValueFromDropdownInIMPSPopup(bankAccountTypeLabel, bankAccounttypeValue);\n\t\t\tif (InitiateBankingDetailsFlag.equalsIgnoreCase(\"Yes\")) {\n\t\t\t\tclickOnButton(initiateIMPSLabel);\n\t\t\t\twaitTime(55);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"IMPS is not initiated\");\n\t\t\t}\n\t\t\twaitTime(5);\n\t\t\tclickonbankpopbutton(saveBankDetails);\n\t\t\twaitTime(25);\n\n\t\t\tgetsublink(\"NSDL PAN Validation\");\n\t\t\tselectValueFromDropdownInIMPSPopup(\"NSDL Document Type\", \"Form60\");\n\t\t\tclickonbankpopbutton(\"Submit\");\n\t\t\twaitTime(10);\n\t\t\trefreshPage();\n\t\t\twaitTime(8);\n\t\t\ttestStepInfo(\"Do Preparation Stage\");\n\t\t\tpageScrollUp();\n\t\t\tclickOnLink(GenerateDOLabel);\n\t\t\twaitTime(12);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `opportunityDOStageVerifyValidation` that appears to be part of an automation test for a banking application. The method performs several actions to verify the opportunity DO stage, including:\n\n1. Entering values in various fields and dropdown menus.\n2. Clicking buttons and links.\n3. Waiting for certain times or until specific conditions are met.\n\nThe method takes 10 string parameters as input, which seem to represent various labels and values used throughout the test. The method is designed to handle exceptions and report any failures using a `testStepFailed` method.\n\nSome of the specific actions performed by this method include:\n\n* Entering values in lookup fields and regular fields within popup windows.\n* Selecting values from dropdown menus.\n* Clicking buttons and links, such as \"Initiate Banking IMPS\" and \"Submit\".\n* Waiting for various amounts of time (7 seconds, 55 seconds, etc.).\n* Refreshing the page and scrolling up to a specific link.\n\nOverall, this method appears to be part of an automated testing framework designed to verify the functionality of a banking application's opportunity DO stage.",
        "input": [
            "String InitiateBankingDetailsFlag",
            "String bankNameLabel",
            "String bankNameValue",
            "String bankAccountLabel",
            "String bankAccountValue",
            "String bankAccountTypeLabel",
            "String bankAccounttypeValue",
            "String initiateIMPSLabel",
            "String saveBankDetails",
            "String GenerateDOLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "ClickOnDownArrowIcon",
        "code": "public void ClickOnDownArrowIcon(String optionValue) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(downArrow_icn, 10);\n\t\t\tif (isElementDisplayed(downArrow_icn, 10)) {\n\t\t\t\tscrollToWebElement(downArrow_icn);\n\t\t\t\tclickOn(downArrow_icn);\n\t\t\t\twaitTime(2);\n\t\t\t\tString option = optionValue + \"#xpath=//a//div[text()='\" + optionValue + \"']\";\n\t\t\t\twaitForElement(option, 10);\n\t\t\t\tif (isElementDisplayed(option, 10)) {\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Down arrow Option is not available.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickOnDownArrowIcon. Exception: \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `ClickOnDownArrowIcon`, simulates a click on the down arrow icon and then verifies if an option with the given value is present. Here's a breakdown of what it does:\n\n1. Waits for the page to load.\n2. Waits for the down arrow icon to be displayed (up to 10 seconds).\n3. If the icon is displayed, scrolls to it and clicks on it.\n4. Waits for 2 seconds.\n5. Constructs an XPath expression based on the given option value.\n6. Waits for the element matching the constructed XPath expression to be displayed (up to 10 seconds).\n7. If the element is displayed, simulates a click on it.\n8. If the element is not displayed, marks the test step as failed with a message indicating that the option is not present.\n\nIf any exception occurs during these steps, the method catches it and marks the test step as failed with an error message containing the exception's message.",
        "input": [
            "String optionValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "completeNewQCPopup",
        "code": "public void completeNewQCPopup() {\n\t\tClickOnDownArrowIcon(\"New Submit to QC\");\n\t\tselectAllCheckboxInQCPopup();\n\t\tclickOnButton(\"Submit for QC\");\n\t\twaitForPageToLoad();\n\t}",
        "description": "This is a Java method named `completeNewQCPopup()` that performs the following actions:\n\n1. It clicks on the \"Down Arrow\" icon with the label \"New Submit to QC\".\n2. It selects all checkboxes in the Quality Control (QC) popup.\n3. It clicks on the \"Submit for QC\" button.\n4. Finally, it waits for the page to load.\n\nThis method appears to be part of a larger automation script that interacts with a web-based application or tool related to quality control processes.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "VerifyAutopopulatedlineinFOS",
        "code": "public void VerifyAutopopulatedlineinFOS() {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString line = \"#xpath=(//div//p)[2]\";\n\t\t\tif (isElementDisplayed(line)) {\n\t\t\t\tString text = getText(line);\n\t\t\t\tmanualScreenshot(\"Successfully got the Notification as \" + text + \"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Notification is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickOnDownArrowIcon. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `VerifyAutopopulatedlineinFOS`, verifies if a specific line of text is autopopulated in a Field Of Study (FOS) page. Here's a breakdown of what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It sets a string variable `line` with an XPath expression that targets the second `<div>` element containing a `<p>` element.\n3. It checks if the element specified by the XPath expression is displayed using the `isElementDisplayed(line)` method.\n4. If the element is displayed, it retrieves the text content of the element using the `getText(line)` method and takes a manual screenshot with a message indicating that the notification was successfully autopopulated with the given text.\n5. If the element is not displayed, it fails the test step with a message indicating that the notification is not displayed.\n6. The method also catches any exceptions that may occur during execution and reports a failure with an error message if one occurs.\n\nIn summary, this method verifies the autopopulation of a specific line of text in an FOS page and takes a screenshot if successful or fails the test step if not.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "uploadThreeDocsAtOnceForETB",
        "code": "public void uploadThreeDocsAtOnceForETB(String DocumentlibLabel, String uploadCustomerPhoto, String documents) {\n\t\ttry {\n\t\t\tclickOnLink(DocumentlibLabel);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString[] arr = documents.split(\",\");\n\t\t\tint iterationCount = 0;\n\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\tselectOrDeselectCheckBoxUnderDocumentLib(arr[i], \"check\");\n\t\t\t\tif (iterationCount == 2 || i == arr.length - 1) {\n\t\t\t\t\tdocumentToUpload(uploadCustomerPhoto);\n\t\t\t\t\tclickOnButton(Constants.SAVE);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tflag = verifyErrorIMPSPopupMessage();\n\t\t\t\t\tif (flag) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\titerationCount = 0;\n\t\t\t\t} else {\n\t\t\t\t\titerationCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in uploadThreeDocsAtOnceWithoutPOIPOA. Exception: \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `uploadThreeDocsAtOnceForETB`, is used to upload three documents at once for ETB (Electronic Trade Brief). It takes three string parameters: `DocumentlibLabel`, `uploadCustomerPhoto`, and `documents`. \n\nThe method first clicks on a link with the label provided in `DocumentlibLabel`, waits for the page to load, and then waits for 5 seconds. It then splits the `documents` string into an array of strings using commas as separators.\n\nIt then iterates over the array of documents. For each document, it selects or deselects a checkbox under the Document Library (depending on whether the checkbox is already selected), and if this is the second or third iteration (or the last document in the array), it uploads the customer photo, saves the changes, verifies that an error popup message does not appear, refreshes the page, waits for 3 seconds, and resets a flag. If any exception occurs during the process, the method catches the exception and marks the test step as failed.",
        "input": [
            "String DocumentlibLabel",
            "String uploadCustomerPhoto",
            "String documents"
        ],
        "output": "void"
    },
    {
        "class_name": "Opportunity",
        "function_name": "clickOnCustomerOnOpp",
        "code": "public void clickOnCustomerOnOpp(String fieldLabel) {\n\t\ttry {\n\t\t\tString customerNameLink = fieldLabel + \"#xpath=//span[text()='\" + fieldLabel + \"']//..//..//..//a\";\n\t\t\twaitForElement(customerNameLink, 8);\n\t\t\tif (isElementDisplayed(customerNameLink, 6)) {\n\t\t\t\tclickOnSpecialElement(customerNameLink);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click the \" + fieldLabel);\n\t\t}\n\t}\n\t\n}",
        "description": "This Java method, `clickOnCustomerOnOpp`, is used to click on a customer name link in an application. It takes a string parameter `fieldLabel` which represents the label of the customer name.\n\nHere's what the method does:\n\n1. It constructs a XPath expression by concatenating the `fieldLabel` with a predefined XPath syntax.\n2. It uses this XPath expression to locate the customer name link element using the `waitForElement` method, and waits for up to 8 seconds for the element to be present.\n3. If the element is displayed within 6 seconds, it clicks on the element using the `clickOnSpecialElement` method.\n4. After clicking the element, it waits for the page to load completely using the `waitForPageToLoad` method, and then pauses for 5 seconds using the `waitTime` method.\n5. If the element is not displayed within the specified time, or if any exception occurs during the execution of this method, it fails the test step by calling the `testStepFailed` method with an appropriate error message.\n\nIn summary, this method is used to click on a customer name link in an application, and waits for the page to load after the click.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCases",
        "code": "public boolean clickOnCases() {\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\tif (isElementDisplayed(oppurtunity, elementLoadWaitTime)) {\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn loadFailure;\n\t}\n\n\t/*\n\t * Desription - enter the value in searchfield in Salesforce page\n\t * \n\t */",
        "description": "This Java method, `clickOnCases()`, attempts to click on a specific link (opportunity name) located within an HTML table structure on a Salesforce page. The method uses Selenium WebDriver's `isElementDisplayed()` and `clickOn()` methods to perform this action. If the link is not displayed within the specified timeout period (`elementLoadWaitTime`), it will fail the test step. In case of any exception, it will also fail the test step with an error message. The method returns a boolean value indicating whether the load operation failed or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnBlindData",
        "code": "public void clickOnBlindData() {\n\t\ttry {\n\t\t\tString blindLink = \"Blind Data#xpath=//div[text()='Blind Data']\";\n\t\t\tif (isElementDisplayed(blindLink, elementLoadWaitTime)) {\n\t\t\t\tclickOn(blindLink);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Blind Data link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnBlindData \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnBlindData`, attempts to click on an element with the specified XPath expression `\"//div[text()='Blind Data']\"` within a certain timeout period (`elementLoadWaitTime`). \n\nIf the element is displayed, it will simulate a click on that element. If not, it will mark the test step as failed and report an error message. The method also catches any exceptions that may occur during execution and marks the test step as failed with the exception message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t    waitForElement(search, 35);\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=(//a[@role='option']//parent::li)[1]\";\n\t\t\t\tclickOn(searchValue);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchField`, enters a given value into a search field on a webpage. It performs the following actions:\n\n1. Refreshes the page\n2. Waits for an element with a specified XPath to be displayed (35 seconds)\n3. If the element is displayed, types in the given value and waits for the page to load\n4. Clicks on the first option that appears after entering the search value\n\nIf any of these steps fail, it reports a test step failure with a message indicating what went wrong.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "invoiceDocVerification",
        "code": "public void invoiceDocVerification() {\n        try {\n            String button = \"Open Button #xpath=//button[text()='Open']\";\n            String frame = \"Message#xpath=//div//iframe\";\n            String frame1 = \"Message#xpath=//span//iframe\";\n            String link = \"#xpath=//span[text()='System']//parent::label//parent::div//input\";\n            switchToFrame(frame);       \n            switchToFrame(frame1);\n            waitForElement(button, 10);       \n            if (isElementPresent(button)) {   \n                scrollToElement(button);\n                switchToDefaultFrame();\n                scrollToWebElement(link);\n                waitForPageToLoad();\n                manualScreenshot(\"Invoice Document is created in CPU QC as expected\");\n            } else {\n                testStepFailed(\"Invoice Document is not created in CPU QC as expected\");\n            }\n        } catch (Exception e) {\n            testStepFailed(\"Failed in invoiceDocVerification \" + e.getMessage());\n        }\n    }",
        "description": "This Java method, `invoiceDocVerification`, appears to be a part of an automation testing script for verifying the creation of an invoice document in a CPU QC system. \n\nThe method attempts to:\n\n1. Switch to specific frames (`frame` and `frame1`) using XPath expressions.\n2. Wait for a button with the text \"Open\" to appear, then scroll to it.\n3. If the button is present, switch back to the default frame, scroll to an input element, wait for the page to load, and take a manual screenshot to verify that the invoice document has been created as expected.\n4. If the button is not present, mark the test step as failed.\n\nIf any exception occurs during the execution of this method, it will be caught and the test step will be marked as failed with an error message containing the exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCaesesSaveButton",
        "code": "public void clickOnCaesesSaveButton() {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString button = \"Save button#xpath=//div[@class='modal-footer slds-modal__footer']//span[text()='Save']//parent::button\";\n\t\t\n\t\t\twaitForElement(button,10);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnCaesesSaveButton`, attempts to click on a \"Save\" button within a specified timeframe. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to verify the presence of the button before clicking it. If the button is not found or cannot be clicked, the test fails with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnSlideTab",
        "code": "public void clickOnSlideTab(String tabName) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString button = tabName+\"#xpath=//div[text()='\" + tabName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + tabName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(tabName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn \" + tabName + \"\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnSlideTab`, simulates a click on a slide tab with the given name. It uses Selenium WebDriver to perform the action.\n\nHere's what it does:\n\n1. Prints an empty line to the console.\n2. Creates a string that represents the XPath of the button to be clicked. The XPath is constructed by concatenating the `tabName` with a specific XPath syntax.\n3. Waits for the element represented by the XPath to be loaded (up to 10 seconds).\n4. Checks if the element is displayed within the specified time limit (`elementLoadWaitTime`). If it is, proceeds to click on the element.\n5. Calls another method `clickOnSpecialElement` to perform the actual click action.\n6. Takes a manual screenshot with a descriptive name indicating that the tab was clicked.\n7. If the element is not displayed within the specified time limit, marks the test step as failed.\n\nIf an exception occurs during the execution of this method (e.g., due to network issues or the element being unavailable), it catches the exception and marks the test step as failed with a descriptive error message.",
        "input": [
            "String tabName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnPapUpsaveButton",
        "code": "public void clickOnPapUpsaveButton() {\n\t\ttry {\n\t\t\tString button = \"PopUp Save button#xpath=//div[@class='modal-footer slds-modal__footer']//following-sibling::button/span\";\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitTime(4);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnPapUpsaveButton()`, attempts to click on a specific \"Save\" button within a popup modal. It uses XPath to locate the element and then performs the following steps:\n\n1. Checks if the element is displayed using the `isElementDisplayed()` method.\n2. If the element is displayed, it clicks on the element using the `clickOnSpecialElement()` method and waits for 4 seconds using the `waitTime(4)` method.\n3. If the element is not displayed, it logs a test step failure with the message \"Save button is not present\".\n4. If any exception occurs during the execution of the method, it logs a test step failure with the message \"Failed in clickOn Save Button\" and the exception's message.\n\nIn summary, this method is used to interact with a specific \"Save\" button within a popup modal, and it handles both successful and failed attempts to perform the action.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCaseNo",
        "code": "public void clickOnCaseNo() {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString button = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\twaitForElement(button, 10);\n\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tmanualScreenshot(\"Click on Case Number\");\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case number is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn case number\" + e.getMessage());\n\t\t}\n\n\t}\n\n\t// New",
        "description": "This Java method, `clickOnCaseNo()`, attempts to click on a specific element on the webpage that contains the case number. \n\nHere's what it does:\n\n1. It prints an empty line to the console.\n2. It defines a string variable `button` that represents the XPath of the element containing the case number.\n3. It waits for the specified element (`button`) to be displayed within a certain time limit (10 seconds).\n4. If the element is displayed, it clicks on that element using the `clickOnSpecialElement(button)` method and takes a manual screenshot with the caption \"Click on Case Number\".\n5. If the element is not displayed after the specified time, it fails the test step with an error message saying \"Case number is not present\".\n\nIf any exception occurs during these steps, it catches the exception and fails the test step with an error message including the exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCasesTabs",
        "code": "public void clickOnCasesTabs(String labelName) {\n\t\ttry {\n\t\t\tString casesTabs = \"Cases Tabs #xpath=//div[@data-aura-class='cQcHoldPath'][1]//a\";\n\t\t\tList<WebElement> tabs = findWebElements(casesTabs);\n\t\t\tif (isElementDisplayed(casesTabs, 5)) {\n\t\t\t\tfor (int tab = 0; tab < tabs.size(); tab++) {\n\t\t\t\t\tString tabName = tabs.get(tab).getText();\n\t\t\t\t\tif (tabName.equalsIgnoreCase(labelName)) {\n\t\t\t\t\t\ttabs.get(tab).click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (tab == (tabs.size() - 1)) {\n\t\t\t\t\t\ttestStepFailed(\"Not able to find \" + labelName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cases tabs are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCasesTabs \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCasesTabs`, attempts to click on a specific tab with the given label name within the \"Cases Tabs\" section of a web page. Here's a brief summary:\n\n1. It uses an XPath expression to locate the \"Cases Tabs\" element and then finds all the tabs within it.\n2. If the tabs are displayed (i.e., visible), it iterates through each tab, checks its text label against the provided `labelName`, and clicks on the matching tab if found.\n3. If no matching tab is found after iterating through all tabs, or if the tabs are not displayed, the method fails the test step with a corresponding error message.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "selectCasesDropDown",
        "code": "public void selectCasesDropDown(String labelName, String value) {\n\t\ttry {\n\t\t\tString dropDown = \"Cases Tabs #xpath=\";\n\t\t\tString dropDownValues = \"Cases Tabs #xpath=\";\n\t\t\tif (isElementDisplayed(dropDown, 5)) {\n\t\t\t\tclickOn(dropDown);\n\t\t\t\tList<WebElement> dropDown_Values = findWebElements(dropDownValues);\n\t\t\t\tfor (int drp_value = 0; drp_value < dropDown_Values.size(); drp_value++) {\n\t\t\t\t\tString dropDownValue = dropDown_Values.get(drp_value).getText();\n\t\t\t\t\tif (dropDownValue.equalsIgnoreCase(value)) {\n\t\t\t\t\t\tdropDown_Values.get(drp_value).click();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (drp_value == (dropDown_Values.size() - 1)) {\n\t\t\t\t\t\ttestStepFailed(\"Not able to find \" + labelName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cases tabs are not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnCasesTabs \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `selectCasesDropDown`, is used to select a specific value from a dropdown list. It takes two parameters: `labelName` and `value`. \n\nHere's what the method does:\n\n1. It first checks if an element with the specified XPath (`dropDown`) is displayed within 5 seconds. \n2. If the element is displayed, it clicks on the dropdown.\n3. It then finds all the options in the dropdown using another XPath (`dropDownValues`).\n4. The method iterates through each option and checks its text value against the provided `value`. \n5. If a match is found, it selects that option by clicking on it and breaks out of the loop.\n6. If no match is found after checking all options, it fails the test step with an error message indicating that the specified value was not found.\n7. If the dropdown element is not displayed within 5 seconds, it also fails the test step with an error message.\n\nThe method uses try-catch block to handle any exceptions that might occur during its execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnButtonIncaseField",
        "code": "public void clickOnButtonIncaseField(String labelName, String action) {\n\n\t\ttry {\n\n\t\t\tString button = labelName + \" Button#xpath=//a[@title='\" + labelName + \"']\";\n\t\t\tString confromButton = action + \" Button#xpath=//div[contains(@class,'footer')]//span[text()='\" + action\n\t\t\t\t\t+ \"']\";\n\t\t\tString btn_saveAll = \"SaveAll Button#xpath=//span[text()='Only Save']\";\n\n\t\t\tparseidentifyByAndlocator(button);\n\t\t\tif (isElementDisplayed(button, 9)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForElementUntilVisible(\"PopupMessage#xpath=//div[@class='modal-container slds-modal__container']\");\n\t\t\t\tif (isElementDisplayed(confromButton, 5)) {\n\t\t\t\t\tclickOn(confromButton);\n\t\t\t\t} else if (isElementDisplayed(btn_saveAll, 5)) {\n\t\t\t\t\tclickOn(btn_saveAll);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\" \" + locatorDescription + \" is not displayed\");\n\t\t\t\t}\n\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to click \" + locatorDescription + \". Exception\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnButtonIncaseField`, simulates a button click in a specific situation. It takes two parameters: `labelName` and `action`. \n\nThe method first constructs three strings: one for the button to be clicked, another for a confirmation button or \"Save All\" button (depending on the presence of the former), and a third for a \"Save All\" button.\n\nIt then uses various methods to identify the elements by their locators, check if they are displayed, click on them, and wait for a popup message to appear. \n\nIf any of these steps fail or the expected buttons are not found, the method will report a test step failure with an error message.",
        "input": [
            "String labelName",
            "String action"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "validateSucessMsg",
        "code": "public void validateSucessMsg() {\n\t\tString alertMessagePath = \"Alert message#xpath=//div[@class='toastContent slds-notify__content']//span\";\n\t\t{\n\t\t\tif (isElementDisplayed(alertMessagePath, 5)) {\n\t\t\t\tString alertMessage = getText(alertMessagePath);\n\t\t\t\tmanualScreenshot(alertMessage + \" Sucessfully displayed\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Error message not displayed\");\n\t\t\t}\n\n\t\t}\n\n\t}",
        "description": "This Java method is used to validate the success message displayed on a web page. It uses Selenium WebDriver and XPath expressions to locate the element containing the success message, then checks if it's displayed within a certain time limit (5 seconds). If the message is displayed, it captures a screenshot with the message text as part of the filename. If the message is not displayed, it also captures a screenshot but with an error message text.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCaseNumber",
        "code": "public String clickOnCaseNumber() {\n\t\tString caseNumber = \"\";\n\t\ttry {\n\t\t\tString caseTable = \"Case Table Row #xpath=//th[@scope='row']\";\n\t\t\tString caseNum = \"Case number #xpath=(//th[@scope='row']//span//a)[1]\";\n\t\t\tif (isElementDisplayed(caseTable, 5)) {\n\t\t\t\tList<WebElement> tableRow = findWebElements(caseTable);\n\t\t\t\tif (tableRow.size() != 0 && isElementDisplayed(caseNum)) {\n\t\t\t\t\tWebElement casenum = findWebElement(caseNum);\n\t\t\t\t\tcaseNumber = casenum.getText();\n\t\t\t\t\tclickOn(caseNum);\n\t\t\t\t\ttestStepPassed(\"Case Number \" + caseNumber + \" is clicked.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Case Row is Empty\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case Row is not Displayed.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Failed to click Case Number. Exception: \" + e.toString());\n\t\t}\n\t\treturn caseNumber;\n\t}",
        "description": "This Java method, `clickOnCaseNumber()`, is used to click on a specific case number in a table row and retrieve the value of that case number. It uses Selenium WebDriver to interact with a web page.\n\nHere's what it does:\n\n1. It first checks if an element with the specified XPath (`caseTable`) is displayed within 5 seconds.\n2. If the element is displayed, it retrieves all the elements matching the XPath and checks if there are any elements in the list (`tableRow.size() != 0`).\n3. Then, it checks if another specific element (`caseNum`) is displayed.\n4. If both conditions are met, it clicks on the `caseNum` element and retrieves its text content (the case number).\n5. It logs a test step as passed with the retrieved case number.\n6. If any of the above conditions fail (e.g., the elements are not displayed), it logs a test step failure with an error message.\n7. In case of any exception, it writes the error to a log file and logs a test step failure with the exception details.\n\nThe method returns the retrieved case number as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" Button #xpath=//button[contains(text(),'\" + labelName + \"')]\";\n\t\t\twaitForElement(button, 10);\n\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\tmanualScreenshot(labelName + \" button is clicked successfully.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + labelName + \" button.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Failed to click \" + labelName + \" button. Exception: \" + e.toString());\n\t\t}\n\t}\n\n\tpublic static final String btn_logout = \"Logout#xpath=//a[text()='Logout']\";\n\tpublic static final String profileLink = \"Profile link#xpath=//span[text()='Automation QC Testing']\";",
        "description": "This Java method, `clickOnButton`, is used to click on a button with a specified label name. The method uses an XPath expression to locate the button based on its text content matching the provided label name. It then waits for the element to be present and clickable before clicking it. If the button is not found or cannot be clicked, the test step fails.\n\nThe method also includes some error handling, writing the exception message to a log file if an error occurs while trying to click the button.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "logout",
        "code": "public void logout() {\n\t\ttry {\n\t\t\tif (isElementDisplayed(profileLink, 3)) {\n\t\t\t\tclickOn(profileLink);\n\t\t\t\tif (isElementDisplayed(btn_logout, 3)) {\n\t\t\t\t\tclickOn(btn_logout);\n\n\t\t\t\t\twaitTime(10);\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(6);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, named `logout()`, performs a logout operation in an application. Here's what it does:\n\n1. It checks if the profile link is displayed on the page using the `isElementDisplayed()` method.\n2. If the profile link is present, it clicks on it to navigate to the login/profile page.\n3. On this page, it checks if the logout button (`btn_logout`) is displayed using the same `isElementDisplayed()` method.\n4. If the logout button is present, it clicks on it to initiate the logout process.\n5. After clicking the logout button, it waits for 10 seconds using the `waitTime(10)` method, then refreshes the page with `refreshPage()`.\n6. It then waits for another 6 seconds before proceeding.\n7. If all these steps are successful, it marks the test step as passed with a message \"Successfully logged out of the application\".\n8. If any of the previous steps fail (e.g., profile link not present), it marks the test step as failed with a message \"Profile link is not present\".\n\nThe method also includes error handling using a `try-catch` block to log any exceptions that may occur during the logout process.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "selectOrDeselectRadioButton",
        "code": "public void selectOrDeselectRadioButton(String radioBtnLabel, boolean check) {\n\t\ttry {\n\n\t\t\tString radioBtn = radioBtnLabel + \" #xpath=//span[contains(text(),'\" + radioBtnLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\t// waitForElement(radioBtn, 3);\n\t\t\t// scrollToElement(radioBtn);\n\t\t\tif (check) {\n\t\t\t\tif (isElementDisplayed(radioBtn, 3)) {\n\t\t\t\t\tclickOn(radioBtn);\n\t\t\t\t\tmanualScreenshot(radioBtnLabel + \" radio button clicked successfully\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(radioBtnLabel + \" radio button not displayed in the page\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to select or deselect a radio button based on the given label and a boolean flag `check`. \n\nIf `check` is `true`, it will try to click on the radio button with the specified label. It first checks if the element is displayed, and if so, it clicks on the element and takes a manual screenshot as confirmation. If the element is not displayed, it logs an error message.\n\nIf `check` is `false`, the method does nothing (since there's no code to handle this case).\n\nThe method also has some commented out lines that seem to be related to waiting for the element to be visible and scrolling to the element before clicking on it. These lines are currently disabled, but they could potentially be used in the future if needed.\n\nIf any exception occurs during the execution of the method (e.g., if the radio button is not found or cannot be clicked), the method catches the exception and logs an error message with the failed test step.",
        "input": [
            "String radioBtnLabel",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCases",
        "code": "public void clickOnCases(String labelName) {\n\t\ttry {\n\n\t\t\tString button = labelName + \" case #xpath=//div[@class='chevron noaction']//a[text()='\" + labelName + \"']\";\n\t\t\twaitForElement(button, 10);\n\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(button);\n\t\t\t\tmanualScreenshot(labelName + \" Case is clicked successfully.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click \" + labelName + \" Case.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Failed to click \" + labelName + \" Case. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOnCases`, is used to simulate a click on a specific case button with the given label name in an application or website. \n\nThe method first constructs a string representing the XPath of the button based on the provided label name and a predefined class name. It then uses the `waitForElement` method to wait for the element to be present before attempting to click it.\n\nIf the element is found, the method clicks on it using the `clickOn` method and takes a manual screenshot with the label name as the file name. If the element is not found or an exception occurs during the process, the method logs an error message in the log file and marks the test step as failed.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "enterValueInField",
        "code": "public String enterValueInField(String AddresValue) {\n\t\tString addressText = null;\n\t\ttry {\n\t\t\tString field = \"#xpath=//span[contains(text(),'Delivery Address')]//../following-sibling::textarea\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, AddresValue);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\t// addressText = getText(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Address field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t\treturn addressText;\n\t}",
        "description": "This Java method, `enterValueInField`, enters a given value into a specific field on a web page. The field is located using an XPath expression (`\"#xpath=//span[contains(text(),'Delivery Address')]//../following-sibling::textarea\"`). \n\nThe method first checks if the element is displayed and scrollable. If it is, it then types in the provided `AddresValue` into the field, highlights the entered text, and attempts to retrieve the text from the field (although this value is not actually used anywhere). \n\nIf the element is not present or there's an exception during the process, the method reports a test step failure. The method returns the retrieved text, but since it's not being used, it can be removed without affecting the functionality of the code.",
        "input": [
            "String AddresValue"
        ],
        "output": "String"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "enterValueInFieldNegitive",
        "code": "public String enterValueInFieldNegitive(String AddresValue) {\n\t\tString addressText = AddresValue;\n\t\ttry {\n\t\t\tString field = \"#xpath=//span[contains(text(),'Delivery Address')]//../following-sibling::textarea\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, AddresValue);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\t// addressText = getText(field);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Address field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t\treturn addressText;\n\t}",
        "description": "This Java method, `enterValueInFieldNegitive`, enters a value into a specific field on a web page. The field is identified by its XPath and is expected to be a textarea element. The method takes one parameter, `AddresValue`, which is the value to be entered in the field.\n\nHere's what the method does:\n\n1. It sets the `addressText` variable to the input value.\n2. It checks if the field is displayed on the page using the `isElementDisplayed` method with a timeout of `elementLoadWaitTime`.\n3. If the field is displayed, it scrolls to the field using the `scrollToWebElement` method and enters the value into the field using the `typeIn` method.\n4. It highlights the entered text in the field using the `highLighterMethod`.\n5. If the field is not displayed, it takes a manual screenshot with the message \"Address field is not present\".\n6. If any exception occurs during these steps, it reports the failure by calling the `testStepFailed` method and passing an error message.\n7. Finally, it returns the original input value (`addressText`) unchanged.\n\nThe method is designed to handle negative scenarios where the field may not be displayed or other errors occur during the entry process.",
        "input": [
            "String AddresValue"
        ],
        "output": "String"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyaddressField",
        "code": "public void verifyaddressField(String actuvalText) {\n\n\t\tif (actuvalText != null) {\n\t\t\ttestStepPassed(\"text box is enabled\");\n\t\t} else {\n\t\t\tmanualScreenshot(\"Text box is disabled\");\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyaddressField`, verifies the state of a text box field. It takes a string parameter `actuvalText` which represents the actual text value in the text box.\n\nThe method checks if the `actuvalText` is not null. If it's not null, it assumes the text box is enabled and calls a test step to mark it as passed. \n\nHowever, if the `actuvalText` is null (i.e., the text box is empty or disabled), it takes a manual screenshot with the comment \"Text box is disabled\". This suggests that the method is used for verification of UI elements in an automation testing framework, possibly Selenium WebDriver.",
        "input": [
            "String actuvalText"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyaddressFieldNegitive",
        "code": "public void verifyaddressFieldNegitive(String actuvalText) {\n\n\t\tif (actuvalText == null) {\n\t\t\ttestStepPassed(\"Text box is disabled\");\n\t\t} else {\n\t\t\tmanualScreenshot(\"text box is enabled\");\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyaddressFieldNegitive`, appears to be a verification step in an automated testing process. The method takes a `String` parameter called `actuvalText` which represents the actual text value of a field.\n\nThe method checks if the `actuvalText` is null or not. If it's null, it assumes that the field is disabled and passes the test step with a message \"Text box is disabled\". If the `actuvalText` is not null, it takes a manual screenshot with the comment \"text box is enabled\".\n\nIn essence, this method seems to be verifying whether a text field is enabled or disabled based on its actual text value.",
        "input": [
            "String actuvalText"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyElementNegitive",
        "code": "public String verifyElementNegitive(String elementLable) {\n\t\tString addressText = null;\n\t\ttry {\n\t\t\tString field = \"#xpath=//div[@class='chevron noaction']//a[text()='\" + elementLable + \"']\";\n\t\t\tif (isElementDisplayed(field)) {\n\t\t\t\tmanualScreenshot(elementLable + \" is visibled to the QC\");\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(elementLable + \" is not visibled to the QC\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t\treturn addressText;\n\t}",
        "description": "This Java method, `verifyElementNegitive`, verifies if an element with a specific label is not displayed on the page. It takes a `String` parameter `elementLable` which represents the label of the element to be verified.\n\nThe method uses an XPath expression to locate the element and then checks if it's displayed using the `isElementDisplayed` method (not shown in this code snippet). If the element is not displayed, it takes a manual screenshot with a message indicating that the element is not visible. If there's an exception during this process, it fails the test step with an error message.\n\nThe method returns a `String` value, but its actual purpose seems to be verification rather than returning a meaningful value.",
        "input": [
            "String elementLable"
        ],
        "output": "String"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "pageScrollUp",
        "code": "public void pageScrollUp() {\n\t\twaitTime(6);\n\n\t\tJavascriptExecutor jse = (JavascriptExecutor) driver;\n\t\tjse.executeScript(\"scroll(0, -250);\");\n\n\t}",
        "description": "This Java method, `pageScrollUp`, simulates a scroll up action on the current webpage. It waits for 6 seconds before scrolling and then uses JavaScript to scroll the page up by 250 pixels from its current position. This can be useful in situations where you need to interact with elements that are not currently visible due to being scrolled off-screen.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnPopUpsaveButton",
        "code": "public void clickOnPopUpsaveButton() {\n\t\ttry {\n\t\t\tString button = \"PapUp Save button#xpath=//div[@class='modal-footer slds-modal__footer']//following-sibling::button/span\";\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnPopUpsaveButton()`, attempts to click on a \"Save\" button that appears in a pop-up modal. The method uses an XPath expression to locate the button and checks if it is displayed before attempting to click on it. If the button is not found or the click operation fails, the method reports a test step failure with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnHyperLinkWithLabel",
        "code": "public void clickOnHyperLinkWithLabel(String labelName) {\n\n\t\ttry {\n\t\t\tString link = \"#xpath=//span[text()='\" + labelName + \"']/parent::div/following-sibling::div/span//a\";\n\n\t\t\twaitForElement(link);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On HyperLink With Label. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `clickOnHyperLinkWithLabel`, attempts to click on a hyper-link with a specific label name. It uses an XPath expression to locate the element and then performs the following steps:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not already visible.\n3. Clicks on the element.\n\nIf the element is not found or cannot be clicked, the method fails with a test step failure message. The method catches any exceptions that occur during execution and reports them as test step failures.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyTextIsAutoPopulatedInMasterpage",
        "code": "public void verifyTextIsAutoPopulatedInMasterpage(String labelName) {\n\n\t\ttry {\n\t\t\tString link = \"#xpath=//span[text()='\" + labelName + \"']/parent::div/following-sibling::div/span\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(link);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tif (!getText(link).isEmpty()) {\n\t\t\t\t\tmanualScreenshot(\"'\" + getText(link) + \" ' is autopopulated in \" + labelName + \"  field.\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"No values is auto populated in \" + labelName + \" field.\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On HyperLink With Label. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyTextIsAutoPopulatedInMasterpage`, verifies whether a specific text is auto-populated in a master page element with the given label name. Here's a brief summary of what it does:\n\n1. It constructs an XPath locator string based on the provided label name.\n2. Waits for the page to load and then waits for the element located by the XPath locator to be displayed.\n3. If the element is displayed, it scrolls to that element and checks if the text is not empty.\n4. If the text is not empty, it takes a manual screenshot with a message indicating that the text is auto-populated in the given label name field. Otherwise, it takes a manual screenshot stating that no values are auto-populated in that field.\n5. If the element is not displayed within a certain time frame (5 seconds), it fails the test step with an error message.\n\nThe method also includes exception handling to catch any unexpected errors and report them as failed test steps.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyDispatchCheckboxIsSelectOrDeselect",
        "code": "public void verifyDispatchCheckboxIsSelectOrDeselect() {\n\t\ttry {\n\n\t\t\tString checkbox = \"Ready For Dispatch#xpath=//span[contains(text(),'Ready For Dispatch')]//..//..//input/parent::span[contains(@class,'standalone')]/input\";\n\t\t\twaitForElement(checkbox, 3);\n\t\t\tif (isElementPresent(checkbox)) {\n\t\t\t\tscrollToWebElement(checkbox);\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tmanualScreenshot(\"Ready for Dispatch checkbox is checked.\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Ready for Dispatch  checkbox is unchecked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Ready for dispatch Check box is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDispatchCheckboxIsSelectOrDeselect`, verifies the state of a checkbox labeled \"Ready For Dispatch\" on a webpage. It uses Selenium WebDriver to:\n\n1. Wait for the checkbox element to be present and visible.\n2. If the checkbox is present, scroll to it and check its selected state using the `isCheckBoxSelected` method.\n3. Take a screenshot based on whether the checkbox is checked or unchecked.\n4. If the checkbox is not present, mark the test step as failed.\n\nThe method also includes error handling using a `try-catch` block, which catches any exceptions that occur during execution and marks the test step as failed with an appropriate message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "selectOrDeselectCheckboxInFinnone",
        "code": "public void selectOrDeselectCheckboxInFinnone(String checkboxLabel, boolean check) {\n\t\ttry {\n\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//..//..//input/parent::span[contains(@class,'standalone')]/input\";\n\t\t\twaitForElement(checkbox, 3);\n\t\t\tif (check) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(checkboxLabel + \" checkbox is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(checkboxLabel + \" checkbox is already unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckboxInFinnone`, selects or deselects a checkbox based on the provided label and boolean value (`check`). It uses Selenium WebDriver to interact with the checkbox. \n\nThe method takes two parameters: `checkboxLabel` (the text of the checkbox) and `check` (a boolean indicating whether to select or deselect the checkbox). \n\nIt first constructs an XPath expression to locate the checkbox element based on its label. Then it waits for the element to be present, checks if the checkbox is already selected or deselected as per the provided boolean value, and performs the necessary action (clicking on the checkbox) accordingly. If the expected state of the checkbox does not match the actual state, it takes a manual screenshot with an informative message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String checkboxLabel",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "logoutBrUser",
        "code": "public void logoutBrUser() {\n\t\ttry {\n\t\t\tif (isElementDisplayed(profileLinkBr, 3)) {\n\t\t\t\tclickOn(profileLinkBr);\n\t\t\t\tif (isElementDisplayed(btn_logoutBr, 3)) {\n\t\t\t\t\tclickOn(btn_logoutBr);\n\t\t\t\t}\n\t\t\t\ttestStepPassed(\"Successfully logged out of the application\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Profile link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `logoutBrUser()`, is used to log out of a business user (BR) from an application. The method attempts to perform the following steps:\n\n1. Check if the profile link for the BR is displayed on the screen.\n2. If the profile link is present, click on it.\n3. Verify that the \"Log out\" button is displayed.\n4. If the \"Log out\" button is present, click on it.\n5. Report the outcome of the log out process as a test step.\n\nIf any of these steps fail (e.g., the profile link or \"Log out\" button are not present), an error message is reported and logged to a file.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyInvoiceDate",
        "code": "public void verifyInvoiceDate() {\n\t\ttry {\n\t\t\tString field = \"#xpath=//span[text()='Invoice Date']//../..//following-sibling::div/span\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tmanualScreenshot(\"User not able to edit the Invoice date\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"User able to edit the Invoice date\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValue in Invoice date \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyInvoiceDate`, is used to verify whether a user can edit the invoice date on a web page. It uses an XPath expression to locate the element containing the invoice date, and then checks if it's displayed on the screen using the `isElementDisplayed` method. If the element is displayed, it scrolls to that element and takes a manual screenshot as evidence. If the element is not displayed, it marks the test step as failed. The method also catches any exceptions that may occur during execution and marks the test step as failed if one occurs.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCaseNoAndGetNo",
        "code": "public String clickOnCaseNoAndGetNo() {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString button = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tcaseNo = getText(button);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case number is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn case number\" + e.getMessage());\n\t\t}\n\n\t\treturn caseNo;\n\n\t}",
        "description": "This Java method, `clickOnCaseNoAndGetNo()`, attempts to click on a specific element with the given XPath and then retrieve the text content of that element. The method takes no parameters and returns a string representing the text content of the clicked element.\n\nHere's a step-by-step breakdown:\n\n1. It initializes a variable `caseNo` to null.\n2. It tries to:\n\t* Print an empty line (not sure what this does).\n\t* Define a string `button` with an XPath that targets a specific table cell.\n\t* Check if the element is displayed using the `isElementDisplayed()` method, which takes two parameters: the XPath and a timeout value (`elementLoadWaitTime`).\n3. If the element is displayed:\n\t* Click on it using the `clickOnSpecialElement()` method (which is not shown in this code snippet).\n\t* Retrieve the text content of the clicked element using the `getText()` method.\n\t* Store the result in the `caseNo` variable.\n4. If the element is not displayed, it calls a method `testStepFailed()` to mark the test step as failed with an error message \"Case number is not present\".\n5. It catches any exceptions that may occur during execution and marks the test step as failed with an error message \"Failed in clickOn case number\" followed by the exception's message.\n6. Finally, it returns the `caseNo` variable.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyDocument",
        "code": "public void verifyDocument() {\n\t\ttry {\n\t\t\tString button = \" case #xpath=//div[@id='pdfDiv']\";\n\t\t\twaitForElement(button, 10);\n\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Document uploaded successfully\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Document was not uploaded\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to verify the document Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocument()`, is designed to verify that a document has been successfully uploaded. The method attempts to find an element with the specified XPath (`//div[@id='pdfDiv']`) and waits for it to be present for 10 seconds using the `waitForElement()` method.\n\nIf the element is found, the method scrolls to the element using `scrollToWebElement()` and takes a manual screenshot as evidence of successful document upload. If the element is not found, it also takes a manual screenshot with a message indicating that the document was not uploaded.\n\nThe method catches any exceptions that may occur during execution and reports them as test step failures using the `testStepFailed()` method.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyEditButton",
        "code": "public void verifyEditButton(String labelName) {\n\t\ttry {\n\t\t\tString button = labelName + \" case #xpath=//div[@class='chevron noaction']//a[text()='\" + labelName + \"']\";\n\n\t\t\tif (isElementPresent(button)) {\n\n\t\t\t\ttestStepFailed(\"User able to edit the case without accpet the Case\");\n\t\t\t} else {\n\t\t\t\ttestStepPassed(\"User not able to edit the case without accpet the Case\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Failed to click \" + labelName + \" Case. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyEditButton`, is used to verify whether a user is able to edit a case without accepting the case. It takes a string parameter `labelName` which represents the name of the button.\n\nThe method first constructs an XPath expression based on the provided label name and checks if the element is present using the `isElementPresent` method. If the element is found, it indicates that the user is able to edit the case without accepting it, so the test step fails. \n\nIf the element is not found, it means that the user is not able to edit the case without accepting it, and the test step passes.\n\nThe method also includes error handling using a try-catch block. If an exception occurs during the execution of the method, it writes the error message to a log file and marks the test step as failed with the exception details.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCasesTab",
        "code": "public void clickOnCasesTab() {\n\t\ttry {\n\t\t\tdriver.findElement(By.xpath(\"//span[text()='Cases']\")).click();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCasesTab`, attempts to click on a tab with the text \"Cases\" using Selenium WebDriver. It uses an XPath expression to locate the element and then calls the `click()` method to perform the action. If any exception occurs during this process, it catches the exception and logs a failure message using the `testStepFailed` method, indicating that the test step failed due to the exception.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCasesDropdown",
        "code": "public void clickOnCasesDropdown() {\n\t\ttry {\n\t\t\tString field = \"#xpath=//span[text()='My Open Cases']\";\n\t\t\tString field1 = \"#xpath=//div[@class='scroller']/ul/li/a/span[text()='QC - Digital']\";\n\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(field);\n\t\t\t\tif (isElementPresent(field1)) {\n\t\t\t\t\tclickOn(field1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"DropDown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCasesDropdown`, attempts to click on two elements:\n\n1. An element with the XPath expression `\"//span[text()='My Open Cases']\"` (represented by the variable `field`).\n2. An element within a div with class \"scroller\" and an ul/li/a/span containing the text \"QC - Digital\" (represented by the variable `field1`).\n\nThe method first checks if the first element is present using the `isElementPresent(field)` method. If it is, the method attempts to click on both elements using the `clickOn()` method.\n\nIf the first element is not present, the method fails the test step with a message \"DropDown is not present\".\n\nIn case of any exception during the execution of this method, it catches the exception and fails the test step with a message \"Failed in clickOn Save Button\" along with the caught exception's message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "enterValueInSearchQue",
        "code": "public void enterValueInSearchQue(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.sendKeys(value);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchQue`, enters a given value into a search field and submits the search. It uses Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. It defines a search XPath (`search`) that points to an `<input>` element of type \"search\".\n2. It checks if the search field is displayed using the `isElementDisplayed` method.\n3. If the search field is present, it finds the corresponding WebElement using the `findWebElement` method.\n4. It enters the given value into the search field using the `sendKeys` method and then submits the search by sending an ENTER key.\n5. It waits for the page to load using the `waitForPageToLoad` method.\n\nIf any exception occurs during this process, it catches the exception and logs a failure message using the `testStepFailed` method. If the search field is not present, it takes a manual screenshot using the `manualScreenshot` method.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyOpp",
        "code": "public void verifyOpp(String Oppvalue) {\n\t\ttry {\n\t\t\tString button = \"case value#xpath=//a[@title='\" + Oppvalue + \"']\";\n\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\ttestStepPassed(\"Case move to QC- Digital Queue\");\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Case is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed verify case number\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, named `verifyOpp`, verifies if a specific case value is displayed in the UI. It takes a string parameter `Oppvalue` which represents the case value to be verified.\n\nThe method uses an XPath expression to locate an element with a title matching the provided `Oppvalue`. If the element is displayed (i.e., visible), it logs a successful test step. If not, it captures a manual screenshot and logs a failed test step with an error message indicating that the case value was not present.",
        "input": [
            "String Oppvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnCases1",
        "code": "public boolean clickOnCases1() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\tif (isElementDisplayed(oppurtunity, elementLoadWaitTime)) {\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t\tflag = true;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `clickOnCases1`, attempts to click on an element with the XPath locator `\"//table[contains(@class,'-table')]//tbody//tr//a\"` and returns a boolean indicating whether the operation was successful. \n\nThe method uses a try-catch block to handle any exceptions that may occur during execution. If the element is displayed, it clicks on it and sets the `flag` variable to `true`. If the element is not displayed, it fails the test step with an error message. The method returns the value of the `flag` variable.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "clickOnOpenCasesDropdown",
        "code": "public void clickOnOpenCasesDropdown() {\n\t\ttry {\n\t\t\tString field = \"My Open Cases#xpath=//span[text()='My Open Cases']\";\n\t\t\tString field1 = \"My Open Cases#xpath=//div[@class='scroller']/ul/li/a/span[text()='My Open Cases']\";\n\n\t\t\tif (isElementPresent(field)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(field);\n\t\t\t\tif (isElementPresent(field1)) {\n\t\t\t\t\tclickOn(field1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"DropDown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn Save Button\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOpenCasesDropdown`, attempts to click on a dropdown menu with the text \"My Open Cases\". It first checks if the element is present using the `isElementPresent` method. If it is present, it clicks on the element using the `clickOn` method. If the element is not present, it fails the test step. Additionally, it also attempts to click on a secondary element with the same text if the primary element is clicked successfully. If any exception occurs during this process, it fails the test step and logs the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "getFOSText",
        "code": "public void getFOSText(String labelName) {\n\n\t\ttry {\n\t\t\tString link = \"#xpath=(//input[@name='FOS_Outward_On__c'])[1]\";\n\t\t\twaitForElement(link, 10);\n\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(link);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\tif (!getText(link).isEmpty()) {\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tmanualScreenshot(\"'\" + getText(link) + \" ' is autopopulated in \" + labelName + \"  field.\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"No values is auto populated in \" + labelName + \" field.\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Click On HyperLink With Label. Exception :\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `getFOSText`, appears to be a test automation step that verifies the auto-population of text in a specific field on a web page. Here's a brief summary:\n\n1. The method takes a `String` parameter `labelName`, which likely represents the label or name of the field being tested.\n2. It attempts to locate an input element with the specified XPath (`link`) and waits for it to be displayed (up to 10 seconds).\n3. Once the element is found, it waits for the page to load and then checks if the element is still displayed (up to 5 seconds).\n4. If the element is displayed, it scrolls to the element and retrieves its text content.\n5. If the text content is not empty, it takes a manual screenshot with a message indicating that the value was autopopulated in the specified field.\n6. If the text content is empty or the element is not displayed, it takes a manual screenshot with a failure message.\n7. In case of any exception during execution, the method logs a test step failure with an error message.\n\nIn summary, this method checks if a specific field on a web page has auto-populated text and captures a screenshot to verify the result.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyImgInQC",
        "code": "public void verifyImgInQC(String doc, boolean check) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString img = \"#xpath=//img[contains(@src,'/Operations/sfc/servlet.shepherd/version/download')]\";\n\t\t    String frame = \"Message#xpath=//div//iframe\";\n\t\t    String button = \"#xpath=//a[text()='Preview']\";\n\t\t    if (!check){\n\t\t    switchToFrame(frame);\t\t\n\t\t\twaitForElement(img, 5);\n\t\t\tif (isElementDisplayed(img, 5)) {\n\t\t\t\tscrollToElement(img);\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tswitchToFrame(frame);\t\n\t\t\t\thighLighterMethod(img);\t\t\t\t\n\t\t\t\tmanualScreenshot(\"Image is present under the \" + doc + \" document.\");\t\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Image is not present under the \" + doc + \" document.\");\n\t\t\t}\n\t\t    }\n\t\t\tif (check) {\n\t\t\t\tif (isElementDisplayed(img, 5)) {\n\t\t\t\t\tscrollToElement(img);\n\t\t\t\t\thighLighterMethod(img);\n\t\t\t\t\tmanualScreenshot(\"Same \" + doc + \" document image is present in preview window.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Same \" + doc + \" document image is not present in preview window.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyImgInQC. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyImgInQC`, verifies the presence of an image under a specified document (\"doc\") in a Quality Control (QC) context. The method takes two parameters: `doc` (a string representing the document name) and `check` (a boolean indicating whether to check for the image's presence in both the original view and the preview window).\n\nThe method uses various Web Driver methods, such as `waitForPageToLoad`, `switchToFrame`, `waitForElement`, `isElementDisplayed`, and `scrollToElement`, to interact with the web page and perform the verification.\n\nHere's a high-level overview of what the method does:\n\n1. If `check` is `false`, it switches to a specific frame, waits for an image element to load, and then verifies if the image is displayed. If it is, it takes a manual screenshot.\n2. If `check` is `true`, it checks if the same image is present in both the original view and the preview window.\n\nThe method also includes error handling using a `try-catch` block to catch any exceptions that may occur during execution.",
        "input": [
            "String doc",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "QCAndFMSPage",
        "function_name": "verifyPreviewButton",
        "code": "public void verifyPreviewButton(String label,String doc) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString button =  label +\"#xpath=//a[text()='Preview']\";\n\t\t\twaitForElement(button,5);\n\t\t\tif (isElementDisplayed(button,5)) {\n\t\t\tscrollToWebElement(button);\n\t\t\thighLighterMethod(button);\n\t\t\tmanualScreenshot(label+\" button is present under the \"+doc+\" document.\");\n\t\t\tclickOnSpecialElement(button);\n\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label+\" button is not present under the \"+doc+\" document.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyPreviewButton. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\t\n}",
        "description": "This Java method, `verifyPreviewButton`, verifies if a specific button labeled as `label` is present under the document `doc`. The method attempts to:\n\n1. Wait for the page to load\n2. Locate the button using XPath and wait for it to be displayed within 5 seconds\n3. If the button is found:\n\t* Scroll to the button\n\t* Highlight the button (using a highlighting method)\n\t* Take a manual screenshot of the button with a descriptive name\n\t* Click on the button\n4. Wait for the page to load again\n5. If the button is not found, mark the test step as failed\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String label",
            "String doc"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "SearchValueInGlobalSearchField",
        "code": "public void SearchValueInGlobalSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString searchBtn = \"Search button #xpath=//button[@aria-label='Search']\";\n\t\t\tString searchField = \"Search field#xpath=//input[@type='search' and @autocomplete='off']\";\n\t\t\tString showMoreOption = \"Show more results#xpath=//lightning-formatted-rich-text//span[contains(text(),'Show more results')]\";\n\t\t\twaitForElement(searchBtn, 25);\n\t\t\tif (isElementDisplayed(searchBtn, elementLoadWaitTime)) {\n\t\t\t\tclickOn(searchBtn);\n\t\t\t\tif (isElementDisplayed(searchField, 9)) {\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\t// waitTime(8);\n\t\t\t\t\tif (isElementDisplayed(showMoreOption, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(showMoreOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Show more results field is not present under Global search.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Search field is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInGlobalSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SearchValueInGlobalSearchField`, searches for a given value in a global search field on a web page. It uses XPath expressions to locate specific elements such as the search button, search field, and show more results option.\n\nHere's what the method does:\n\n1. Waits for the page to load.\n2. Locates the search button using an XPath expression and waits for it to be displayed within a certain time limit (25 seconds).\n3. If the search button is displayed, clicks on it.\n4. Checks if the search field is displayed; if not, fails the test step.\n5. Types in the search value into the search field.\n6. Waits for the show more results option to be displayed (if present); if not, fails the test step.\n7. If the show more results option is displayed, clicks on it.\n\nIf any of these steps fail or an exception occurs during execution, the method will report a failure and provide an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnSubmitLink",
        "code": "public void clickOnSubmitLink(String linkName) {\n\t\ttry {\n\t\t\t// waitForElement(linkName);\n\t\t\t// waitTime(8);\n\t\t\tboolean loopFlag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//a[@title='\" + linkName + \"'] | //button[text()='\" + linkName + \"']\";\n\t\t\tif (linkName.contains(\"Generate DO\") || linkName.contains(\"DO EDIT\")) {\n\t\t\t\tdo {\n\t\t\t\t\tif (isElementDisplayed(link, 4)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(10);\n\t\t\t\t\t}\n\t\t\t\t} while (loopFlag);\n\t\t\t}\n\n\t\t\twaitTime(2);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollToWebElement(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSubmitLink`, simulates a click on a submit link with the given name. It attempts to locate the link using an XPath expression and then performs the following steps:\n\n1. Waits for the page to load.\n2. Waits for the link to be displayed (up to 4 seconds).\n3. If the link is not displayed, refreshes the page and waits again up to 10 seconds before retrying.\n4. Waits for the link to be present (up to 40 seconds) and then scrolls to it if necessary.\n5. Clicks on the link using a special method `clickOnSpecialElement`.\n6. If the link is not found, reports a test step failure.\n\nThe method also includes some error handling, catching any exceptions that occur during execution and reporting a test step failure with the exception message if one occurs.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnLink",
        "code": "public String clickOnLink(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n//\t\t\tString ClickOnLink = \"\" + labelname\n//\t\t\t\t\t+ \"#xpath=(//table[@data-aura-class='uiVirtualDataTable']/following::tr//td/following-sibling::th//span//a[text()='\"\n//\t\t\t\t\t+ labelname + \"'])[1]\";\n\t\t\tString ClickOnLink = \"\" + labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/ancestor::table//tbody//th/span/a\";\n\t\t\twaitForElement(ClickOnLink, 30);\n\t\t\tif (isElementDisplayed(ClickOnLink, 4)) {\n\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\tmanualScreenshot(\"Successfully clicked on : \" + value);\n\t\t\t\t// waitTime(8);\n\t\t\t\trefreshPage();\n\t\t\t\t// waitTime(8);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This is a Java method named `clickOnLink` that takes a string parameter `labelname`. The method attempts to click on an HTML element with the specified label name, and then performs various actions after clicking:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element.\n3. Highlights the element using a highlighter method.\n4. Gets the text value of the element.\n5. Clicks on the special element (likely an <a> tag).\n6. Takes a manual screenshot with the success message.\n7. Refreshes the page.\n\nIf any of these steps fail, it catches the exception and marks the test step as failed. The method returns the text value of the clicked element.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyRecordIsNotCreated",
        "code": "public String verifyRecordIsNotCreated(String labelname) {\n\t\tString value = \"\";\n\t\ttry {\n\t\t\tString ClickOnLink = \"\" + labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/ancestor::table//tbody//th/span/a\";\n\t\t\tif (isElementDisplayed(ClickOnLink, 14)) {\n\t\t\t\tscrollToWebElement(ClickOnLink);\n\t\t\t\thighLighterMethod(ClickOnLink);\n\t\t\t\tvalue = getText(ClickOnLink);\n\t\t\t\tclickOnSpecialElement(ClickOnLink);\n\t\t\t\ttestStepFailed(\"Successfully clicked on : \" + value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelname + \" record is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Click link. Exception :\" + e);\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, named `verifyRecordIsNotCreated`, appears to verify that a specific record with the given label name does not exist in the system. Here's a brief summary of its functionality:\n\n1. The method takes a `String` parameter `labelname`, which is used to construct an XPath expression.\n2. It attempts to find an element using the constructed XPath expression and checks if it is displayed within a certain time limit (14 seconds).\n3. If the element is found, the method scrolls to that element, highlights it, gets its text, and clicks on it.\n4. The method then reports a successful test step with the value obtained from the clicked element.\n5. If the element is not found, the method takes a manual screenshot with the label name as the filename.\n6. In case of any exception during execution, the method reports a failed test step with the exception message.\n7. Finally, the method returns the value obtained from the clicked element (or an empty string if no element was found).\n\nIn summary, this method is used to verify that a specific record does not exist in the system by attempting to click on it and reporting the outcome accordingly.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyAutoPopulatedValueInMaster",
        "code": "public String verifyAutoPopulatedValueInMaster(String Label) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::dt/following-sibling::dd//span\";\n\n//\t\t\tString moveToElement = Label\n//\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n//\t\t\t\t\t+ Label + \"']/parent::div/following-sibling::div/span\";\t\t\n\t\t\tString moveToElement1 = Label\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Label + \"']/ancestor::records-record-layout-item\";\n\t\t\tString labelElement = moveToElement + \"//slot/lightning-formatted-text\";\n\t\t\tString labelElement1 = moveToElement + \"//slot/lightning-formatted-number\";\n\t\t\tString labelElement2 = moveToElement + \"//slot/lightning-formatted-location\";\n\t\t\tString labelElement3 = moveToElement + \"//force-lookup/following-sibling::lightning-formatted-text\";\n\t\t\t\n\t\t\tif (isElementDisplayed(labelElement, 5)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement2, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement2);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement3, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement3);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\tmanualScreenshot(Label + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(moveToElement1, 3)) {\n\t\t\t\tscrollToWebElement(moveToElement1);\n\t\t\t\t// text = getText(moveToElement1);\n\t\t\t\thighLighterMethod(moveToElement1);\n\t\t\t\tmanualScreenshot(Label + \" has [ null ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `verifyAutoPopulatedValueInMaster`, is used to verify the auto-populated value of a field with the given label in a Salesforce Lightning application.\n\nThe method takes a `String` parameter `Label`, which represents the label of the field to be verified. It uses this label to construct several XPath expressions that are used to locate the field's elements on the page.\n\nThe method then attempts to find and interact with these elements, performing the following actions:\n\n1. Scrolls to the element if it is not already visible.\n2. Retrieves the text value of the element.\n3. Highlights the element using a `highLighterMethod`.\n4. Takes a manual screenshot of the element with its auto-populated value.\n\nThe method returns the auto-populated value as a `String`. If the field is not found or an exception occurs during execution, it reports a test step failure and returns an empty string.",
        "input": [
            "String Label"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickEditOptionWithLabelInMasterPage",
        "code": "public void clickEditOptionWithLabelInMasterPage(String fieldLabel) {\n\t\ttry {\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']/parent::div/../..//div/button\";\n\t\t\twaitForElement(editOption, 20);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPage`, simulates a click on an edit button with a specific label in the master page of a web application.\n\nThe method takes one parameter, `fieldLabel`, which is used to construct the XPath locator for the edit button. It then:\n\n1. Waits up to 20 seconds for the element to be present using `waitForElement`.\n2. Checks if the element is displayed within 5 seconds using `isElementDisplayed`. If it's not displayed, the method fails and logs an error.\n3. Scrolls to the element using `scrollToWebElement` if it's not already visible in the viewport.\n4. Simulates a click on the edit button using `clickOnSpecialElement`.\n5. If any exceptions occur during execution, it logs an information message with the exception message.\n\nThe method is designed to handle situations where the edit button may take some time to load or become visible after page navigation.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectvaluefromdropdownAdminlogin",
        "code": "public void selectvaluefromdropdownAdminlogin(String labelname, String value) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString Label = labelname + \"#xpath=//label[text()='\" + labelname + \"']/ancestor::span//div//button//span\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tscrollToWebElement(Label);\n\t\t\tif (isElementDisplayed(Label, 7)) {\n\t\t\t\thighLighterMethod(Label);\n\t\t\t\tclickOnSpecialElement(Label);\n\t\t\t\tString Element = value + \"#xpath=//label[text()='\" + labelname\n\t\t\t\t\t\t+ \"']/following-sibling::div//div//span[@title='\" + value + \"']\";\n\t\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + labelname + \" dropdown \");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(value + \"is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \"dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdropdownAdminlogin`, selects a value from a dropdown list on an admin login page. It takes two parameters: the label name of the dropdown and the desired value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. The method first checks if the specified label is present on the page using an XPath expression.\n2. If the label is found, it scrolls to the element and highlights it using a high-lighting mechanism (not shown in this code snippet).\n3. It then clicks on the dropdown button to expand the list of options.\n4. The method then checks if the desired value is present in the dropdown list by searching for an XPath expression that matches the label name and the value.\n5. If the value is found, it highlights the element again and clicks on it to select the value.\n6. Finally, the method logs a test step as passed or failed based on whether the selection was successful.\n\nIf any of these steps fail (e.g., the label is not present, the value is not selected), the method catches the exception and logs a failure message with the error message.",
        "input": [
            "String labelname",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickEditOptionWithLabelInMasterPages",
        "code": "public void clickEditOptionWithLabelInMasterPages(String fieldLabel) {\n\t\ttry {\n\t\t\tString editOption = fieldLabel\n\t\t\t\t\t+ \" edit button#xpath=(//div[@class='test-id__field-label-container slds-form-element__label no-utility-icon']/child::span[text()='\"\n\t\t\t\t\t+ fieldLabel + \"']/../following::button)[1]\";\n\t\t\twaitForElement(editOption, 20);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithLabelInMasterPages`, simulates a click on an edit button with a specific label within master pages. \n\nIt takes a `String` parameter `fieldLabel`, which is the label of the field whose edit button needs to be clicked.\n\nThe method:\n\n1. Builds an XPath expression by concatenating strings, which identifies the edit button based on its label.\n2. Waits for the element to be present using `waitForElement`.\n3. Checks if the element is displayed within a certain time frame (5 seconds) using `isElementDisplayed`. If it's not displayed, the method fails with an error message.\n4. Scrolls to the element and clicks it using `scrollToWebElement` and `clickOnSpecialElement`, respectively.\n5. If any exception occurs during these steps, it catches the exception and logs a test step failure with the exception message.\n\nThis method seems to be part of a larger testing framework for web applications, likely automating UI tests.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnSaveButtonInMasterPageWithActionClass",
        "code": "public void clickOnSaveButtonInMasterPageWithActionClass(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tWebElement element = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\twaitTime(1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(element).click().perform();\n\t\t\t\ttestStepPassed(\"Click On : \" + buttonLabel);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \"  is not present.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\n\t\t\t\t\t\"Failed in click On Save Button In MasterPage With Action Class. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButtonInMasterPageWithActionClass`, is used to simulate a mouse click on a button with the specified label within the master page of a web application. The method uses Selenium WebDriver and Actions classes to perform the click action.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the button element based on its text.\n2. It waits for the button element to be present and visible using `waitForElement` and `isElementDisplayed`.\n3. If the button is displayed, it scrolls to the button element using `scrollToWebElement`, then waits for a second using `waitTime`.\n4. It creates an `Actions` object to simulate mouse movements and clicks.\n5. The method performs a mouse hover and click on the button element using the `moveToElement`, `click`, and `perform` methods of the `Actions` class.\n6. If the click operation is successful, it logs a test step as passed. Otherwise, if any exception occurs during the execution of the method, it logs a test step as failed with an error message.\n\nThis method can be useful when you need to interact with buttons or other elements on a web page that require mouse hover and click actions.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "toChangeCaseOwner",
        "code": "public void toChangeCaseOwner(String fieldLabel) {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString editOption = fieldLabel\n\t\t\t\t\t+ \" edit button#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//button[@title='\"\n\t\t\t\t\t+ fieldLabel + \"']\";\n\t\t\twaitForElement(editOption, 30);\n\t\t\tif (isElementDisplayed(editOption, 5)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toChangeCaseOwner`, appears to be a part of an automation test suite that interacts with a web page. The method takes a `String` parameter `fieldLabel`, which seems to represent the label or title of a field on the page.\n\nThe method performs the following actions:\n\n1. Waits for 5 seconds using the `waitTime` method.\n2. Creates a new string, `editOption`, by concatenating the provided `fieldLabel` with some XPath syntax to locate an edit button associated with that label.\n3. Waits for up to 30 seconds for the edit option element to be displayed using the `waitForElement` method.\n4. If the edit option is displayed, scrolls to it and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods, respectively.\n5. If the edit option is not displayed within the specified time limit (5 seconds), the test step fails with an error message.\n\nThe method also catches any exceptions that may occur during its execution and logs a failure message if one occurs.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "toSelectCaseOwner",
        "code": "public void toSelectCaseOwner(String inputValue) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//input[contains(@class,'uiAutocomplete ')]\";\n\t\t\tString searchoption = \"#xpath=//div[contains(@class,'searchButton')]//span[contains(text(),'\" + inputValue\n\t\t\t\t\t+ \"')]\";\n\t\t\tString downArrow = \"Users, Pick an object down arrow #xpath=//a[contains(@aria-label,'Users, Pick an object')]\";\n\t\t\tString downArrowOption = \"Partner Users #xpath=//span[text()='Partner Users']/ancestor::a\";\n\t\t\tString selectValue = inputValue\n\t\t\t\t\t+ \"#xpath=//div[@class='modal-header slds-modal__header']//following::a[text()='\" + inputValue\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(downArrow, 15);\n\t\t\tclickOnSpecialElement(downArrow);\n\t\t\twaitForElement(downArrowOption, 15);\n\t\t\tclickOn(downArrowOption);\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tele.sendKeys(inputValue);\n\t\t\t\twaitForElement(searchoption, 5);\n\t\t\t\tif (isElementDisplayed(searchoption, 5)) {\n\t\t\t\t\tclickOnSpecialElement(searchoption);\n\t\t\t\t\twaitForElement(selectValue, 5);\n\t\t\t\t\tif (isElementDisplayed(selectValue, 5)) {\n\t\t\t\t\t\tclickOnSpecialElement(selectValue);\n\t\t\t\t\t\tmanualScreenshot(inputValue + \" is successfully selected \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(selectValue + \" is not displayed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(inputValue + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toSelectCaseOwner\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toSelectCaseOwner`, appears to be a part of an automated testing script. Its purpose is to select a case owner from a dropdown list using the input value provided as a parameter.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for 5 seconds.\n2. It attempts to find and interact with several UI elements on the page:\n\t* An input field with a specific XPath expression (`Element`).\n\t* A search option button with an XPath expression that contains the input value (`searchoption`).\n\t* A down arrow button with an XPath expression (`downArrow`).\n\t* The corresponding down arrow option button with an XPath expression (`downArrowOption`).\n\t* A select value button with an XPath expression that contains the input value (`selectValue`).\n3. It waits for each element to be displayed and then interacts with them:\n\t* Clicks on the down arrow button.\n\t* Waits for the down arrow option button to be displayed and clicks on it.\n\t* Waits for the input field to be displayed, enters the input value, and then waits for the search option button to be displayed.\n\t* Clicks on the search option button.\n\t* Waits for the select value button to be displayed and clicks on it.\n4. If all interactions are successful, it takes a manual screenshot with a message indicating that the case owner was successfully selected.\n\nIf any of these steps fail (e.g., an element is not displayed), the method will record a test step failure with a descriptive message.",
        "input": [
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "toSelectCaseOwnerInQCUAT",
        "code": "public void toSelectCaseOwnerInQCUAT(String inputValue) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//input[contains(@class,'uiAutocomplete ')]\";\n\t\t\tString searchoption = \"#xpath=//div[contains(@class,'searchButton')]//span[contains(text(),'\" + inputValue\n\t\t\t\t\t+ \"')]\";\n\t\t\tString downArrow = \"Users, Pick an object down arrow #xpath=//a[contains(@aria-label,'Users, Pick an object')]\";\n\t\t\tString downArrowOption = \"Partner Users #xpath=//span[text()='Users']/ancestor::a\";\n\t\t\tString selectValue = inputValue\n\t\t\t\t\t+ \"#xpath=//div[@class='modal-header slds-modal__header']//following::a[text()='\" + inputValue\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(downArrow, 15);\n\t\t\tclickOnSpecialElement(downArrow);\n\t\t\twaitForElement(downArrowOption, 15);\n\t\t\tclickOn(downArrowOption);\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tele.sendKeys(inputValue);\n\t\t\t\twaitForElement(searchoption, 5);\n\t\t\t\tif (isElementDisplayed(searchoption, 5)) {\n\t\t\t\t\tclickOnSpecialElement(searchoption);\n\t\t\t\t\twaitForElement(selectValue, 5);\n\t\t\t\t\tif (isElementDisplayed(selectValue, 5)) {\n\t\t\t\t\t\tclickOnSpecialElement(selectValue);\n\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\tmanualScreenshot(inputValue + \" is successfully selected \");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(selectValue + \" is not displayed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(inputValue + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toSelectCaseOwner\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toSelectCaseOwnerInQCUAT`, appears to be a part of an automated testing framework. Its primary function is to select a case owner in QCUAT (Quality Control Unified Automation Tool) using the provided input value.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for 5 seconds.\n2. It locates three elements:\n\t* An input field with a class containing \"uiAutocomplete\".\n\t* A search option element that contains the input value.\n\t* A down arrow element that leads to a list of options, including \"Partner Users\".\n3. It clicks on the down arrow element and waits for 15 seconds for it to load.\n4. It clicks on the \"Partner Users\" option from the dropdown menu.\n5. It waits for 5 seconds and checks if the input field is displayed.\n6. If the input field is displayed, it sends the input value to the field using `sendKeys()`.\n7. It waits again for 5 seconds and checks if the search option element is displayed.\n8. If the search option element is displayed, it clicks on it.\n9. It waits once more for 5 seconds and checks if a select value element (containing the input value) is displayed.\n10. If the select value element is displayed, it clicks on it.\n11. Finally, it takes a manual screenshot with the message \"inputValue is successfully selected\".\n\nIf any of these steps fail or an exception occurs, the method will report a test step failure and provide additional information about the error.",
        "input": [
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnButtonQc",
        "code": "public void clickOnButtonQc(String buttonLabel) {\n\t\ttry {\n\t\t\tString button = buttonLabel + \"#xpath=//button//span[text()='\" + buttonLabel + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\t// scrollToElement(button);\n\t\t\t\tclickOn(button);\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Button. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQc`, simulates a click on a button with the specified label using Selenium WebDriver. The method takes a `String` parameter `buttonLabel`, which is used to construct an XPath expression to locate the button.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `buttonLabel` with the XPath syntax for locating a button (`//button`) and a span element containing the button label.\n2. It waits for the button to be present using the `waitForElement` method, with a timeout of 10 seconds.\n3. If the button is displayed within 5 seconds, it simulates a click on the button using the `clickOn` method.\n4. If the button is not displayed or takes longer than 5 seconds to appear, it takes a manual screenshot with a filename including the button label and the message \"button is not present.\"\n5. In case of any exception (e.g., if the button cannot be found or clicked), it logs the failure using the `testStepFailed` method.\n\nThe method aims to provide a robust way to click on a button with a specific label, while also providing some flexibility in handling cases where the button is not present or takes longer than expected to appear.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectSales",
        "code": "public void selectSales(String sales) {\n\t\ttry {\n\t\t\tString waffle = \"App Launcher icon#xpath=//div[contains(@class,'appLauncher')]//button\";\n\t\t\tString search = \"App Launcher input field#xpath=//div[contains(@class,'appLauncherMenu')]//input\";\n\t\t\tString searchOption = \"Search option#xpath=//a[@data-label='\" + sales + \"']\";\n\t\t\twaitForElement(waffle, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(waffle, 40)) {\n\t\t\t\tclickOn(waffle);\n\t\t\t\twaitForElement(search, 20);\n\t\t\t\tif (isElementDisplayed(search, 4)) {\n\t\t\t\t\ttypeIn(search, sales);\n\t\t\t\t\twaitForElement(searchOption, 10);\n\t\t\t\t\tif (isElementDisplayed(searchOption, 4)) {\n\t\t\t\t\t\tclickOnSpecialElement(searchOption);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(sales + \" option is not available.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Sales. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectSales(String sales)`, appears to be a part of a UI automation test script that interacts with a web application or mobile app. The method takes a string parameter `sales` and performs the following actions:\n\n1. Waits for an element (`waffle`) to load using the `waitForElement` method.\n2. Checks if the `waffle` element is displayed using the `isElementDisplayed` method.\n3. If the `waffle` element is displayed, clicks on it using the `clickOn` method.\n4. Waits for another element (`search`) to load using the `waitForElement` method.\n5. Checks if the `search` element is displayed using the `isElementDisplayed` method.\n6. If the `search` element is displayed, types the value of the `sales` parameter into it using the `typeIn` method.\n7. Waits for another element (`searchOption`) to load using the `waitForElement` method.\n8. Checks if the `searchOption` element is displayed using the `isElementDisplayed` method.\n9. If the `searchOption` element is displayed, clicks on it using the `clickOnSpecialElement` method.\n10. Waits for the page to load completely using the `waitForPageToLoad` method.\n\nThe method also includes error handling using a `try-catch` block. If any of the above steps fail, an exception is caught and the test step is marked as failed with a message indicating the failure reason.",
        "input": [
            "String sales"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnButtonQC",
        "code": "public void clickOnButtonQC(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\twaitTime(5);\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\t// testStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t\twaitTime(10);\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t\twaitTime(10);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQC`, simulates a click on a button with the specified label (`buttonLabel`) in a web application. It uses various WebDriver methods to wait for the element, scroll to it if necessary, and then perform the click action.\n\nHere are some key features of the method:\n\n1. **Waiting**: The method waits for 6 seconds using `waitTime(6)` before attempting to find the button.\n2. **Button selection**: It tries to find the button with the specified label using an XPath expression. If this fails, it also checks if there is a button with the same label inside a section with a specific class (`'active'`).\n3. **Element presence check**: The method checks if the button (or optional button) is displayed using `isElementDisplayed`. If not, it reports a failure.\n4. **Click action**: If the element is present, the method scrolls to it using `scrollToWebElement`, clicks on it using `clickOnSpecialElement`, and waits for 10 seconds.\n5. **Error handling**: The method catches any exceptions that occur during execution and reports a test step failure with an error message.\n\nIn summary, this method provides a robust way to click on a button in a web application, handling cases where the button may not be immediately visible or may have multiple possible locations.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 45);\n\t\t\tif (isElementDisplayed(search, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=//a[@role='option']//parent::li[1]\";\n\t\t\t\tclickOn(searchValue);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchField`, enters a given value into a search field on a web page and then selects the first option from the search results.\n\nHere's a step-by-step breakdown:\n\n1. Waits for the page to load.\n2. Waits for the search input field to be displayed (up to 45 seconds).\n3. If the search input field is displayed, enters the given value into it.\n4. Waits again for the page to load.\n5. Finds the first option from the search results (identified by an XPath expression) and clicks on it.\n\nIf any of these steps fail (e.g., the search input field isn't present), the method will report a test step failure with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnCases",
        "code": "public String clickOnCases(String opportunityName) {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=//table[contains(@class,'-table')]//tbody//tr//a\";\n\t\t\tString caseNumber = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(oppurtunity, 30);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\tfor (int iterator = 0; iterator < 5; iterator++) {\n\t\t\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\t\t\tcaseNo = getText(caseNumber);\n\t\t\t\t\t\ttestStepPassed(caseNo + \" is Successfully created\");\n\t\t\t\t\t\thighLighterMethod(caseNumber);\n\t\t\t\t\t\tclickOn(oppurtunity);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(opportunityName + \" is not displayed\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(opportunityName + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, `clickOnCases`, appears to be a part of an automated testing framework. The method is designed to perform the following actions:\n\n1. Wait for a page to load.\n2. Find and click on a link with the specified XPath (`oppurtunity`).\n3. If the link is displayed, it will:\n\t* Get the Case Number from another element with a specific XPath (`caseNumber`).\n\t* Log that the case number was successfully created.\n\t* Highlight the case number using a `highLighterMethod`.\n\t* Break out of the loop.\n4. If the link is not displayed after 5 attempts, it will log a failure message.\n\nThe method returns the obtained Case Number as a String. It also catches any exceptions that may occur during execution and logs an error message with the exception message.",
        "input": [
            "String opportunityName"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnLinkInCaseTab",
        "code": "public void clickOnLinkInCaseTab(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\twaitTime(1);\n\t\t\tif (isElementDisplayed(link, 40)) {\n\t\t\t\tscrollbycordinates(link);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkInCaseTab`, attempts to click on a link with the specified name (`linkName`) within a Case tab. \n\nHere's what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the link element based on its text content and the provided `linkName`.\n3. It waits for 1 second using the `waitTime(1)` method.\n4. It checks if the link is displayed within a timeout of 40 seconds using the `isElementDisplayed(link, 40)` method. If it is not displayed, it fails the test step with an error message.\n5. If the link is displayed, it scrolls to the link element using the `scrollbycordinates(link)` method and then clicks on it using the `clickOnSpecialElement(link)` method.\n6. If any exception occurs during these steps, it catches the exception and fails the test step with an error message.\n\nIn summary, this method attempts to click on a specific link within a Case tab, handling potential timeouts and exceptions along the way.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "Verifycheckboxispresent",
        "code": "public void Verifycheckboxispresent(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//label[text()='\" + linkName + \"']\";\n\t\t\tif (isElementDisplayed(link)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\ttestStepPassed(linkName + \" checkbox is present\");\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" checkbox is not present\");\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verifycheckboxispresent \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `Verifycheckboxispresent`, is used to verify if a checkbox with the specified name (`linkName`) is present on the current web page. \n\nHere's what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the checkbox element based on its text content, which matches the provided `linkName`.\n3. It checks if the constructed link is displayed on the page using the `isElementDisplayed(link)` method.\n4. If the checkbox is present, it scrolls to the element using `scrollToWebElement(link)`, marks the test step as passed with a message indicating that the checkbox is present, and takes a manual screenshot.\n5. If the checkbox is not present, it marks the test step as failed with a message indicating that the checkbox is not present, and also takes a manual screenshot.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectOrDeselectCheckBoxInCasePage",
        "code": "public void selectOrDeselectCheckBoxInCasePage(String labelname, String status) {\n\t\ttry {\n//\t\t\tString checkBox = labelname + \"#xpath=(//label[text()='\" + labelname\n//\t\t\t\t\t+ \"']//..//div//input//..//label//span)[1]\";\n\n\t\t\tString checkBox = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'normal')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/../following-sibling::div/span//input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to True\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" check box is already True\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully set to False\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already False\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckBoxInCasePage`, is used to select or deselect a checkbox in the Case Page of an application. It takes two parameters: `labelname` and `status`. \n\n- The `labelname` parameter is the text label associated with the checkbox.\n- The `status` parameter can be either \"check\" (to check the box) or \"uncheck\" (to uncheck the box).\n\nThe method first constructs an XPath expression to locate the checkbox element based on the provided `labelname`. It then waits for the element to be visible, scrolls to it if necessary, and performs the desired action (checking or unchecking) if the status matches. If the status does not match, it takes a manual screenshot indicating that the checkbox is already in the expected state.\n\nIf any exceptions occur during the execution of this method, they are logged and the test step is marked as failed.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectOrDeselectCheckBoxInSetUpPage",
        "code": "public void selectOrDeselectCheckBoxInSetUpPage(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname\n\t\t\t\t\t+ \"#xpath=//td[text()='\"+labelname+\"']//following-sibling::td//img[@title='Checked']\";\n\t\t\tString checkBox1 = labelname\n\t\t\t\t\t+ \"#xpath=//td[text()='\"+labelname+\"']//following-sibling::td//img[@title='Not Checked']\";\n\t\t\n\t\t\tif (isElementDisplayed(QASetup_Iframe, 5)) {\n\t\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\t\twaitForElement(checkBox, 10);\n\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\t\tif (isElementDisplayed(checkBox)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelname + \" Check box is alreay set to True\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(labelname + \" check box is False\");\n\t\t\t\t\t}\n\t\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\t\tif (isElementDisplayed(checkBox1)) {\n\t\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\t\tmanualScreenshot(labelname + \" Check box is already False\");\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(labelname + \" check box is True\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method is used to select or deselect a checkbox in an iframe on a web page, based on the provided `labelname` and `status`. \n\nThe method first checks if the iframe is displayed within 5 seconds. If it is, it switches to the iframe, waits for the specified checkbox (or its unchecked counterpart) to be displayed, scrolls to the element, and then performs the selected action (either checking or unchecking the box). \n\nIf the status is \"check\" and the box is already checked, it takes a manual screenshot. If the status is \"uncheck\" and the box is already unchecked, it also takes a manual screenshot. In either case, if the expected state of the checkbox does not match the actual state, it fails the test step.\n\nIf an exception occurs during this process, it writes the exception to the log file and fails the test step.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "compareGetTextCaseOwner",
        "code": "public String compareGetTextCaseOwner(String labelname, String ExpectedValue) {\n\t\tString text = \"\";\n\t\t;\n\t\ttry {\n\t\t\tString Element = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/ancestor::dt/following-sibling::dd//span//slot/span\";\n\t\t\tscrollToWebElement(Element);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tif (text.equals(ExpectedValue)) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(text + \" is populated in the \" + labelname + \" Field \");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\ttext + \" is not populated in the \" + labelname + \" Field and Field value is \" + text);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \" field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `compareGetTextCaseOwner`, compares the text value of a specific element on a webpage with an expected value. The method takes two string parameters: `labelname` and `ExpectedValue`. \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the desired element based on the provided `labelname`.\n2. It scrolls to the element, checks if it's displayed within 8 seconds, and highlights it.\n3. If the element is displayed, it retrieves the text value of the element and highlights it again.\n4. It then compares this text value with the expected value passed as a parameter.\n5. If the values match, it takes a manual screenshot with a success message. \n6. If they don't match or if the element is not displayed within 8 seconds, it marks the test step as failed and provides an error message.\n\nThe method returns the actual text value of the element.",
        "input": [
            "String labelname",
            "String ExpectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnHolyTypeValueOnSetup",
        "code": "public void clickOnHolyTypeValueOnSetup(String HoldType) {\n\t\ttry {\n\t\t\tString UpperCaseholdType = HoldType.toUpperCase();\n\t\t\tchar firstLetter = UpperCaseholdType.charAt(0);\n\t\t\tString setupElement = \"Sorting#xpath=(//a//span[text()='\" + firstLetter + \"'])[1]\";\n\t\t\tString moreOption = \"more#xpath=//a[text()='more']\";\n\t\t\tString holdType = HoldType + \"#xpath=//a[text()='\" + HoldType + \"']\";\n\t\t\tswitchToDefaultFrame();\n\t\t\tWebDriverWait wait = new WebDriverWait(driver, 10);\n\t\t\tif (isElementDisplayed(QASetup_Iframe, 5)) {\n\t\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\t\twaitForElement(setupElement, 5);\n\t\t\t\tif (isElementDisplayed(setupElement, 5)) {\n\t\t\t\t\tclickOnSpecialElement(setupElement);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\tswitchToDefaultFrame();\n\t\t\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\t\t\twaitForElement(holdType, 5);\n\t\t\t\t\tif (isElementDisplayed(holdType, 5)) {\n\t\t\t\t\t\tscrollToWebElement(holdType);\n\t\t\t\t\t\tWebElement ele = findWebElement(holdType);\n\t\t\t\t\t\tele.click();\n\t\t\t\t\t\ttestStepInfo(\"Click on : \" + HoldType);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t} else if (isElementDisplayed(moreOption, 5)) {\n\t\t\t\t\t\tdriver.findElementByXPath(\"//a[text()='more']\").click();\n\t\t\t\t\t\twaitTime(3);\n\t\t\t\t\t\tscrollToWebElement(holdType);\n\t\t\t\t\t\tif (isElementDisplayed(holdType, 5)) {\n\t\t\t\t\t\t\tWebElement ele = findWebElement(holdType);\n\t\t\t\t\t\t\tele.click();\n\t\t\t\t\t\t\ttestStepInfo(\"Click on : \" + HoldType);\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(holdType + \" is not available\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnHolyTypeValueOnSetup\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnHolyTypeValueOnSetup`, simulates a mouse click on an element with a specific text value (represented by the `HoldType` parameter) within a setup frame. The method performs the following steps:\n\n1. Converts the `HoldType` string to uppercase.\n2. Determines the first letter of the uppercased `HoldType`.\n3. Creates three XPath strings: one for the setup element, one for a \"more\" option (if available), and one for the `HoldType` element itself.\n4. Switches to the default frame, then switches to the QASetup iframe if it exists.\n5. Waits up to 10 seconds for the setup element to be displayed.\n6. If the setup element is displayed, clicks on it, waits 3 seconds, and then switches back to the default frame.\n7. Switches back to the QASetup iframe and waits up to 10 seconds for the `HoldType` element to be displayed.\n8. Scrolls to the `HoldType` element if it's not already visible, finds the element using its XPath, and clicks on it.\n9. Logs a test step success message with the text \"Click on : \" followed by the original `HoldType`.\n10. Waits for the page to load before proceeding.\n\nIf the `HoldType` element is not displayed within 5 seconds, or if the \"more\" option is displayed instead, the method will attempt to click on the \"more\" option and then wait up to 10 seconds for the `HoldType` element to be displayed. If the element is still not found after this time, a test step failure message will be logged with the text \"Failed in clickOnHolyTypeValueOnSetup\".",
        "input": [
            "String HoldType"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyTextIsAutopopulatedInSetupPage",
        "code": "public void verifyTextIsAutopopulatedInSetupPage(String fieldName, String expectedValue) {\n\t\ttry {\n\t\t\tString actualValue = \"\";\n\t\t\tString dataField = \"#xpath=//th[text()='\" + fieldName + \"']/following-sibling::td//span\";\n\t\t\tString dataField1 = \"#xpath=//label[text()='\" + fieldName + \"']/parent::td/following-sibling::td\";\n\t\t\twaitForPageToLoad();\n\t\t\tswitchToDefaultFrame();\n\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\twaitForElement(dataField, 10);\n\t\t\tif (isElementDisplayed(dataField, 5)) {\n\t\t\t\tactualValue = getText(dataField).trim();\n\t\t\t\tscrollToWebElement(dataField);\n\t\t\t\thighLighterMethod(dataField);\n\t\t\t\tif (actualValue.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + actualValue + \" ] value is present in \" + fieldName);\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(dataField1, 5)) {\n\t\t\t\tactualValue = getText(dataField1).trim();\n\t\t\t\tscrollToWebElement(dataField1);\n\t\t\t\thighLighterMethod(dataField1);\n\t\t\t\tif (actualValue.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + actualValue + \" ] value is present in \" + fieldName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not present. Instead of we get \" + actualValue);\n\t\t\t\t}\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Text Is Autopopulated In Setup Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTextIsAutopopulatedInSetupPage`, is used to verify that a specific text value is autopopulated in the setup page of an application. It takes two parameters: `fieldName` and `expectedValue`.\n\nThe method first waits for the page to load, then switches to the correct frame (QASetup_Iframe). It then uses XPath expressions to locate the expected field (`dataField`) or alternative field (`dataField1`). If the expected field is displayed, it gets the actual value of the field, scrolls to the field, highlights it, and checks if the actual value contains the expected value. If it does, a manual screenshot is taken. If not, the test step fails.\n\nIf the expected field is not displayed but an alternative field (`dataField1`) is, the method follows a similar process. However, if neither field is displayed, the test step fails with an error message indicating that the specified field is not present.\n\nThe method also includes try-catch logic to catch any exceptions that may occur during execution and report them as test failures.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyTextIsAutopopulatedInSetupPageWithoutFrame",
        "code": "public void verifyTextIsAutopopulatedInSetupPageWithoutFrame(String fieldName, String expectedValue) {\n\t\ttry {\n\t\t\tString actualValue = \"\";\n\t\t\tString dataField = \"#xpath=//th[text()='\" + fieldName + \"']/following-sibling::td//span\";\n\t\t\tString dataField1 = \"#xpath=//label[text()='\" + fieldName + \"']/parent::td/following-sibling::td\";\n\t\t\twaitForPageToLoad();\n\t\t\t\n\t\t\twaitForElement(dataField, 10);\n\t\t\tif (isElementDisplayed(dataField, 5)) {\n\t\t\t\tactualValue = getText(dataField).trim();\n\t\t\t\tscrollToWebElement(dataField);\n\t\t\t\thighLighterMethod(dataField);\n\t\t\t\tif (actualValue.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + actualValue + \" ] value is present in \" + fieldName);\n\t\t\t\t}\n\t\t\t} else if (isElementDisplayed(dataField1, 5)) {\n\t\t\t\tactualValue = getText(dataField1).trim();\n\t\t\t\tscrollToWebElement(dataField1);\n\t\t\t\thighLighterMethod(dataField1);\n\t\t\t\tif (actualValue.contains(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + actualValue + \" ] value is present in \" + fieldName);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not present. Instead of we get \" + actualValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field  is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Text Is Autopopulated In Setup Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyTextIsAutopopulatedInSetupPageWithoutFrame`, is used to verify if a specific text value is autopopulated in the setup page of an application without using frames. The method takes two parameters: `fieldName` and `expectedValue`. \n\nIt first waits for the page to load, then attempts to locate two different XPath elements based on the provided `fieldName`. If either element is displayed within 5 seconds, it retrieves the actual text value, scrolls to the element, highlights it, and checks if the actual value contains the expected value. If the expected value is found, a manual screenshot is taken with a success message. \n\nIf neither element is displayed or the expected value is not present in the actual text value, the method fails the test step and provides an error message. If any exception occurs during the execution of the method, it also fails the test step and provides the exception message.",
        "input": [
            "String fieldName",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "compareGetCheckBoxStatus",
        "code": "public String compareGetCheckBoxStatus(String labelname) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = labelname + \"#xpath=//th[text()='\" + labelname + \"']//following-sibling::td[1]/span/img\";\n\t\t\tswitchToDefaultFrame();\n\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\tscrollToWebElement(Element);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString checkbox = getAttributeValue(Element, \"title\");\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tif (checkbox.equals(\"Not Checked\")) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(labelname + \" is \" + checkbox);\n\t\t\t\t\ttext = \"uncheck\";\n\t\t\t\t} else if (checkbox.equals(\"Checked\")) {\n\t\t\t\t\thighLighterMethod(Element);\n\t\t\t\t\tmanualScreenshot(labelname + \" is \" + checkbox);\n\t\t\t\t\ttext = \"check\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"\" + labelname + \" is not available\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `compareGetCheckBoxStatus`, compares the status of a checkbox on a web page with the given label name. It:\n\n1. Constructs an XPath expression to locate the checkbox element based on the provided label name.\n2. Switches to the correct frame and scrolls to the element if it's not already visible.\n3. Checks if the element is displayed within 8 seconds; if not, it fails the test step.\n4. If the element is displayed, checks its status by getting its title attribute value (which should be \"Not Checked\" or \"Checked\").\n5. Highlights the element and takes a manual screenshot to capture the checkbox status.\n6. Returns a string indicating whether the checkbox was checked (\"check\") or unchecked (\"uncheck\").\n\nThe method also includes error handling to catch any exceptions that may occur during execution, such as switching frames or scrolling to elements.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "Verifycheckboxisnotpresent",
        "code": "public void Verifycheckboxisnotpresent(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//label[text()='\" + linkName + \"']\";\n\t\t\tif (!isElementPresent(link)) {\n\t\t\t\ttestStepPassed(linkName + \" checkbox is not present\");\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" checkbox is present\");\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verifycheckboxisnotpresent \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `Verifycheckboxisnotpresent`, is used to verify if a checkbox with the given name (`linkName`) is not present on the current page. It uses Selenium WebDriver's `waitForPageToLoad` and `isElementPresent` methods to check for the presence of the checkbox.\n\nHere's what it does:\n\n1. Waits for the page to load using `waitForPageToLoad`.\n2. Creates a link string by concatenating the given `linkName` with an XPath expression that searches for a label element containing the same text as `linkName`.\n3. Checks if the element is present on the page using `isElementPresent`. If it's not present, it considers the test step passed and takes a manual screenshot.\n4. If the checkbox is present, it fails the test step and also takes a manual screenshot.\n5. If any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with an error message.\n\nIn summary, this method verifies the absence or presence of a checkbox on the page and reports the result accordingly.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyFieldColourInCasePageLayout",
        "code": "public void verifyFieldColourInCasePageLayout(String fieldName, String expectedColor) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[contains(text(),'\" + fieldName + \"')]//following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 20)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tString actualColor = findWebElement(field).getAttribute(\"style\");\n\t\t\t\tif (actualColor.contains(\"background\")) {\n\t\t\t\t\tactualColor = actualColor.split(\"background:\")[1].replace(\";\", \"\").trim();\n\t\t\t\t\tif (actualColor.equalsIgnoreCase(expectedColor)) {\n\t\t\t\t\t\tmanualScreenshot(\"Successfully [ \" + expectedColor.toUpperCase() + \" ] is displaying in [ \"\n\t\t\t\t\t\t\t\t+ fieldName + \" ] field.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Unexpected colour [ \" + actualColor.toUpperCase() + \" ] is updated.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Colour attributes are changed.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field is not available.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldColourInCasePageLayout. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldColourInCasePageLayout`, verifies that the color of a specific field on a page matches the expected color. It takes two parameters: `fieldName` and `expectedColor`. Here's what it does:\n\n1. It constructs an XPath expression to locate the input field with the given `fieldName`.\n2. It waits for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it scrolls to that element.\n4. It extracts the style attribute of the element and checks if it contains a background color specification.\n5. If it does, it extracts the actual color value and compares it with the expected color. If they match, it takes a manual screenshot as proof. If not, it fails the test step.\n6. If the color attributes are changed or the field is not available, it also fails the test step.\n\nIf any exceptions occur during this process, it catches them and reports a failure in the test step.",
        "input": [
            "String fieldName",
            "String expectedColor"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyDocStatusInCasePage",
        "code": "public void verifyDocStatusInCasePage(String documentName, String status) {\n\t\ttry {\n\t\t\tString docStatus = documentName + \"#xpath=//span[text()='\" + documentName + \"']//..//parent::li\";\n\t\t\twaitForElement(docStatus, 10);\n\t\t\tif (isElementDisplayed(docStatus, 15)) {\n\t\t\t\tscrollToWebElement(docStatus);\n\t\t\t\tString actualStatus = findWebElement(docStatus).getAttribute(\"class\");\n\t\t\t\tif (actualStatus.contains(\"-\" + status)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + documentName + \" document is [\" + status + \"].\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected status [ \" + actualStatus + \" ] is not reflected in [\" + documentName\n\t\t\t\t\t\t\t+ \"] document.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(documentName + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyDocStatusInCasePage. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocStatusInCasePage`, verifies the status of a document on a specific page. It takes two parameters: `documentName` and `status`. \n\nThe method first constructs an XPath string by concatenating the `documentName` with an XPath expression that selects the element containing the document name. It then waits for this element to be displayed, scrolls to it if necessary, and checks its status class attribute. If the status matches the expected `status`, a manual screenshot is taken indicating successful verification. If the status does not match or the element is not present, a test step fails with an appropriate error message.",
        "input": [
            "String documentName",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyQCFieldIsEnabledOrDisabled",
        "code": "public void verifyQCFieldIsEnabledOrDisabled(String fieldName, boolean condition) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//label[normalize-space()='\" + fieldName\n\t\t\t\t\t+ \"']//parent::div//input | //label[normalize-space()='\" + fieldName + \"']//parent::div//select\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tWebElement element = findWebElement(field);\n\t\t\t\tif (condition) {\n\t\t\t\t\tif (element.isEnabled()) {\n\t\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\t\tmanualScreenshot(fieldName + \" field is enabled.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\t\ttestStepFailed(fieldName + \" field is not enabled.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!element.isEnabled()) {\n\t\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\t\tmanualScreenshot(fieldName + \" field is disabled.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\t\ttestStepFailed(fieldName + \" field is not disabled.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldName + \" field is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyQCFieldIsEnabledOrDisabled. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyQCFieldIsEnabledOrDisabled`, verifies whether a specified QC field is enabled or disabled based on the provided condition.\n\nThe method takes two parameters: `fieldName` (the name of the field to verify) and `condition` (a boolean indicating whether to expect the field to be enabled (`true`) or disabled (`false)`).\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the field element based on its label text.\n2. It waits for the field element to be present, then checks if it is displayed.\n3. If the field is displayed, it retrieves the WebElement and checks whether it meets the expected condition (enabled or disabled) based on the provided `condition` parameter.\n4. If the condition is met, it takes a manual screenshot with a descriptive message indicating that the field is either enabled or disabled as expected.\n5. If the condition is not met, it takes a manual screenshot with an error message indicating that the field is not enabled or disabled as expected.\n6. If the field is not present, it fails the test step with an error message.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step if one occurs.",
        "input": [
            "String fieldName",
            "boolean condition"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "enterValueInQCDocTextField",
        "code": "public void enterValueInQCDocTextField(String textFieldlabel, String inputValue) {\n\t\ttry {\n\t\t\tString textfield = textFieldlabel + \" field#xpath=//label[normalize-space()='\" + textFieldlabel\n\t\t\t\t\t+ \"']//parent::div//input\";\n\t\t\twaitForElement(textfield, 15);\n\t\t\tif (isElementDisplayed(textfield, 15)) {\n\t\t\t\tscrollToWebElement(textfield);\n\t\t\t\ttypeIn(textfield, inputValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(textFieldlabel + \" textfield is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInQCDocTextField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInQCDocTextField`, enters a specified value into a text field with the given label on a Quality Control Document (QCD) page. \n\nThe method takes two parameters: `textFieldLabel` and `inputValue`. It uses these values to construct an XPath expression that identifies the text field on the QCD page. The method then waits for the text field to be displayed, scrolls to it if necessary, and types in the specified value.\n\nIf the text field is not present or any other exception occurs during execution of this method, it fails the test step with a descriptive message.",
        "input": [
            "String textFieldlabel",
            "String inputValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectValueFromDropdownInQCDoc",
        "code": "public void selectValueFromDropdownInQCDoc(String dropdownName, String value) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']/parent::div/select\";\n\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/parent::div/select/option[text()='\" + value + \"']\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method selects a value from a dropdown menu in a QCDoc application. It takes two parameters: the name of the dropdown and the desired value to be selected. The method first constructs XPath expressions for the dropdown and its corresponding list of values. Then it waits for the dropdown element to be displayed, scrolls to the element if necessary, selects the specified value from the dropdown, and logs a test step as passed or failed depending on whether the operation was successful. If an exception occurs during the process, the method logs a failure message with the exception's message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "enterValueInFieldCaseBlindDataInDoc",
        "code": "public void enterValueInFieldCaseBlindDataInDoc(String labelName, String value, String labelName2) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//parent::div//input\";\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tWebElement ele = findWebElement(field);\n\t\t\t\tif (isElementDisplayed(field, 25)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\tele.sendKeys(Keys.ENTER);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldCaseBlindDataInDoc`, is used to enter a value into a specific input field on a web page. The method takes three parameters: the label name of the field, the value to be entered, and another label name (which is not used within the method).\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided label name.\n2. If the value is not empty, it attempts to find the corresponding input field using the constructed XPath expression.\n3. If the field is displayed and can be interacted with, it scrolls to the field if necessary, enters the value, and then presses Enter.\n4. If the field is not present or cannot be interacted with, it fails the test step.\n5. If any exception occurs during the process, it also fails the test step with an error message.\n\nThe method seems to be part of a larger automation framework for testing web applications using Selenium WebDriver.",
        "input": [
            "String labelName",
            "String value",
            "String labelName2"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnLinkInCaseTabWithoutWaitTime",
        "code": "public void clickOnLinkInCaseTabWithoutWaitTime(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkInCaseTabWithoutWaitTime`, attempts to click on a specific link within a Case tab. The method takes a `linkName` parameter as input.\n\nHere's what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the link with the given name, and adds a wait time of 1 second using `waitTime(1)`.\n3. It then uses `waitForElement(link, 40)` to wait up to 40 seconds for the element to be present.\n4. If the element is found, it scrolls to that element using `scrollbycordinates(link)`, and then attempts to click on it using `clickOnSpecialElement(link)`.\n5. If the element is not found after waiting, it reports a test step failure with the message \"linkName link is not present\".\n6. If any exception occurs during this process, it catches it and reports a test step failure with the error message.\n\nIn summary, this method attempts to click on a specific link within a Case tab, handling potential exceptions and timeouts along the way.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyFieldIsFreezedOrNot",
        "code": "public void verifyFieldIsFreezedOrNot(String header, String labelname) {\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::input[@disabled]\";\n\t\t\tString searchField1 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname\n\t\t\t\t\t+ \"']/following-sibling::lightning-input//input[@disabled]\";\n\t\t\tString searchField2 = labelname + \" #xpath=//span[text()='\" + header\n\t\t\t\t\t+ \"']/ancestor::div/following-sibling::div//label[text()='\" + labelname + \"']\"\n\t\t\t\t\t+ \"/parent::div/following::button[@disabled]\";\n\n\t\t\tif (isElementDisplayed(searchField, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else if (isElementDisplayed(searchField1, 15)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\tscrollToElement(searchField1);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else if (isElementDisplayed(searchField2, 15)) {\n\t\t\t\tscrollToWebElement(searchField2);\n\t\t\t\tscrollToElement(searchField2);\n\t\t\t\tmanualScreenshot(labelname + \" field is freezed in \" + header);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is editable in \" + header);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyFieldIsFreezedOrNot\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldIsFreezedOrNot`, is used to check if a specific field on a web page is editable or not. The method takes two parameters: `header` and `labelname`. It uses XPath expressions to locate the field element on the page.\n\nThe method first constructs three different XPath expressions to search for the field element, which are then used to determine if the field is displayed (i.e., not freezed) or not. If the field is displayed, it takes a manual screenshot and logs that the field is editable. If the field is not displayed (i.e., freezed), it also takes a manual screenshot and logs that the field is freezed.\n\nIf any of these searches fail to find the element, the method marks the test step as failed. The method also catches any exceptions that may occur during its execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String header",
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyCheckBoxIsSelectedOrDeselectInCasePage",
        "code": "public boolean verifyCheckBoxIsSelectedOrDeselectInCasePage(String labelname, String status) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//label[text()='\" + labelname + \"']//..//input\";\n\t\t\twaitForElement(checkBox, 20);\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" check box is not checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tscrollToWebElement(checkBox);\n\t\t\t\t\thighLighterMethod(checkBox);\n\t\t\t\t\tflag = true;\n\t\t\t\t\tmanualScreenshot(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" Check box is not Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"Failed in verifyCheckBoxIsSelectedOrDeselectInCasePage. Exception: \" + e.toString());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyCheckBoxIsSelectedOrDeselect`, is used to verify if a checkbox with the given label name is selected or deselected based on the provided status (either \"check\" or \"uncheck\"). \n\nThe method first constructs an XPath expression to locate the checkbox element using the provided label name. It then waits for the element to be present, scrolls to it, and highlights it (using a high-lighter method). \n\nIf the status is \"check\", it checks if the checkbox is selected; if not, it fails the test step. If the status is \"uncheck\", it checks if the checkbox is not selected; if it is, it fails the test step.\n\nThe method also takes screenshots after performing the expected action (either checking or unchecking) and logs any exceptions that occur during its execution. The method returns a boolean indicating whether the expected action was successful.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "boolean"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "ClickonTabsinCaseObject",
        "code": "public void ClickonTabsinCaseObject(String ElementName) {\n\t\ttry {\n\t\t\tString element = ElementName + \"#xpath=//button//span[text()='\" + ElementName + \"']\";\n\t\t\twaitForElement(element, 30);\n\t\t\twaitTime(5);\n\t\t\tif (isElementDisplayed(element, 5)) {\n\t\t\t\tscrollToWebElement(element);\n\t\t\t\tclickOn(element);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(ElementName + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Id Is Present. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `ClickonTabsinCaseObject`, appears to be designed for automating a web application that involves clicking on tabs or buttons with specific text content.\n\nThe method takes a single string parameter, `ElementName`, which is used to construct the XPath locator for the element. The method then performs the following actions:\n\n1. Waits up to 30 seconds for the element to be present using the `waitForElement` method.\n2. Waits for 5 seconds before proceeding.\n3. Checks if the element is displayed within a 5-second timeframe using the `isElementDisplayed` method.\n4. If the element is displayed, scrolls to it and clicks on it using the `scrollToWebElement` and `clickOn` methods, respectively.\n5. If the element is not displayed, fails the test step with an error message.\n\nThe method also includes a catch block that catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String ElementName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyCheckboxIsEnableOrDisable",
        "code": "public void verifyCheckboxIsEnableOrDisable(String labelname, boolean expectedStatus) {\n\t\tString checkBox = labelname + \"#xpath=//label[text()='\" + labelname + \"']//..//input\";\n\t\twaitForElement(checkBox, 10);\n\n\t\tif (isElementDisplayed(checkBox, 10)) {\n\t\t\tscrollToWebElement(checkBox);\n\t\t\tif (expectedStatus) {\n\t\t\t\tif (findWebElement(checkBox).isEnabled()) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + labelname + \" checkbox is editable.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" checkbox is not editable.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!findWebElement(checkBox).isEnabled()) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + labelname + \" checkbox is not editable.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelname + \" checkbox is editable.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\ttestStepFailed(labelname + \" checkbox is not present.\");\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyCheckboxIsEnableOrDisable`, verifies that a specific checkbox with the given label name is either enabled (editable) or disabled (not editable) as expected. \n\nThe method first locates the checkbox using XPath and waits for it to be displayed. If the checkbox is found, it scrolls to the element and checks its status based on the `expectedStatus` parameter. If the expected status matches the actual status of the checkbox, a manual screenshot is taken with a success message. Otherwise, a test step fails with an error message. If the checkbox is not present, the method also fails a test step with an error message.",
        "input": [
            "String labelname",
            "boolean expectedStatus"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyFieldMandatoryMsgInQC",
        "code": "public void verifyFieldMandatoryMsgInQC(String field) {\n\t\ttry {\n\t\t\tString error = \"Error#xpath=//label[text()='\" + field\n\t\t\t\t\t+ \"']//following-sibling::p/span[contains(@class,'error')]\";\n\t\t\twaitForElement(error, 20);\n\t\t\tif (isElementDisplayed(error, 15)) {\n\t\t\t\thighLighterMethod(error);\n\t\t\t\tString errorMsg = getText(error);\n\t\t\t\tmanualScreenshot(\"Expected validation message is fired. Message : [ \" + errorMsg + \" ]\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Validation is not fired\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "This Java method, `verifyFieldMandatoryMsgInQC`, verifies that a mandatory field validation message is displayed in the Quality Control (QC) section of an application. \n\nThe method takes a string parameter `field` which represents the name of the field being verified.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the error message associated with the given field.\n2. It waits for the element represented by that XPath expression to be displayed (up to 20 seconds).\n3. If the element is displayed, it highlights the error message using a `highLighterMethod`.\n4. It captures a manual screenshot and logs an expected validation message with the actual error message text.\n5. If the element is not displayed after 15 seconds, it fails the test step.\n\nIf any exception occurs during this process, it prints the stack trace of the exception.",
        "input": [
            "String field"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyErrorPopupInQC",
        "code": "public void verifyErrorPopupInQC(String expectedError) {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Error message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/parent::div//div[contains(@id,'toastDescription')]//span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tString actualError_Msg = getText(ErrorPopup).trim();\n\t\t\t\tif (actualError_Msg.equalsIgnoreCase(expectedError) || actualError_Msg.contains(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyErrorPopupInQC`: This method verifies if an expected error message is displayed in the Quality Control (QC) section. It waits for the error popup to appear, checks if it's displayed, and then compares the actual error message with the expected one. If the messages match or the expected error message is contained within the actual message, a manual screenshot is taken. If not, the test step fails. If the error popup is not found, the test step also fails.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyErrorMsgOnSubmitCase",
        "code": "public String verifyErrorMsgOnSubmitCase(String expectedMsg) {\n\t\tString message = null;\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString msg = \"#xpath=//div[@role='alert']/following-sibling::section//div[contains(@style,'red')]\";\n\t\t\twaitForElement(msg, 20);\n\t\t\tif (isElementDisplayed(msg, 30)) {\n\t\t\t\tmessage = getText(msg);\n\t\t\t\tif (message.contains(expectedMsg)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully expected message [ \" + message + \" ] is present.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"we got unexpected error message.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `verifyErrorMsgOnSubmitCase`, verifies that an expected error message is displayed after submitting a form. Here's what it does:\n\n1. Waits for 5 seconds.\n2. Uses XPath to locate an element with the specified style and waits up to 20 seconds for it to be displayed.\n3. Checks if the element is displayed within 30 seconds. If not, fails the test step.\n4. Retrieves the text of the element (the error message).\n5. Verifies that the retrieved message contains the expected message.\n6. If the message matches, takes a manual screenshot with the message as a comment. If it doesn't match or if the element is not displayed, fails the test step.\n\nThe method returns the retrieved error message.",
        "input": [
            "String expectedMsg"
        ],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "enterValueInFieldCaseBlindData",
        "code": "public void enterValueInFieldCaseBlindData(String labelName, String value, String labelName2) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[normalize-space(text())='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input[@name='\" + labelName2 + \"']\";\n\t\t\tString field1 = labelName + \"#xpath=//label[normalize-space(text())='\" + labelName\n\t\t\t\t\t+ \"']//parent::div//input\";\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 25)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else if (isElementDisplayed(field1, 15)) {\n\t\t\t\t\tscrollToWebElement(field1);\n\t\t\t\t\ttypeIn(field1, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldCaseBlindData`, is used to enter a given value into an input field on a web page. The method takes three parameters: the label name of the field, the value to be entered, and another label name (presumably for logging purposes).\n\nThe method uses XPath expressions to locate the input field based on its label name. If the field is found within 25 seconds, it scrolls to the field and enters the given value using a `typeIn` method. If the field is not found within 15 seconds, it attempts to find a more general version of the field (i.e., without specifying the exact name) and enters the value if found. If neither field is found, the test step fails.\n\nThe method also includes error handling for any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value",
            "String labelName2"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\twaitForElement(button, 50);\n\t\t\tif (isElementDisplayed(button, 30)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\ttestStepPassed(\"Click On :\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton`, simulates a mouse click on a web element with the specified name (`buttonName`). It uses Selenium WebDriver to locate the element using XPath and then performs an action of moving the mouse cursor to the element and clicking it. The method also includes some basic error handling to catch any exceptions that might occur during execution.\n\nHere's a breakdown of what the method does:\n\n1. It constructs a XPath expression to find the button with the given name.\n2. It uses the `findWebElement` method to locate the button using the constructed XPath expression.\n3. It waits for the element to be displayed using the `waitForElement` method.\n4. If the button is displayed, it simulates a mouse click on the button using Selenium's `Actions` class.\n5. It logs a success message if the button is clicked successfully.\n6. If the button is not present or an exception occurs during execution, it logs a failure message and catches the exception.\n\nThe method takes a single parameter, `buttonName`, which is the name of the button to click.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnBacktoList",
        "code": "public void clickOnBacktoList() {\n\t\ttry {\n\t\t\tString button = \"Back to List #xpath=//a[text()='Back to List']\";\n\t\t\tif (isElementDisplayed(QASetup_Iframe, 15)) {\n\t\t\t\tswitchToDefaultFrame();\n\t\t\t\tswitchToFrame(QASetup_Iframe);\n\t\t\t\twaitForElement(button, 5);\n\t\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\ttestStepPassed(\"Click On : Back to List\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Back to List link is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnBacktoList \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnBackToList()`, attempts to click on a link called \"Back to List\" within an iframe. It first checks if the element is displayed and waits for it to be visible before attempting to click on it. If the element is not present or the click operation fails, the test step will fail with an appropriate error message. The method also includes logging of test steps as passed or failed.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectValueFromDropdownInCasesNewTab",
        "code": "public void selectValueFromDropdownInCasesNewTab(String dropdownName, String value) {\n\t\ttry {\n\t\t\tdropdownName=\"Customer Photo Validation\";\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div//lightning-base-combobox-item//span[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInCasesNewTab`, selects a value from a dropdown list and opens it in a new tab. Here's a brief summary of what the method does:\n\n1. It takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the value to be selected).\n2. It waits for the specified dropdown element to be displayed.\n3. If the dropdown is present, it scrolls to the dropdown, clicks on the dropdown arrow, and then selects the specified value from the dropdown list.\n4. It checks if the selected value is displayed correctly and reports the result as a test step pass or fail.\n5. If any of these steps fail (e.g., the dropdown is not present, the value is not selected), it reports an error message.\n\nThe method uses various utility methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `clickOnSpecialElement` to perform these actions.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyDropdownValuesInField",
        "code": "public void VerifyDropdownValuesInField(String dropdownName) {\n\t\tArrayList<String> al = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\tif (isElementDisplayed(dropdown, 16)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tList<WebElement> element = findWebElements(\"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//../following-sibling::div//lightning-base-combobox-item//span//span)\");\n\t\t\t\tfor (int i = 1; i <= element.size(); i++) {\n\t\t\t\t\tString Field = \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//../following-sibling::div//lightning-base-combobox-item//span//span)[\"\n\t\t\t\t\t\t\t+ i + \"]\";\n\t\t\t\t\tString arr = getText(Field);\n\t\t\t\t\tal.add(arr);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(dropdownName + \" picklist values are : \" + al);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDropdownValuesInField`, is used to verify the values present in a dropdown field. It takes a string parameter `dropdownName` which represents the name of the dropdown field.\n\nThe method first constructs an XPath expression to locate the dropdown element and then uses it to click on the dropdown if it's displayed within a certain time limit (16 seconds). If the dropdown is not displayed, the test fails.\n\nOnce the dropdown is clicked, the method retrieves all the options present in the dropdown using another XPath expression. It then iterates over these options, extracts their text values, and stores them in an ArrayList.\n\nFinally, it takes a manual screenshot with the list of values found in the dropdown, which can be used for further verification or debugging purposes. If any exception occurs during this process, the test fails.",
        "input": [
            "String dropdownName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyandReturnDropdownValuesInField",
        "code": "public ArrayList<String> VerifyandReturnDropdownValuesInField(String dropdownName) {\n\t\tArrayList<String> al = new ArrayList<String>();\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//div/button)[last()]\";\n\t\t\tif (isElementDisplayed(dropdown, 16)) {\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tList<WebElement> element = findWebElements(\"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//../following-sibling::div//lightning-base-combobox-item//span//span)\");\n\t\t\t\tfor (int i = 1; i <= element.size(); i++) {\n\t\t\t\t\tString Field = \"#xpath=(//label[text()='\" + dropdownName\n\t\t\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//../following-sibling::div//lightning-base-combobox-item//span//span)[\"\n\t\t\t\t\t\t\t+ i + \"]\";\n\t\t\t\t\tString arr = getText(Field);\n\t\t\t\t\tal.add(arr);\n\t\t\t\t}\n\t\t\t\tmanualScreenshot(dropdownName + \" picklist values are : \" + al);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" is not available\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t\treturn al;\n\t}",
        "description": "This Java method, named `VerifyAndReturnDropdownValuesInField`, verifies the values present in a dropdown field and returns them as an ArrayList of Strings. The method:\n\n1. Constructs an XPath expression to locate the dropdown element.\n2. Checks if the dropdown element is displayed using the `isElementDisplayed` method (with a timeout of 16 seconds).\n3. If the dropdown is displayed, clicks on it using the `clickOnSpecialElement` method.\n4. Locates the list of options within the dropdown using an XPath expression and stores them in a List of WebElements.\n5. Iterates through the list of options, extracting the text value of each option (using the `getText` method) and adds it to an ArrayList.\n6. Takes a manual screenshot with the name \"picklist values are : [ArrayList contents]\" if the dropdown is displayed successfully.\n7. If the dropdown is not displayed, fails the test step with an error message.\n8. Catches any exceptions that occur during the process and reports them as a failed test step.\n\nThe method returns the ArrayList of dropdown option values.",
        "input": [
            "String dropdownName"
        ],
        "output": "ArrayList"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyTextFieldValueIsPresentInQC",
        "code": "public void verifyTextFieldValueIsPresentInQC(String textFieldlabel, String expectedValue) {\n\t\ttry {\n\t\t\tString textfield = textFieldlabel + \" field#xpath=//label[normalize-space()='\" + textFieldlabel\n\t\t\t\t\t+ \"']//following-sibling::input\";\n\t\t\twaitForElement(textfield, 15);\n\t\t\tif (isElementDisplayed(textfield, 15)) {\n\t\t\t\tscrollToWebElement(textfield);\n\t\t\t\tif (getText(textfield).equals(expectedValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully expected '\" + expectedValue + \"' value is present in [ \"\n\t\t\t\t\t\t\t+ textFieldlabel + \" ] field.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected value is not present in \" + textFieldlabel + \" field. Instead of we got : \"\n\t\t\t\t\t\t\t+ getText(textfield));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(textFieldlabel + \" textfield is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyTextFieldIsPresentInQC. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyTextFieldValueIsPresentInQC`, verifies that a text field with the specified label contains the expected value. It performs the following actions:\n\n1. Creates an XPath expression to locate the text field based on its label.\n2. Waits for the text field to be present and visible (up to 15 seconds).\n3. Scrolls to the text field if it's not already visible.\n4. Retrieves the actual text value of the text field.\n5. Compares the actual value with the expected value. If they match, takes a manual screenshot as confirmation. If they don't match, marks the test step as failed and provides an error message.\n6. If the text field is not present or visible after 15 seconds, marks the test step as failed.\n\nThe method catches any exceptions that may occur during execution and marks the test step as failed if one occurs.",
        "input": [
            "String textFieldlabel",
            "String expectedValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "selectValueFromDropdownInCustomerPhotoTab",
        "code": "public void selectValueFromDropdownInCustomerPhotoTab(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"']/parent::div/following-sibling::\" + \"div//span[@class='slds-truncate']\";\n\t\t\twaitForElement(dropdown, 30);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div//lightning-base-combobox-item//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method selects a value from a dropdown menu in the Customer Photo tab of a Salesforce application. The method takes two parameters: `dropdownName` and `value`. It uses Selenium WebDriver to:\n\n1. Find the dropdown menu by its name and wait for it to be displayed.\n2. Scroll to the dropdown menu if necessary.\n3. Click on the dropdown menu to open its list of values.\n4. Wait for the value specified in the `value` parameter to be displayed in the dropdown list.\n5. If the value is found, click on it and take a manual screenshot as proof of successful selection.\n\nIf any of these steps fail (e.g., the dropdown menu is not present or the desired value is not found), the method will report a failure and provide an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickRadioButtoninNewcaseLayout",
        "code": "public void clickRadioButtoninNewcaseLayout(String label) {\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\tString button = label + \"#xpath=//span[contains(text(),'\" + label + \"')]//parent::label//span[1]\";\n\t\t\twaitForElement(button, 45);\n\t\t\tif (isElementDisplayed(button, 14)) {\n\t\t\t\tWebElement ele = findWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\twaitTime(2);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" radio button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickRadioButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickRadioButtoninNewcaseLayout`, simulates a mouse click on a radio button with the specified label in a new case layout. The method uses various WebDriver and Selenium WebdriverWait APIs to:\n\n1. Wait for 2 seconds.\n2. Construct an XPath expression to locate the radio button based on its label.\n3. Wait up to 45 seconds for the element to be displayed.\n4. Check if the element is displayed within 14 seconds.\n5. If the element is displayed, perform a mouse hover and click action on it using Selenium's `Actions` class.\n6. Wait again for 2 seconds after clicking the radio button.\n\nIf any of these steps fail (e.g., the element is not found or is not displayed), the method will report a test step failure with an appropriate error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "clickOnButtonInPopupNewCaseLayout",
        "code": "public void clickOnButtonInPopupNewCaseLayout(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[contains(@style,'block')]//parent::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on \" + buttonName);\n\t\t\t\ttestStepInfo(\"Click action performed on : \" + getCurrentDateandTimewithMilliSec());\n\t\t\t\tdriver.findElementByXPath(\n\t\t\t\t\t\t\"//div[contains(@style,'block')]//parent::button[text()='\" + buttonName + \"']\").click();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInPopupNewCaseLayout`, is used to simulate a click on a button with the specified name within a popup layout. \n\nThe method takes a string parameter `buttonName` which represents the text of the button to be clicked.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the button based on its text and parent element.\n2. It waits for the button to be displayed using the `waitForElement` method with a timeout of 30 seconds.\n3. If the button is displayed, it takes a manual screenshot, logs the click action in the test step information, and simulates a click on the button using the `driver.findElementByXPath` method.\n4. If the button is not present within the specified time (5 seconds), it marks the test step as failed.\n5. In case of any exception during these operations, it also marks the test step as failed with an error message.\n\nIn summary, this method helps to automate clicking on a specific button in a popup layout and logs the action for testing purposes.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "msgInSubmit",
        "code": "public String msgInSubmit() {\n\t\tString message = null;\n\t\ttry {\n\t\t\tString msg = \"#xpath=//div[contains(@class,'activeState')]//span[@class='uiOutputText']\";\n\t\t\tif (isElementDisplayed(msg, 30)) {\n\t\t\t\tmessage = findWebElement(msg).getText();\n\t\t\t\tmanualScreenshot(message);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message while saving the blind data entry.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in message retreive \" + e.getMessage());\n\t\t}\n\t\treturn message;\n\t}",
        "description": "This Java method, `msgInSubmit`, attempts to retrieve an error message from a specific XPath location on the UI and returns it as a string. \n\nHere's what the method does:\n\n1. It sets a variable `message` to null.\n2. It tries to execute some code. If successful:\n   - It checks if an element with the specified XPath is displayed within 30 seconds.\n   - If the element is displayed, it retrieves the text of that element and assigns it to the `message` variable.\n   - It also takes a manual screenshot (presumably for logging or debugging purposes) with the retrieved message as its name.\n   - If the element is not displayed, it takes a manual screenshot with an error message indicating that there was no error message while saving blind data entry.\n3. If any exception occurs during execution of this code, it catches the exception and reports a test step failure with the error message.\n\nThe method returns the retrieved `message` as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyCaseStatus",
        "code": "public void verifyCaseStatus(String expectedStatusValue) {\n\t\ttry {\n\t\t\tString field = \"Case status#xpath=//span[@title='Status']//following-sibling::div//span\";\n\t\t\twaitForElement(field, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tString actualStatusValue = getText(field).trim();\n\t\t\t\tif (actualStatusValue.contains(expectedStatusValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully case status [\" + actualStatusValue + \"] is updated as expected.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected case status is not getting updated. Actual Case status : [ \"\n\t\t\t\t\t\t\t+ actualStatusValue + \" ]\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case status field is not available in Case page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Case Status. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCaseStatus(String expectedStatusValue)`, verifies the case status on a web page and checks if it matches the expected status value provided as an input parameter.\n\nHere's a brief summary of what the method does:\n\n1. It waits for a specific element (identified by the XPath `//span[@title='Status']//following-sibling::div//span`) to be loaded.\n2. If the element is displayed, it scrolls to that element and highlights it using a highlighting method.\n3. It retrieves the actual status value from the page and trims any leading/trailing whitespace.\n4. It checks if the actual status value contains the expected status value provided as an input parameter. If they match, it takes a manual screenshot with a success message.\n5. If the actual status value does not contain the expected status value, or if the element is not displayed, it fails the test step and logs an error message.\n\nThe method also catches any exceptions that may occur during execution and fails the test step if an exception is thrown.",
        "input": [
            "String expectedStatusValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyToggleButtonEnabledOrNotInQC",
        "code": "public void VerifyToggleButtonEnabledOrNotInQC(String Doc, String Status) {\n\t\ttry {\n\t\t\tString enable = Doc + \" Change Toggle button#xpath=//span[contains(@title,'\" + Doc\n\t\t\t\t\t+ \"')]/ancestor::lightning-accordion/preceding-sibling::div//lightning-input//label\";\n\t\t\tString disabe = Doc + \" Change Toggle button#xpath=//span[contains(@title,'\" + Doc\n\t\t\t\t\t+ \"')]/ancestor::lightning-accordion/preceding-sibling::div//lightning-input[@checked]//label\";\n\t\t\tif (Status.contains(\"enable\")) {\n\t\t\t\tif (isElementDisplayed(enable, 15)) {\n\t\t\t\t\tclickOn(enable);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(Doc + \" change toggle button  is already enabled.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Status.contains(\"disable\")) {\n\t\t\t\tif (isElementDisplayed(disabe, 15)) {\n\t\t\t\t\tclickOn(enable);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(Doc + \" change toggle button is already disabled.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyToggleButtonEnabledOrNotInQC \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyToggleButtonEnabledOrNotInQC`, verifies whether a toggle button is enabled or disabled based on the provided document name (`Doc`) and status (`Status`).\n\nThe method uses XPath expressions to locate the toggle button elements. If the status contains \"enable\", it checks if the enable button is displayed within 15 seconds, and if so, clicks on it. If not, it takes a manual screenshot with a message indicating that the button is already enabled.\n\nSimilarly, if the status contains \"disable\", it checks if the disable button is displayed, and if so, clicks on the enable button (presumably to toggle the state). If not, it takes a manual screenshot with a message indicating that the button is already disabled.\n\nThe method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String Doc",
            "String Status"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "EnableOrDisableToggleButtonInQC",
        "code": "public void EnableOrDisableToggleButtonInQC(String Doc, String Status) {\n\t\ttry {\n\t\t\tString enable = Doc + \" Change Toggle button#xpath=//span[contains(@title,'\" + Doc\n\t\t\t\t\t+ \"')]/ancestor::lightning-accordion/preceding-sibling::div//lightning-input[@checked]//label\";\n\t\t\tif (Status.contains(\"enable\")) {\n\t\t\t\tif (isElementDisplayed(enable, 15)) {\n\t\t\t\t\tmanualScreenshot(Doc + \" change toggle button  is already enabled.\");\n\t\t\t\t} else {\n\t\t\t\t\tclickOn(enable);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Status.contains(\"disable\")) {\n\t\t\t\tif (isElementDisplayed(enable, 15)) {\n\t\t\t\t\tclickOn(enable);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(Doc + \" change toggle button is already disabled.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyToggleButtonEnabledOrNotInQC \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `EnableOrDisableToggleButtonInQC`, enables or disables a toggle button in a Salesforce Lightning component. It takes two input parameters: `Doc` and `Status`. \n\nThe method uses XPath to locate the toggle button based on the provided document name (`Doc`). If the status is \"enable\", it checks if the button is already enabled within 15 seconds. If not, it clicks on the button to enable it. If the status is \"disable\", it does the opposite: checks if the button is already disabled and then clicks on it to disable it if necessary.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, it will record the failure in the test log and skip the rest of the method's code.",
        "input": [
            "String Doc",
            "String Status"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "casesPart1",
        "code": "public void casesPart1(String opportunityName, String saveBankDetails, String dobValue, String mobileNumberNCValue,\n\t\t\tString ECSBarcodeValue, String bankAccountValue) {\n\t\ttry {\n\t\t\twaitTime(8);\n\t\t\tswitchToApplicationClassicOrLightning(\"Lightning\");\n\t\t\twaitForPageToLoad();\n\t\t\tSearchValueInGlobalSearchField(opportunityName);\n\t\t\tclickOnLink(GOR.CaseNumberlabel);\n\t\t\twaitForPageToLoad();\n\n\t\t\tString POI = verifyAutoPopulatedValueInMaster(GOR.POINolabel);\n\t\t\tString DealId = verifyAutoPopulatedValueInMaster(GOR.QCDealId);\n\t\t\tString ECSEndDate = verifyAutoPopulatedValueInMaster(GOR.ECSEndDate);\n\t\t\tString IFSCCode = verifyAutoPopulatedValueInMaster(GOR.IFSC_Code);\n\t\t\tString status = verifyAutoPopulatedValueInMaster(GOR.Status);\n\t\t\tif (status.equals(\"OCR\")) {\n\t\t\t\tclickEditOptionWithLabelInMasterPage(GOR.Status);\n\t\t\t\tselectvaluefromdropdownAdminlogin(GOR.Status, \"Open\");\n\t\t\t\tclickOnSaveButtonInMasterPageWithActionClass(saveBankDetails);\n\t\t\t\twaitTime(8);\n\t\t\t}\n\n\t\t\tselectSales(GOR.OperationsCommunityLabel);\n\t\t\ttransferControlToWindow(2, false);\n\t\t\twaitTime(8);\n\n\t\t\tenterValueInSearchField(opportunityName);\n\t\t\tclickOnCases(opportunityName);\n\t\t\tclickOnSubmitLink(GOR.AcceptValue);\n\t\t\ttestStepInfo(\"[ Process all the docs in QC Org ]\");\n\t\t\tclickOnLinkInCaseTab(GOR.POIlabel);\n\t\t\tClickonTabsinCaseObject(GOR.BLIND_DATA_ENTRY_label);\n\t\t\tString url=driver.getCurrentUrl();\n\t\t\tif (url.contains(\"qcuat\")) {\n\t\t\t\tenterValueInFieldCaseBlindData(GOR.QC_DOB_label,\n\t\t\t\t\t\tconvertDateFormat(dobValue, \"dd/MM/yyyy\", GOR.partialDOBFormat), GOR.QC_DOB__c_label);\n\t\t\t}\n\t\t\tif (url.contains(\"qcn2p\")) {\n\t\t\t\tenterValueInFieldCaseBlindData(GOR.QC_DOB_label,\n\t\t\t\t\t\tconvertDateFormat(dobValue, \"dd/MM/yyyy\", GOR.preprodDOBFormat), GOR.QC_DOB__c_label);\n\t\t\t}\n\t\t\tenterValueInFieldCaseBlindData(GOR.QCPOINOlabel, POI, GOR.QC_POI_No__clabel);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.POAlabel);\n\t\t\tclickOnButton(GOR.passValue);\n\t\t\t\n\t\t\tclickOnLinkInCaseTab(\"Key Fact Statement\");\n\t\t\tclickOnButton(GOR.passValue);\n\t\t\t\n\t\t\t\n\t\t\tclickOnLinkInCaseTab(\"Delivery POA\");\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.ApplicationFormlabel);\n\t\t\tClickonTabsinCaseObject(GOR.BLIND_DATA_ENTRY_label);\n\t\t\tenterValueInFieldCaseBlindData(GOR.QCMOBILENUMBERlabel, mobileNumberNCValue, GOR.QC_Mobile_Number__cclabel);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.LTSCrossSelllabel);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.InvoiceLabel);\n\t\t\tselectValueFromDropdownInCasesNewTab(GOR.CUSTOMERMOBNOAVAILABLEONINVOICElabel,\n\t\t\t\t\tGOR.CUSTOMERMOBNOAVAILABLEONINVOICEValue);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.ECSLabel);\n\t\t\tclickRadioButtoninNewcaseLayout(GOR.Filledlabel);\n\t\t\tClickonTabsinCaseObject(GOR.BLIND_DATA_ENTRY_label);\n\t\t\tenterValueInFieldCaseBlindData(GOR.QCDEALIDlabel, DealId, GOR.QC_Deal_Id__clabel);\n\t\t\tenterValueInFieldCaseBlindData(GOR.QCMANDATEACNUMBERlabel, bankAccountValue, GOR.QC_Account_Number__clabel);\n\t\t\n\t\t\tif (url.contains(\"qcuat\")) {\n\t\t\t\tenterValueInFieldCaseBlindData(GOR.QCECSENDDATElabel,\n\t\t\t\t\t\tconvertDateFormat(ECSEndDate, \"MM/dd/yyyy\", \"MMM dd, YYYY\"), GOR.QC_ECS_End_Date__clabel);\n\t\t\t}\n\t\t\tif (url.contains(\"qcn2p\")) {\n\t\t\t\tenterValueInFieldCaseBlindData(GOR.QCECSENDDATElabel,\n\t\t\t\t\t\tconvertDateFormat(ECSEndDate, \"dd/MM/yyyy\", GOR.preprodDOBFormat), GOR.QC_ECS_End_Date__clabel);\n\t\t\t}\n\t\t\tclickOnButton(GOR.passValue);\n\t\t\twaitForPageToLoad();\n\t\t\t\n\t\t\t\n\n\t\t\tclickOnLinkInCaseTab(GOR.Cancelledchequelabel);\n\t\t\tselectValueFromDropdownInCasesNewTab(GOR.QCIMPSValidationlabel, GOR.QCIMPSValidationValue);\n\t\t\tClickonTabsinCaseObject(GOR.BLIND_DATA_ENTRY_label);\n\t\t\tenterValueInFieldCaseBlindData(GOR.QCCANCELLEDCHEQUEACNUMBERlabel, bankAccountValue,\n\t\t\t\t\tGOR.QC_IFSC_code__clabel);\n\t\t\tenterValueInFieldCaseBlindData(GOR.QC_IFSC_CODE, IFSCCode,\n\t\t\t\t\tGOR.QC_IFSC__c);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.PAN_Form60label);\n\t\t\tselectValueFromDropdownInCasesNewTab(GOR.QCPANVALIDATIONlabel, GOR.QCPANVALIDATIONValue);\n\t\t\tclickOnButton(GOR.passValue);\n\n\t\t\tclickOnLinkInCaseTab(GOR.CustomerPhotolabel);\n\t\t\tclickOnButton(GOR.passValue);\n\t\t\t\n\t\t\ttransferControlToWindow(1, false);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\t\t\tclickEditOptionWithLabelInMasterPage(\"Dedupe Status\");\n\t\t\tselectvaluefromdropdownAdminlogin(\"Dedupe Status\", \"Linked\");\n\t\t\tclickOnSaveButtonInMasterPageWithActionClass(\"Save\");\n\t\t\twaitForPageToLoad();\n \n\t\t\ttransferControlToWindow(2, false);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\n\t\t\tclickOnSubmitLink(GOR.submitValue);\n\t\t\tclickOnButtonInPopupNewCaseLayout(GOR.onlySavelabel);\n\t\t\tmsgInSubmit();\n\t\t\twaitTime(10);\n\t\t\t\n\t\t\t\n\t\t\ttransferControlToWindow(1, true);\n\t\t\twaitTime(10);\n\t\t\trefreshPage();\n\t\t\tstatus = verifyAutoPopulatedValueInMaster(GOR.Status);\n\t\t\tverifyTwoValues(status, \"Closed\");\n\n\t\t\tString stage = verifyAutoPopulatedValueInMaster(\"Stage\");\n\t\t\tverifyTwoValues(stage, \"QC Completed\");\n\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in casesPart1\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is part of a test automation script for a Salesforce application. The method is named `casesPart1` and it appears to be testing the creation and processing of a case in Salesforce.\n\nThe method takes six string parameters: `opportunityName`, `saveBankDetails`, `dobValue`, `mobileNumberNCValue`, `ECSBarcodeValue`, and `bankAccountValue`. These values are likely used to populate various fields and values during the test execution.\n\nThe method consists of several steps, including:\n\n1. Waiting for a specified amount of time (8 seconds).\n2. Switching to the Lightning application.\n3. Searching for an opportunity by name using the global search field.\n4. Clicking on a link labeled \"Case Number\".\n5. Verifying and populating various fields in the case master page, including POI, Deal ID, ECS End Date, IFSC Code, and Status.\n6. Selecting sales operations community label.\n7. Transferring control to another window (2).\n8. Entering values in various fields in the case blind data entry section, including DOB, POI No., Mobile Number, and Account Number.\n9. Clicking on buttons and links to progress through the case processing workflow.\n10. Verifying that certain fields are populated correctly after completing the case processing workflow.\n\nThe method also includes error handling using a `try-catch` block. If an exception occurs during the test execution, the method will report the failure and log the error message.",
        "input": [
            "String opportunityName",
            "String saveBankDetails",
            "String dobValue",
            "String mobileNumberNCValue",
            "String ECSBarcodeValue",
            "String bankAccountValue"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyDocumentStatusInQCUat",
        "code": "public boolean verifyDocumentStatusInQCUat(String documentLabel, String expectedDocumentStatus,\n\t\t\tString expectedAttributeValue) {\n\t\tboolean isExpected = false;\n\t\ttry {\n\t\t\tString documentField = documentLabel + \" field#xpath=(//a//span[text()='\" + documentLabel\n\t\t\t\t\t+ \"'])[last()]/ancestor::li\";\n\t\t\twaitForElement(documentField, 9);\n\t\t\tif (isElementDisplayed(documentField, 9)) {\n\t\t\t\tscrollToWebElement(documentField);\n\t\t\t\tString currentStatus = getAttributeValue(documentField, \"class\");\n\t\t\t\tif (currentStatus.contains(expectedAttributeValue)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + documentLabel + \" document status updated as \"\n\t\t\t\t\t\t\t+ expectedDocumentStatus + \".\");\n\t\t\t\t\tisExpected = true;\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(documentLabel + \" document is not having expected status. Instead of its updated as \"\n\t\t\t\t\t\t\t+ currentStatus);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(documentLabel + \" document is not present in Document tab.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Document Status. Exception : \" + e.getMessage());\n\t\t}\n\n\t\treturn isExpected;\n\t}",
        "description": "This Java method, named `verifyDocumentStatusInQCUat`, verifies the status of a document in a UI application using XPath expressions and waits for specific elements to be displayed. \n\nThe method takes three parameters: \n1. `documentLabel`: The label or name of the document.\n2. `expectedDocumentStatus`: The expected status of the document.\n3. `expectedAttributeValue`: The expected attribute value (in this case, the class) of the document.\n\nIt performs the following steps:\n- Waits for an element with a specific XPath expression to be displayed.\n- Scrolls to the element if it's not visible.\n- Retrieves the current status of the document by getting its \"class\" attribute value.\n- Compares the current status with the expected status. If they match, it marks the test as successful and takes a manual screenshot. \n- If the document is not present or the status does not match the expected one, it fails the test step.\n\nThe method returns a boolean indicating whether the expected document status was verified successfully.",
        "input": [
            "String documentLabel",
            "String expectedDocumentStatus",
            "String expectedAttributeValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyErrorPopupInQCN2PAdmin",
        "code": "public void verifyErrorPopupInQCN2PAdmin(String expectedError) {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Error message#xpath=//div[@data-aura-class='forceToastMessage']//span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tString actualError_Msg = getText(ErrorPopup).trim();\n\t\t\t\twaitTime(3);\n\t\t\t\tif (actualError_Msg.equalsIgnoreCase(expectedError) || actualError_Msg.contains(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Oct 7, 2022\n\t * @purpose : To verify the info popup message in case page.\n\t * @param expectedInfoMessage : To provide the expected message as string.\n\t */",
        "description": "Here is a brief description of the Java method:\n\nThe `verifyErrorPopupInQCN2PAdmin` method verifies that an error popup message is displayed with the expected text. It waits for the error popup element to be displayed, then checks if the actual error message matches the expected error message provided as a parameter. If the messages match or the actual message contains the expected message, it takes a manual screenshot and considers the test step successful. If the messages do not match or the error popup is not displayed, it fails the test step with an appropriate error message.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyWarningPopupMessageIsPresent",
        "code": "public void verifyWarningPopupMessageIsPresent(String expectedInfoMessage) {\n\t\ttry {\n\t\t\tString popupMessage = \"Info poup#xpath=//div[@role='alertdialog']//span[contains(@class,'toastMessage')]\";\n\t\t\tif (isElementDisplayed(popupMessage, 10)) {\n\t\t\t\t// scrollToWebElement(popupMessage);\n\t\t\t\tString actualPopupMessage = getText(popupMessage);\n\t\t\t\tif (actualPopupMessage.contains(expectedInfoMessage)) {\n\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\"Expected Info message is successfully displayed. Message : \" + actualPopupMessage);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Info message is not displayed.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Info message is not displayed.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWarningPopupMessageIsPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author : Gurumoorthy M\n\t * @since : Oct 7, 2022\n\t * @purpose : To verify the info popup message should not displayed in case\n\t *          page.\n\t * @param expectedInfoMessage : To provide the expected message as string.\n\t */",
        "description": "This Java method is used to verify if a specific warning popup message is present on the UI. The method takes an `expectedInfoMessage` parameter, which is the expected text that should be displayed in the popup.\n\nHere's what the method does:\n\n1. It checks if the popup message element is displayed within 10 seconds using the `isElementDisplayed` method.\n2. If the popup message is displayed, it extracts the actual text from the element using the `getText` method and checks if it contains the expected info message.\n3. If the actual text matches the expected info message, it takes a manual screenshot with a log message indicating that the expected info message is successfully displayed.\n4. If the actual text does not match the expected info message or if the popup message is not displayed at all, it fails the test step and logs an error message.\n\nThe method also catches any exceptions that may occur during its execution and fails the test step with a log message indicating the exception.",
        "input": [
            "String expectedInfoMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyWarningPopupShouldNotPresent",
        "code": "public void verifyWarningPopupShouldNotPresent(String expectedInfoMessage) {\n\t\ttry {\n\t\t\tString popupMessage = \"Info poup#xpath=//div[@role='alertdialog']//span[contains(@class,'toastMessage')]\";\n\t\t\twaitForElement(popupMessage, 15);\n\t\t\tif (isElementDisplayed(popupMessage, 10)) {\n\t\t\t\t// scrollToWebElement(popupMessage);\n\t\t\t\tString actualPopupMessage = getText(popupMessage);\n\t\t\t\tif (actualPopupMessage.contains(expectedInfoMessage)) {\n\t\t\t\t\ttestStepFailed(\"Info message is successfully displayed. Message : \" + actualPopupMessage);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"Info message is not displayed.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Info message is not displayed.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWarningPopupShouldNotPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyWarningPopupShouldNotPresent`, verifies that a warning popup with the expected information message is not displayed after a certain amount of time. \n\nHere's what it does:\n\n1. It waits for an element (popupMessage) to be present on the page for up to 15 seconds.\n2. If the element is displayed, it checks if the text within the element contains the expected information message.\n3. If the expected message is found, it marks the test step as failed and takes a manual screenshot.\n4. If the expected message is not found or the element is not displayed after the timeout, it also marks the test step as failed and takes a manual screenshot.\n\nThe method catches any exceptions that may occur during its execution and reports them as test failures.",
        "input": [
            "String expectedInfoMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyDocumentsPresentInRequiredDocumentsInQCUAT",
        "code": "public void VerifyDocumentsPresentInRequiredDocumentsInQCUAT(String Value) {\n\t\ttry {\n\t\t\tString document = Value + \"#xpath=//span[text()='Required Document Name']/following::a[text()='\" + Value\n\t\t\t\t\t+ \"']\";\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\ttestStepFailed(Value + \" document is present in Required Documents\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(Value + \" document is not present in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Documents Present In RequiredDocuments InQCUAT :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDocumentsPresentInRequiredDocumentsInQCUAT`, verifies if a specific document is present in the \"Required Documents\" section of an application. The method takes a string parameter `Value` which represents the name of the document to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the provided document name and the expected location of the document in the \"Required Documents\" section.\n2. It uses this XPath expression to check if the document is displayed using a method `isElementDisplayed`. The timeout for this operation is set to 4 seconds.\n3. If the document is present, it calls another method `highLighterMethodWithForLoop` to highlight the document and then marks the test step as failed with a message indicating that the document is present in the \"Required Documents\".\n4. If the document is not present, it takes a manual screenshot with a message indicating that the document is not present.\n5. The method also catches any exceptions that may occur during the verification process and marks the test step as failed if an exception occurs.\n\nIn summary, this method verifies the presence of a specific document in the \"Required Documents\" section and reports its findings accordingly.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "ClickOnDocumentsPresentInRequiredDocumentsInQCUAT",
        "code": "public void ClickOnDocumentsPresentInRequiredDocumentsInQCUAT(String Value) {\n\t\ttry {\n\t\t\tString document = Value + \"#xpath=//span[text()='Required Document Name']/following::span[text()='\" + Value\n\t\t\t\t\t+ \"']\";\n\t\t\tString document1 = Value + \"#xpath=//span[text()='Required Documents Name']/following::span[text()='\"\n\t\t\t\t\t+ Value + \"']\";\n\t\t\tif (isElementDisplayed(document, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document);\n\t\t\t\tclickOnSpecialElement(document);\n\t\t\t} else if (isElementDisplayed(document1, 4)) {\n\t\t\t\thighLighterMethodWithForLoop(document1);\n\t\t\t\tclickOn(document1);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(Value + \" document is not present in Required Documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Documents Present In RequiredDocuments InQCUAT :\" + e);\n\t\t}\n\t}",
        "description": "This Java method, named `ClickOnDocumentsPresentInRequiredDocumentsInQCUAT`, appears to be a part of an automation test script. Its primary function is to verify the presence of specific documents in a list of required documents on a webpage and then click on them if they are found.\n\nThe method takes a string parameter `Value` which seems to represent the name of the document being searched for. It uses this value to construct two XPath expressions (`document` and `document1`) that search for elements with specific text content.\n\nThe method first checks if the element matching the `document` XPath expression is displayed within a certain timeout (4 seconds). If it is, it calls two other methods: `highLighterMethodWithForLoop` to highlight the element and `clickOnSpecialElement` to click on it. If not, it then checks for the presence of the element matching the `document1` XPath expression and follows the same process if found.\n\nIf neither document is found, the method takes a manual screenshot with the message \"document is not present in Required Documents\" appended to the file name. Finally, if any exception occurs during the execution of the method, it logs the failure using the `testStepFailed` method.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "EnableOrDisableToggleButtonInQC",
        "code": "public void EnableOrDisableToggleButtonInQC(String Doc) {\n\t\ttry {\n\t\t\tString enable = \"Toggle button#xpath=//span[contains(@title,'\" + Doc\n\t\t\t\t\t+ \"')]/ancestor::lightning-accordion/preceding-sibling::div//span[@class='slds-checkbox_faux']\";\n\t\t\tif (isElementDisplayed(enable, 15)) {\n\t\t\t\tclickOn(enable);\n\t\t\t\tmanualScreenshot(\"Successfully enabled toggle button in \" + Doc + \" document\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to enable toggle button in \" + Doc + \" document\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in EnableOrDisableToggleButtonInQC \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `EnableOrDisableToggleButtonInQC`, enables or disables a toggle button in a Salesforce Lightning Component (LWC) based on the provided document (`Doc`) and takes a screenshot of the result. The method uses Selenium WebDriver to interact with the web page and performs the following actions:\n\n1. It constructs an XPath expression to locate the toggle button element.\n2. It checks if the toggle button is displayed within 15 seconds using the `isElementDisplayed` method.\n3. If the toggle button is displayed, it clicks on the button using the `clickOn` method.\n4. It takes a manual screenshot of the result using the `manualScreenshot` method with a descriptive message including the document name.\n5. If the toggle button is not displayed or an error occurs during execution, it fails the test step using the `testStepFailed` method and provides an error message.\n\nThe method catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String Doc"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyDocIsNotPresentOrNotInQCScreen",
        "code": "public void VerifyDocIsNotPresentOrNotInQCScreen(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\ttestStepFailed(linkName + \" Doc is present\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(linkName + \" Doc is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `VerifyDocIsNotPresentOrNotInQCScreen`, verifies whether a specific link or document is not present on the current webpage or if it's not displayed in the Quality Control (QC) screen. \n\nThe method takes a string parameter `linkName` which represents the name of the link or document to be verified.\n\nHere's what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the link with the given name (`linkName`). The XPath expression is created by concatenating the link name with a specific XPath query that targets the last element in the DOM tree that matches the specified text.\n3. It checks if the constructed link is displayed using the `isElementDisplayed(link, 15)` method, which takes the link as an argument and a timeout of 15 seconds. If the link is displayed within the given time frame, it highlights the link using the `highLighterMethod(link)` method and marks the test step as failed with the message \"Doc is present\".\n4. If the link is not displayed or the timeout is reached, it takes a manual screenshot using the `manualScreenshot(linkName + \" Doc is not present\")` method.\n5. The method also catches any exceptions that may occur during its execution and marks the test step as failed with an error message if an exception is thrown.\n\nIn summary, this method verifies whether a specific link or document is not present on the current webpage or if it's not displayed in the QC screen, and takes manual screenshots and test step failures accordingly.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "VerifyDocIsPresentInQCScreen",
        "code": "public void VerifyDocIsPresentInQCScreen(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=(//a//span[text()='\" + linkName + \"'])[last()]\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tmanualScreenshot(linkName + \" Doc is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" Doc is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyDocIsPresentInQCScreen`, verifies if a specific document link is present on the Quality Control (QC) screen. Here's a breakdown of what it does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the link with the given name (`linkName`) and checks if it exists on the page within 40 seconds using the `waitForElement()` method.\n3. If the link is found, it scrolls to the link using the `scrollbycordinates()` method.\n4. It then checks if the link is still present on the screen using the `isElementPresent()` method.\n5. If the link is present, it highlights the link using the `highLighterMethod()` and takes a manual screenshot with the name of the document (`linkName + \" Doc is present\"`).\n6. If the link is not present, it marks the test step as failed with an error message (`testStepFailed(linkName + \" Doc is not present\")`).\n7. If any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a generic error message (`testStepFailed(\"Failed in clickOnLink \" + e.getMessage())`).",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyAndReturnErrorMessageInPopupWithoutFail",
        "code": "public String verifyAndReturnErrorMessageInPopupWithoutFail() {\n\t\tString Error = \"\";\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 10)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]//li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tError = errorsList.get(i).getText().trim();\n\t\t\t\t\tmanualScreenshot(\"Error : \" + Error);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while editing\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn Error;\n\t}",
        "description": "This Java method, `verifyAndReturnErrorMessageInPopupWithoutFail`, verifies if an error message is displayed on the page and returns the error message(s) as a string. If the error message is not displayed within a certain time limit (10 seconds), it fails the test step. The method also takes a manual screenshot for each error message found. If any exception occurs during the execution of this method, it will fail the test step with an appropriate error message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyCkycInitiated",
        "code": "public boolean verifyCkycInitiated(String optionValue, boolean flagValue) {\n\t\tboolean flag = false;\n\t\twaitForElement(downArrow_icn, 14);\n\t\tif (isElementDisplayed(downArrow_icn, 6)) {\n\t\t\tscrollToWebElement(downArrow_icn);\n\t\t\tclickOn(downArrow_icn);\n\t\t\twaitTime(2);\n\t\t\tflag = true;\n\t\t\tif (flagValue) {\n\t\t\t\tString option = optionValue + \"#xpath=//a//span[text()='\" + optionValue + \"']\";\n\t\t\t\tif (isElementDisplayed(option, 3)) {\n\t\t\t\t\tscrollToWebElement(option);\n\t\t\t\t\tclickOnSpecialElement(option);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(optionValue + \" is not present.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\t\t\ttestStepInfo(\"CKYC is not Initiated.\");\n\t\t}\n\n\t\treturn flag;\n\n\t}",
        "description": "This Java method, `verifyCkycInitiated`, verifies if the CKYC (Customer Knowledge and You) initiation process has been completed. It takes two parameters: `optionValue` (a string) and `flagValue` (a boolean).\n\nHere's a brief overview of what the method does:\n\n1. Waits for an element (`downArrow_icn`) to be displayed.\n2. If the element is displayed, it scrolls down to that element and clicks on it.\n3. It then waits for 2 seconds.\n4. If `flagValue` is true, it checks if another element (based on the `optionValue`) is displayed. If it is, it scrolls down to that element and clicks on a special element within it.\n5. If the second element is not displayed, it marks the test step as failed with an error message.\n6. If the first element is not displayed, it logs an informational message stating that CKYC is not initiated.\n7. The method returns a boolean value indicating whether the verification was successful or not.",
        "input": [
            "String optionValue",
            "boolean flagValue"
        ],
        "output": "boolean"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "enterValueInQCPopUpField",
        "code": "public void enterValueInQCPopUpField(String label, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString Field = label + \"#xpath=//span[text()='\" + label + \"']//parent::label/following-sibling::input\";\n\t\t\twaitForElement(Field, 45);\n\t\t\tif (isElementDisplayed(Field, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(Field, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInQCPopUpField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInQCPopUpField`, enters a given value into a popup field with a specified label. Here's a breakdown of what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs an XPath expression to locate the input field based on the provided label.\n3. It waits for the element to be displayed using the `waitForElement()` method with a timeout of 45 seconds.\n4. If the element is displayed, it enters the given value into the field using the `typeIn()` method and then waits again for the page to load.\n5. If the element is not displayed, it fails the test step with an error message indicating that the field was not present.\n6. The method catches any exceptions that occur during execution and fails the test step with a message describing the exception.\n\nThe method seems to be designed to handle a popup field in a Quality Control (QC) popup, hence the name `enterValueInQCPopUpField`.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyQCDocShouldNotPresent",
        "code": "public void verifyQCDocShouldNotPresent(String docName) {\n\t\ttry {\n\t\t\tString docField = docName + \" document#xpath=(//a//span[text()='\" + docName + \"'])[last()]\";\n\t\t\twaitForElement(docField, 10);\n\t\t\tif (isElementDisplayed(docField, 10)) {\n\t\t\t\tscrollToWebElement(docField);\n\t\t\t\ttestStepFailed(docName + \" document is present.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(docName + \" documnent is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyQCDocShouldNotPresent. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyQCDocShouldNotPresent`: This method verifies that a document with the given name (`docName`) should not be present on the page. It uses an XPath expression to locate the element and checks if it's displayed within a certain time limit (10 seconds). If the element is found, the test fails with a message indicating that the document is present. If the element is not found, it takes a manual screenshot as evidence. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String docName"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyWaivedMsgShouldPresent",
        "code": "public void verifyWaivedMsgShouldPresent(String validation, String documents) {\n\t\ttry {\n\t\t\tString msgField = \"#xpath=//div[@role='application']/div[normalize-space(text())='\" + validation\n\t\t\t\t\t+ \"']//strong[text()='\" + documents + \"']\";\n\t\t\twaitForElement(msgField, 10);\n\t\t\tif (isElementDisplayed(msgField, 5)) {\n\t\t\t\tscrollToWebElement(msgField);\n\t\t\t\thighLighterMethod(msgField);\n\t\t\t\tmanualScreenshot(\"Successfully Waived message is present in QC screen.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected [ \" + validation + \" ] message is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWaivedMsgShouldPresent \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyWaivedMsgShouldPresent`, verifies that a waived message with the specified validation and documents is present on a QC screen. \n\nHere's what it does:\n\n1. It constructs an XPath string to locate the element containing the waived message.\n2. It waits for 10 seconds for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element, highlights it using the `highLighterMethod`, and takes a manual screenshot with a success message.\n4. If the element is not displayed after 5 seconds, it fails the test step with an error message.\n5. If any exception occurs during this process, it catches the exception and fails the test step with the exception message.",
        "input": [
            "String validation",
            "String documents"
        ],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyWaivedMsgShouldNotPresent",
        "code": "public void verifyWaivedMsgShouldNotPresent() {\n\t\ttry {\n\t\t\tString msgField = \"#xpath=//div[@role='application']/div[normalize-space(text())='These are the list of documents E-KYC and will not be eligible for QC:']\";\n\t\t\twaitForElement(msgField, 10);\n\t\t\tif (isElementDisplayed(msgField, 5)) {\n\t\t\t\tscrollToWebElement(msgField);\n\t\t\t\ttestStepFailed(\"Unexpectedly \" + getText(msgField) + \" message is present.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Successfullly Waived message is not present in QC screen.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWaivedMsgShouldNotPresent \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyWaivedMsgShouldNotPresent`, verifies that a specific message is not present on the screen. \n\nHere's what it does:\n\n1. It tries to locate an element using XPath and waits for 10 seconds until the element is found.\n2. If the element is displayed within 5 seconds, it scrolls to the element and fails the test step because the expected message is present.\n3. If the element is not displayed within 5 seconds, it takes a manual screenshot indicating that the message is not present in the QC screen.\n4. If any exception occurs during this process, it fails the test step with an error message.\n\nIn summary, this method checks if a certain message is not shown on the screen and reports the result accordingly.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "QCN2P_Page",
        "function_name": "verifyAPICall",
        "code": "public void verifyAPICall() {\n\t\ttry {\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tString apiName = \"https://bajaj2--qcuat.sandbox.my.site.com/Operations/s/sfsites/aura?r=20&other.QcDocumentPathInvoker_CC.caseUpdateToSubmitRest=1\";\n\t\t\tList<Map<String, Object>> timings = (List<Map<String, Object>>) js\n\t\t\t\t\t.executeScript(\"return window.performance.getEntriesByType('resource')\");\n\t\t\t// Iterate through timing information and filter specific API calls\n\t\t\tfor (Map<String, Object> timing : timings) {\n\t\t\t\tString name = (String) timing.get(\"name\");\n\t\t\t\tif (name.contains(\"caseUpdateToSubmitRest\")) { // Adjust the condition based on your API endpoint\n\t\t\t\t\tlong actalTime = Long.parseLong(timing.get(\"duration\").toString().split(\"\\\\.\")[0]);\n\t\t\t\t\ttestStepInfo(\"API Call: \" + name);\n\t\t\t\t\t;\n\t\t\t\t\ttestStepInfo(\"Actual Time in ms: \" + actalTime);\n\t\t\t\t\t;\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyWaivedMsgShouldNotPresent \" + e.getMessage());\n\t\t}\n\n\t}\n\n}",
        "description": "This Java method, `verifyAPICall`, is used to verify the timing information of a specific API call made by a web application. The method uses the Selenium WebDriver's JavaScriptExecutor to execute a JavaScript script that retrieves the timing information for all resources loaded on the page, then iterates through this information to find and extract the duration of a specific API call (in this case, one named \"caseUpdateToSubmitRest\"). It logs the name and actual time taken by this API call as test step information. If any exception occurs during execution, it logs an error message indicating that the API call verification failed.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInField",
        "code": "public void enterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInField`, is used to enter a given value into an input field on a web page. The method takes two parameters: `labelName` and `value`. \n\n- It constructs an XPath expression by concatenating the provided `labelName` with a static XPath path.\n- It then uses this XPath expression to locate the corresponding input field, scroll it into view if necessary, and wait for the element to be displayed.\n- If the value is not empty, it attempts to enter the value into the field. If the field is not present or there's an issue with entering the value, the method reports a test step failure.\n\nThe method also includes error handling using a `try-catch` block, where any exceptions that occur during execution are caught and reported as a test step failure.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getRecordTypeValue",
        "code": "public String getRecordTypeValue(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ labelName\n\t\t\t\t\t+ \"']/ancestor::dt/following-sibling::dd//div[contains(@class,'recordTypeName ')]//span\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tvalue = findWebElement(field).getText();\n\t\t\t\tmanualScreenshot(labelName + \" has [ \" + value + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getValueFromField \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate 12/11/2019\n\t * @Description - This method is used to click button in Home page\n\t */",
        "description": "This Java method, `getRecordTypeValue`, retrieves the value of a specific record type from an HTML element on a webpage. The method takes a `String` parameter `labelName`, which is used to construct an XPath expression to locate the desired element.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression using the provided `labelName` and some hardcoded values.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls to the element, highlights it (using `highLighterMethod`), retrieves its text value (using `findWebElement`), and stores this value in a local variable `value`.\n4. It takes a manual screenshot with the label name and the retrieved value for debugging purposes.\n5. If the element is not displayed, it fails the test step with an error message.\n6. In case of any exceptions during execution (e.g., timeouts or other errors), it fails the test step with an error message containing the exception's message.\n\nThe method returns the retrieved value as a `String`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnMultipleOppurtunityNameLink",
        "code": "public String clickOnMultipleOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\trefreshPage();\n\t\t\twaitForPageToLoad();\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a[starts-with(text(),'B')])\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 6)) {\n\t\t\t\tList<WebElement> listOfElement = findWebElements(oppurtunity);\n\t\t\t\tString countOfElement = String.valueOf(listOfElement.size());\n\t\t\t\tString multipleOppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a)[\"\n\t\t\t\t\t\t+ countOfElement + \"]\";\n\t\t\t\twaitForElement(multipleOppurtunity, 2);\n\t\t\t\tif (isElementDisplayed(multipleOppurtunity, 7)) {\n\t\t\t\t\topportunityValue = getText(multipleOppurtunity);\n\t\t\t\t\ttestStepInfo(\"Opportunity ID : \" + opportunityValue);\n\t\t\t\t\tclickOn(multipleOppurtunity);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnMultipleOppurtunityNameLink`, is used to click on a link with the name \"Opportunity #\". The method attempts to:\n\n1. Refresh the page.\n2. Wait for the page to load.\n3. Find an element with the XPath expression \"//table[contains(@class,'-table')]//tbody//tr//a[starts-with(text(),'B')]\" ( Oppurtunity #).\n4. If the element is displayed, it gets the size of the list of web elements matching this XPath expression and constructs a new XPath expression to find multiple instances of this link.\n5. Waits for the new link to be displayed.\n6. If the link is displayed, it gets the text of the link (Opportunity ID), logs a test step with this information, clicks on the link, and returns the Opportunity ID.\n7. If the link is not displayed or an exception occurs during these steps, it logs a test failure.\n\nThe method returns the Opportunity ID as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "assetVaidation",
        "code": "public void assetVaidation(String label, String fieldName, String value) {\n\t\ttry {\n\t\t\tString searchField = label + \" #xpath=//span[contains(text(),'\" + label\n\t\t\t\t\t+ \"')]//..//..//span[@class='slds-checkbox_faux']\";\n\t\t\tString field = fieldName + \"xpath=//label[text()='\" + fieldName + \"']//..//div/input\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, 4)) {\n\t\t\t\tclickOn(searchField);\n\t\t\t}\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tclickOn(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tclickOnButton(\"Validate\");\n\t\t\t\tmanualScreenshot(\"Asset Validation\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to Validate Asset\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t}\n\t}",
        "description": "This Java method is used for asset validation in a web application. It takes three parameters: `label`, `fieldName`, and `value`. The method performs the following actions:\n\n1. It constructs two XPath expressions based on the provided `label` and `fieldName`.\n2. It waits up to 10 seconds for the element matching the first XPath expression (`searchField`) to be displayed.\n3. If the element is displayed, it clicks on it.\n4. It then waits up to 10 seconds for the element matching the second XPath expression (`field`) to be displayed.\n5. If the element is displayed, it clicks on it, types in the provided `value`, and clicks the \"Validate\" button.\n6. After the validation process, it takes a manual screenshot with the name \"Asset Validation\".\n7. If any of these steps fail, it reports the failure as a test step failure.\n\nNote that the catch block is empty, which means that any exceptions thrown during the execution of this method will not be handled or reported.",
        "input": [
            "String label",
            "String fieldName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyValueEnterInTextField",
        "code": "public void verifyValueEnterInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tmanualScreenshot(\"Successfully '\" + value + \"' value is entered in \" + labelName + \" textField.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyValueEnterInTextField`, is used to verify that a specific value is entered into a text field with the given label name. \n\nHere's what it does:\n\n1. It constructs an XPath expression based on the provided label name.\n2. It waits for the element identified by this XPath expression to be present (up to 10 seconds).\n3. If the element is displayed within 5 seconds, it:\n   - Highlights the field using a `highLighterMethod`.\n   - Enters the given value into the field using `typeIn` method.\n   - Takes a manual screenshot to capture the result.\n4. If the element is not present or displayed within the specified time limits, it marks the test step as failed.\n\nIf any exception occurs during this process, it also marks the test step as failed and logs the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInQC",
        "code": "public boolean verifyAndPrintErrorMessageInQC() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\twaitForElement(errorList, 10);\n\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInQC`, is used to verify the presence of error messages on a web page and print them. It takes 10 seconds (as specified by the `waitForElement` method) to wait for the error list to appear before attempting to retrieve it. If the error list is found, it captures screenshots of each error message along with its text content. If an exception occurs during this process, it logs a failure and sets the `flag` variable to `false`. The method returns the value of the `flag` variable.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "searchOpportunity1",
        "code": "public void searchOpportunity1(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[@placeholder='Search...']\";\n\t\t\twaitForElement(link, 25);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\tString value = \"#xpath= //mark[text()='\" + searchvalue + \"']\";\n\t\t\t\twaitForElement(value, 15);\n\t\t\t\tif (isElementDisplayed(value, 10)) {\n\t\t\t\t\tclickOn(value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Link is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchOpportunity1`, searches for a specific value (`searchvalue`) on a web page. Here's what it does:\n\n1. It tries to navigate to an input field with the placeholder \"Search...\" using an XPath expression.\n2. If the element is displayed within 25 seconds, it scrolls down to that element and types in the `searchvalue`.\n3. It then checks if a specific mark element (with text equal to the `searchvalue`) is displayed within 15 seconds.\n4. If the mark element is found, it clicks on it. If not, it logs an error message indicating that the link was not present.\n\nThe method uses various utility methods like `waitForElement`, `scrollbycordinates`, `typeIn`, `isElementDisplayed`, and `clickOn` to perform these actions. It also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickRequerryButton",
        "code": "public void clickRequerryButton(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\tString emandate = buttonName + \"#xpath=//button//span[text()='EMandate']\";\n\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(emandate, 10);\n\t\t\tif (isElementDisplayed(emandate, elementLoadWaitTime)) {\n\t\t\t\tscrollToElement(emandate);\n\t\t\t\tclickOnSpecialElement(emandate);\n\t\t\t\twaitForElement(button, 15);\n\t\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\t\tscrollbycordinates(button);\n\n\t\t\t\t\tclickOnSpecialElement(button);// changed from clickON\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickRequerryButton`, attempts to click a specific button on a web page. The method takes a string parameter `buttonName` which represents the name of the button to be clicked.\n\nThe method first waits for 6 seconds using the `waitTime` method, then constructs two XPath expressions: one for the EMandate element and another for the specified button. It then uses these expressions to:\n\n1. Wait for the EMandate element to appear (up to 10 seconds).\n2. Check if the EMandate element is displayed.\n3. If it is, scroll to the EMandate element using `scrollToElement`.\n4. Click on the EMandate element using `clickOnSpecialElement`.\n5. Wait for the specified button to appear (up to 15 seconds).\n6. Check if the button is displayed.\n7. If it is, scroll to the button using `scrollbycordinates` and then click on it.\n\nIf any of these steps fail or take too long, the method catches the exception and reports a failure using the `testStepFailed` method.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnConfirmButton",
        "code": "public void clickOnConfirmButton() {\n\t\ttry {\n\t\t\tString button = \"Confirm button#xpath=//span[text()='Confirm']//parent::button\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate 12/11/2019\n\t * @param buttonName - provide the name of the button\n\t * @Description - This method is used to click button in Home page\n\t */",
        "description": "This Java method, `clickOnConfirmButton()`, simulates a user clicking on a \"Confirm\" button on a webpage. The method uses Selenium WebDriver's built-in functionality to:\n\n1. Wait for the specified button element to be displayed within a certain time limit (15 seconds).\n2. Check if the button is actually visible and displayed on the page.\n3. If the button is present, click on it.\n4. If the button is not present or fails to load, report a test step failure with an error message.\n\nThe method takes no parameters, as it is specifically designed to interact with a \"Confirm\" button on the Home page (as indicated by the author's comment).",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButton",
        "code": "public void clickOnButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tmanualScreenshot(\"Click on:\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method simulates a click on a button with the given name. It uses XPath to locate the button, waits for it to be displayed, scrolls to it if necessary, and then clicks on it. If the button is not found or any other exception occurs, the test step fails.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression to locate the button by combining the given `buttonName` with an XPath query that matches a `<button>` element with a normalized space value equal to the `buttonName`.\n2. It waits for the button to be displayed using the `waitForElement` method.\n3. If the button is displayed, it scrolls to the button using the `scrollToWebElement` method if necessary.\n4. It clicks on the button using the `clickOnSpecialElement` method.\n5. After clicking on the button, it takes a manual screenshot with the comment \"Click on: <buttonName>\".\n6. If the button is not found or any other exception occurs, it fails the test step and logs an error message.\n\nThe method also has a catch block that catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorPopupMessage",
        "code": "public boolean verifyErrorPopupMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitForElement(errorTitle_Msg, 9);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tif (isElementDisplayed(error_Msg, 4)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error Popup Message : '\" + getText(error_Msg) + \"'\");\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\ttestStepFailed(\"Due to above errors. we cannot move further.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error message is fired.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyErrorPopupMessage. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorPopupMessage`, verifies if an error popup message is displayed and takes a screenshot of the message if it exists. The method:\n\n1. Waits for an element with the ID `errorTitle_Msg` to be displayed (with a timeout of 9 seconds).\n2. Checks if the element is actually displayed.\n3. If the element is displayed, checks if its text contains the string \"Error\".\n4. If the text contains \"Error\", it waits for another element with the ID `error_Msg` to be displayed (with a timeout of 4 seconds).\n5. If the second element is displayed, takes a manual screenshot of the error message.\n6. Sets a flag to true if the error popup message is found and its screenshot taken.\n7. If the flag is set to true, fails the current test step with an error message indicating that the errors cannot be moved further.\n8. If the flag is false (i.e., no error popup message was found), takes a manual screenshot with an error message indicating that no error message was fired.\n\nThe method returns the value of the flag, which indicates whether the error popup message was found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyExpectedErrorPopupMessage",
        "code": "public boolean verifyExpectedErrorPopupMessage(String expectedErrorMessage) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString actualError_Msg = null;\n\t\t\twaitForElement(errorTitle_Msg, 9);\n\t\t\tif (isElementDisplayed(errorTitle_Msg, 7)) {\n\t\t\t\tif (getText(errorTitle_Msg).contains(\"Error\")) {\n\t\t\t\t\tactualError_Msg = getText(error_Msg).trim();\n\t\t\t\t\tif (actualError_Msg.equalsIgnoreCase(expectedErrorMessage)\n\t\t\t\t\t\t\t|| actualError_Msg.contains(expectedErrorMessage)) {\n\t\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected Validation is not fired.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Expected Error Popup Message. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyExpectedErrorPopupMessage`, verifies that an expected error message is displayed when a specific condition occurs. It takes one parameter, `expectedErrorMessage`, which represents the expected error message.\n\nThe method first waits for an element to be displayed (presumably a popup window or title). If the element is displayed and its text contains the string \"Error\", it then checks if the actual error message matches the expected error message. If they match, it takes a manual screenshot. If not, it marks the test step as failed.\n\nIf the element is not displayed, or if an exception occurs during the verification process, the method also marks the test step as failed. The method returns a boolean flag, which appears to be unused in this implementation.",
        "input": [
            "String expectedErrorMessage"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonQC",
        "code": "public void clickOnButtonQC(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString button = buttonLabel + \"#xpath=//button[text()='\" + buttonLabel + \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t\tmanualScreenshot(\"\");\n\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQC`, simulates a click on a button with the specified label (`buttonLabel`) on a web page. It uses various Selenium WebDriver methods to locate and interact with the button.\n\nHere's a step-by-step breakdown:\n\n1. Waits for 4 seconds using the `waitTime` method.\n2. Constructs two different XPath expressions to locate the button:\n\t* The first expression is a simple XPath that looks for a button with the given label.\n\t* The second expression is more specific, looking for a button within an active section (with class `active`) containing the given label.\n3. Waits up to 40 seconds for the button to be displayed using the `waitForElement` method.\n4. Checks if the button is displayed after 5 seconds using the `isElementDisplayed` method.\n\t* If it is, simulates a click on the button using Selenium's `Actions` class and takes a manual screenshot.\n\t* Logs a test step as passed.\n5. If the button is not displayed, checks if the optional button (from the second XPath expression) is displayed after 10 seconds.\n\t* If it is, scrolls to the element and clicks on it using the `scrollToWebElement` and `clickOnSpecialElement` methods, respectively.\n6. If neither button is displayed, logs a test step as failed with an error message indicating that the button is not present.\n\nThe method also catches any exceptions that may occur during execution and logs a test step failure with the exception message if one occurs.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyBankingDetailsAutopopulatedInTextField",
        "code": "public void verifyBankingDetailsAutopopulatedInTextField(String labelName) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div\";\n\t\t\twaitForElement(searchField, 20);\n\t\t\tif (isElementDisplayed(searchField, 4)) {\n\t\t\t\tscrollToElement(searchField);\n\t\t\t\thighLighterMethod(searchField);\n\t\t\t\tmanualScreenshot(labelName + \":\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected value is not auto-populated in \" + labelName + \" field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyBankingDetailsAutopopulatedInTextField`, is used to verify if a specific banking detail field is auto-populated with the expected value. \n\nThe method takes one parameter, `labelName`, which represents the label name of the field being verified. It uses an XPath expression to locate the element and then performs the following actions:\n\n1. Waits for the element to be displayed.\n2. Scrolls to the element if it's not visible.\n3. Highlights the element using a highlighting method (not shown in this code snippet).\n4. Takes a manual screenshot of the element.\n\nIf the element is not displayed within the expected time, the test step fails with an error message indicating that the value was not auto-populated in the specified field. If any exception occurs during the execution of the method, it also fails the test step with an error message containing the exception's message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnheadertab",
        "code": "public void clickOnheadertab(String label) {\n\t\ttry {\n\t\t\tString field = label + \"#xpath=//a[text()='\" + label + \"']\";\n\t\t\tList<WebElement> list = findWebElements(field);\n\t\t\tif (list.size() != 0) {\n\t\t\t\tfor (int iterator = 1; iterator <= list.size(); iterator++) {\n\t\t\t\t\tString currentPath = label + \"#xpath=(//a[text()='\" + label + \"'])[\" + iterator + \"]\";\n\t\t\t\t\tscrollToWebElement(currentPath);\n\t\t\t\t\tif (isElementDisplayed(currentPath))\n\t\t\t\t\t\tclickOn(currentPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" tab is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in click On Tab. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnheadertab`, simulates a click on a tab with the given label in a web application. It uses Selenium WebDriver's `findWebElements` and `scrollToWebElement` methods to locate and scroll to the tab, then clicks on it if it is displayed. If the tab is not present, it fails the test step. The method also catches any exceptions that may occur during execution and reports them as a failed test step.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterOTPProcessNumber",
        "code": "public void enterOTPProcessNumber(String label, String value) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//label[contains(text(),'\" + label + \"')]//./following-sibling::input\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\ttypeIn(Element, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" is not getting displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterOTPProcessNumber \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`enterOTPProcessNumber`: This method enters a specified value into an input field associated with a label that matches a given string. It uses XPath to locate the element, waits for it to be displayed, and then scrolls to and types in the value if the element is visible. If the element is not displayed or any exception occurs during execution, the test step fails.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "togetMobileOTPText",
        "code": "public void togetMobileOTPText(String labelName, String ExpectedMessage) {\n\t\tString actualValue = \"\";\n\t\ttry {\n\t\t\tString Element = labelName + \"#xpath=//strong[text()='\" + labelName + \"']//../following-sibling::p\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tactualValue = getText(Element);\n\t\t\t\tif (actualValue.equals(ExpectedMessage)) {\n\t\t\t\t\tmanualScreenshot(\"Successfully got \" + ExpectedMessage + \" after perform OTP Process\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Unable to get \" + ExpectedMessage\n\t\t\t\t\t\t\t+ \" message after perform OTP Process. Instead of we have got \" + actualValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" is not getting displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to GetText in togetMobileOTPText \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `togetMobileOTPText`, takes two string parameters: `labelName` and `ExpectedMessage`. It attempts to retrieve the text content of an element on a web page that matches the given `labelName` and checks if it matches the expected message. If successful, it takes a manual screenshot as confirmation. If not, it fails the test step with an error message. The method also includes error handling for any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String ExpectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "documentToFileUpload",
        "code": "public void documentToFileUpload(String fileName) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString btn_upload = \"#xpath=(//input[@type='file'])[last()]\";\n\t\t\tif (isElementDisplayed(btn_upload, elementLoadWaitTime)) {\n\t\t\t\tFile file = new File(fileName);\n\t\t\t\tString tempFilePath = file.getAbsolutePath();\n\t\t\t\tString filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator));\n\t\t\t\tfindWebElement(btn_upload).sendKeys(filePath + \"\\\\UploadDocuments\\\\\" + fileName);\n\t\t\t\ttestStepPassed(\"Successfully uploaded\" + fileName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Upload button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"ClickOn Upload Button Exception :\" + e.toString());\n\t\t}\n\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 12/11/2019\n\t * @param linkName - provide the name of the link\n\t * @Description - This method is used to click on the link\n\t * \n\t */",
        "description": "This Java method, named `documentToFileUpload`, is used to upload a file to a specified location on a web page. The method takes a file name as an input parameter and performs the following actions:\n\n1. Waits for 4 seconds using the `waitTime(4)` method.\n2. Locates the \"Upload\" button on the webpage using XPath (`#xpath=(//input[@type='file'])[last()]`).\n3. Checks if the \"Upload\" button is displayed using the `isElementDisplayed` method. If it is, then:\n\t* Creates a `File` object from the provided file name.\n\t* Gets the absolute path of the file and extracts the directory path up to the last separator (`filePath = tempFilePath.substring(0, tempFilePath.lastIndexOf(File.separator))`).\n\t* Combines the directory path with the file name to form the full file path (`filePath + \"\\\\UploadDocuments\\\\\" + fileName`).\n\t* Uses the `findWebElement` method to send the file path as input to the \"Upload\" button.\n\t* Logs a test step as passed using the `testStepPassed` method, indicating that the file was successfully uploaded.\n4. If the \"Upload\" button is not displayed, logs a test step as failed using the `testStepFailed` method with an error message (\"Upload button is not present\").\n5. Catches any exceptions that occur during the execution of the method and logs a test step as failed using the `testStepFailed` method with an error message containing the exception details.\n\nThe method was created by Vetri on December 11, 2019.",
        "input": [
            "String fileName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickonbankpopbutton",
        "code": "public void clickonbankpopbutton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@class='c-container']/following::button[text()='\" + buttonName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tscrollToWebElement(button);\n\n\t\t\tif (isElementPresent(button)) {\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonbankpopbutton`, simulates a mouse click on a specific bank pop-up button with the given name. It uses Selenium WebDriver to:\n\n1. Construct an XPath expression to locate the button based on its text and class.\n2. Wait for the element to be present and visible (up to 30 seconds).\n3. Scroll to the element if it's not currently visible in the viewport.\n4. Check if the element is actually present before attempting to click it.\n5. If the element is present, take a manual screenshot and simulate a mouse click on the button using `clickOnSpecialElement`.\n6. If the element is not present, take a manual screenshot with an error message.\n\nIf any exceptions occur during this process, the method catches them and reports the failure by calling `testStepFailed`.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "EnterValueInAdminLogin",
        "code": "public void EnterValueInAdminLogin(String labelName, String Value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName + \"')]//../div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 4)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tscrollToElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, Value);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `EnterValueInAdminLogin`, is used to input a value into an admin login form field. \n\nIt takes two parameters: `labelName` and `Value`. The `labelName` parameter is used to locate the specific form field by its label name, and the `Value` parameter is the value to be entered into the field.\n\nThe method uses various methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `scrollToElement`, and `highLighterMethod` to ensure that the element is visible, scrollable, and highlighted before entering the value. If the element is not present or any other exception occurs during the process, it will report a test step failure with an error message.\n\nThis method seems to be part of an automation framework for testing a web application's admin login functionality.",
        "input": [
            "String labelName",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromDropdownInIMPSPopup",
        "code": "public void selectValueFromDropdownInIMPSPopup(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName + \"']//..//button\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 4)) {\n\t\t\t\tscrollToElement(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//span[text()='\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownList, 10);\n\t\t\t\tif (isElementDisplayed(dropdownList, 4)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInIMPSPopup`, selects a value from a dropdown list in an IMPSS popup. It takes two string parameters: the name of the dropdown and the value to be selected.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression for the dropdown element based on its name.\n2. It waits for the dropdown element to be present and visible (up to 10 seconds).\n3. If the dropdown is displayed, it scrolls to the dropdown and clicks on the dropdown button.\n4. It constructs an XPath expression for the specific value in the dropdown list.\n5. It waits for the selected value to be present and visible (up to 10 seconds).\n6. If the selected value is displayed, it clicks on that value.\n7. If any of these steps fail, it reports a test step failure with an appropriate message.\n\nThis method seems to be part of a larger automation framework, likely using a library like Selenium WebDriver, and uses various helper methods (e.g., `waitForElement`, `isElementDisplayed`, `scrollToElement`, `clickOnSpecialElement`) to interact with the web page.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonInAdmin",
        "code": "public void clickOnButtonInAdmin(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\tString Savebutton = \"Save #xpath=//button[text()='Save']\";\n\t\t\twaitForElement(button, 20);\n\t\t\twaitTime(6);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t\twaitTime(3);\n\t\t\t\ttoCloseChildWindow();\n\t\t\t\twaitTime(6);\n\t\t\t\tselectValueFromDropdownInIMPSPopup(\"Customer Photo Status\", \"Image Match\");\n\n\t\t\t\tList<WebElement> list = findWebElements(Savebutton);\n\t\t\t\tif (list.size() != 0) {\n\t\t\t\t\tfor (int iterator = 1; iterator <= list.size(); iterator++) {\n\t\t\t\t\t\tString currentPath = \"Save #xpath=(//button[text()='Save'])[\" + iterator + \"]\";\n\t\t\t\t\t\tif (isElementDisplayed(currentPath, 6)) {\n\t\t\t\t\t\t\tscrollToWebElement(currentPath);\n\t\t\t\t\t\t\tclickOn(currentPath);\n\t\t\t\t\t\t}\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(buttonName + \" button is disabled to click\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInAdmin`, simulates a user clicking on a specific button with the given name in an administrative interface. The method takes a string parameter `buttonName` which is used to construct the XPath of the button element.\n\nHere's what the method does:\n\n1. It constructs the XPath of the button using the provided `buttonName`.\n2. It waits for the button to be displayed and then clicks on it.\n3. If the click is successful, it performs some additional actions:\n\t* Waits for the page to load.\n\t* Waits for a few seconds.\n\t* Closes any child windows that may have opened.\n\t* Selects a value from a dropdown menu in an IMPSPopup (not clear what this popup is).\n4. If there are multiple \"Save\" buttons on the page, it iterates through them and clicks on each one that is displayed.\n5. If no \"Save\" buttons are found or if any of these steps fail, it takes a manual screenshot with a failure message.\n\nThe method catches any exceptions that may occur during its execution and reports the failure using a `testStepFailed` method.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonInCustomerPhotoTab",
        "code": "public void clickOnButtonInCustomerPhotoTab(String buttonName) {\n\t\ttry {\n\t\t\tString Savebutton = \"Save #xpath=//button[text()='\" + buttonName + \"']\";\n\t\t\tList<WebElement> list = findWebElements(Savebutton);\n\t\t\tif (list.size() != 0) {\n\t\t\t\tfor (int iterator = 1; iterator <= list.size(); iterator++) {\n\t\t\t\t\tString currentPath = \"Save #xpath=(//button[text()='Save'])[\" + iterator + \"]\";\n\t\t\t\t\tif (isElementDisplayed(currentPath, 6)) {\n\t\t\t\t\t\tscrollToWebElement(currentPath);\n\t\t\t\t\t\tclickOn(currentPath);\n\t\t\t\t\t}\n\t\t\t\t\twaitTime(2);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is disabled to click\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInCustomerPhotoTab`, attempts to find and click on a specific button with the given name (`buttonName`) within the Customer Photo tab. \n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression to locate the button by its text content.\n2. It searches for web elements that match this XPath expression using the `findWebElements` method and stores them in a list.\n3. If the list is not empty, it iterates through each element in the list (assuming there are multiple buttons with the same name).\n4. For each button, it checks if the element is displayed within 6 seconds using the `isElementDisplayed` method.\n5. If the element is displayed, it scrolls to that element using the `scrollToWebElement` method and clicks on it using the `clickOn` method.\n6. After clicking, it waits for 2 seconds before moving on to the next button (if there are multiple).\n7. If no buttons with the given name are found, it fails the test step.\n\nIf any exceptions occur during this process, it catches them and marks the test step as failed.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\tString link = \"More #xpath=//a[text()='More']\";\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else if (isElementDisplayed(link, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(link)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : More\");\n\t\t\t\twaitTime(4);\n\t\t\t\tString link1 = buttonName + \"#xpath=//a[text()='\" + buttonName + \"']\";\n\t\t\t\tclickOnSpecialElement(link1);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton`, simulates a click on a specific save button with the given name. It uses Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. It constructs an XPath expression for the button using the provided button name.\n2. It waits up to 40 seconds for the button to be displayed and then checks if the button is visible after 6 seconds of waiting.\n3. If the button is present, it scrolls to the button, takes a manual screenshot, and clicks on the button.\n4. If the button is not present but the \"More\" link is, it simulates a click on the link, waits for 4 seconds, then clicks on the save button (assuming it's still present after clicking \"More\").\n5. If neither the button nor the link is present, it fails the test step.\n6. It catches any exceptions that occur during execution and reports them as failed test steps.\n\nThe method is designed to handle different scenarios where the save button might be hidden behind a \"More\" link or not present at all.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnEditButton",
        "code": "public void clickOnEditButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\tpageScrollDown();\n\t\t\twaitForElement(button, 40);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnEditButton`, simulates a click on an edit button with the given name. It uses Selenium WebDriver to perform the following steps:\n\n1. Scrolls down the page using `pageScrollDown()`.\n2. Waits for the specified button to be displayed using `waitForElement(button, 40)`.\n3. Checks if the button is actually displayed within a certain time limit (6 seconds) using `isElementDisplayed(button, 6)`.\n4. If the button is displayed, scrolls to it using `scrollToWebElement(button)` and takes a manual screenshot of the action using `manualScreenshot(\"Click on\" + buttonName)`. Then, simulates a click on the button using `clickOnSpecialElement(button)`.\n5. If the button is not displayed after 6 seconds, fails the test step with an error message using `testStepFailed(buttonName + \" button is not present\")`.\n\nIf any exception occurs during these steps, it catches and reports the failure using `testStepFailed(\"Failed in clickOnButton \" + e.getMessage())`.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickoneditpopbutton",
        "code": "public void clickoneditpopbutton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[text()='Initiate IMPS']/following::button[text()='\"\n\t\t\t\t\t+ buttonName + \"']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\n\t\t}\n\n\t}",
        "description": "This Java method, `clickoneditpopbutton`, attempts to click on a specific edit popup button with the given name. It uses Selenium WebDriver's methods to:\n\n1. Construct an XPath expression to locate the button.\n2. Wait for the element to be present and visible (up to 10 seconds).\n3. If the button is displayed, scroll to it and perform a click action.\n4. If the button is not displayed, mark the test step as failed.\n\nIf any exceptions occur during this process, the method catches them and marks the test step as failed with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickonPopupButton",
        "code": "public void clickonPopupButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName\n\t\t\t\t\t+ \"']/ancestor::button[@class='slds-button slds-button_brand cuf-publisherShareButton undefined uiButton']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 3)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonPopupButton`, attempts to click on a specific popup button with the given name. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be present and visible before attempting to click it. If the element is not found or not displayed within the specified timeout, the method fails the test step.\n\nThe method takes a single parameter, `buttonName`, which is used to construct an XPath expression that uniquely identifies the button by its text content. The XPath expression is then passed to the `waitForElement` and `isElementDisplayed` methods to locate and verify the element's presence. If the element is found and displayed, the method calls the `clickOn` method to simulate a click on the button. If not, it fails the test step with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "CheckValueIsTrue",
        "code": "public void CheckValueIsTrue(String Labelname) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Labelname + \"']\";\n\t\t\tString checkBox = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ Labelname + \"']/../following-sibling::div/span//input\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 3)) {\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tif (!(isCheckBoxSelected(checkBox))) {\n\t\t\t\t\tmanualScreenshot(Labelname + \"Flag is false\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(Labelname + \"Flag is true\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Labelname + \"is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in checkvalueIsTrue\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `CheckValueIsTrue`, is used to verify if a specific checkbox is selected or not based on the given label name. It uses XPath expressions to locate the element and its corresponding checkbox. The method:\n\n1. Waits for the element to be displayed using the `waitForElement` method.\n2. Checks if the element is displayed within a certain time limit (3 seconds).\n3. If the element is displayed, it highlights the element using the `highLighterMethod`.\n4. Verifies if the checkbox associated with the element is selected or not.\n5. If the checkbox is not selected, it takes a manual screenshot with a message indicating that the flag is false. Otherwise, it takes a manual screenshot with a message indicating that the flag is true.\n6. If the element is not displayed within the time limit, it marks the test step as failed.\n\nThe method also has an exception handling mechanism to catch any exceptions that may occur during its execution and mark the test step as failed.",
        "input": [
            "String Labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getsublink",
        "code": "public void getsublink(String SubLink) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//span[text()='\" + SubLink + \"']\";\n\t\t\tif (isElementDisplayed(link, 30)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getsublink\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `getsublink`, takes a string parameter `SubLink` and attempts to locate an element on the webpage using XPath. The method uses a try-catch block to handle any exceptions that may occur during the execution.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating a fixed prefix (`\"#xpath=//span[text()='\")`, the provided `SubLink` string, and a closing parenthesis (`']')`.\n2. It checks if the element is displayed on the webpage within 30 seconds using the `isElementDisplayed` method.\n3. If the element is found and displayed, it calls the `clickOnSpecialElement` method to perform an action (likely a click) on that element.\n4. If the element is not found or displayed, it marks the test step as failed with the message \"Link is not present\".\n5. In case of any exception occurring during the execution, it catches the exception and marks the test step as failed with a more detailed error message (\"Failed in getsublink\" + `e.getMessage()`).",
        "input": [
            "String SubLink"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnLink",
        "code": "public void clickOnLink(String linkName) {\n\t\ttry {\n\t\t\t// waitForElement(linkName);\n\t\t\twaitTime(8);\n\t\t\tboolean loopFlag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//button[text()='\" + linkName + \"'] | //span[text()='\" + linkName + \"']\";\n\t\t\tif (linkName.contains(\"Generate DO\") || linkName.contains(\"DO EDIT\")) {\n\t\t\t\tdo {\n\t\t\t\t\tif (isElementDisplayed(link, 4)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else {\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(10);\n\t\t\t\t\t}\n\t\t\t\t} while (loopFlag);\n\t\t\t}\n\n\t\t\twaitTime(2);\n\t\t\twaitForElement(link, 40);\n\t\t\tscrollToWebElement(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(6);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLink`, attempts to find and click on a link with the specified name. It uses various helper methods to wait for the page to load, refresh the page if necessary, and scroll to the link before clicking it.\n\nHere are some key steps:\n\n1. Waits for the page to load.\n2. Checks if the link is present on the page using an XPath expression.\n3. If the link contains specific text (\"Generate DO\" or \"DO EDIT\"), it enters a loop that refreshes the page and waits up to 4 seconds for the link to appear.\n4. Waits 2 seconds before attempting to click on the link.\n5. Scrolls to the link if necessary.\n6. Attempts to click on the link using `clickOnSpecialElement(link)`.\n7. If the link is not present, it fails the test step.\n\nThe method catches any exceptions that occur during execution and reports a failure message with the exception message if an error occurs.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnLinkInAdmin",
        "code": "public void clickOnLinkInAdmin(String linkName) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString link = linkName + \"#xpath=//button[text()='\" + linkName + \"']\";\n\t\t\tscrollToWebElement(link);\n\t\t\tif (isElementDisplayed(link, 15)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\tmanualScreenshot(\"Click on:\" + linkName);\n\t\t\t\twaitTime(6);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnLinkInAdmin`, is used to click on a specific link within an admin panel. The method takes a string parameter `linkName` which represents the name of the link to be clicked.\n\nHere's what the method does:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs a new XPath expression by concatenating the `linkName` with an XPath query that targets an element with the same text as the `linkName`.\n3. It scrolls to the element matching the constructed XPath expression using the `scrollToWebElement(link)` method.\n4. It checks if the element is displayed within 15 seconds using the `isElementDisplayed(link, 15)` method.\n5. If the element is displayed, it clicks on the element using the `clickOnSpecialElement(link)` method and takes a manual screenshot with the name \"Click on:\" followed by the `linkName`. It then waits for 6 seconds using the `waitTime(6)` method.\n6. If the element is not displayed, it marks the test step as failed with an error message stating that the link is not present.\n\nThe method also has a catch block to handle any exceptions that may occur during its execution. If an exception occurs, it marks the test step as failed with an error message containing the exception message.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "VerifyFieldIsPresentOrNot",
        "code": "public void VerifyFieldIsPresentOrNot(String FieldName) {\n\t\ttry {\n\t\t\tString field = FieldName + \"#xpath=//span[text()='\" + FieldName + \"']\";\n\t\t\tString field1 = FieldName + \"#xpath=//div[text()='\" + FieldName + \"']\";\n\t\t\tString field2 = FieldName + \"#xpath=//label[text()='\" + FieldName + \"']\";\n\t\t\tString field3 = FieldName + \"#xpath=//button[text()='\" + FieldName + \"']\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field1, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t\tmanualScreenshot(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field2, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field2);\n\t\t\t\thighLighterMethod(field2);\n\t\t\t\tmanualScreenshot(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field3, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field3);\n\t\t\t\thighLighterMethod(field3);\n\t\t\t\tmanualScreenshot(FieldName + \" field is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(FieldName + \" field is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsPresentOrNot. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyFieldIsPresentOrNot`, is used to verify if a specific field with the given name (`FieldName`) is present on a web page or not. It uses XPath expressions to locate the field and performs the following actions:\n\n1. Checks if the field is displayed using `isElementDisplayed` method.\n2. If the field is found, it scrolls to the field, highlights it using `highLighterMethod`, takes a manual screenshot with the field name as the filename (`manualScreenshot`), and switches back to the default frame using `switchToDefaultFrame`.\n3. If the field is not found, it fails the test step using `testStepFailed`.\n\nThe method also catches any exceptions that may occur during execution and reports the failure using `testStepFailed`.",
        "input": [
            "String FieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "VerifyFieldIsPresentOrNot",
        "code": "public void VerifyFieldIsPresentOrNot(String FieldName,String FieldType) {\n\t\ttry {\n\t\t\tString field = FieldName + \"#xpath=//span[text()='\" + FieldName + \"']\";\n\t\t\tString field1 = FieldName + \"#xpath=//div[text()='\" + FieldName + \"']\";\n\t\t\tString field2 = FieldName + \"#xpath=//label[text()='\" + FieldName + \"']\";\n\t\t\tString field3 = FieldName + \"#xpath=//button[text()='\" + FieldName + \"']\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field1, 5)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t\tmanualScreenshot(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field2, 5)) {\n\t\t\t\tscrollToWebElement(field2);\n\t\t\t\thighLighterMethod(field2);\n\t\t\t\tmanualScreenshot(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field3, 5)) {\n\t\t\t\tscrollToWebElement(field3);\n\t\t\t\thighLighterMethod(field3);\n\t\t\t\tmanualScreenshot(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(FieldName + \" \"+FieldType+\" is not present\");\n\t\t\t}\n\t\t\tswitchToDefaultFrame();\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsPresentOrNot. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyFieldIsPresentOrNot`, is used to verify if a specific field with the given name and type (e.g., text box, button, label) is present or not on a web page.\n\nThe method attempts to locate the field using different XPath expressions (span, div, label, and button elements) and checks if it's displayed within a certain time limit (15 seconds for the first attempt and 5 seconds for subsequent attempts). If the field is found, it takes a manual screenshot of the field and highlights it. If not, it marks the test step as failed.\n\nThe method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [
            "String FieldName",
            "String FieldType"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "VerifyExpetedTextIsPresentOrNot",
        "code": "public void VerifyExpetedTextIsPresentOrNot(String FieldName) {\n\t\ttry {\n\t\t\tString field1 = FieldName + \"#xpath=//p[text()='\" + FieldName + \"']\";\n\t\t\tString field2 = FieldName + \"#xpath=//li[text()='\" + FieldName + \"']\";\n\t\t\tString field3 = FieldName + \"#xpath=//label[text()='\" + FieldName + \"']\";\n\n\t\t\tif (isElementDisplayed(field1, 10)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t\tmanualScreenshot(\"' \" +FieldName + \" ' text is present\");\n\t\t\t} else if (isElementDisplayed(field2, 10)) {\n\t\t\t\tscrollToWebElement(field2);\n\t\t\t\thighLighterMethod(field2);\n\t\t\t\tmanualScreenshot(\"' \" +FieldName + \" ' text is present\");\n\t\t\t} else if (isElementDisplayed(field3, 10)) {\n\t\t\t\tscrollToWebElement(field3);\n\t\t\t\thighLighterMethod(field3);\n\t\t\t\tmanualScreenshot(\"' \" +FieldName + \" ' text is present\");\n\t\t\t}else {\n\t\t\t\ttestStepFailed(FieldName + \" text is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsPresentOrNot. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyExpetedTextIsPresentOrNot`, verifies if the text specified by the `FieldName` parameter is present or not on a web page. It uses three different XPath expressions to locate the element and then performs actions such as scrolling to the element, highlighting it, and taking a manual screenshot if the text is found. If the text is not found after searching in all three locations, it marks the test step as failed. The method also catches any exceptions that may occur during execution and reports them as test failures.",
        "input": [
            "String FieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "VerifyFieldIsNotPresentOrNot",
        "code": "public void VerifyFieldIsNotPresentOrNot(String FieldName) {\n\t\ttry {\n\t\t\tString field = FieldName + \"#xpath=//span[text()='\" + FieldName + \"']\";\n\t\t\tString field1 = FieldName + \"#xpath=//div[text()='\" + FieldName + \"']\";\n\t\t\tString field2 = FieldName + \"#xpath=//label[text()='\" + FieldName + \"']\";\n\t\t\tString field3 = FieldName + \"#xpath=//button[text()='\" + FieldName + \"']\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttestStepFailed(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field1, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t\ttestStepFailed(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field2, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field2);\n\t\t\t\thighLighterMethod(field2);\n\t\t\t\ttestStepFailed(FieldName + \" field is present\");\n\t\t\t} else if (isElementDisplayed(field3, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field3);\n\t\t\t\thighLighterMethod(field3);\n\t\t\t\ttestStepFailed(FieldName + \" field is present\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(FieldName + \" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsNotPresentOrNot. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `VerifyFieldIsNotPresentOrNot`, verifies that a specified field (`FieldName`) is not present on the current web page. It uses XPath expressions to locate three different types of elements (span, div, label, and button) with the given `Fieldname` as their text content. If any of these elements are found to be displayed within the specified `elementLoadWaitTime`, it highlights the element, takes a manual screenshot, and marks the test step as failed. If none of these elements are found, it also takes a manual screenshot, indicating that the field is not present. The method catches any exceptions that may occur during its execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String FieldName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "VerifyFieldIsNotPresentOrNot",
        "code": "public void VerifyFieldIsNotPresentOrNot(String FieldName,String FieldType) {\n\t\ttry {\n\t\t\tString field = FieldName + \"#xpath=//span[text()='\" + FieldName + \"']\";\n\t\t\tString field1 = FieldName + \"#xpath=//div[text()='\" + FieldName + \"']\";\n\t\t\tString field2 = FieldName + \"#xpath=//label[text()='\" + FieldName + \"']\";\n\t\t\tString field3 = FieldName + \"#xpath=//button[text()='\" + FieldName + \"']\";\n\t\t\tif (isElementDisplayed(field, 10)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttestStepFailed(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field1, 5)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t\ttestStepFailed(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field2, 5)) {\n\t\t\t\tscrollToWebElement(field2);\n\t\t\t\thighLighterMethod(field2);\n\t\t\t\ttestStepFailed(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else if (isElementDisplayed(field3, 5)) {\n\t\t\t\tscrollToWebElement(field3);\n\t\t\t\thighLighterMethod(field3);\n\t\t\t\ttestStepFailed(FieldName + \" \"+FieldType+\" is present\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(FieldName + \" \"+FieldType+\" is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in VerifyFieldIsNotPresentOrNot. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `VerifyFieldIsNotPresentOrNot`, is used to verify that a specified field or element is either not present on the page or does not match the expected type (e.g., span, div, label, button). \n\nThe method takes two parameters: `Fieldname` and `FieldType`. It constructs four different XPath expressions for the field using the provided `Fieldname`, then checks if any of these elements are displayed using the `isElementDisplayed` method. If an element is found, it scrolls to that element, highlights it with a method named `highLighterMethod`, and marks the test step as failed with a message indicating the presence of the field.\n\nIf no elements are found after checking all four types (span, div, label, button), the method takes a manual screenshot with a message indicating that the field is not present. If an exception occurs during the execution of this method, it also marks the test step as failed and logs the exception message.",
        "input": [
            "String FieldName",
            "String FieldType"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "SelectDropDownType1",
        "code": "public void SelectDropDownType1(String labelname, String Value) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname + \"']/parent::label//following-sibling::div//select\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tSelect select = new Select(ele);\n\t\t\t\tselect.selectByVisibleText(Value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Hold Type is Not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in SelectHoldType\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `SelectDropDownType1`, selects a value from a drop-down menu based on the given label name and value. It uses Selenium WebDriver to interact with the web page.\n\nHere's a breakdown of what the method does:\n\n1. It constructs an XPath expression using the provided label name.\n2. It checks if the element is displayed within 8 seconds using the `isElementDisplayed` method.\n3. If the element is displayed, it finds the WebElement using the constructed XPath expression and creates a new `Select` object.\n4. It selects the value from the drop-down menu using the `selectByVisibleText` method of the `Select` object.\n5. If the element is not displayed, it takes a manual screenshot using the `manualScreenshot` method.\n6. The method catches any exceptions that may occur during execution and reports the failure using the `testStepFailed` method.\n\nThis method seems to be part of an automated test script for a web application, likely written in Java using a framework like TestNG or JUnit.",
        "input": [
            "String labelname",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "highLighterMethodManualScreenShot",
        "code": "public void highLighterMethodManualScreenShot(String element, String LabelName) {\n\t\ttry {\n\t\t\tWebElement e = findWebElement(element);\n\t\t\tJavascriptExecutor js = (JavascriptExecutor) driver;\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', 'background: yellow; border: 2px solid red;');\", e);\n\t\t\tThread.sleep(2000);\n\t\t\tmanualScreenshot(\"Highlighted Successfully \" + LabelName);\n\t\t\tjs.executeScript(\"arguments[0].setAttribute('style', arguments[1]);\", e, \"\");\n\t\t\tSystem.out.println(\"Highlighted Successfully \" + element);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`highLighterMethodManualScreenShot`: This method highlights a specified web element on the screen and takes a manual screenshot. The element is highlighted with a yellow background and a red border for 2 seconds, then a screenshot is taken and saved with the label name provided as part of the filename. If an exception occurs during execution, it prints the error message to the console.",
        "input": [
            "String element",
            "String LabelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyCheckboxQCLogin",
        "code": "public Boolean verifyCheckboxQCLogin(String checkboxLabel, boolean check) {\n\t\tBoolean flag = null;\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//div[@class='slds-form-element__control']//label/span[text()='\"\n\t\t\t\t\t+ checkboxLabel + \"']/../../input\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tscrollToWebElement(checkbox);\n\t\t\tif (check) {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(checkbox, \"checkbox is checked So Flag is True\");\n\t\t\t\t\tmanualScreenshot(checkboxLabel + \" checkbox is checked So Flag is True\");\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thighLighterMethodManualScreenShot(checkbox, \"checkbox is Un checked So Flag is False\");\n\t\t\t\tmanualScreenshot(checkboxLabel + \" checkbox is unchecked So Flag is False\");\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyCheckboxQCLogin`, verifies the status of a checkbox on a webpage. It takes two parameters: `checkboxLabel` (the label text of the checkbox) and `check` (a boolean indicating whether to check or uncheck the box).\n\nThe method attempts to locate the checkbox using an XPath expression, waits for it to be visible, scrolls into view if necessary, and then checks its current state. If the `check` parameter is true, it verifies that the checkbox is checked; otherwise, it verifies that it's unchecked.\n\nThe method also takes manual screenshots at each step to provide visual confirmation of the checkbox's status. If any errors occur during execution, it logs a failure message and returns a boolean flag indicating whether the checkbox was found in the expected state (true for checked or false for unchecked).",
        "input": [
            "String checkboxLabel",
            "boolean check"
        ],
        "output": "Boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyDocumetQC",
        "code": "public void verifyDocumetQC(String linkName) {\n\t\ttry {\n\t\t\twaitTime(1);\n\t\t\tString link = linkName + \"#xpath=(//div[@class='chevron noaction']/a)[1]\";\n\t\t\twaitTime(1);\n\t\t\twaitForElement(link, 30);\n\t\t\tscrollbycordinates(link);\n\t\t\tif (isElementPresent(link)) {\n\t\t\t\tString docName = getText(link);\n\t\t\t\tif (docName.equals(\"PAN/Form60\")) {\n\t\t\t\t\tmanualScreenshot(\"Successfully displayed the PAN/Form60 Document Place on First Position\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\n\t\t\t\t\t\t\t\"The PAN/Form60 Doc Document is not a First position , then First Doc is \" + docName);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyDocumetQC`, verifies that the PAN/Form60 document is displayed at the first position on a webpage. It takes a string parameter `linkName` which represents the link name.\n\nHere's what the method does:\n\n1. Waits for 1 second using the `waitTime(1)` method.\n2. Constructs a new link by concatenating the provided `linkName` with an XPath expression that targets the first `<a>` element within a specific HTML structure (`//div[@class='chevron noaction']/a)[1]`.\n3. Waits for 1 second again using `waitTime(1)`.\n4. Uses `waitForElement(link, 30)` to wait up to 30 seconds for the constructed link to be present.\n5. Scrolls to the linked element using `scrollbycordinates(link)`.\n6. Checks if the linked element is present using `isElementPresent(link)`. If it's not present, the method fails with an error message.\n7. If the linked element is present, retrieves its text content using `getText(link)` and checks if the document name matches \"PAN/Form60\". \n   - If it does match, takes a manual screenshot to capture the success.\n   - If it doesn't match, reports that the PAN/Form60 document is not at the first position (with the actual document name).\n8. Catches any exceptions thrown during execution and fails the test step with an error message.\n\nIn summary, this method verifies the display of the PAN/Form60 document at the first position on a webpage and takes manual screenshots or reports errors accordingly.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "GetTextUATAdminFieldsWithSlot",
        "code": "public String GetTextUATAdminFieldsWithSlot(String labelname) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString moveToElement = labelname\n\t\t\t\t\t+ \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ labelname + \"']/parent::div/following-sibling::div/span\";\n\t\t\tString labelElement = moveToElement + \"//slot/lightning-formatted-text\";\n\t\t\tString labelElement1 = moveToElement + \"//slot/lightning-formatted-number\";\n\t\t\tif (isElementDisplayed(labelElement, 30)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(labelname + \" : \" + text);\n\t\t\t\tmanualScreenshot(labelname + \" has [ \" + text + \" ] value\");\n\t\t\t} else if (isElementDisplayed(labelElement1, 10)) {\n\t\t\t\tscrollToWebElement(moveToElement);\n\t\t\t\ttext = getText(labelElement1);\n\t\t\t\thighLighterMethod(moveToElement);\n\t\t\t\ttestStepInfo(labelname + \" : \" + text);\n\t\t\t\tmanualScreenshot(labelname + \" has [ \" + text + \" ] value\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelname + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verify Auto Populated Value In Master. Exeception : \" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `GetTextUATAdminFieldsWithSlot`, is used to retrieve the text value of a specific field with a given label name on a UI page. The method uses XPath expressions to locate the element and its child elements. It attempts to scroll to the element, get the text value, highlight the element (if present), and take a manual screenshot if the test step passes. If the element is not displayed within a certain time limit, it will try an alternative XPath expression. If neither expression works, it marks the test step as failed. The method returns the retrieved text value.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "GetTextUATAdminFieldsWithSlotWithText",
        "code": "public String GetTextUATAdminFieldsWithSlotWithText(String labelname) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div//span/slot//slot//lightning-formatted-text\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\twaitTime(1);\n\t\t\t\tmanualScreenshot(\"The \" + labelname + \" Field Value is \" + text);\n\t\t\t\twaitTime(1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \"field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `GetTextUATAdminFieldsWithSlotWithText`, retrieves the text value from a specific web element on a webpage. The method takes a string parameter `labelname` which is used to identify the web element.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It tries to find an HTML element with the specified XPath expression, which includes the `labelname`.\n2. If the element is displayed within 8 seconds, it scrolls to that element, highlights it using a highlighting method (not shown in this code snippet), and retrieves its text value.\n3. It waits for 1 second before taking a manual screenshot of the highlighted element with a message indicating the label name and its text value.\n4. If the element is not displayed within 8 seconds, it marks the test step as failed with an error message indicating that no value is populated in the specified field.\n5. If any exception occurs during the execution of this method (e.g., if the element cannot be found or the highlighting method fails), it catches the exception and marks the test step as failed with an error message including the exception's message.\n\nFinally, the method returns the retrieved text value as a string.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnRelatedLink",
        "code": "public void clickOnRelatedLink(String linkName) {\n\t\ttry {\n\t\t\twaitTime(6);\n\t\t\trefreshPage();\n\t\t\twaitTime(10);\n\t\t\tString link = linkName + \"#xpath=//a[text()='\" + linkName + \"']\";\n\t\t\tif (isElementDisplayed(link, 8)) {\n\t\t\t\twaitTime(5);\n\t\t\t\tmanualScreenshot(\"Click on\" + linkName);\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\twaitTime(7);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(linkName + \" link is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRelatedLink`, attempts to click on a specific link with the given name. It performs the following actions:\n\n1. Waits for 6 seconds using the `waitTime` method.\n2. Refreshes the current page using the `refreshPage` method.\n3. Waits again for 10 seconds.\n4. Constructs an XPath expression to locate the link element based on its text value matching the provided `linkName`.\n5. Checks if the link is displayed within 8 seconds using the `isElementDisplayed` method. If it is, proceed with the next steps.\n6. Waits for 5 seconds and takes a manual screenshot using the `manualScreenshot` method with a descriptive name including the link name.\n7. Clicks on the special element (likely an HTML anchor tag) using the `clickOnSpecialElement` method.\n8. Waits again for 7 seconds.\n\nIf any of these steps fail, it catches the exception and reports the failure in the test report using the `testStepFailed` method with a descriptive message.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnGenerateOTPButton",
        "code": "public void clickOnGenerateOTPButton() {\n\t\ttry {\n\t\t\tString button = \"Generate OTP button#xpath=(//button[normalize-space()='Generate OTP'])[1]\";\n\t\t\twaitTime(3);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Generate OTP button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnGenerateOTPButton`, attempts to click on a specific button with the text \"Generate OTP\" after waiting for 3 seconds. It uses an XPath expression to locate the button and then checks if it is displayed using the `isElementDisplayed` method. If the button is present, it clicks on it and waits for the page to load completely. If the button is not present or any exception occurs during this process, it fails the test step with a corresponding message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "CompareEMILine",
        "code": "public int CompareEMILine() {\n\t\tint CardValue = 0;\n\t\tStringBuilder numbers = new StringBuilder();\n\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div//ul[@class='slds-list-vertical slds-has-dividers_right']/li[1]\";\n\t\t\twaitForElement(Element, 9);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tString[] Line = getText(Element).split(\"Health Line\");\n\t\t\t\tchar ch[] = Line[0].toCharArray();\n\t\t\t\tfor (int i = 0; i < ch.length; i++) {\n\t\t\t\t\tif (ch[i] == '1' || ch[i] == '2' || ch[i] == '3' || ch[i] == '4' || ch[i] == '5' || ch[i] == '6'\n\t\t\t\t\t\t\t|| ch[i] == '7' || ch[i] == '8' || ch[i] == '9' || ch[i] == '0') {\n\t\t\t\t\t\tnumbers = numbers.append(ch[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tString value = String.valueOf(numbers);\n\t\t\t\tCardValue = Integer.parseInt(value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in CompareEMILine\" + e.getMessage());\n\n\t\t}\n\t\treturn CardValue;\n\t}",
        "description": "This Java method, `CompareEMILine`, is used to extract a numerical value from an HTML element and convert it into an integer. The method uses WebDriver's `waitForElement` and `getText` methods to retrieve the text content of the specified XPath element. It then processes the text by iterating through each character and appending any digits (0-9) to a `StringBuilder`. Finally, it converts the resulting string into an integer and returns it. If any exceptions occur during this process, the method catches them and logs a failure message using the `testStepFailed` method.",
        "input": [],
        "output": "int"
    },
    {
        "class_name": "Search",
        "function_name": "SelectCheckboxIsEnabled",
        "code": "public void SelectCheckboxIsEnabled(String Value) {\n\t\ttry {\n\t\t\tString cardValue = \"#xpath=//input[@name='\" + Value\n\t\t\t\t\t+ \"']//parent::span//label/span[@class='slds-checkbox_faux']\";\n\t\t\twaitForElement(cardValue, 10);\n\t\t\tif (isElementDisplayed(cardValue, 7)) {\n\t\t\t\tWebElement ele = findWebElement(cardValue);\n\t\t\t\tif (ele.isEnabled()) {\n\t\t\t\t\tscrollToWebElement(cardValue);\n\t\t\t\t\tclickOn(cardValue);\n\t\t\t\t\tmanualScreenshot(\"Select:\" + Value);\n\t\t\t\t} else {\n\t\t\t\t\tscrollToWebElement(cardValue);\n\t\t\t\t\tmanualScreenshot(\"Unable to select\" + Value + \"Due to remaining card count is 0\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(Value + \"is not displayed\");\n\n\t\t\t}\n\t\t} catch (\n\n\t\tException e) {\n\t\t\ttestStepFailed(\"Failed in SelectCheckbox\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SelectCheckboxIsEnabled`, is used to select a checkbox element on a web page if it's enabled. The method takes a string parameter `Value` which represents the name of the checkbox.\n\nHere's a step-by-step breakdown:\n\n1. It constructs an XPath expression based on the provided value and uses it to locate the checkbox.\n2. It waits for the element to be present on the page (up to 10 seconds).\n3. If the element is displayed, it checks if the checkbox is enabled.\n4. If the checkbox is enabled, it scrolls to the element, clicks on it, and takes a manual screenshot with a message indicating that the checkbox was selected.\n5. If the checkbox is not enabled (i.e., its count is 0), it takes a manual screenshot with a message indicating that the selection failed due to remaining card count being 0.\n6. If the element is not displayed, it fails the test step with a message indicating that the element is not visible.\n7. If any exception occurs during the execution of the method, it catches the exception and fails the test step with a message containing the exception's message.\n\nIn summary, this method is used to select a checkbox on a web page if it's enabled, and it provides feedback in the form of manual screenshots if the selection succeeds or fails.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInCardsField",
        "code": "public void enterValueInCardsField(String fieldName, String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\n\t\t\t\tString field = labelName + \"#xpath=//span[text()='\" + fieldName\n\t\t\t\t\t\t+ \"']//ancestor::article/div//label[text()='\" + labelName + \"']/following-sibling::div//input\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\t// manualScreenshot(\"\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please Provide the Data for\" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to enter a value into a field on a web page. The method takes three parameters: `fieldName`, `labelName`, and `value`. \n\n- It first checks if the provided value is not empty.\n- If it's not empty, it constructs an XPath expression to locate the element based on the `fieldName` and `labelName`.\n- It then waits for the element to be displayed, scrolls to the element if necessary, types in the provided value, highlights the entered text, and takes a screenshot (commented out).\n- If the element is not present, it marks the test step as failed.\n- If the value is empty, it logs an information message indicating that the user should provide data for the specified field.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a descriptive error message.",
        "input": [
            "String fieldName",
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectvaluefromdropdownInCards",
        "code": "public void selectvaluefromdropdownInCards(String fieldName, String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\twaitTime(3);\n\t\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + fieldName\n\t\t\t\t\t\t+ \"']//ancestor::article/div//label[text()='\" + dropdownName\n\t\t\t\t\t\t+ \"']/following-sibling::div//button\";\n\t\t\t\twaitForElement(dropdown, 10);\n\t\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\tString dropdownList = value + \"#xpath=//span[text()='\" + fieldName\n\t\t\t\t\t\t\t\t+ \"']//ancestor::article//following-sibling::div//lightning-base-combobox-item[@data-value='\"\n\t\t\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\t\t\twaitForElement(dropdownList, 5);\n\t\t\t\t\t\tif (isElementDisplayed(dropdownList, 5)) {\n\t\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\t\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!flag) {\n\t\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please Provide the Data for\" + dropdownName);\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to select a value from a dropdown menu in Salesforce Lightning components. The method takes three parameters: `fieldName`, `dropdownName`, and `value`. It attempts to find the dropdown menu with the given `fieldName` and then iteratively selects the option with the specified `value`.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. If the provided value is not empty, it waits for 3 seconds.\n2. It constructs an XPath expression to locate the dropdown menu based on the `fieldName` and `dropdownName`.\n3. It waits for 10 seconds for the dropdown menu to load.\n4. If the dropdown menu is displayed, it iterates up to 2 times:\n\t* Clicks on the dropdown menu.\n\t* Waits for the page to load.\n\t* Locates the option with the specified `value` using an XPath expression.\n\t* If the option is displayed, clicks on it and takes a manual screenshot as proof of successful selection.\n5. If the value is not found in the dropdown menu after 2 iterations, it marks the test step as failed.\n6. If the dropdown menu is not present, it also marks the test step as failed.\n7. If no value is provided, it logs a test step info message indicating that the data for the dropdown menu is missing.\n\nThe method catches any exceptions that occur during its execution and marks the test step as failed with an error message.",
        "input": [
            "String fieldName",
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "SelectHoldType",
        "code": "public void SelectHoldType(String Value) {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='Hold Type']/parent::label//following-sibling::div//select\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tWebElement ele = findWebElement(Element);\n\t\t\t\tSelect select = new Select(ele);\n\t\t\t\tselect.selectByVisibleText(Value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Hold Type is Not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in SelectHoldType\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SelectHoldType`, selects a hold type from a dropdown list on a webpage. It takes a `String` parameter `Value` representing the desired hold type to select.\n\nHere's a step-by-step breakdown:\n\n1. The method attempts to locate an HTML element using XPath: `#xpath=//span[text()='Hold Type']/parent::label//following-sibling::div//select`. This is likely a dropdown list with options labeled \"Hold Type\".\n2. If the element is displayed (i.e., visible on the webpage), it proceeds to select the desired hold type.\n3. It uses the `findWebElement` method to get the web element and creates a `Select` object to interact with the dropdown list.\n4. The `selectByVisibleText` method is used to select the option with text matching the provided `Value`.\n5. If the element is not displayed, it takes a manual screenshot as a failure report (likely for debugging purposes).\n6. In case of any exceptions during execution, the method catches and logs the error using the `testStepFailed` method.\n\nIn summary, this method automates selecting a hold type from a dropdown list on a webpage.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getErrorTextInDOStage",
        "code": "public boolean getErrorTextInDOStage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString Text = \"#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(Text, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tList<WebElement> errorsList = findWebElements(Text);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above error,cannot proceed further\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while Changing Stage\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getErrorTextInDOStage\" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `getErrorTextInDOStage`, checks if there are any error messages displayed on the webpage and returns a boolean indicating whether an error was found. It uses XPath to locate an HTML element with a specific class (`toast`) and then extracts the text from each error message. If errors are found, it takes manual screenshots of each error message and marks the test step as failed. If no errors are found, it takes a screenshot indicating that there were no errors while changing the stage. The method returns a boolean value indicating whether an error was found.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorGenerateDOWithoutFail",
        "code": "public boolean verifyAndPrintErrorGenerateDOWithoutFail(String expectedValidation) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString error = \"Error Header#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\tif (isElementDisplayed(error, 8)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//div[contains(@class,'toast')]//h2\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString error_Msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (error_Msg.contains(expectedValidation)) {\n\t\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + error_Msg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not get fired. Instead of we got : \" + error_Msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Expected validation message is not fired.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorGenerateDOWithoutFail`, verifies that a specific error message is displayed on the page and takes a screenshot of each error message if it contains a specified validation string. If the expected validation message is not fired or if any errors occur during execution, the test step fails.\n\nThe method:\n\n1. Waits for 5 seconds.\n2. Checks if an element with the specified XPath is displayed (error header).\n3. If the element is displayed, iterates over a list of error messages and checks each message's text content.\n4. If a message contains the expected validation string, takes a manual screenshot of that error message.\n5. If any errors occur during execution or if the expected validation message is not fired, the test step fails.\n\nThe method returns a boolean flag indicating whether the verification was successful or not.",
        "input": [
            "String expectedValidation"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorValidationWithoutFail",
        "code": "public boolean verifyAndPrintErrorValidationWithoutFail(String expectedValidation) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\twaitTime(5);\n\t\t\tString error = \"Error Header#xpath=//div[@class='slds-text-heading_large slds-text-align_center']\";\n\t\t\tif (isElementDisplayed(error, 8)) {\n\t\t\t\tflag = true;\n\t\t\t\tscrollToWebElement(error);\n\t\t\t\tList<WebElement> errorsList = findWebElements(error);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString error_Msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (error_Msg.contains(expectedValidation)) {\n\t\t\t\t\t\thighLighterMethod(error);\n\t\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + error_Msg);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(\"Expected validation is not get fired. Instead of we got : \" + error_Msg);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while giving invalid data.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorValidationMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorValidationWithoutFail`, is used to validate and print error messages without failing the test. It takes a string parameter `expectedValidation` which is expected to be present in the error message.\n\nThe method first waits for 5 seconds using the `waitTime(5)` method, then it checks if an element with the specified XPath (`error`) is displayed within 8 seconds. If the element is displayed, it scrolls to that element and retrieves a list of web elements containing the error messages.\n\nIt then loops through each error message, trims any whitespace from the message, and checks if the expected validation string is contained in the message. If it is, it highlights the error using `highLighterMethod(error)` and takes a manual screenshot with the error message. If not, it fails the test step with an error message.\n\nIf the element is not displayed within 8 seconds, or any exception occurs during the process, it also fails the test step with an error message. The method returns a boolean flag indicating whether the validation was successful or not.",
        "input": [
            "String expectedValidation"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyIRIsCreatedAfterStageChange",
        "code": "public String verifyIRIsCreatedAfterStageChange(String beforeIRICount) {\n\t\tString getDateTime = \"\", getIR = \"\", StatusLabel = \"\";\n\t\tint rowsSize = 0;\n\t\tint rowCount = 0, iterate = 0;\n\t\ttry {\n\t\t\tString RowCount = \"#xpath=//tbody/tr/td[contains(@class,'cellContainer')]/span/span/label\";\n\t\t\tString CreatedDateTime = \"#xpath=//tbody/tr/td[contains(@class,'cellContainer')]//span[contains(@class,'uiOutputDateTime')]\";\n\t\t\tString sortCreatedDateTimeLabel = \"#xpath=//span[text()='Sort']//..//span[text()='Created Time']\";\n\t\t\tString sortOption = \"#xpath=//span[text()='Sorted Ascending']\";\n\t\t\tString TableHeader = \"#xpath=//thead/tr/th/div/a/span[contains(@class,'truncate')]\";\n\t\t\tString currentDateTime = getCurrentDateAndTime1();\n\t\t\twaitForElement(RowCount, 5);\n\t\t\tif (isElementDisplayed(RowCount, 5)) {\n\t\t\t\tList<WebElement> rows = findWebElements(RowCount);\n\t\t\t\tif (!(rows.size() == 0)) {\n\t\t\t\t\trowsSize = rows.size();\n\t\t\t\t\tmanualScreenshot(rowsSize + \" IR is Displayed After Stage has Changed\");\n\n\t\t\t\t\twaitForElement(sortOption, 5);\n\t\t\t\t\tif (isElementDisplayed(sortOption, 5)) {\n\t\t\t\t\t\twaitForElement(sortCreatedDateTimeLabel, 6);\n\t\t\t\t\t\tif (isElementDisplayed(sortCreatedDateTimeLabel, 5)) {\n\t\t\t\t\t\t\tWebElement ele = findWebElement(sortCreatedDateTimeLabel);\n\t\t\t\t\t\t\tActions action = new Actions(driver);\n\t\t\t\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\t\twaitTime(5);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twaitForElement(CreatedDateTime, 5);\n\t\t\t\t\tif (isElementDisplayed(CreatedDateTime, 5)) {\n\t\t\t\t\t\tList<WebElement> datetime = findWebElements(CreatedDateTime);\n\t\t\t\t\t\tfor (int i = 0; i <= datetime.size(); i++) {\n\t\t\t\t\t\t\tgetDateTime = datetime.get(i).getText();\n\t\t\t\t\t\t\tif (getDateTime.contains(currentDateTime)) {\n\t\t\t\t\t\t\t\titerate = i + 1;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(CreatedDateTime + \"is not created\");\n\t\t\t\t\t}\n\t\t\t\t\tString IRValue = \"#xpath=(//tbody/tr/th//a)[\" + iterate + \"]\";\n\t\t\t\t\twaitForElement(IRValue, 5);\n\t\t\t\t\tif (isElementDisplayed(IRValue, 6)) {\n\t\t\t\t\t\tgetIR = getText(IRValue);\n\t\t\t\t\t\tmanualScreenshot(getIR + \" is Created\");\n\n\t\t\t\t\t}\n\t\t\t\t\twaitForElement(TableHeader, 5);\n\t\t\t\t\tif (isElementDisplayed(TableHeader, 5)) {\n\t\t\t\t\t\tList<WebElement> Header = findWebElements(TableHeader);\n\t\t\t\t\t\tfor (int j = 0; j <= Header.size(); j++) {\n\t\t\t\t\t\t\tStatusLabel = Header.get(j).getText();\n\t\t\t\t\t\t\tif (StatusLabel.contains(\"Status\")) {\n\t\t\t\t\t\t\t\trowCount = j + 2;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tString StatusValue = \"#xpath=(//tbody/tr/td[contains(@class,'cellContainer')][\" + rowCount\n\t\t\t\t\t\t\t\t+ \"]/span/span)[\" + iterate + \"]\";\n\t\t\t\t\t\twaitForElement(StatusValue, 5);\n\t\t\t\t\t\tif (isElementDisplayed(StatusValue, 5)) {\n\t\t\t\t\t\t\tString getStatusValue = getText(StatusValue);\n\t\t\t\t\t\t\thighLighterMethod(StatusValue);\n\t\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\tgetStatusValue + \" Value is displayed in Status Column for \" + getIR + \" Record\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No Integration Responses is created\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyIRIsCreated\" + e.getMessage());\n\t\t}\n\t\treturn getIR;\n\t}\n\n\t// public void searchOpportunity(String searchvalue) {\n\t// try {\n\t// String link = \"#xpath=//input[@placeholder='Search']\";\n\t// waitForElement(link, 30);\n\t// if (isElementDisplayed(link, 3)) {\n\t// WebElement element = findWebElement(link);\n\t// typeIn(link, searchvalue);\n\t// waitTime(2);\n\t// element.sendKeys(Keys.ENTER);\n\t// waitTime(6);\n\t// String value = \"#xpath=//a[text()='\" + searchvalue + \"']\";\n\t// waitForElement(value, 40);\n\t// if (isElementDisplayed(value, 3)) {\n\t// clickOn(value);\n\t// } else {\n\t// testStepInfo(\"Link is not present\");\n\t// }\n\t//\n\t// } else {\n\t// testStepFailed(link + \" is not displayed\");\n\t// }\n\t// }\n\t//\n\t// catch (Exception e) {\n\t// testStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t// }\n\t// }",
        "description": "This Java method, named `verifyIRIsCreatedAfterStageChange`, is used to verify that Integration Responses (IRs) are created after a stage change. \n\nThe method takes one parameter, `beforeIRICount`, which is expected to be the count of IRs before the stage change.\n\nHere's what it does:\n\n1. It waits for certain elements to be displayed and then checks if they are displayed.\n2. If the elements are displayed, it gets the size of the rows in a table and takes a manual screenshot.\n3. It sorts the created date time column and then iterates through the datetime values to find the one that matches the current date and time.\n4. Once the matching datetime value is found, it gets the corresponding IR value and takes another manual screenshot.\n5. It also checks if the status of the IR is displayed in the status column for the respective record.\n\nIf any step fails (e.g., an element is not displayed), it reports a test step failure with the relevant information.\n\nFinally, the method returns the IR value that was created after the stage change.",
        "input": [
            "String beforeIRICount"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "searchOpportunity",
        "code": "public void searchOpportunity(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"Search Field in FOS#xpath=//input[@placeholder='Search'] | //input[@title='Search...']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\twaitTime(5);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\tString value = searchvalue + \" record#xpath=//a[text()='\" + searchvalue + \"']\";\n\t\t\t\trefreshPage();\n\t\t\t\twaitTime(5);\n\t\t\t\twaitForElement(value, 13);\n\t\t\t\tif (isElementDisplayed(value, 15)) {\n\t\t\t\t\tclickOn(value);\n\t\t\t\t\twaitForPageToLoaded();\n\n\t\t\t\t\twaitTillSpinnerDisappear();\n\t\t\t\t\tString field = \"Error#xpath=//li//span[text()='Deal Id']\";\n\t\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\t\trefreshPage();\n\t\t\t\t\t\twaitTime(7);\n\t\t\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\t\t\twaitTime(7);\n\t\t\t\t\t\tclickOn(value);\n\t\t\t\t\t\twaitForPageToLoaded();\n\t\t\t\t\t\twaitTime(15);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(searchvalue + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchOpportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchOpportunity`, performs a search operation on a web page using the provided `searchvalue`. Here's a breakdown of what it does:\n\n1. It attempts to locate an input field with a specific XPath expression (using `waitForElement` and `findWebElement`) and types in the given `searchvalue`.\n2. After typing, it simulates pressing the Enter key on the keyboard.\n3. The method then refreshes the page using `refreshPage`, waits for 5 seconds, and checks if an element with a specific XPath expression (containing the `searchvalue`) is displayed using `isElementDisplayed` and `waitForElement`.\n4. If the element is displayed, it clicks on it using `clickOn` and then waits for the page to load completely.\n5. It also checks if a spinner is still present on the page using `waitTillSpinnerDisappear`. If the spinner is still present, it will wait until it disappears.\n6. The method then checks if an error message with a specific XPath expression (containing the `searchvalue`) is displayed using `isElementDisplayed` and `waitForElement`. If this element is displayed, it refreshes the page again, waits for 7 seconds, types in the original search value, and clicks on the same element again.\n7. Finally, if any of these operations fail or an exception occurs during execution, the method reports a test step failure using `testStepFailed`.\n\nIn summary, this method performs a search operation on a web page, handles various page loads and spinner animations, and checks for specific error messages if the search fails.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "searchOpportunityInLSF",
        "code": "public void searchOpportunityInLSF(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"Search Field in FOS#xpath=//input[@title]|//input[@placeholder='Search...']\";//// input[@placeholder='Search']\n\t\t\twaitForElement(link, 10);\n\t\t\tString close_popup = \"close popup#xpath=//button[@title='Close']\";\n\t\t\tfor (int iteration = 0; iteration < 2; iteration++) {\n\t\t\t\twaitForElement(close_popup, 5);\n\t\t\t\tif (isElementDisplayed(close_popup, 5)) {\n\t\t\t\t\tclickOnSpecialElement(close_popup);\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t}\n\t\t\t\tif (isElementDisplayed(link, elementLoadWaitTime)) {\n\t\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\t// element.sendKeys(Keys.ENTER);\n\t\t\t\t\twaitTime(7);\n\t\t\t\t\tString value = searchvalue + \" record#xpath=//span[@title='\" + searchvalue + \"']|//div[text()='\" + searchvalue + \"']\";\n\t\t\t\t\twaitForElement(value, 13);\n\t\t\t\t\tif (isElementDisplayed(value, 15)) {\n\t\t\t\t\t\tclickOn(value);\n\t\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\t\twaitTime(25);\n\t\t\t\t\t\t// Added workaround for search opp issue.\n\t\t\t\t\t\tif (!(driver.getCurrentUrl().contains(\"customer\"))\n\t\t\t\t\t\t\t\t|| driver.getCurrentUrl().contains(\"opportunity\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tmanualScreenshot(\"\");\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(searchvalue + \" link is not present\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(link + \" is not displayed\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in searchOpportunity. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchOpportunityInLSF`, searches for an opportunity in a system using a given search value. The method uses various WebDriver methods to interact with the system, such as:\n\n1. Navigating to a specific link on the page.\n2. Waiting for elements to be displayed or clickable.\n3. Clicking on elements.\n4. Typing text into input fields.\n5. Refreshing the page and waiting for it to load.\n\nThe method uses a loop to repeat the search process up to two times, in case the initial search does not yield any results. If the search value is found, the method will click on the corresponding link and wait for the page to load. It also includes some error handling and logging mechanisms to report any failures during the execution of the method.\n\nIn summary, this method performs a search operation in a system using a given search value and handles any potential errors that may occur during the process.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOncustomerLinkInAdmin",
        "code": "public void clickOncustomerLinkInAdmin() {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//p[text()='Customer']//..//a//span\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in clickOnSaveInZBB\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOncustomerLinkInAdmin`, is used to simulate a click on the \"Customer\" link in an administrative interface. The method waits for 5 seconds using the `waitTime` method, then it searches for an element with the given XPath (`Element`) and waits up to 10 seconds for it to be displayed using the `waitForElement` method.\n\nIf the element is displayed, the method scrolls to it using the `scrollToWebElement` method, clicks on it using the `clickOnSpecialElement` method, and then waits for the page to load using the `waitForPageToLoad` method. Finally, it waits for 3 seconds before completing its execution.\n\nThe method also includes error handling by catching any exceptions that may occur during its execution and reporting a test step failure with an appropriate message if an exception is caught.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOncustomerLink",
        "code": "public void clickOncustomerLink() {\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString Element = \"#xpath=//span[@title='Customer']//following-sibling::div//a\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 6)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(3);\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed in clickOnSaveInZBB\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOncustomerLink()`, is designed to simulate a click on an element with the specified XPath. Here's what it does:\n\n1. Waits for 5 seconds using the `waitTime()` method.\n2. Defines the XPath of the target element: `#xpath=//span[@title='Customer']//following-sibling::div//a`. This is likely a link to a customer-related page.\n3. Waits up to 10 seconds for the element to be displayed using the `waitForElement()` method with the defined XPath.\n4. Checks if the element is displayed within 6 seconds using the `isElementDisplayed()` method. If it is, proceed with the next steps.\n5. Scrolls to the element using the `scrollToWebElement()` method.\n6. Simulates a click on the element using the `clickOnSpecialElement()` method.\n7. Waits for the page to load completely using the `waitForPageToLoad()` method.\n8. Waits for 3 seconds before potentially moving on to the next steps.\n\nIf any exceptions occur during this process, it catches and reports them as a test step failure using the `testStepFailed()` method.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonInKYC",
        "code": "public void clickOnButtonInKYC(String buttonName) {\n\t\ttry {\n\t\t\tString Savebutton = \"Save #xpath=//button[text()='\" + buttonName + \"' and  @type ='button']\";\n\t\t\twaitForElement(Savebutton, 10);\n\t\t\tif (isElementDisplayed(Savebutton, 5)) {\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(Savebutton);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is disabled to click\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonInKYC`, is used to simulate a click on a specific button with the given name (`buttonName`) in a KYC (Know Your Customer) application. The method uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to wait for the element to be displayed and then check if it is enabled for clicking.\n\nHere are the key steps:\n\n1. It constructs an XPath expression to locate the button with the given name.\n2. It waits for the button to be displayed using `waitForElement`.\n3. If the button is displayed, it takes a manual screenshot (optional) and simulates a click on the button using `clickOnSpecialElement`.\n4. If the button is not displayed or disabled, it marks the test step as failed.\n\nThe method also catches any exceptions that may occur during execution and logs an error message if the button cannot be clicked successfully.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyRemainingCardCount",
        "code": "public int verifyRemainingCardCount(String CardType) {\n\t\tint CardValue = 0;\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString Element = \"#xpath=//div[text()='\" + CardType + \"']/following-sibling::div\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\tString Value = getText(Element);\n\t\t\t\tValue = Value.split(\":\")[1];\n\t\t\t\tCardValue = Integer.parseInt(Value);\n\t\t\t\tmanualScreenshot(Value + \" \" + \"Remaining\" + CardType + \"Count\" + \" \" + \"is displayed\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(CardType + \"Remaining Card Count is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"failed in verifyRemainingCardCount\" + e.getMessage());\n\t\t}\n\t\treturn CardValue;\n\t}",
        "description": "This Java method, `verifyRemainingCardCount`, verifies the remaining count of a specific type of card. It takes a `String` parameter `CardType` which represents the type of card to be verified.\n\nThe method:\n\n1. Waits for 4 seconds using the `waitTime` method.\n2. Uses an XPath expression to locate an element related to the specified `CardType`.\n3. Waits up to 10 seconds for the element to be displayed using the `waitForElement` method.\n4. Checks if the element is displayed within 8 seconds using the `isElementDisplayed` method.\n5. If the element is displayed, it scrolls to the element and extracts the remaining card count from its text content.\n6. It then converts the extracted value to an integer and returns it.\n7. If the element is not displayed or there's an exception during the process, it takes a manual screenshot with a descriptive message.\n\nThe method returns the verified remaining card count as an `int` value.",
        "input": [
            "String CardType"
        ],
        "output": "int"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInPopup1",
        "code": "public boolean verifyAndPrintErrorMessageInPopup1() {\n\t\tboolean flag = false;\n\t\tSystem.out.println();\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tscrollToElementTillPresent(error);\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\tmanualScreenshot(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopup1`, verifies if an error message is displayed on the page and prints it to a popup. It uses various Selenium WebDriver methods such as `isElementDisplayed`, `scrollToElementTillPresent`, `findWebElements`, and `manualScreenshot` to interact with the web page.\n\nHere's a brief summary of what the method does:\n\n1. Checks if an error message is displayed on the page using the `isElementDisplayed` method.\n2. If the error message is displayed, it scrolls to the element until it is present using the `scrollToElementTillPresent` method.\n3. It then finds all web elements that match a specific XPath expression (the \"Error list\") and stores them in a list called `errorsList`.\n4. The method iterates through the list of error messages, takes a manual screenshot for each error message, and prints it to a popup.\n5. If there are any errors, it also takes an additional manual screenshot with a specific text (\"Due to above errors. we cannot move further.\") and prints it to a popup.\n6. If no error message is displayed, the method fails the test step with a message \"There is no error while entering the fields\".\n7. The method catches any exceptions that may occur during its execution and fails the test step with an error message.\n\nThe method returns a boolean value indicating whether the verification was successful or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "selectDealerInDealerLookupField",
        "code": "public String selectDealerInDealerLookupField(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\tString dealerFinnoneCode = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']/..//input\";\n\t\t\t\tdealerFinnoneCode = dealerName.split(\"-\")[0].trim();\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerFinnoneCode + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\n\t\t\t\t\ttypeIn(dealer, dealerFinnoneCode);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Dealer in Search page. Exception :\" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerInDealerLookupField`, is used to select a dealer from a dropdown list on a web page. It takes a string parameter `dealerName` which represents the name of the dealer to be selected.\n\nThe method first checks if the provided `dealerName` is not empty. If it's not empty, it attempts to select the dealer by:\n\n1. Replacing any \"#\" characters in the `dealerName` with spaces.\n2. Waiting for a specified time (2 seconds).\n3. Locating an element on the page using XPath that contains the text \"Select Dealer\".\n4. Splitting the `dealerName` into two parts using \"-\" as the separator, and trimming the first part to get the FinnOne code.\n5. Constructing an XPath expression to locate the dealer option in the dropdown list based on the FinnOne code.\n6. Waiting for the dealer dropdown to be displayed (7 seconds) and scrolling to it if necessary.\n7. Typing the FinnOne code into the dropdown input field.\n8. Clicking on the selected dealer option if it's displayed within 10 seconds.\n\nIf the dealer dropdown is not present or the selected dealer option is not found, an error message is logged. If no `dealerName` is provided, a warning message is logged indicating that a value is required for this field.\n\nThe method returns a string variable `selectedOption`, which remains null throughout the execution of the method.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "chooseDealerValueFromListbox",
        "code": "public void chooseDealerValueFromListbox(String listBoxName, String searchValue) {\n\t\ttry {\n\t\t\tif (!searchValue.isEmpty()) {\n\t\t\t\tString inputField = listBoxName + \" #xpath=//label[contains(text(),'\" + listBoxName + \"')]//..//input\";\n\t\t\t\twaitForElement(inputField, 10);\n\t\t\t\twaitForElementUntilVisible(inputField);\n\t\t\t\tif (isElementDisplayed(inputField, 6)) {\n\t\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t\tWebElement input = findWebElement(inputField);\n\t\t\t\t\tchar ch[] = searchValue.toCharArray();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + searchValue + \"' in  '\" + listBoxName + \" ' input field\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString listBox = listBoxName + \" listbox#xpath=//span[text()='\" + searchValue + \"']\";\n\t\t\t\t\twaitTime(10);\n\t\t\t\t\tif (isElementDisplayed(listBox, 6)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(listBoxName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromListbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseDealerValueFromListbox`, is used to select a value from a list box on a web page. The method takes two parameters: `listBoxName` and `searchValue`. \n\nThe method first checks if the `searchValue` is not empty. If it's not empty, it attempts to find the input field corresponding to the list box with the given name, waits for the element to be visible and displayed, and then types the search value into the input field.\n\nAfter typing the search value, the method waits for the page to load and checks if the resulting list box contains the entered value. If it does, the method highlights the list box and clicks on it. If not, it fails the test step with an error message.\n\nIf the `searchValue` is empty, the method provides a test step information that the user should provide some value for this field. \n\nThe method also includes try-catch block to handle any exceptions that may occur during its execution.",
        "input": [
            "String listBoxName",
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromListbox",
        "code": "public void chooseValueFromListbox(String listBoxName, String searchValue) {\n\t\ttry {\n\t\t\tif (!searchValue.isEmpty()) {\n\t\t\t\tString inputField = listBoxName + \" #xpath=//label[contains(text(),'\" + listBoxName + \"')]//..//input\";\n\t\t\t\twaitForElement(inputField, 10);\n\t\t\t\twaitForElementUntilVisible(inputField);\n\t\t\t\tif (isElementDisplayed(inputField, 6)) {\n\t\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t\tWebElement input = findWebElement(inputField);\n\t\t\t\t\tchar ch[] = searchValue.toCharArray();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + searchValue + \"' in  '\" + listBoxName + \" ' input field\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString listBox = listBoxName + \" listbox#xpath=//ul[contains(@style,'block')]//li//span[text()='\"\n\t\t\t\t\t\t\t+ searchValue + \"']\";\n\t\t\t\t\twaitTime(10);\n\t\t\t\t\tif (isElementDisplayed(listBox, 6)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(listBoxName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromListbox \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate - 12/11/2019\n\t * @Description - This method is used to select the scheme\n\t */",
        "description": "This Java method, `chooseValueFromListbox`, is used to search for a value in a list box and select it. The method takes two parameters: `listBoxName` (the name of the list box) and `searchValue` (the value to be searched).\n\nHere's what the method does:\n\n1. If the `searchValue` is not empty, it:\n\t* Waits for an input field with the specified `listBoxName` using XPath.\n\t* Waits until the input field is visible.\n\t* Checks if the input field is displayed and highlights it if so.\n\t* Types the `searchValue` into the input field character by character, with a 200ms delay between each character.\n\t* Verifies that the value has been successfully typed in the input field.\n\t* Waits for the page to load.\n\t* Searches for the list box containing the `searchValue` using XPath and waits until it is displayed.\n\t* If the list box item with the `searchValue` is found, highlights it and clicks on it. Otherwise, fails the test step.\n2. If the `searchValue` is empty, it provides a test step info message asking to provide some value for this field.\n\nThe method also catches any exceptions that may occur during execution and reports them as failed test steps.",
        "input": [
            "String listBoxName",
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectScheme",
        "code": "public void selectScheme() {\n\t\ttry {\n\t\t\tString scheme = \"Scheme select button#xpath=//span//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\twaitForElement(scheme, 10);\n\t\t\tif (isElementDisplayed(scheme, elementLoadWaitTime)) {\n\t\t\t\tclickOn(scheme);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectScheme \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectScheme()`, attempts to select a scheme by finding and clicking on a specific button with the text \"Select\" using XPath. It waits for the element to be displayed before attempting to click on it. If the element is not present or if there's an exception during the process, the test step fails.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickEditOptionWithTitle1",
        "code": "public void clickEditOptionWithTitle1(String fieldLabel, String ScrollElement) {\n\n\t\ttry {\n\t\t\tString editScroll = fieldLabel + \" edit button#xpath=(//span[text()='Additional Details'])[1]\";\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\twaitForElement(editScroll, 25);\n\n\t\t\tscrollbycordinates(editScroll);\n\n\t\t\twaitForElement(editOption, 25);\n\t\t\tscrollbycordinates(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle1`, attempts to locate and click an edit option with a specific title on a webpage. \n\nThe method takes two parameters: `fieldLabel` (the label of the field to be edited) and `ScrollElement` (an element that needs to be scrolled into view). \n\nIt first constructs two XPath expressions: one for the scroll element and another for the edit button. It then waits for these elements to appear, scrolls them into view if necessary, and checks if the edit button is displayed. If it is, the method clicks on it; otherwise, it reports a failure.\n\nIf any exceptions occur during this process, the method catches them and logs an informative message about the failure.",
        "input": [
            "String fieldLabel",
            "String ScrollElement"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromDropdown",
        "code": "public void selectValueFromDropdown(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 25);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown`, is used to select a specific value from a dropdown list. The method takes two parameters: `dropdownName` and `value`. \n\nThe method first waits for the page to load and then locates the dropdown element using an XPath expression. It then checks if the dropdown element is displayed. If it is, the method attempts to select the specified value from the dropdown list by clicking on the value repeatedly until it is selected or a timeout occurs (2 iterations with a 1-second wait in between). \n\nIf the value is successfully selected, the method reports a test step as passed. If the value is not present in the dropdown list or the dropdown element is not displayed, the method reports a test step failure. The method also catches any exceptions that may occur during its execution and reports a test step failure with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromDropdownInMoreProductTab",
        "code": "public void selectValueFromDropdownInMoreProductTab(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//label[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//input\";\n\t\t\twaitForElement(dropdown, 25);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@role,'listbox')]//span[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownInMoreProductTab`, is used to select a specific value from a dropdown list in the More Product tab. \n\nThe method takes two parameters: `dropdownName` (the name of the dropdown) and `value` (the desired value to be selected). It uses various Selenium WebDriver methods such as `waitForPageToLoad()`, `waitForElement()`, `isElementDisplayed()`, `clickOnSpecialElement()`, and `waitTime()` to interact with the webpage.\n\nThe method first waits for the page to load, then it locates the dropdown element using an XPath expression. It then verifies if the dropdown is displayed within a certain time limit (25 seconds). If the dropdown is displayed, it attempts to select the desired value from the dropdown list by clicking on the dropdown and then clicking on the desired value. \n\nIf the value is successfully selected, the method logs a test step as passed. If the value is not present in the dropdown or if the dropdown is not displayed at all, the method logs a test step as failed with an appropriate error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInFieldInMoreProductTab",
        "code": "public void enterValueInFieldInMoreProductTab(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../following-sibling::div//input\";\n\t\t\twaitForElement(field, 15);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldInMoreProductTab`, enters a given value into a field with the specified label name in the More Product tab. Here's a brief summary of its functionality:\n\n1. It constructs an XPath expression to locate the input field based on the provided label name.\n2. It waits for the element to be present and visible using `waitForElement`.\n3. If the element is not present, it fails the test step with a message indicating that the field is not present.\n4. If the element is present, it scrolls to the element using `scrollbycordinates` or `scrollToWebElement`, depending on its visibility.\n5. It then enters the given value into the input field using `typeIn`.\n6. If an exception occurs during any of these steps, it catches and fails the test step with a message indicating that the operation failed.\n\nThe method takes two parameters: `labelName` (the name of the label associated with the input field) and `value` (the value to be entered into the field).",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickpopupbutton",
        "code": "public void clickpopupbutton(String buttonName) {\n\t\ttry {\n\t\t\tString button = \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 6);\n\t\t\tif (isElementDisplayed(button, 3)) {\n\t\t\t\tclickOn(button);\n\t\t\t\ttestStepInfo(buttonName + \"is Clicked\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \"is not clicked\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in buttonName\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickpopupbutton`, simulates a click on a popup button with the specified name (`buttonName`). \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the button by its text.\n2. It waits for the button to be visible (up to 6 seconds).\n3. If the button is displayed, it clicks on the button and logs a successful test step.\n4. If the button is not displayed or cannot be clicked, it logs a failed test step.\n\nIf any exception occurs during this process, it also logs a failure test step with the error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectOrDeselectCheckbox",
        "code": "public void selectOrDeselectCheckbox(String checkboxLabel, boolean check) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(checkbox, 5);\n\t\t\tif (check) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already checked\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckbox`, takes two parameters: a string `checkboxLabel` and a boolean `check`. It is used to select or deselect a checkbox on a webpage.\n\nThe method first constructs an XPath expression to locate the checkbox element based on its label. Then, it waits for the element to be present (up to 5 seconds). \n\nIf the `check` parameter is true, the method checks if the checkbox is already selected. If not, it selects the checkbox. If the checkbox is already selected, it logs a message stating that the checkbox is already checked.\n\nIf the `check` parameter is false, the method does the opposite: it checks if the checkbox is already deselected and, if not, deselects it. If the checkbox is already deselected, it logs a message stating that the checkbox is already unchecked.\n\nThe method catches any exceptions that may occur during execution and logs an error message with the exception's message.",
        "input": [
            "String checkboxLabel",
            "boolean check"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromSearchField",
        "code": "public void chooseValueFromSearchField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tString searchList = labelName + \" list#xpath=//div[contains(@title,'\" + value + \"')]//..//parent::a\";\n\t\t\t\tif (isElementDisplayed(searchList, 5)) {\n\t\t\t\t\tclickOn(searchList);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present in \" + labelName + \" listbox\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchField`, is used to select a value from a search field. It takes two parameters: `labelName` and `value`. The method attempts to find the search field with the given label name, enter the specified value into it, and then click on the corresponding list item if it exists. If any step in this process fails (e.g., the search field is not found or the value is not present in the list), the method reports a test failure with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnSave",
        "code": "public void clickOnSave(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//span[text()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\thighLighterMethod(button);\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Confirm button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnConfirmButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSave`, attempts to click on a specific button with the given name (`buttonName`) by simulating user interaction. \n\nHere's what it does:\n\n1. It constructs an XPath expression for the button by concatenating the button name with a fixed string and an XPath query.\n2. It waits up to 15 seconds for the element (the button) to be present on the page using `waitForElement`.\n3. If the button is not visible, it scrolls down to the button using `scrollbycordinates` method.\n4. It then checks if the button is displayed within a time limit of 5 seconds using `isElementDisplayed`. \n5. If the button is displayed, it highlights the button using `highLighterMethod` and then simulates a click on the button using `clickOn`.\n6. If the button is not present or cannot be clicked (e.g., due to an error), it fails the test step with a message indicating the failure.\n\nThe method also includes exception handling, which catches any exceptions that might occur during execution and reports them as test failures.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifySuccessMessage",
        "code": "public void verifySuccessMessage() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]//span[@class='toastMessage forceActionsText']\";\n\t\t\twaitForElement(successPopup, 25);\n\t\t\tif (isElementDisplayed(successPopup, 15)) {\n\t\t\t\tmanualScreenshot(\"[ \"+getText(successPopup)+\" ] Success Popup appeared.\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Cannot able to capture success popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessage`, is used to verify the presence of a specific success message popup on a web page. The method uses an XPath expression to locate the element containing the success message and then checks if it is displayed within a certain time limit (25 seconds). If the element is displayed, it takes a manual screenshot with the text content of the popup as the filename. If the element is not displayed, it also takes a manual screenshot but with an error message indicating that the popup was not captured. The method also includes error handling to catch any exceptions that may occur during execution.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifySuccessMessagewithFail",
        "code": "public void verifySuccessMessagewithFail() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]\";\n\t\t\twaitForElement(successPopup, 15);\n\t\t\tif (isElementDisplayed(successPopup, 15)) {\n\t\t\t\tmanualScreenshot(\"Success Popup appeared.\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cannot able to capture success popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessagewithFail()`, is used to verify the appearance of a specific success message element on the UI. The method attempts to locate the element using an XPath expression and then checks if it's displayed within a certain time limit (15 seconds). If the element appears as expected, it takes a manual screenshot for verification purposes. However, if the element doesn't appear or there's an error during the process, the test step fails with an appropriate failure message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "capturetoastMessage",
        "code": "public void capturetoastMessage(String expectedError) {\n\t\ttry {\n\t\t\tString error = \"#xpath=//span[contains(text(),'\" + expectedError + \"')]\";\n\t\t\twaitForElement(error, 10);\n\t\t\tif (isElementDisplayed(error)) {\n\t\t\t\tString temp = getText(error);\n\t\t\t\tif (temp.equalsIgnoreCase(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Captured message is :[ \" + temp + \" ]\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Failed to locate element\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to capture message\");\n\t\t}\n\t}",
        "description": "This Java method, named `capturetoastMessage`, is used to capture the text of a toast message that contains a specific error message. The method takes one parameter, `expectedError`, which is the expected error message to be captured.\n\nHere's what the method does:\n\n1. It constructs an XPath expression based on the `expectedError` parameter.\n2. It waits for the element matching the XPath expression to be displayed using the `waitForElement` method.\n3. If the element is displayed, it checks if the text of the element matches the `expectedError` parameter.\n4. If the text matches, it takes a manual screenshot with the captured message as part of the screenshot name.\n5. If the text does not match or if an exception occurs during the process, it marks the test step as failed.\n\nThe method uses try-catch block to handle any exceptions that may occur during its execution.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorPopup",
        "code": "public void verifyErrorPopup() {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Success message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/following-sibling::div/span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tmanualScreenshot(\"Successfully got the Error popup [ \" + getText(ErrorPopup) + \" ] message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorPopup()`, is designed to verify the presence and content of an error popup message on a web page. It uses various Selenium WebDriver methods to:\n\n1. Wait for the error popup element to be displayed (up to 15 seconds).\n2. Check if the error popup is actually displayed (within 4 seconds).\n3. If the popup is present, scroll to it and capture a manual screenshot with the popup's text.\n4. If the popup is not present or there's an issue, mark the test step as failed.\n\nThe method uses XPath syntax to identify the error popup element by its class and text content.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorPopup",
        "code": "public void verifyErrorPopup(String expectedError) {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Success message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/following-sibling::span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 4)) {\n\t\t\t\tscrollToWebElement(ErrorPopup);\n\t\t\t\tString actualError_Msg = getText(error_Msg).trim();\n\t\t\t\twaitTime(3);\n\t\t\t\tif (actualError_Msg.equalsIgnoreCase(expectedError) || actualError_Msg.contains(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyErrorPopup`, is used to verify that an expected error message is displayed as a popup when a certain condition occurs. Here's a brief summary:\n\n1. The method attempts to locate and wait for the error popup element with the specified XPath.\n2. If the element is displayed, it scrolls to the element and extracts the actual error message text.\n3. It then checks if the actual error message matches or contains the expected error message using a case-insensitive comparison.\n4. If the messages match, it takes a manual screenshot as evidence of the expected validation being fired.\n5. If the messages do not match or the popup is not displayed, it marks the test step as failed with an appropriate failure message.\n\nThe method also includes some general try-catch logic to handle any exceptions that might occur during its execution.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorPopupInQC",
        "code": "public void verifyErrorPopupInQC(String expectedError) {\n\t\ttry {\n\t\t\tString ErrorPopup = \"Success message#xpath=//div[@class='toastTitle slds-text-heading--small' and text()='Error']/parent::div//div[contains(@id,'toastDescription')]//span\";\n\t\t\twaitForElement(ErrorPopup, 15);\n\t\t\tif (isElementDisplayed(ErrorPopup, 10)) {\n\t\t\t\tString actualError_Msg = getText(error_Msg).trim();\n\t\t\t\tif (actualError_Msg.contains(expectedError)) {\n\t\t\t\t\tmanualScreenshot(\"Expected validation Message : '\" + actualError_Msg + \"' is fired.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Expected Validation is not fired.Instead of we got : \" + actualError_Msg);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to capture error popup\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * @author Vetri\n\t * @CreatedDate 13/11/2019\n\t * @Description - This method is used to click button in Home page\n\t */",
        "description": "This Java method, `verifyErrorPopupInQC`, is designed to verify that a specific error message is displayed as a popup in the application's Quality Control (QC) module. The method takes a single string parameter, `expectedError`, which represents the expected error message.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It attempts to locate an element with the specified XPath (`ErrorPopup`) and waits for it to be displayed within a certain time limit (15 seconds).\n2. If the element is found and displayed, the method checks if the actual error message text contains the expected error message by using the `contains` method.\n3. If the actual error message matches the expected error message, the method takes a manual screenshot with a descriptive name that includes the actual error message.\n4. If the actual error message does not match the expected error message, the method marks the test step as failed and provides an error message with the actual error message text.\n5. If the element is not found or displayed within the time limit, the method also marks the test step as failed and reports an error.\n\nThe method catches any exceptions that may occur during its execution and marks the test step as failed if an exception is thrown.",
        "input": [
            "String expectedError"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnSaveButton",
        "code": "public void clickOnSaveButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//ul[contains(@class,'slds-button')]/following::li//button[text()='Save']\";\n\t\t\twaitForElement(button, 20);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tmanualScreenshot(\"Click on Save Button \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton`, attempts to click on a specific save button element after waiting for it to be displayed. The button is located using an XPath expression that specifies the HTML structure of the element.\n\nHere's what the method does:\n\n1. It defines a string variable `button` that contains the XPath expression for locating the \"Save\" button.\n2. It waits for the specified button to be displayed using the `waitForElement` method, with a timeout of 20 seconds.\n3. If the button is displayed, it checks if the element is still visible after 5 seconds using the `isElementDisplayed` method.\n4. If the button is both present and visible, it clicks on the button using the `clickOn` method.\n5. After clicking the button, it waits for the page to load completely using the `waitForPageToLoad` method.\n6. It takes a manual screenshot with the label \"Click on Save Button\".\n7. If the button is not present or visible within the specified time limits, it fails the test step with an error message.\n8. If any exception occurs during the execution of the method, it catches the exception and fails the test step with an error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectSchemeWithValueInZBB",
        "code": "public void selectSchemeWithValueInZBB(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\n\t\t\tif (!schemeValue.isEmpty()) {\n\t\t\t\tdo {\n\t\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//div//h2//span//div//Strong[text()='\"\n\t\t\t\t\t\t\t+ schemeValue + \"']//..//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\twaitForElement(scheme, 3);\n\t\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\t\tmanualScreenshot(schemeValue + \" scheme value is present.\");\n\t\t\t\t\t\tclickOnSpecialElement(scheme);\n\t\t\t\t\t\tmanualScreenshot(\"Successfully \" + schemeValue + \" scheme value is selected.\");\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isElementDisplayed(disabledNxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\t\tclickOnSpecialElement(nxt_schemeBtn);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} while (!conditionFlag);\n\n\t\t\t\tif (failFlag) {\n\t\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectSchemeWithValueInZBB`, appears to be a part of an automated testing framework for a web-based application. The method is designed to select a scheme value from a list of options in the ZBB (Zero-Based Budgeting) system.\n\nThe method takes a string parameter `schemeValue` which represents the scheme value to be selected. It uses various WebDriver methods to perform the following actions:\n\n1. Waits for the page to load and then waits for 3 seconds.\n2. Finds the element with the given `scheme` XPath expression and verifies if it's displayed on the page.\n3. Scrolls to the element, highlights it using a high-lighter method, takes a manual screenshot, clicks on the element, and takes another manual screenshot after selection.\n4. If the scheme value is not present, it checks for the presence of two other elements (`disabledNxt_schemeBtn` and `nxt_schemeBtn`) and performs actions accordingly.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, it logs an error message indicating that the test step failed.\n\nThe method returns void, as it does not return any value. It only performs the necessary actions to select the scheme value and handles any errors that may occur during the process.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyMessageInPopup",
        "code": "public void verifyMessageInPopup(String expectedMessage) {\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tString errorsList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tString errorMsg = getText(errorsList).trim();\n\t\t\t\tif (errorMsg.equalsIgnoreCase(expectedMessage)) {\n\t\t\t\t\tmanualScreenshot(errorMsg);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Getting \" + errorMsg + \" error message instead of \" + expectedMessage);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyMessageInPopup`, verifies that the expected message is displayed in a popup error message. Here's what it does:\n\n1. It checks if an element with the specified XPath (`error`) is displayed within 2 seconds using the `isElementDisplayed` method.\n2. If the element is displayed, it extracts the text from another element with the specified XPath (`errorsList`) using the `getText` method and trims any leading/trailing whitespace.\n3. It then compares the extracted error message with the expected message passed as a parameter (`expectedMessage`). If they match (ignoring case), it takes a manual screenshot using the `manualScreenshot` method.\n4. If the messages don't match, it marks the test step as failed and provides a failure message indicating that the wrong error message was displayed.\n5. If the element is not displayed, it also takes a manual screenshot with a message indicating that there were no errors while editing.\n\nThe method catches any exceptions that might occur during execution and marks the test step as failed if an exception is thrown.",
        "input": [
            "String expectedMessage"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "toDeleteDocument",
        "code": "public void toDeleteDocument(String labelName, String Value) {\n\t\ttry {\n\t\t\tString docCross_Btn = \"Close Doc#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//..//span[@class='cross-button']\";\n\t\t\tString popup_Btn = \"Close Doc#xpath=(//button[text()='\" + Value + \"'])[1]\";\n\t\t\tif (isElementDisplayed(docCross_Btn, 5)) {\n\t\t\t\tclickOnSpecialElement(docCross_Btn);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(popup_Btn, 5)) {\n\t\t\t\t\tclickOnSpecialElement(popup_Btn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(2);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Popup is not present.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Document is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in toDeleteDocument. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `toDeleteDocument`, takes two string parameters: `labelName` and `Value`. It attempts to delete a document by clicking on the \"Close\" button next to the specified label name, then clicking on the popup button with the specified value. The method uses various WebDriver methods (e.g., `clickOnSpecialElement`, `waitForPageToLoad`) to interact with the UI elements. If any step fails, it reports an error using the `testStepFailed` method.",
        "input": [
            "String labelName",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCancelButton",
        "code": "public void clickOnCancelButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//span[text()='Cancel']//parent::button[@title='Cancel']\";\n\t\t\twaitForElement(button, 6);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cancel button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCancelButton()`, attempts to click on a \"Cancel\" button on the current web page. It uses Selenium WebDriver's methods for locating and interacting with elements.\n\nHere's what it does:\n\n1. Defines the XPath of the Cancel button.\n2. Waits up to 6 seconds for the element to be present using `waitForElement()`.\n3. Checks if the element is displayed within 5 seconds using `isElementDisplayed()`. If not, it fails the test step with a message \"Cancel button is not present\".\n4. If the element is present and displayed, clicks on it using `clickOn()` method.\n5. Waits for the page to load completely after clicking the button using `waitForPageToLoad()`.\n6. If any exception occurs during this process, it fails the test step with a message \"Failed in clickOnSaveButton\" followed by the exception's message.\n\nIn summary, this method attempts to cancel an operation or close a dialog box by clicking on the \"Cancel\" button, and reports failure if the button is not present or clickable.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyopporunityIsdisplayed",
        "code": "public void verifyopporunityIsdisplayed(String oppid) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[@placeholder='Search this list...']\";\n\t\t\tString Value = \"#xpath=(//span[@class='slds-grid slds-grid--align-spread']/following::a)[1]\";\n\t\t\twaitForElement(link, 6);\n\t\t\tif (isElementDisplayed(link, 8)) {\n\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\ttypeIn(link, oppid);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\twaitTime(10);\n\t\t\t\tif (isElementDisplayed(Value, 8)) {\n\t\t\t\t\tclickOn(Value);\n\t\t\t\t\tmanualScreenshot(\"Click on\" + oppid);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyopportunityisdisplayed\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyopporunityIsdisplayed(String oppid)`, is used to verify that an opportunity with the specified ID (`oppid`) is displayed on a web page. \n\nHere's what it does:\n\n1. It waits for an element with the given XPath link (#xpath=//input[@placeholder='Search this list...']) to be displayed.\n2. If the element is displayed, it types in the `oppid` into the input field and presses Enter.\n3. It then waits for another element with the given XPath value (#xpath=(//span[@class='slds-grid slds-grid--align-spread']/following::a)[1]) to be displayed.\n4. If this second element is displayed, it clicks on it and takes a manual screenshot with the message \"Click on\" followed by the `oppid`.\n\nIf any of these steps fail, the method catches the exception and reports the failure as a test step failed.",
        "input": [
            "String oppid"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "searchCustomers",
        "code": "public void searchCustomers(String searchvalue) {\n\t\ttry {\n\t\t\tString link = \"#xpath=//input[@placeholder='Search this list...']\";\n\t\t\twaitForElement(link, 6);\n\t\t\tif (isElementDisplayed(link, 3)) {\n\t\t\t\tWebElement element = findWebElement(link);\n\t\t\t\ttypeIn(link, searchvalue);\n\t\t\t\telement.sendKeys(Keys.ENTER);\n\t\t\t\tString value = \"#xpath= //span[@class='slds-grid slds-grid--align-spread']/following::a[text()='\"\n\t\t\t\t\t\t+ searchvalue + \"']\";\n\t\t\t\twaitForElement(value, 6);\n\t\t\t\tif (isElementDisplayed(value, 3)) {\n\t\t\t\t\tclickOnLink(value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Link is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(link + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `searchCustomers`, searches for a specific customer by typing the search value into an input field and then clicking on the resulting link if it is displayed. The method uses various WebUI methods such as `waitForElement`, `isElementDisplayed`, `findWebElement`, `typeIn`, `sendKeys`, `clickOnLink` to interact with the web page.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It tries to find an input field with a specific XPath and waits for it to be displayed.\n2. If the input field is displayed, it types in the search value and presses Enter.\n3. It then checks if a link containing the search value exists on the page.\n4. If the link is found, it clicks on it.\n5. If the link is not found or any other exception occurs during the process, it logs an error message.\n\nThe method uses try-catch block to handle any exceptions that might occur during its execution and reports the failure if any.",
        "input": [
            "String searchvalue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterDob",
        "code": "public void enterDob(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\tString field1 = labelName + \"#xpath=//label[text()='\" + labelName + \"']//../following-sibling::div/input\";\n\t\t\twaitForElement(field, 6);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else if (isElementDisplayed(field1, 5)) {\n\t\t\t\tscrollToWebElement(field1);\n\t\t\t\ttypeIn(field1, value);\n\t\t\t\thighLighterMethod(field1);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enter Dob \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterDob`, enters a date of birth (DOB) value into a web form. It takes two parameters: `labelName` and `value`. \n\nThe method tries to find the DOB field on the webpage by searching for an element with the given label name. If it finds the field, it waits for the element to be displayed, scrolls to the element if necessary, enters the provided value into the field, and highlights the entered text.\n\nIf the method fails to find the DOB field using the first search pattern (i.e., `field`), it tries searching with a different pattern (`field1`). If neither pattern finds the field, the method reports a test step failure indicating that the DOB field is not present. \n\nIn case of any exception during the execution of this method, it catches the exception and reports another test step failure with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessage",
        "code": "public boolean verifyAndPrintErrorMessage() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 2)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list #xpath=//ul[@class='errorsList']//li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while editing Asset cart\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessage`, attempts to verify the presence of an error message on a webpage and print the details of each error if found. \n\nIt does this by first checking if an element with the specified XPath is displayed within a certain time limit (2 seconds). If the element is found, it then retrieves a list of error messages from the webpage and prints the text of each error along with a manual screenshot for each one.\n\nIf the element is not found or any other exception occurs during the execution of this method, it marks the test as failed with an appropriate message. The method returns a boolean flag indicating whether the errors were successfully verified and printed.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnOppurtunityNameLink",
        "code": "public String clickOnOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitTime(15);\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=//span[text()='Opportunities']//ancestor::div//..//div/table/tbody/tr/td/a[starts-with(text(),'B')]\";\n\t\t\twaitForElement(oppurtunity, 50);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOnSpecialElement(oppurtunity);\n\t\t\t\twaitTime(20);\n\t\t\t\tString field = \"Error#xpath=//span[contains(text(),'unable to obtain exclusive access to this record')]\";\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(7);\n\t\t\t\t\tString Link = \"Assert Cart#xpath=//span[text()='Assert Cart']\";\n\t\t\t\t\tif (isElementDisplayed(Link, 5)) {\n\t\t\t\t\t\tclickOn(Link);\n\t\t\t\t\t\tclickOnLastOppurtunityNameLinkUAT();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnOppurtunityNameLink`, simulates a user clicking on an opportunity name link on a web page. Here's a step-by-step breakdown:\n\n1. It waits for 15 seconds using the `waitTime` method.\n2. It locates the \"Opportunities\" element using XPath and stores it in the `oppurtunity` variable.\n3. It waits for this element to be displayed within 50 seconds using the `waitForElement` method.\n4. If the element is displayed, it retrieves the text of the opportunity name using the `getText` method and stores it in the `opportunityValue` variable.\n5. It scrolls to the web element using the `scrollToWebElement` method.\n6. It clicks on the special element (likely a link) using the `clickOnSpecialElement` method.\n7. After clicking, it waits for 20 seconds using the `waitTime` method.\n8. If an error message is displayed with text \"unable to obtain exclusive access to this record\", it refreshes the page using the `refreshPage` method and then waits for 7 seconds.\n9. It checks if the \"Assert Cart\" element is displayed within 5 seconds using the `isElementDisplayed` method.\n10. If the element is displayed, it clicks on it using the `clickOn` method.\n11. Finally, it calls another method, `clickOnLastOppurtunityNameLinkUAT`, to continue with the test.\n\nThe method returns the opportunity value if successful or fails the test step if any of the steps fail or an exception occurs.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnOpportunityName",
        "code": "public void clickOnOpportunityName(String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString link = value + \"#xpath=//span[text()='\" + value + \"']\";\n\t\t\twaitForElement(link, 50);\n\t\t\tif (isElementDisplayed(link, 6)) {\n\t\t\t\tscrollToWebElement(link);\n\t\t\t\thighLighterMethod(link);\n\t\t\t\tclickOn(link);\n\t\t\t\twaitForPageToLoad();\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(value + \" is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\n\t\t\ttestStepFailed(\"Failed to click the \" + value);\n\t\t}\n\t}",
        "description": "This Java method, `clickOnOpportunityName`, attempts to click on an opportunity name element on a web page. It takes a string parameter `value` which is likely the name of the opportunity.\n\nHere's what it does:\n\n1. Waits for the page to load.\n2. Waits for 5 seconds.\n3. Builds a link string by concatenating the provided value with an XPath expression that searches for a span element containing the same text as the value.\n4. Waits up to 50 seconds for the element to be present on the page.\n5. Checks if the element is displayed within 6 seconds. If it is:\n\t* Scrolls to the element.\n\t* Highlights the element (using `highLighterMethod`).\n\t* Clicks on the element.\n\t* Waits again for the page to load.\n6. If the element is not present, fails the test step with a message indicating that the opportunity name is not present.\n\nIf any exception occurs during this process, it catches the exception and fails the test step with a generic error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnLastOppurtunityNameLinkUAT",
        "code": "public String clickOnLastOppurtunityNameLinkUAT() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitTime(5);\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=(//span[text()='Opportunities']//ancestor::div//following-sibling::div/table/tbody/tr/td/a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 35);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOn(oppurtunity);\n\t\t\t\twaitTime(10);\n\t\t\t\tString field = \"Error#xpath=//span[contains(text(),'unable to obtain exclusive access to this record')]\";\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(7);\n\t\t\t\t\tString Link = \"Assert Cart#xpath=//span[text()='Assert Cart']\";\n\t\t\t\t\tif (isElementDisplayed(Link, 5)) {\n\t\t\t\t\t\tclickOn(Link);\n\t\t\t\t\t\tclickOnLastOppurtunityNameLinkUAT();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnLastOppurtunityNameLinkUAT()`, is a part of an automation test for a web application. It simulates a user clicking on the last opportunity name link in the Opportunities table.\n\nHere's what it does:\n\n1. Waits for 5 seconds.\n2. Locates and waits for the \"Opportunities\" table to load (up to 35 seconds).\n3. Checks if the last opportunity name link is displayed within 5 seconds. If it is:\n\t* Retrieves the text of the opportunity name link.\n\t* Scrolls down to the opportunity name link.\n\t* Clicks on the opportunity name link.\n\t* Waits for 10 seconds.\n4. If an \"Error\" message indicating unable to obtain exclusive access to a record is displayed, refreshes the page and waits for 7 seconds.\n5. Checks if the \"Assert Cart\" link is displayed within 5 seconds. If it is:\n\t* Clicks on the \"Assert Cart\" link.\n\t* Calls itself recursively (i.e., calls `clickOnLastOppurtunityNameLinkUAT()` again).\n6. If any of these steps fail, reports a test step failure with an error message.\n\nThe method returns the text value of the opportunity name link that was clicked.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnIntegrationResponseSaveButton",
        "code": "public void clickOnIntegrationResponseSaveButton() {\n\t\ttry {\n\t\t\tString button = \"Save button#xpath=//div[@class='active']/following-sibling::div//button[@title='Save']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOn(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnSaveButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnIntegrationResponseSaveButton()`, attempts to click on a specific button with the title \"Save\" within 15 seconds. The button is located using an XPath expression that looks for a div element with class \"active\", followed by its sibling elements, and then finds a button with the specified title.\n\nThe method first waits up to 15 seconds for the element to be present using the `waitForElement()` method. If the element is displayed within 5 seconds, it clicks on the button using the `clickOn()` method. If the element is not present or takes longer than 5 seconds to display, the test step fails with an error message.\n\nIf any exception occurs during the execution of this method, it catches the exception and reports a failure with the exception message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromSearchAndListField",
        "code": "public void chooseValueFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\thighLighterMethod(searchField);\n\t\t\t\tWebElement input = findWebElement(searchField);\n\t\t\t\tchar ch[] = value.toCharArray();\n\t\t\t\tfor (char c : ch) {\n\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\tThread.sleep(500);\n\t\t\t\t}\n\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div[@role='option'][1]/span[contains(text(),'\" + value + \"')] \";\n\t\t\t\twaitForElement(search_icn);\n\t\t\t\tclickOn(search_icn);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField`, is used to select a value from both search and list fields. It takes two parameters: `labelName` (the label of the field) and `value` (the actual value to be selected). \n\nThe method first constructs an XPath expression for the search field based on the provided `labelName`. Then, it waits for the element to load and checks if the element is displayed. If the element is displayed, it scrolls to the element, highlights it, and enters the `value` into the input field character by character with a 500ms pause in between each character.\n\nAfter entering the value, it searches for the selected value using an XPath expression and clicks on it. Finally, it waits for the page to load and then clicks on the link corresponding to the selected value. If any of these steps fail, it reports a test step failure with an appropriate message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectvaluefromdownArrow",
        "code": "public void selectvaluefromdownArrow(String labelname, String DigitalValue) {\n\t\ttry {\n\t\t\tString Label = \"#xpath=//span[text()='\" + labelname + \"']/parent::div//a\";\n\t\t\tString Value = \"#xpath=//div[@class='uiInput uiAutocomplete uiInput--default uiInput--picklist']//input[@role='combobox']\";\n\t\t\twaitForElement(Label, 10);\n\t\t\tif (isElementDisplayed(Label, 5)) {\n\t\t\t\tclickOn(Label);\n\t\t\t\twaitForElement(Value, 10);\n\t\t\t\tif (isElementDisplayed(Value, 5)) {\n\t\t\t\t\thighLighterMethod(Value);\n\t\t\t\t\tWebElement input = findWebElement(Value);\n\t\t\t\t\tchar ch[] = DigitalValue.toCharArray();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + DigitalValue + \"' in  '\" + labelname + \" ' input field\");\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tString listBox = labelname\n\t\t\t\t\t\t\t+ \" listbox#xpath=(//ul[@class= 'slds-dropdown__list slds-show']//li/a/lightning-icon//following-sibling::span[@class=' virtualAutocompleteOptionText'])[2]\";\n\t\t\t\t\tif (isElementDisplayed(listBox, 6)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOn(listBox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(DigitalValue + \" value is not present in the \" + labelname + \" listbox\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectvaluefromdownarror\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectvaluefromdownArrow`, is used to select a value from a dropdown listbox by typing the corresponding digital value using the down arrow. \n\nThe method takes two parameters: `labelname` and `DigitalValue`. It first locates the label element with the given `labelname` and then clicks on it. After that, it waits for the input field to be displayed and types the `DigitalValue` into it character by character, pausing briefly between each character.\n\nOnce the value is typed in, it verifies if the value is present in the listbox by locating the corresponding element with the given `labelname`. If the value is found, it clicks on it. If not, it fails the test step.\n\nThe method also includes error handling using a try-catch block to catch any exceptions that may occur during execution and report them as failed test steps.",
        "input": [
            "String labelname",
            "String DigitalValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromSearchCOTeam",
        "code": "public void chooseValueFromSearchCOTeam(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div[@role='option'][1]/span[contains(text(),'\" + value + \"')] \";\n\t\t\t\tclickOn(search_icn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchCOTeam`, allows you to select a value from a search dropdown list on a webpage. It takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided `labelName` to locate the search field. It then waits for the element to be displayed, types in the provided `value`, and clicks on the option that matches the value.\n\nIf the search field is not present or if there's an exception during the process, it logs a failure message using the `testStepFailed` method.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyFieldIsPresent",
        "code": "public void verifyFieldIsPresent(String labelname) {\n\t\ttry {\n\t\t\tlabelname=\"Next Purchase Voucher Offer NPV1\";\n\t\t\tString searchField = labelname + \" #xpath=//span[contains(text(),'\" + labelname + \"')]\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementPresent(searchField)) {\n\t\t\t\tmanualScreenshot(getText(searchField) + \" field is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(getText(labelname) + \"field is not present\");\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\n**Method:** `verifyFieldIsPresent`\n**Purpose:** Verifies that a specific field with the given label name is present on the page.\n**Input:** A string representing the label name of the field to verify.\n**Behavior:**\n\n1. Sets the input label name to a hardcoded value (\"Next Purchase Voucher Offer NPV1\").\n2. Constructs an XPath expression to search for the field based on its label name.\n3. Waits for the element to be present on the page (up to 10 seconds).\n4. Checks if the element is present using the `isElementPresent` method.\n5. If the element is present, takes a manual screenshot with a message indicating that the field is present.\n6. If an exception occurs during the verification process, marks the test step as failed and provides a failure message.\n\nIn summary, this method attempts to verify the presence of a specific field on the page based on its label name.",
        "input": [
            "String labelname"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyECIsPresent",
        "code": "public boolean verifyECIsPresent(String labelname) {\n\t\ttry {\n\t\t\tString field = labelname + \" #xpath=//span[contains(text(),'\" + labelname\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tmanualScreenshot(getText(field) + \"is displayed\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no Existing value is displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyECIsPresent\" + e.getMessage());\n\t\t}\n\t\treturn loadFailure;\n\t}",
        "description": "This Java method, `verifyECIsPresent`, checks if an element with the given label name is present on a webpage. It uses Selenium WebDriver to perform the following actions:\n\n1. Constructs an XPath expression to locate the element.\n2. Waits for the element to be displayed (up to 10 seconds).\n3. Checks if the element is actually displayed (up to 3 seconds).\n4. If the element is displayed, takes a manual screenshot with the text of the element as the filename.\n5. If the element is not displayed, logs a test step failure message.\n\nThe method returns a `loadFailure` value, which is likely related to the overall test load status.\n\nNote that this method also catches any exceptions that may occur during its execution and logs them as test failures.",
        "input": [
            "String labelname"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "selectSchemeWithValue",
        "code": "public void selectSchemeWithValue(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\t\t\t\tdo {\n\t\t\t\t\tString scheme = \"Scheme select button#xpath=//span[text()='\" + schemeValue\n\t\t\t\t\t\t\t+ \"']//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\twaitForElement(scheme, 2);\n\t\t\t\t\tif (isElementDisplayed(scheme, 8)) {\n\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\t\tclickOn(scheme);\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconditionFlag = false;\n\t\t\t\t\t\tif (isElementDisplayed(disabledNxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} while (!conditionFlag);\n\n\t\t\t\tif (failFlag) {\n\t\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `selectSchemeWithValue`, appears to be part of a web automation or testing framework. Its primary function is to select a scheme value from a dropdown list or button on a webpage.\n\nThe method takes a `String` parameter called `schemeValue`, which represents the desired scheme value to be selected. It uses various Web Driver methods, such as `waitForPageToLoad()`, `waitForElement()`, and `clickOn()`, to interact with the webpage.\n\nHere's a high-level overview of what the method does:\n\n1. If the provided `schemeValue` is not empty, it enters a loop that attempts to select the scheme value.\n2. Within the loop, it:\n\t* Waits for the page to load and the element to be displayed (using `waitForPageToLoad()` and `waitForElement()`).\n\t* Scrolls to and highlights the scheme value button using `scrollToWebElement()` and `highLighterMethod()`.\n\t* Clicks on the scheme value button using `clickOn()`.\n3. If the scheme value is successfully selected, it sets a `conditionFlag` to `true`. If not, it sets both `conditionFlag` and `failFlag` to `false`.\n4. The loop continues until the condition flag is set to `true`, indicating that the scheme value has been successfully selected.\n5. If the `failFlag` is still set to `true` after the loop, it means that the scheme value was not found or could not be selected, and the method reports a test failure using `testStepFailed()`.\n\nThe method also includes error handling using a `catch` block, which catches any exceptions thrown during execution and reports a test failure with an appropriate message.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectSchemeWithValue1",
        "code": "public void selectSchemeWithValue1(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tif (!schemeValue.isEmpty()) {\n\t\t\t\tdo {\n\t\t\t\t\tString scheme = \"Scheme select button#xpath=//strong[text()='\" + schemeValue\n\t\t\t\t\t\t\t+ \"']//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\twaitForElement(scheme, 2);\n\t\t\t\t\tif (isElementDisplayed(scheme, 8)) {\n\n\t\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\t\tclickOn(scheme);\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconditionFlag = false;\n\t\t\t\t\t\tif (isElementDisplayed(disabledNxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t} else if (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} while (!conditionFlag);\n\n\t\t\t\tif (failFlag) {\n\t\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectSchemeWithValue1`, appears to be a part of an automation script that interacts with a web page. The method takes a `String` parameter `schemeValue` and attempts to select a scheme value on the webpage.\n\nHere's a high-level overview of what the method does:\n\n1. It checks if the provided `schemeValue` is not empty.\n2. If it's not empty, it enters a loop that continues until the condition flag is set to `true`.\n3. Within the loop, it:\n\t* Waits for the page to load and then waits for 2 seconds.\n\t* Searches for an element with the XPath specified in the `scheme` variable (which contains the scheme value concatenated with some static text).\n\t* If the element is displayed within 8 seconds, it scrolls to the element, highlights it, clicks on it, and sets the condition flag to `true`.\n4. If the condition flag remains `false`, it checks if a disabled \"Next Schemes\" button or a regular \"Next Schemes\" button is present. If either of these buttons is found, it interacts with them accordingly.\n5. Once the loop exits (i.e., the condition flag is set to `true`), it checks if there was an error during this process. If so, it fails the test step and reports an error message.\n\nThe method also catches any exceptions that may occur during its execution and reports a failure with a generic error message if one occurs.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyListValueAutopopulatedInTextField",
        "code": "public void verifyListValueAutopopulatedInTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\twaitForElement(searchField, 20);\n\t\t\tscrollbycordinates(searchField);\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tfindWebElement(searchField).clear();\n\t\t\t\tfindWebElement(searchField).sendKeys(value);\n\t\t\t\tString searchList = labelName + \" list#xpath=//div[contains(@title,'\" + value + \"')]//..//parent::a\";\n\t\t\t\twaitForElement(searchList, 15);\n\t\t\t\tif (isElementDisplayed(searchList, 15)) {\n\t\t\t\t\tclickOn(searchList);\n\t\t\t\t\tmanualScreenshot(\"Successfully list of values are auto populated in \" + labelName + \" textField.\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(value + \" value is not present in \" + labelName + \" listbox\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here's a brief description of the Java method:\n\nThis method, `verifyListValueAutopopulatedInTextField`, verifies that an auto-populated list value is present and clickable in a text field. It takes two parameters: `labelName` (the name of the label) and `value` (the expected value to be autopopulated). The method performs the following steps:\n\n1. Searches for the text field with the given label name using XPath.\n2. Scrolls to the text field if it's not already visible.\n3. Verifies that the text field is displayed.\n4. Types the provided `value` into the text field and clears any existing value.\n5. Searches for a list of values containing the typed `value` using XPath.\n6. Waits for the list item to be displayed, then clicks on it if present.\n7. If the list item is not found, takes a manual screenshot with an error message.\n\nThe method catches any exceptions that occur during execution and reports them as test failures.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyDropdownIsClickable",
        "code": "public void verifyDropdownIsClickable(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 20);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\twaitForElement(dropdownList, 15);\n\t\t\t\tif (isElementDisplayed(dropdownList, 3)) {\n\t\t\t\t\thighLighterMethod(dropdownList);\n\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\tmanualScreenshot(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(dropdownName + \" dropdown is not selectable.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDropdownIsClickable`, verifies that a specific value can be selected from a dropdown menu. The method takes two parameters: the name of the dropdown and the value to be selected.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the dropdown element.\n2. It waits for the dropdown element to be displayed (up to 20 seconds).\n3. If the dropdown is displayed, it scrolls to the element using `scrollbycordinates`.\n4. It verifies that the dropdown is displayed by checking if its elements are visible (up to 5 seconds). If not, it takes a manual screenshot with an error message.\n5. If the dropdown is displayed, it highlights the element and clicks on it.\n6. It then constructs another XPath expression to locate the specific value in the dropdown list.\n7. It waits for this value to be displayed (up to 15 seconds).\n8. If the value is displayed, it highlights the element and clicks on it.\n9. If successful, it takes a manual screenshot with a success message. If not, it takes an error screenshot.\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an appropriate error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInPopup",
        "code": "public boolean verifyAndPrintErrorMessageInPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 10)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing\");\n\t\t\t}\n\t\t\tif (flag) {\n\t\t\t\ttestStepFailed(\" Due to above errors. We cannot move further.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopup`, is used to verify if there are any error messages displayed on the page and print them out in a popup. \n\nIt first tries to find an element with the specified XPath (error header) within 10 seconds. If found, it then finds all elements with the class 'error' (error list) and prints their text contents as individual screenshots for each error.\n\nIf no errors are found, it takes a screenshot of \"There is no error while editing\".\n\nFinally, if any errors were found, it marks the test step as failed due to those errors. If an exception occurs during the process, it also marks the test step as failed and provides the exception message. The method returns a boolean indicating whether errors were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorMessageInAlertPopup",
        "code": "public boolean verifyErrorMessageInAlertPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div/span[contains(text(),'Review')]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t\tif (flag) {\n\t\t\t\t\ttestStepFailed(\"Due to above errors. we cannot move further.\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorMessageInAlertPopup`, verifies if there are any error messages displayed in an alert popup. Here's a brief summary of what the method does:\n\n1. It waits for the page to load and then waits for a specific error message element to be displayed.\n2. If the error message is displayed, it takes manual screenshots of each error message listed below the header.\n3. If there are any errors, the test step fails with a message indicating that further testing cannot proceed due to these errors.\n4. If no errors are found, it takes a manual screenshot stating that there were no errors while entering fields.\n5. The method returns a boolean flag indicating whether errors were found or not.\n\nThe method uses various Selenium WebDriver methods, such as `waitForPageToLoad`, `waitForElement`, `isElementDisplayed`, and `findWebElements`, to interact with the web page and verify the presence of error messages.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyErrorMessageInAlertPopupWithOutFail",
        "code": "public boolean verifyErrorMessageInAlertPopupWithOutFail(String expectedError) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div/span[contains(text(),'Review')]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitForElement(error, 4);\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (msg.contains(expectedError)) {\n\t\t\t\t\t\thighLighterMethod(errorList);\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully got the exepcted error message [\" + expectedError + \"] while saving.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyErrorMessageInAlertPopupWithOutFail`, verifies that an expected error message is displayed in an alert popup after a certain action. The method takes one parameter, `expectedError`, which is the expected error message to be verified.\n\nThe method first waits for the page to load and then waits for an element with the specified XPath to appear (the \"Error Header\" element). If this element is displayed, it checks if the list of errors contains the expected error message. If it does, it highlights the error list and takes a manual screenshot as proof.\n\nIf the expected error message is not found or if any exception occurs during the verification process, the method fails the test step and returns `false`. Otherwise, it returns `true` to indicate that the expected error message was successfully verified.",
        "input": [
            "String expectedError"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyMultipleValidationMessageInAlertPopup",
        "code": "public boolean verifyMultipleValidationMessageInAlertPopup() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[1]\";\n\t\t\tString error2 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[3]\";\n\t\t\tString error3 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[5]\";\n\t\t\tString error4 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[7]\";\n\t\t\tString error5 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[9]\";\n\t\t\tString error6 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[4]\";\n\t\t\tString error7 = \"Error Header#xpath=(//div/span[contains(text(),'Review the following')])[2]\";\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(4);\n\t\t\tif (isElementDisplayed(error, 4) || isElementDisplayed(error2, 4) || isElementDisplayed(error3, 4)\n\t\t\t\t\t|| isElementDisplayed(error4, 4) || isElementDisplayed(error5, 4) || isElementDisplayed(error6, 4)\n\t\t\t\t\t|| isElementDisplayed(error7, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]/li\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tscrollToWebElement(errorList);\n\t\t\t\t\tscrollToElement(errorList);\n\t\t\t\t\tSystem.out.println(errorsList);\n\t\t\t\t\tif (!errorsList.get(i).getText().trim().isEmpty()) {\n\t\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while entering the fields\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyMultipleValidationMessageInAlertPopup`, verifies if multiple validation error messages are displayed in an alert popup. \n\nThe method first loads a page and waits for 4 seconds before checking if the specified error messages (6 in this case) are displayed on the page. If any of these errors are found, it sets a flag to `true` and then prints out each error message along with a screenshot. The method also includes error handling to catch any exceptions that may occur during execution.\n\nThe method returns a boolean value indicating whether the validation errors were found or not.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyDropdownDefaultValue",
        "code": "public void verifyDropdownDefaultValue(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 6);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tif (getText(dropdown).equals(value)) {\n\t\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\t\tmanualScreenshot(\"'\" + value + \"' is default value in \" + dropdownName + \" dropdown field.\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Expected value is not selected. Instead of we get \" + getText(dropdown) + \" .\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `verifyDropdownDefaultValue`, verifies the default value of a dropdown field. It takes two parameters: `dropdownName` and `value`.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the dropdown element based on its name.\n2. It waits for the dropdown element to be displayed using the `waitForElement` method.\n3. If the dropdown is displayed, it checks if the text of the dropdown matches the expected value.\n4. If the values match, it highlights the dropdown and takes a manual screenshot with a message indicating that the default value was found.\n5. If the values don't match, it logs a test step failure message indicating that the expected value wasn't selected.\n6. If the dropdown is not displayed, it logs a test step failure message indicating that the dropdown is not present.\n\nThe method also catches any exceptions that may occur during execution and logs a test step failure message with the error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInFatherMotherTextField",
        "code": "public void enterValueInFatherMotherTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]//../following-sibling::input\";\n\t\t\twaitForElement(field, 25);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `enterValueInFatherMotherTextField`, allows you to enter a specified value into a text field on a web page. The method takes two parameters: `labelName` and `value`. \n\nThe method first constructs an XPath expression based on the provided label name. It then uses this XPath expression to locate the corresponding text field, scrolling it into view if necessary. If the field is displayed, it highlights the field, enters the specified value, and verifies that the entry was successful. If the field is not present, the method fails the test step.\n\nIf any exceptions occur during the execution of the method (e.g., if the field cannot be found or entered), the method catches them and reports a failure in entering the value.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInSearchFMS",
        "code": "public void enterValueInSearchFMS(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div/input[@type='search']\";\n\t\t\twaitForElement(search, 5);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\tWebElement searchBtn = findWebElement(search);\n\t\t\t\tsearchBtn.sendKeys(Keys.ENTER);\n\t\t\t\tActions builder = new Actions(driver);\n\t\t\t\tbuilder.sendKeys(Keys.ENTER);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInSearchFMS`, is used to enter a given value into a search field on a web page. It takes a `String` parameter `value` which represents the value to be entered in the search field.\n\nHere's what the method does:\n\n1. It tries to locate an element with the specified XPath (`search`) and waits for it to be displayed within 5 seconds.\n2. If the element is found, it enters the given `value` into the search field using the `typeIn` method.\n3. It then clicks the search button (assuming there's a search button) by sending an Enter key press using `Keys.ENTER`.\n4. If any exception occurs during this process, it catches the exception and marks the test step as failed.\n\nThe method also includes some error handling to ensure that if the search field is not present on the page, or if there are any other issues, the test will fail with an appropriate message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOn_moreBtn_Options",
        "code": "public void clickOn_moreBtn_Options(String labelName) {\n\t\ttry {\n\t\t\tString more_btn = \"More Buttton#xpath=//button[text()='More']\";\n\n\t\t\tString field = labelName\n\t\t\t\t\t+ \"#xpath=//button[text()='More']/following-sibling::ul//li//community_navigation-global-navigation-item//a//span[text()='\"\n\t\t\t\t\t+ labelName + \"']\";\n\t\t\twaitForElement(more_btn, 25);\n\t\t\tif (isElementDisplayed(more_btn, 5)) {\n\t\t\t\tclickOn(more_btn);\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tclickOnSpecialElement(field);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to clickon More button\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate More button \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickOn_moreBtn_Options`, is used to interact with a web page element that has the label name provided as an input parameter. The method attempts to locate and click on a \"More\" button, then checks if a specific field related to the given label name is displayed. If the field is not present, it fails the test step and highlights the element using a high-lighting method.\n\nHere's a breakdown of what the method does:\n\n1. It takes a `String` parameter named `labelName`.\n2. It defines two string variables: `more_btn` and `field`. The `more_btn` variable is an XPath expression that targets the \"More\" button, while the `field` variable constructs an XPath expression to target a specific field related to the given `labelName`.\n3. It uses a `try-catch` block to execute the following steps:\n\t* Waits for the \"More\" button to be displayed using the `waitForElement` method.\n\t* Checks if the \"More\" button is actually displayed using the `isElementDisplayed` method.\n\t* If the button is displayed, clicks on it using the `clickOn` method.\n\t* If the field related to the given `labelName` is not present, fails the test step and highlights the element using a high-lighting method.\n4. If any exception occurs during the execution of these steps, it catches the exception and fails the test step with an error message.\n\nIn summary, this method is used to interact with web page elements related to a specific label name, and it provides some basic error handling for when things don't go as expected.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyCreatedOpportunityIsPresent",
        "code": "public void verifyCreatedOpportunityIsPresent(String value) {\n\t\ttry {\n\t\t\tString txt_label = \"More Buttton#xpath=//span[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(txt_label, 10);\n\t\t\tif (isElementDisplayed(txt_label, 4)) {\n\t\t\t\tmanualScreenshot(\"Created Opportunity is displayed as expected :\" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Created Opportunity is not dispalyed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Created Opportunity \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCreatedOpportunityIsPresent`, verifies that a created opportunity with the specified value is present on the page. It uses Selenium WebDriver's `waitForElement` and `isElementDisplayed` methods to check if an element with the specified XPath (containing the given value) is displayed within a certain time limit. If the element is displayed, it takes a manual screenshot. If not, it marks the test step as failed. The method also catches any exceptions that may occur during execution and marks the test step as failed if an exception occurs.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyCreatedLeadIsPresent",
        "code": "public void verifyCreatedLeadIsPresent(String value) {\n\t\ttry {\n\t\t\tString txt_label = \"Lead #xpath=//a[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(txt_label, 10);\n\t\t\tif (isElementDisplayed(txt_label, 4)) {\n\t\t\t\thighLighterMethod(txt_label);\n\t\t\t\tmanualScreenshot(\"Created Lead is displayed as expected :\" + value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Created Lead is not dispalyed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Created Opportunity \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCreatedLeadIsPresent`, verifies that a created lead is present on the UI. \n\nIt takes a String parameter `value` which represents the name of the lead to be verified.\n\nThe method uses an XPath expression to locate an element with text containing the provided value. It then waits for this element to appear (up to 10 seconds) and checks if it's displayed within 4 seconds. If the element is displayed, it highlights the element using a `highLighterMethod` and takes a manual screenshot with a message indicating that the created lead is displayed as expected. \n\nIf the element is not displayed or an exception occurs during the verification process, the method fails the test step with an appropriate error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyCreatedLeadIsNotPresent",
        "code": "public void verifyCreatedLeadIsNotPresent(String value) {\n\t\ttry {\n\t\t\tString txt_label = \"Lead #xpath=//a[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(txt_label, 10);\n\t\t\tif (isElementDisplayed(txt_label, 4)) {\n\t\t\t\thighLighterMethod(txt_label);\n\t\t\t\ttestStepFailed(\"Created Lead is displayed as expected :\" + value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Created Lead is not dispalyed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Created Opportunity \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyCreatedLeadIsNotPresent`, verifies that a created lead with the given value is not present on the page. \n\nHere's what it does:\n\n- It constructs an XPath expression to locate an element containing the given value.\n- It waits for this element to be displayed (up to 10 seconds).\n- If the element is displayed, it highlights the element and marks the test as failed because a created lead should not be present on the page.\n- If the element is not displayed, it takes a manual screenshot of the page.\n- If any exception occurs during these steps, it marks the test as failed with an error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyOpportunityIsNotDispalyed",
        "code": "public void verifyOpportunityIsNotDispalyed(String value) {\n\t\ttry {\n\t\t\tString txt_label = \"More Buttton#xpath=//span[contains(text(),'\" + value + \"')]\";\n\t\t\twaitForElement(txt_label, 10);\n\t\t\tif (!isElementDisplayed(txt_label, 4)) {\n\t\t\t\tmanualScreenshot(\"Created Opportunity is not dispalyed as expected\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"Created Opportunity is displayed as expected :\" + value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify Created Opportunity \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyOpportunityIsNotDispalyed`, verifies that a specific opportunity is not displayed on the screen. It takes a string value as input, which represents the opportunity to be verified.\n\nHere's what the method does:\n\n1. It constructs an XPath expression using the provided value and a hardcoded text label \"More Button\".\n2. It uses a `waitForElement` method (not shown in this snippet) to wait for the element matching the constructed XPath expression.\n3. If the element is not displayed within a certain time limit (4 seconds), it takes a manual screenshot with a message indicating that the created opportunity was not displayed as expected.\n4. If the element is displayed, it also takes a manual screenshot with a message indicating that the created opportunity was displayed as expected along with the provided value.\n\nIf any exception occurs during the execution of this method, it catches the exception and logs a failure message with the error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonV2",
        "code": "public void clickOnButtonV2(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tdoubleClick(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonV2`, attempts to click on a button with the given name. It uses XPath to locate the button and then checks if it's displayed within 6 seconds. If the button is found and displayed, it performs a double-click action. If the button is not present or cannot be clicked, it logs a test step failure message.\n\nHere are some key features of this method:\n\n1. **Button name**: The method takes a `String` parameter `buttonName`, which is used to construct the XPath expression for locating the button.\n2. **Wait and check**: It uses a `waitForElement` method (not shown) to wait for the element to be present within 15 seconds, and then checks if it's displayed using `isElementDisplayed` (also not shown).\n3. **Double-click**: If the button is found and displayed, it performs a double-click action using the `doubleClick` method (not shown).\n4. **Error handling**: The method catches any exceptions that occur during execution and logs a test step failure message with the error message.\n5. **Test step failure**: If the button is not present or cannot be clicked, the method logs a test step failure message with the name of the button.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "ClickOnAddFileLink",
        "code": "public void ClickOnAddFileLink() {\n\t\ttry {\n\t\t\tString link = \"#xpath=//span[text()='Add File']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getsublink\" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, named `ClickOnAddFileLink`, attempts to click on an \"Add File\" link on a webpage. Here's what it does:\n\n1. It defines the XPath of the link as `//span[text()='Add File']`.\n2. It uses a `waitForElement` method (not shown in this snippet) to wait for the element to be present on the page, up to 10 seconds.\n3. If the element is displayed within 5 seconds, it attempts to click on it using a `clickOnSpecialElement` method (also not shown).\n4. If the link is not present or the click operation fails, it marks the test step as failed with an error message.\n\nThe method also catches any exceptions that may occur during execution and marks the test step as failed with an error message if one occurs.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyproductStage",
        "code": "public void verifyproductStage() {\n\t\ttry {\n\t\t\tString link = \"#xpath =//span[text()='ERROR: File status is Ready for Dispatch and Branch Outward action cannot be processed.']\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\ttestStepPassed(\"File status is ready for dospatch\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"File status is not ready for dospatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in file stage verification \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "Here is a brief description of the Java method:\n\n`verifyproductStage()`: This method verifies that a product is at a specific stage (\"Ready for Dispatch\") and checks if an expected error message is displayed. It uses Selenium WebDriver's `waitForElement()` and `isElementDisplayed()` methods to wait for and check the presence of the error message, respectively. If the message is present, it marks the test step as passed; otherwise, it fails the test step with a corresponding error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInSearchField",
        "code": "public void enterValueInSearchField(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 10);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\tString searchValue = value\n\t\t\t\t\t\t+ \"#xpath=//div[@class='listContent']/ul//li/a[contains(@class,'TYPEAHEAD')]\";\n\t\t\t\twaitForElement(searchValue, 10);\n\t\t\t\tclickOn(searchValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}\n\n\t/**\n\t * Author - vetri\n\t * \n\t * @createDate 16/12/2019 Description of method - To click the opportunity Name.\n\t * @param value\n\t */",
        "description": "This Java method, `enterValueInSearchField`, is used to enter a given value into a search field on a web page. It uses Selenium WebDriver and TestNG for automation testing.\n\nThe method takes a `String` parameter `value` which represents the text to be entered in the search field. \n\nHere's what it does:\n\n1. Waits for the search field element to be present on the page.\n2. If the search field is displayed, enters the given `value` into the field using the `typeIn` method.\n3. Waits for a specific list of results (containing links with class 'TYPEAHEAD') to appear.\n4. Clicks on one of those list items.\n\nIf any of these steps fail (e.g., the search field is not present), it reports a failure and ends the test step.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCaseLink",
        "code": "public String clickOnCaseLink(String customerlink) {\n\t\tString LinkText = null;\n\t\ttry {\n\t\t\tString link = customerlink + \"#xpath=//th[normalize-space()='\" + customerlink\n\t\t\t\t\t+ \"']/../../..//tbody/tr/td[1]/a\";\n\t\t\twaitForElement(link, 10);\n\t\t\tif (isElementDisplayed(link, 5)) {\n\t\t\t\tLinkText = getText(link);\n\t\t\t\tmanualScreenshot(LinkText + \"Opportunity Id is Present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerlink + \" Opportunity Id is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t\treturn LinkText;\n\t}",
        "description": "This Java method, `clickOnCaseLink`, takes a string parameter `customerlink` and performs the following actions:\n\n1. Builds an XPath expression by appending `#xpath=` to the input `customerlink` and adding additional elements to identify the target link.\n2. Waits for the element with the constructed link (using `waitForElement`) for 10 seconds.\n3. Checks if the element is displayed using `isElementDisplayed` within 5 seconds.\n4. If the element is displayed, extracts the text from the link using `getText`.\n5. Takes a manual screenshot with the extracted text as the filename (if the element is displayed).\n6. Returns the extracted text (`LinkText`) or an error message if the element is not displayed.\n\nThe method also includes exception handling to catch any errors that may occur during execution and report them as test step failures.",
        "input": [
            "String customerlink"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButton_1",
        "code": "public void clickOnButton_1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton_1`, simulates a mouse click on a web element with the specified name (`buttonName`). It uses Selenium WebDriver and Apache Commons Lang to:\n\n1. Create an XPath expression to locate the button based on its text.\n2. Wait for the button to be displayed (up to 15 seconds).\n3. Check if the button is actually present (after 6 seconds of waiting).\n4. If the button is present, it uses Selenium's `Actions` class to move the mouse cursor to the button and click it.\n5. Logs a test step as passed or failed depending on whether the button was successfully clicked.\n\nThe method catches any exceptions that occur during execution and logs a failure message with the exception details if an error occurs.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getStatusAfterexecuteWorkBenhScript",
        "code": "public void getStatusAfterexecuteWorkBenhScript() {\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@id='codeViewPortContainer']\";\n\t\t\twaitForPageToLoad();\n\t\t\tif (isElementDisplayed(Element, 10)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tmanualScreenshot(\"\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getStatusAfterexecuteWorkBenhScript.Exception\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getStatusAfterexecuteWorkBenhScript()`, appears to be a part of an automated testing framework. The method is designed to execute a set of actions after executing a workbench script.\n\nThe method attempts to:\n\n1. Wait for the page to load.\n2. Check if an element with the specified XPath (`#xpath=//div[@id='codeViewPortContainer']`) is displayed within a certain time limit (10 seconds).\n3. If the element is displayed, it will:\n\t* Scroll to the element.\n\t* Highlight the element using a `highLighterMethod()`.\n\t* Take a manual screenshot.\n\nIf any of these steps fail or an unexpected exception occurs, the method will catch the exception and report a test step failure with a descriptive message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyButtonIsPresentOrNot",
        "code": "public void verifyButtonIsPresentOrNot(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\twaitForElement(button, 15);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\ttestStepPassed(buttonName + \" button is not present\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyButtonIsPresentOrNot`, checks if a specific button with the given name is present on the webpage or not. It uses an XPath expression to locate the button and then verifies its presence using a timeout of 15 seconds. If the button is found within the specified time, it marks the test step as passed; otherwise, it fails the test step. Additionally, if any exception occurs during the execution, it catches the error and marks the test step as failed with an appropriate message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyCheckbox",
        "code": "public Boolean verifyCheckbox(String checkboxLabel, boolean check) {\n\t\tBoolean flag = null;\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (check) {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already checked\");\n\t\t\t\t\tflag = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(checkboxLabel + \" checkbox is already unchecked\");\n\t\t\t\tflag = false;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, named `verifyCheckbox`, checks the status of a checkbox with the given label and verifies if it matches the expected state. \n\nThe method takes two parameters: `checkboxLabel` (the text label of the checkbox) and `check` (a boolean indicating whether the checkbox should be checked or not).\n\nIt first constructs an XPath expression to locate the checkbox element based on its label. Then, it waits for the checkbox to appear using a separate method called `waitForElement`. \n\nNext, it checks if the checkbox is already in the expected state (checked or unchecked) and logs a test step message accordingly. If the checkbox is not in the expected state, it fails the test.\n\nThe method returns a boolean value indicating whether the checkbox was found and its status matched the expected state.",
        "input": [
            "String checkboxLabel",
            "boolean check"
        ],
        "output": "Boolean"
    },
    {
        "class_name": "Search",
        "function_name": "gettingLabelValve",
        "code": "public String gettingLabelValve(String lableName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = lableName + \"#xpath=//span[text()='\" + lableName\n\t\t\t\t\t+ \"']//parent::div//following-sibling::div/span/span\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tvalue = getText(field);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `gettingLabelValve`, is used to retrieve the text value of a specific label on a web page. It takes a string parameter `lableName` which represents the name of the label.\n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the provided label name with some predefined strings.\n2. It uses this XPath expression to locate the label element and waits for the element to be displayed (up to 10 seconds).\n3. If the element is displayed, it retrieves the text value of the element using the `getText` method.\n4. If any exceptions occur during the process, it catches them and prints the stack trace.\n5. Finally, it returns the retrieved label value as a string.\n\nThe method can be used to fetch the text values of labels on web pages, which is useful in various automation scenarios where you need to verify or extract label information.",
        "input": [
            "String lableName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "verifyFrameIsDisplayed",
        "code": "public void verifyFrameIsDisplayed(String framename) {\n\t\ttry {\n\t\t\tString searchField = framename + \" #xpath=//iframe[@name='\" + framename + \"']\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementPresent(searchField)) {\n\t\t\t\tmanualScreenshot(getText(searchField) + \" field is present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(getText(framename) + \"field is not present\");\n\t\t}\n\t}",
        "description": "This Java method, `verifyFrameIsDisplayed`, verifies if a specified frame (iframe) with the given name is displayed in the application. It uses Selenium WebDriver's `waitForElement` and `isElementPresent` methods to check for the presence of the frame. If the frame is present, it takes a manual screenshot with a message indicating that the frame is present. If an exception occurs or the frame is not found within the specified time (10 seconds), it marks the test step as failed and reports an error message.",
        "input": [
            "String framename"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifySuccessMessageInCase",
        "code": "public void verifySuccessMessageInCase(String message) {\n\t\ttry {\n\t\t\tString successPopup = \"Success Header#xpath=//span[text()='\" + message + \"']\";\n\t\t\twaitForElement(successPopup, 6);\n\t\t\tif (isElementDisplayed(successPopup, 4)) {\n\t\t\t\ttestStepPassed(\"Success Popup appeared. \" + message);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Cannot able to capture success popup\" + message);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifySuccessMessageInCase`, is used to verify if a specific success message appears on the UI after some operation. The method takes a `String` parameter `message` which represents the expected success message.\n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating a fixed string (\"Success Header#xpath=\") with the input `message`. This XPath expression is used to locate an element on the UI that contains the expected success message.\n2. It then uses a `waitForElement` method (not shown in this snippet) to wait for the element matching the constructed XPath expression to appear within a certain time limit (6 seconds).\n3. If the element is displayed, it checks if the text of the element matches the input `message`. If true, it marks the test step as passed with a message indicating that the success popup appeared with the expected message.\n4. If the element is not displayed or the text does not match the expected message, it marks the test step as failed with an error message indicating that the success popup could not be captured.\n\nIf any exception occurs during the execution of this method, it catches the exception and marks the test step as failed with a message containing the caught exception's message.",
        "input": [
            "String message"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButton1",
        "code": "public void clickOnButton1(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//button[normalize-space()='\" + buttonName + \"']\";\n\t\t\tString button1 = buttonName + \"#xpath=//li[normalize-space()='\" + buttonName + \"']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\tif (isElementDisplayed(button, 40)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\ttestStepPassed(\"Click On :\" + buttonName);\n\t\t\t} else if (isElementDisplayed(button1, 30)) {\n\t\t\t\tWebElement ele = findWebElement(button1);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(ele).click().perform();\n\t\t\t\ttestStepPassed(\"Click On :\" + buttonName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButton1`, is used to simulate a mouse click on a web element with the specified name (`buttonName`). The method uses Selenium WebDriver and Actions class to perform the click action. \n\nIt first constructs two XPath expressions: one for a button and another for a list item (assuming both have the same text as `buttonName`), then attempts to find the corresponding web element using these XPaths.\n\nIf the button is displayed within 40 seconds, it performs a mouse hover and click on the button. If the button is not found but the list item is displayed within 30 seconds, it performs a mouse hover and click on the list item. \n\nIf neither the button nor the list item is found after the specified time, the method fails with an error message stating that the button is not present.\n\nThe method also includes try-catch block to handle any exceptions during execution and logs the result of each step as passed or failed.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getTextandVerifyOnCustomerPageOnFOS",
        "code": "public String getTextandVerifyOnCustomerPageOnFOS() {\n\t\tString valiMsg = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString validation = \"Oppurtunity #xpath=//p[text()='Mobile number validated successfully.']\";\n\t\t\twaitForElement(validation, 10);\n\t\t\tif (isElementDisplayed(validation, 8)) {\n\t\t\t\tvaliMsg = getText(validation);\n\t\t\t\thighLighterMethodManualScreenShot(validation, \"Validation Message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn valiMsg;\n\t}",
        "description": "This Java method, named `getTextandVerifyOnCustomerPageOnFOS`, appears to be part of a web automation test. Its primary function is to retrieve and verify the text content on a specific page (likely a customer-facing page) of a Financial Operations System (FOS).\n\nHere's a breakdown of what the method does:\n\n1. Waits for the page to load and then waits for 5 seconds.\n2. Checks if an element with a specific XPath (`//p[text()='Mobile number validated successfully.']`) is displayed within 10 seconds. This element seems to be related to the validation of a mobile number.\n3. If the element is displayed, it retrieves the text content of that element and stores it in a variable `valiMsg`.\n4. Takes a manual screenshot of the page using the `highLighterMethodManualScreenShot` method, highlighting the element of interest, and labels it as \"Validation Message\".\n5. If the element is not displayed within 8 seconds, the test fails with an error message indicating that the \"Opputunity Name link\" is not present.\n6. In case any exception occurs during execution (e.g., network issues or timeouts), the method catches the exception and reports a failure with an error message.\n\nThe method returns the retrieved text content (`valiMsg`) as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInOTPFieldOnFOSCustomerPage",
        "code": "public void enterValueInOTPFieldOnFOSCustomerPage(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//input\";\n\t\t\twaitForElement(field, 30);\n\t\t\tscrollbycordinates(field);\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\ttypeIn(field, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInOTPFieldOnFOSCustomerPage`, is used to enter a value into an OTP field on the FOS Customer Page. \n\nIt takes two parameters: `labelName` and `value`. The `labelName` parameter is used to identify the OTP field, and the `value` parameter is the actual value that needs to be entered.\n\nThe method first constructs an XPath expression based on the `labelName`, then waits for the element to be present using the `waitForElement` method. If the element is found, it scrolls to the element using the `scrollbycordinates` method and enters the provided `value` into the field using the `typeIn` method.\n\nIf the element is not found or if there's an exception during execution, the method catches the exception and marks the test step as failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonSetUp",
        "code": "public void clickOnButtonSetUp() {\n\t\ttry {\n\t\t\tString button = \"Setup #xpath=//div[contains(@class,'headerTrigger')]//span[text()='Setup']\";\n\t\t\tString SelectSetUp = \"Setup for current app #xpath=//li[@id='related_setup_app_home']\";\n\t\t\tWebElement txtUsername = findWebElement(button);\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(txtUsername).click().perform();\n\t\t\t\twaitForElement(SelectSetUp, 30);\n\t\t\t\tclickOnSpecialElement(SelectSetUp);\n\t\t\t\ttestStepPassed(\"Click On : SetUp\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Setup button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonSetUp()`, attempts to click on a specific setup button on a web page. The method uses Selenium WebDriver and the following steps:\n\n1. It locates the setup button using an XPath expression.\n2. It waits for the element to be displayed (up to 30 seconds).\n3. If the element is displayed, it moves the mouse cursor over the button and clicks it using the `Actions` class.\n4. After clicking the button, it waits again for another element (related setup app home) to be displayed.\n5. It then clicks on this special element using a separate method (`clickOnSpecialElement()`).\n6. If any of these steps fail or take too long, the method will report the failure and mark the test step as failed.\n\nThe method also includes some error handling, catching any exceptions that may occur during execution and reporting them as failures if they do.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "chooseQCOwnerFromSearchAndListField",
        "code": "public void chooseQCOwnerFromSearchAndListField(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\tString cancel = \"Press Delete to Remove#xpath=//span[text()='Press Delete to Remove']/preceding-sibling::span\";\n\t\t\tclickOn(cancel);\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div[@role='option'][1]/span[contains(text(),'\" + value + \"')] \";\n\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\tclickOn(search_icn);\n\t\t\t\tif (isElementDisplayed(lnk_zipCity, 9)) {\n\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t} else {\n\t\t\t\t\tmanualScreenshot(\"BFL Brance is not displayed\");\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tclickOn(cancel);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseQCOwnerFromSearchAndListField`, appears to be a part of an automation script that interacts with a web application. The method takes two string parameters: `labelName` and `value`.\n\nThe method's purpose is to choose a value from a search field and list field in the application. Here's a high-level overview of what it does:\n\n1. It constructs three XPath expressions:\n\t* `searchField`: an input element with the given `labelName` as its label.\n\t* `lnk_zipCity`: an anchor element with the given `value` as its title.\n\t* `cancel`: a span element with the text \"Press Delete to Remove\" and its preceding sibling.\n2. It clicks on the cancel button to potentially remove any previously selected values.\n3. If the search field is displayed, it types in the value into the search field and waits for the search results to appear.\n4. It then clicks on the search result that matches the given `value`.\n5. If the link with the matching value is displayed, it clicks on it; otherwise, it takes a manual screenshot and waits for 2 seconds before clicking the cancel button again.\n\nThe method catches any exceptions that may occur during execution and reports failures using test step failure methods.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "changeStageInFMS",
        "code": "public void changeStageInFMS(String stageOption) {\n\t\ttry {\n\t\t\tString readyForDispatch_btn = \"Ready For Dispatch#xpath=//span[text()='Ready for Dispatch']\";\n\n\t\t\tString field = stageOption + \"#xpath=//div[@class='select-options']//li/a[contains(text(),'\" + stageOption\n\t\t\t\t\t+ \"')]\";\n\t\t\twaitForElement(readyForDispatch_btn, 20);\n\t\t\tif (isElementDisplayed(readyForDispatch_btn, 20)) {\n\t\t\t\tWebElement button = findWebElement(readyForDispatch_btn);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.moveToElement(button).doubleClick().perform();\n\t\t\t\tif (isElementDisplayed(readyForDispatch_btn, 3)) {\n\t\t\t\t\taction.moveToElement(button).click().perform();\n\t\t\t\t\tclickOn(field);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(stageOption + \" field is not present\");\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to click on Ready For Dispatch\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in validate Ready For Dispatch \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `changeStageInFMS`, is used to change the stage in a system called FMS (likely a financial management system). The method takes a string parameter `stageOption` which represents the new stage option to be selected. \n\nThe method first waits for an element with the text \"Ready For Dispatch\" and then checks if it's displayed within 20 seconds. If the element is displayed, it performs a double click on the element, then checks again if the element is displayed within 3 seconds. If it is, it clicks on another element that matches the `stageOption` parameter. \n\nIf the initial check fails or if the subsequent checks fail, the method marks the test step as failed and provides an error message. The method also includes a catch block to handle any exceptions that might occur during its execution.",
        "input": [
            "String stageOption"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueForHoldType",
        "code": "public void selectValueForHoldType(String value) {\n\t\ttry {\n\t\t\ttestStepInfo(\"Select the value \" + value + \"from Hold Type Dropdown\");\n\t\t\tString field = \"#xpath=//span[text()='Hold Type']//../following-sibling::div//select\";\n\t\t\tString fieldvalue = \"#xpath=//span[text()='Hold Type']//../following-sibling::div//select/option[text()='\"\n\t\t\t\t\t+ value + \"']\";\n\t\t\twaitForElement(field, 8);\n\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tclickOn(field);\n\t\t\t\tif (isElementDisplayed(fieldvalue, 6)) {\n\t\t\t\t\tclickOn(fieldvalue);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(value + \" value is not present in the dropdown. \");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Hold type dropdown is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueForHoldType \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueForHoldType`, is used to select a specific value from a dropdown list labeled \"Hold Type\". The method takes a `String` parameter `value` representing the desired value to be selected. \n\nThe method first tries to perform a test step with a message indicating the selection of the specified value. It then locates the \"Hold Type\" dropdown field and waits for it to be displayed. If the dropdown is present, it scrolls to the field, clicks on it to open the list, and then selects the desired value if it's available in the list. If the value is not found in the list, the method fails with an error message. \n\nIf the \"Hold Type\" dropdown is not present or any other exception occurs during the execution of the method, it also fails with a corresponding error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueForHoldRemarkTextField",
        "code": "public void enterValueForHoldRemarkTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tchar ch = '\"';\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),\" + ch + \"\" + labelName + \"\" + ch\n\t\t\t\t\t+ \")]//../following-sibling::input\";\n\t\t\twaitForElement(field, 8);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given `value` into a text field on a web page that has a label matching the provided `labelName`. The method uses Selenium WebDriver to interact with the browser. Here's a step-by-step breakdown of what it does:\n\n1. It constructs an XPath expression to locate the text field based on its label.\n2. It waits for the element to be displayed using the `waitForElement` method.\n3. If the element is displayed, it scrolls the page to bring the text field into view using the `scrollToWebElement` method.\n4. It highlights the text field using the `highLighterMethod` (presumably a custom method) to visually indicate that the field has been targeted.\n5. It enters the given `value` into the text field using the `typeIn` method.\n6. If the element is not displayed, it fails the test step with an error message indicating that the label field is not present.\n\nThe method also catches any exceptions that may occur during execution and fails the test step if one occurs, providing a detailed error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueForHoldType2",
        "code": "public void selectValueForHoldType2(String value) {\n\t\ttry {\n\t\t\ttestStepInfo(\"Select the value \" + value + \"from Hold Type Dropdown\");\n\t\t\tselectFromDropdown(\"#xpath=//label/span[text()='Hold Type 2']/parent::label/following-sibling::div//select\",\n\t\t\t\t\tvalue);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueForHoldType2 \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to select a value from a dropdown menu with the label \"Hold Type 2\" and then verify that the selected value matches the provided input `value`. The method uses Selenium WebDriver's `selectFromDropdown` method to perform the selection. If an exception occurs during the execution of this method, it will catch the exception and report a test step failure with the error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueForHoldType3",
        "code": "public void selectValueForHoldType3(String value) {\n\t\ttry {\n\t\t\ttestStepInfo(\"Select the value \" + value + \"from Hold Type Dropdown\");\n\t\t\tselectFromDropdown(\"#xpath=//label/span[text()='Hold Type 3']/parent::label/following-sibling::div//select\",\n\t\t\t\t\tvalue);\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueForHoldType2 \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueForHoldType3`, is used to select a value from a dropdown menu with the label \"Hold Type 3\". The method takes a string parameter `value` which represents the option to be selected. \n\nIt first logs a test step information message indicating that it will select the specified value from the dropdown. Then, it uses an automation tool (likely Selenium) to select the value from the dropdown using an XPath expression. If any exception occurs during this process, the method catches it and logs a failed test step with the error message.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "scrollSlideBar",
        "code": "public void scrollSlideBar() {\n\t\tJavascriptExecutor je = (JavascriptExecutor) driver;\n\t\tWebElement element = driver.findElement(By.xpath(\"//button[text()='Edit']\"));\n\t\tje.executeScript(\"arguments[0].scrollIntoView(true);\", element);\n\t}",
        "description": "This Java method, `scrollSlideBar`, uses Selenium WebDriver to scroll an HTML element into view. The method takes no parameters and returns void.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It gets a reference to the `JavascriptExecutor` interface, which is used to execute JavaScript code in the browser.\n2. It finds a specific web element on the page using its XPath locator (`//button[text()='Edit']`). The element is expected to have the text \"Edit\" inside it.\n3. It uses the `executeScript` method of the `JavascriptExecutor` interface to execute a JavaScript command that scrolls the specified element into view.\n\nIn other words, this method helps to bring an HTML element into view when it's not visible in the browser due to scrolling or other layout issues.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "isElementDisplayedInPage",
        "code": "public Boolean isElementDisplayedInPage(String labelname) {\n\t\tBoolean flag = false;\n\t\ttry {\n\t\t\tString searchField = labelname + \" #xpath=//span[contains(text(),'\" + labelname + \"')]\";\n\t\t\twaitForElement(searchField, 8);\n\t\t\tif (isElementPresent(searchField)) {\n\t\t\t\ttestStepInfo(labelname + \"field is present\");\n\t\t\t\tmanualScreenshot(labelname + \" field is present\");\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(labelname + \"field is not present\");\n\t\t\tmanualScreenshot(labelname + \" field is not present\");\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `isElementDisplayedInPage`, checks if an element with the specified label name is displayed on a web page. It uses a combination of XPath and Selenium WebDriver's `waitForElement` and `isElementPresent` methods to perform this check.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter, `labelname`, which represents the text value of the element to be searched for.\n2. A string is constructed using the provided label name and an XPath expression that searches for a `<span>` element containing the specified text.\n3. The `waitForElement` method is called with the constructed search string and a timeout of 8 seconds, allowing the element to load or become visible.\n4. If the element is present after waiting, the method checks if it's actually displayed using `isElementPresent`.\n5. If the element is both present and displayed, the method logs a test step info message indicating that the field is present, takes a manual screenshot, and sets a boolean flag to `true`.\n6. If an exception occurs during the search or visibility check, the method catches it and logs a test step info message indicating that the field is not present, then takes a manual screenshot.\n7. The method returns the value of the boolean flag, which indicates whether the element was found and displayed.\n\nIn summary, this method helps verify if an element with a specific label name is visible on a web page, and provides logging and screenshot capabilities to aid in debugging or reporting issues.",
        "input": [
            "String labelname"
        ],
        "output": "Boolean"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueForHoldType",
        "code": "public void selectValueForHoldType(String Label, String value) {\n\t\ttry {\n\t\t\tString dropDown = Label + \"#xpath=//label/span[text()='\" + Label\n\t\t\t\t\t+ \"']/parent::label/following-sibling::div//select\";\n\t\t\twaitForElement(dropDown, 10);\n\t\t\tif (isElementDisplayed(dropDown)) {\n\t\t\t\tscrollToWebElement(dropDown);\n\t\t\t\tselectFromDropdown(dropDown, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + value + \" in \" + Label + \" DropDown.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValue in \" + Label + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueForHoldType`, is used to select a value from a dropdown list based on the given label and value. It takes two parameters: `Label` and `value`. \n\nThe method first constructs an XPath expression that targets the dropdown element associated with the given label. It then waits for the element to be displayed, scrolls to it if necessary, and selects the specified value from the dropdown.\n\nIf any errors occur during this process (e.g., the element is not found or cannot be scrolled to), the method will fail the test step and report an error message.",
        "input": [
            "String Label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCustomerLink",
        "code": "public void clickOnCustomerLink(String customerName) {\n\t\ttry {\n\t\t\tString link = customerName + \"#xpath=//div[contains(@class,'readonly')]/span//..//a[text()='\" + customerName\n\t\t\t\t\t+ \"']\";\n\t\t\twaitForElement(link, 25);\n\t\t\tif (isElementDisplayed(link)) {\n\t\t\t\tclickOnSpecialElement(link);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(customerName + \" link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnLink \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCustomerLink`, attempts to click on a specific customer link on a webpage. The method takes a `customerName` as input and uses this name to construct an XPath expression that targets the corresponding link.\n\nHere's what the method does:\n\n1. It constructs an XPath expression by concatenating the `customerName` with a predefined string, which includes HTML elements like `div`, `span`, and `a`. This expression points to the specific customer link.\n2. It uses a `waitForElement` method to wait for the element matching the constructed XPath expression to be displayed (up to 25 seconds).\n3. If the element is displayed, it calls another method `clickOnSpecialElement` to click on the element.\n4. If the element is not displayed after waiting, it fails the test step with a message indicating that the link is not present.\n5. If any exception occurs during these steps, it catches the exception and fails the test step with an error message.\n\nIn summary, this method attempts to interactively click on a specific customer link based on the provided `customerName`.",
        "input": [
            "String customerName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyDocumentSuccessMessage",
        "code": "public void verifyDocumentSuccessMessage() {\n\t\ttry {\n\t\t\tString successPopup = \"Success message#xpath=//div[contains(@class,'forceVisual')]/div/div[contains(@class,'success')]\";\n\t\t\twaitForElement(successPopup, 6);\n\t\t\tif (isElementDisplayed(successPopup, 4)) {\n\t\t\t\ttestStepFailed(\"Success Popup appeared. with saving detailes\");\n\t\t\t} else {\n\t\t\t\ttestStepPassed(\"System restricted the user with save the documents\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifySuccessMessage \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDocumentSuccessMessage()`, is used to verify a success message popup after a document operation. It attempts to find the success popup element using XPath and waits for it to appear within a certain time limit (6 seconds). If the popup is displayed, it checks if the expected success message is present and passes the test step if everything looks good. However, if the popup does not appear or the expected message is missing, it fails the test step. Additionally, if any exception occurs during this process, it will also fail the test step with an error message describing the issue.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyElement",
        "code": "public void verifyElement() {\n\t\ttry {\n\t\t\tString button = \"Recall case button#xpath=//div[text()='Recall Case']\";\n\t\t\twaitForElement(button, 6);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\ttestStepPassed(\"Submit to QC case is created successfully.\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Recall case button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Verify recall case \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyElement()`, verifies the presence of a specific element on a webpage. The element being looked for is a button with an XPath locator that matches the string `\"//div[text()='Recall Case']\"`. \n\nThe method first waits for the element to be present using the `waitForElement()` function, and then checks if the element is displayed using the `isElementDisplayed()` function. If the element is found and displayed within a certain time limit (6 seconds), the test step passes with the message \"Submit to QC case is created successfully.\" \n\nIf the element is not present or is not displayed within the specified time, the test step fails with the message \"Recall case button is not present\". \n\nIn the event of any exception occurring during the execution of this method, the test step will fail with a message indicating that the verification failed and including the error message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCaseNoAndGetNo",
        "code": "public String clickOnCaseNoAndGetNo() {\n\t\tString caseNo = null;\n\t\ttry {\n\t\t\tString button = \"Case Number #xpath=//div[@class='pullToRefresh']//following-sibling::table/tbody/tr[1]/td[1]/a\";\n\t\t\twaitForElement(button, 6);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\tcaseNo = getText(button);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Case number is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOn case number\" + e.getMessage());\n\t\t}\n\t\treturn caseNo;\n\t}",
        "description": "This Java method, named `clickOnCaseNoAndGetNo`, attempts to click on a specific element (identified by an XPath locator) and then retrieve the text value of that element. The method uses various utility methods such as `waitForElement` and `isElementDisplayed` to interact with the UI element. If the element is not displayed or if there's an exception during the process, the method will report a test step failure. The method returns the retrieved text value (the case number) as a String.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "selectOrDeselectBypassCheckBox",
        "code": "public void selectOrDeselectBypassCheckBox(String labelname, String status) {\n\t\ttry {\n\t\t\tString checkBox = labelname + \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']//parent::label//following-sibling::input\";\n\t\t\twaitForElement(checkBox, 10);\n\t\t\tscrollToElement(checkBox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkBox)) {\n\t\t\t\t\tclickOnSpecialElement(checkBox);\n\t\t\t\t\ttestStepPassed(labelname + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(labelname + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\"selectCheckBox failed. Exception: \" + e.toString());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectBypassCheckBox`, is used to select or deselect a checkbox on a web page based on the provided label name and status (either \"check\" or \"uncheck\"). \n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the checkbox element by its label.\n2. It waits for the checkbox to be visible, then scrolls to the element if necessary.\n3. If the status is \"check\", it checks if the box is not already selected and selects it if not. \n   - If the box is already checked, it logs a message indicating that the box is already checked.\n4. If the status is \"uncheck\", it unchecks the box if it's currently checked. \n   - If the box is already unchecked, it logs a message indicating that the box is already unchecked.\n5. It catches any exceptions that occur during execution and writes them to a log file.\n\nThe method returns void, as it does not have a return value.",
        "input": [
            "String labelname",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getdropdownValue",
        "code": "public void getdropdownValue(String label) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + label\n\t\t\t\t\t+ \"']/../following-sibling::div//lightning-formatted-text\";\n\t\t\twaitForElement(Element, 10);\n\t\t\tscrollToWebElement(Element);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tvalue = getText(Element);\n\t\t\t\tmanualScreenshot(label + \" value is \" + value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(label + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getdropdownValue\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `getdropdownValue`, retrieves the value associated with a dropdown menu item labeled with the provided string `label`. It uses Selenium WebDriver to interact with the web page. Here's a step-by-step breakdown of what the method does:\n\n1. It takes a `String` parameter `label` representing the text label of the dropdown menu item.\n2. It initializes a local variable `value` to null.\n3. It attempts to execute the following steps:\n\t* It constructs an XPath expression to locate the element containing the dropdown menu item with the specified `label`.\n\t* It waits for the element to be present on the page using `waitForElement`.\n\t* It scrolls the element into view using `scrollToWebElement`.\n\t* It checks if the element is displayed on the page using `isElementDisplayed`. If it is, it:\n\t\t+ Retrieves the text value of the element using `getText`.\n\t\t+ Takes a manual screenshot with the label and the retrieved value.\n4. If any of these steps fail or an exception occurs, it catches the exception and reports the failure by calling `testStepFailed` with a message indicating that the method failed to get the dropdown value.\n\nIn summary, this method is used to retrieve the value associated with a dropdown menu item on a web page, using Selenium WebDriver and XPath expressions.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInAddressField",
        "code": "public void enterValueInAddressField(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t\tmanualScreenshot(\"Enter:\" + value);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInAddressField`, enters a given value into an input field associated with a specific label name. It uses XPath to locate the input field and then performs the following actions:\n\n1. Waits for the element to be displayed.\n2. Highlights the element using a high-lighting method (not shown in this code snippet).\n3. Types the provided `value` into the input field.\n4. Takes a manual screenshot with a message indicating that the value has been entered.\n\nIf any of these steps fail, it catches the exception and logs a failure message with the error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getValueFromField",
        "code": "public String getValueFromField(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/..//..//span[contains(@class,'uiOutput')]\";\n\t\t\twaitForElement(field, 10);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tvalue = findWebElement(field).getText();\n\t\t\t\tmanualScreenshot(labelName + \" \" + value + \"\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getValueFromField \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getValueFromField`, retrieves the text value of a web element on a page based on a given label name. The method uses Selenium WebDriver to locate the element using XPath, waits for it to be displayed, scrolls into view, highlights it, and then extracts its text content. If the element is not found or an exception occurs during the process, the method takes a manual screenshot with details about the failure. The method returns the extracted value as a String.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnLastOppurtunityNameLink",
        "code": "public String clickOnLastOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 25);\n\t\t\tscrollbycordinates(oppurtunity);\n\t\t\tif (isElementPresent(oppurtunity)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\tclickOn(oppurtunity);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `clickOnLastOppurtunityNameLink()`, is designed to interact with a web page by clicking on the last link containing the text \"B\" within a specific table structure. The method uses various Selenium WebDriver methods such as `waitForElement`, `scrollbycordinates`, `isElementPresent`, `getText`, and `clickOn` to achieve this.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It defines a string variable `oppurtunity` that contains an XPath expression used to locate the last link containing the text \"B\" within a table with a specific class.\n2. The method waits for the element to be present on the page using `waitForElement`.\n3. If the element is found, it scrolls down to the element using `scrollbycordinates` and then checks if the element is still present using `isElementPresent`.\n4. If the element is present, it retrieves the text of the link using `getText`, scrolls back up to the element using `scrollToWebElement`, and then clicks on the link using `clickOn`.\n5. If any exception occurs during these steps, the method catches the exception and marks the test step as failed.\n6. Finally, the method returns the text value of the clicked link.\n\nNote that this method is designed to handle exceptions and provide a clear indication if something goes wrong during execution.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "selectOrDeselectCheckbox1",
        "code": "public void selectOrDeselectCheckbox1(String checkboxLabel, String status) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//span[contains(text(),'\" + checkboxLabel\n\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckbox1`, is used to check or uncheck a checkbox on a web page based on the provided label and status. The method uses Selenium WebDriver to interact with the checkbox.\n\nHere's a breakdown of what the method does:\n\n- It takes two parameters: `checkboxLabel` (the text label of the checkbox) and `status` (either \"check\" or \"uncheck\").\n- If the `status` is \"check\", it checks if the checkbox is not already checked. If it's not checked, it clicks on the checkbox to check it.\n- If the `status` is \"uncheck\", it checks if the checkbox is already unchecked. If it's not unchecked, it clicks on the checkbox to uncheck it.\n- The method uses a try-catch block to handle any exceptions that may occur during execution. If an exception occurs, it logs a failure message with the error message.\n\nThe method returns no value (void).",
        "input": [
            "String checkboxLabel",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInCaseSubmit",
        "code": "public boolean verifyAndPrintErrorMessageInCaseSubmit() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[contains(text(),'Error occurred for Case with')]\";\n\t\t\tif (isElementDisplayed(error, 4)) {\n\t\t\t\tflag = true;\n\t\t\t\tmanualScreenshot(\"Error occured for the Case\");\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"There is no error while editing\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInCaseSubmit`, verifies if an error message is displayed on the UI and takes a screenshot if it is. It also logs test step information and fails the test if an exception occurs during execution.\n\nHere's a breakdown of what the method does:\n\n1. Initializes a boolean flag to `false`.\n2. Attempts to execute the following code:\n\t* Checks if an element with the specified XPath (an error message) is displayed on the UI.\n\t* If the element is displayed, sets the flag to `true` and takes a manual screenshot of the error message.\n\t* If the element is not displayed, logs test step information indicating that there was no error.\n3. Catches any exceptions that occur during execution and logs a failed test step with the exception message.\n\nThe method returns the value of the boolean flag.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromSearchAndListField_1",
        "code": "public void chooseValueFromSearchAndListField_1(String labelName, String value) {\n\t\ttry {\n\t\t\tString searchField = labelName + \" #xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\tString lnk_zipCity = value + \"#xpath=//a[@title='\" + value + \"']\";\n\t\t\tString cancel = \"#xpath=//div[@class='modal-footer slds-modal__footer']/button[@title='Cancel']\";\n\t\t\twaitForElement(searchField, 10);\n\t\t\tif (isElementDisplayed(searchField, 5)) {\n\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\ttypeIn(searchField, value);\n\t\t\t\tString search_icn = \"search tab#xpath=//span[text()='\" + labelName\n\t\t\t\t\t\t+ \"']//following::div[@role='option'][1]/span[contains(text(),'\" + value + \"')] \";\n\t\t\t\twaitForElement(search_icn);\n\t\t\t\tclickOn(search_icn);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tif (isElementDisplayed(lnk_zipCity, 8)) {\n\n\t\t\t\t\tclickOn(lnk_zipCity);\n\t\t\t\t} else {\n\t\t\t\t\tclickOn(cancel);\n\t\t\t\t\ttestStepInfo(value + \"is not displayed\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromSearchAndListField_1`, appears to be a part of an automation test for a web application. The method takes two string parameters: `labelName` and `value`. Its primary function is to search for the given value in a dropdown list or search field, select it if found, and then click on a link associated with that value.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It constructs three XPath-based strings:\n\t* `searchField`: an XPath expression that searches for a specific label name and selects the following sibling element (an input field).\n\t* `lnk_zipCity`: an XPath expression that searches for an anchor tag with a title matching the given value.\n\t* `cancel`: an XPath expression that searches for a cancel button in a modal footer.\n\n2. It waits for the `searchField` to be displayed and then scrolls to it if necessary.\n\n3. If the `searchField` is displayed, the method types the given `value` into the field using the `typeIn()` method.\n\n4. It then searches for an option in a dropdown list that matches the given value. If found, it clicks on that option.\n\n5. If the option is not found, it clicks on the cancel button and logs a test step failure message.\n\n6. Finally, if the option is found, it waits for the page to load and then checks if the link associated with the selected value (`lnk_zipCity`) is displayed. If it is, it clicks on that link.\n\nThe method also includes error handling using a `try`-`catch` block. If any exception occurs during the execution of the method, it logs a test step failure message and re-throws the exception.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "SearchOpportunityInSearchField",
        "code": "public void SearchOpportunityInSearchField(String value) {\n\t\ttry {\n\t\t\tString search = \"Search #xpath=//div[@class='uiInput uiAutocomplete uiInput--default']//input\";\n\t\t\twaitForElement(search, 40);\n\t\t\tif (isElementDisplayed(search, 5)) {\n\t\t\t\ttypeIn(search, value);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\tString searchValue = value + \"#xpath=//span[@title='\" + value + \"']/parent::div/parent::a\";\n\t\t\t\twaitForElement(searchValue, 40);\n\t\t\t\tif (isElementDisplayed(searchValue, 5)) {\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t} else {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitTime(7);\n\t\t\t\t\ttypeIn(search, value);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitForElement(searchValue, 40);\n\t\t\t\t\tclickOn(searchValue);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Search field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInSearchField. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `SearchOpportunityInSearchField`, searches for a specific value in a search field on a webpage. \n\nHere's what it does:\n\n1. It waits for the search input field to be displayed.\n2. If the field is present, it types in the given value into the search field and waits for the page to load.\n3. It then checks if the search result containing the typed value is displayed within a certain time frame (5 seconds). \n4. If the result is displayed, it clicks on the search result.\n5. If the result is not displayed after the initial attempt, it refreshes the page, waits for 7 seconds, re-enters the value into the search field and then checks again if the search result is displayed. This process continues until the search result is found or a maximum time limit (40 seconds) is reached.\n6. If at any point during the process, an exception occurs, it reports a test step failure with the error message.\n\nThe method uses various WebDriver methods such as `typeIn`, `waitForElement`, `isElementDisplayed`, `clickOn`, and `refreshPage` to interact with the webpage.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clearAndEnterValueInField",
        "code": "public void clearAndEnterValueInField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//span[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::input\";\n\t\t\t\twaitForElement(field, 10);\n\t\t\t\tWebElement textField = findWebElement(field);\n\t\t\t\tActions actions = new Actions(driver);\n\t\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\t\tscrollToElement(field);\n\t\t\t\t\tscrollToWebElement(field);\n\t\t\t\t\tactions.click(textField).keyDown(Keys.CONTROL).sendKeys(\"a\").keyUp(Keys.CONTROL)\n\t\t\t\t\t\t\t.sendKeys(Keys.BACK_SPACE).build().perform();\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\ttextField.sendKeys(value);\n\t\t\t\t\ttestStepPassed(\"Type \" + value + \" in \" + labelName);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clearAndEnterValueInField`, clears the text in a specific field and then enters a new value. \n\nThe method takes two parameters: `labelName` (the name of the label associated with the field) and `value` (the new value to be entered). \n\nIt first checks if the `value` is not empty, then it constructs an XPath expression to locate the field based on the `labelName`. It waits for the element to be displayed, scrolls to the element if necessary, highlights it, clears the existing text by pressing Ctrl+A and deleting the selection, and finally enters the new `value`.\n\nIf any exceptions occur during the process, it catches them and marks the test step as failed.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getTextInBankingIMPSValidation",
        "code": "public String getTextInBankingIMPSValidation(String LabelName) {\n\t\tString Value = \"\";\n\t\ttry {\n\t\t\tString Element = LabelName\n\t\t\t\t\t+ \"#xpath=//span[text()='Banking-IMPS Validation']/ancestor::div/following-sibling::div//label[text()='\"\n\t\t\t\t\t+ LabelName + \"']//..//input\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\tValue = getAttributeValue(Element, \"value\");\n\t\t\t\tmanualScreenshot(\"[ \" + Value + \" ] is displayed in \" + LabelName);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextInMarketPlaceDO\" + e.getMessage());\n\t\t}\n\t\treturn Value;\n\t}",
        "description": "This Java method, `getTextInBankingIMPSValidation`, is used to retrieve the text value of a specific input element on a web page. The method takes a `String` parameter `LabelName` which is used to construct an XPath expression to locate the desired element.\n\nHere's what the method does:\n\n1. It constructs an XPath expression using the provided `LabelName` and some fixed strings.\n2. It waits for the element to be displayed (up to 5 seconds).\n3. If the element is displayed, it scrolls to the element, highlights it, retrieves its value attribute, and takes a manual screenshot with the value.\n4. If the element is not displayed, it fails the test step with an error message.\n5. In case of any exception during execution (e.g., timeout or element not found), it also fails the test step with an error message.\n\nThe method returns the retrieved text value as a `String`.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "copyAndPasteValueInField",
        "code": "public void copyAndPasteValueInField(String labelName) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName + \"']//..//input\";\n\t\t\twaitForElement(field, 10);\n\t\t\tWebElement textField = findWebElement(field);\n\t\t\tString CopiedText = textField.getAttribute(\"value\");\n\n\t\t\tActions actions = new Actions(driver);\n\t\t\tif (isElementDisplayed(field, 5)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\tactions.doubleClick(textField).doubleClick(textField).keyDown(Keys.CONTROL).sendKeys(\"c\")\n\t\t\t\t\t\t.keyUp(Keys.CONTROL).build().perform();\n\t\t\t\tmanualScreenshot(\"Copy [ \" + CopiedText + \" ] value from \" + labelName);\n\t\t\t\tactions.doubleClick(textField).doubleClick(textField).keyDown(Keys.CONTROL).sendKeys(\"x\")\n\t\t\t\t\t\t.keyUp(Keys.CONTROL).build().perform();\n\t\t\t\tmanualScreenshot(\"Cut [ \" + CopiedText + \" ] value from \" + labelName);\n\t\t\t\tactions.click(textField).keyDown(Keys.CONTROL).sendKeys(\"v\").keyUp(Keys.CONTROL).build().perform();\n\t\t\t\tmanualScreenshot(\"Paste [ \" + CopiedText + \" ] value in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Not able to copy and paste a value in field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in copyAndPasteValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `copyAndPasteValueInField`, is used to copy the current value of a text input field with the given label name and then paste it back into the same field. The method uses Selenium WebDriver and Java's Actions class to perform the following actions:\n\n1. Waits for the element to be displayed\n2. Scrolls to the element if necessary\n3. Copies the current value of the field using keyboard shortcuts (Control+C)\n4. Cuts the copied text using keyboard shortcuts (Control+X)\n5. Pastes the cut text back into the same field using keyboard shortcuts (Control+V)\n\nThe method also takes manual screenshots at each step to verify that the copy and paste operation was successful.\n\nIf the element is not displayed within a certain time limit, the test will fail with an error message \"Not able to copy and paste a value in field\". If any exception occurs during the execution of the method, it will be caught and the test will fail with an error message including the exception message.",
        "input": [
            "String labelName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInPopupWithOutFail",
        "code": "public boolean verifyAndPrintErrorMessageInPopupWithOutFail() {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//span[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tmanualScreenshot(\"Error \" + (i + 1) + \" : \" + errorsList.get(i).getText().trim());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"There is no error while editing\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopupWithOutFail`, attempts to verify the presence of an error message on a web page and print the error messages to a popup or screenshot. If the error message is found, it takes manual screenshots of each error message. If not, it takes a screenshot with a message indicating that there are no errors. The method returns a boolean value indicating whether the verification was successful.",
        "input": [],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "verifyAndPrintErrorMessageInPopupWithOutFailwithExpectedError",
        "code": "public boolean verifyAndPrintErrorMessageInPopupWithOutFailwithExpectedError(String expectedError) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div//strong[text()='Review the errors on this page.']\";\n\t\t\tif (isElementDisplayed(error, 5)) {\n\t\t\t\tflag = true;\n\t\t\t\tString errorList = \"Error list#xpath=//ul[contains(@class,'error')]\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\tString msg = errorsList.get(i).getText().trim();\n\t\t\t\t\tif (msg.equals(expectedError)) {\n\t\t\t\t\t\thighLighterMethod(errorList);\n\t\t\t\t\t\tmanualScreenshot(\n\t\t\t\t\t\t\t\t\"Successfully got the exepcted error message [\" + expectedError + \"] while saving.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"There is no error while editing\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `verifyAndPrintErrorMessageInPopupWithOutFailwithExpectedError`, checks if a specific error message is displayed on the page and prints it to a popup. It takes one parameter, `expectedError`, which is the expected error message to be verified.\n\nThe method first tries to check if an element with a specified XPath is displayed within 5 seconds. If it is, it then verifies that the error list contains the expected error message by iterating through each error message in the list and comparing it to the `expectedError` parameter. If the expected error message is found, it highlights the error list using the `highLighterMethod` and takes a manual screenshot with a descriptive name.\n\nIf the element is not displayed or an exception occurs during the verification process, the method fails the test step and logs an error message. The method returns a boolean flag indicating whether the expected error message was found.",
        "input": [
            "String expectedError"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "selectBundledOppDropdownDefaultValue",
        "code": "public void selectBundledOppDropdownDefaultValue(String dropdownName, String value) {\n\t\ttry {\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t+ \"')]/..//..//div//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 5)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tString dropdownOption = dropdownName + \"#xpath=//span[contains(text(),'\" + dropdownName\n\t\t\t\t\t\t+ \"')]/..//..//div//select//option['\" + value + \"']\";\n\t\t\t\twaitForElement(dropdownOption, 10);\n\t\t\t\tif (isElementDisplayed(dropdownOption, 3)) {\n\t\t\t\t\thighLighterMethod(dropdownOption);\n\t\t\t\t\tselectFromDropdown(dropdown, value);\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(\"Expected value is not selected. Instead of we get \" + getText(dropdown) + \" .\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyBundledOppDropdownDefaultValue \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectBundledOppDropdownDefaultValue`, selects a default value from a dropdown menu. It takes two parameters: the name of the dropdown and the desired default value.\n\nHere's what it does:\n\n1. It constructs an XPath expression to locate the dropdown element.\n2. It waits for the dropdown element to be displayed, then scrolls to it and highlights it (using a high-lighting method).\n3. It clicks on the dropdown to open its options list.\n4. It constructs another XPath expression to locate the specific option with the desired default value.\n5. It waits for this option to be displayed, then highlights it and selects it from the dropdown.\n\nIf any step fails (e.g., the dropdown is not present or the expected value is not selected), it reports a test failure with an error message.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickcustomerLinkInopp",
        "code": "public void clickcustomerLinkInopp(String Value) {\n\t\ttry {\n\n\t\t\tString Element = \"#xpath=//span[@class='slds-form-element__label slds-truncate']//following-sibling::div//a[text()='\"\n\t\t\t\t\t+ Value + \"']\";\n\t\t\twaitForElement(Element, 15);\n\t\t\tif (isElementDisplayed(Element, 7)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to click on a specific link on a webpage. The link is identified by its text value, which is passed as a parameter to the method (`Value`). \n\nThe method first constructs an XPath expression that targets the desired link based on its text value. It then uses this expression to wait for the element to be displayed and clickable (up to 15 seconds). If the element is found and displayed within 7 seconds, it will click on the link.\n\nIf any exception occurs during the execution of the method, it catches the exception and reports a test step failure with the error message.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectDealerPartial",
        "code": "public String selectDealerPartial(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\tString dealerFinnoneCode = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']/..//input\";\n\t\t\t\tdealerFinnoneCode = dealerName.split(\"-\")[0].trim();\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerFinnoneCode + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\ttypeIn(dealer, dealerFinnoneCode);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dealerOption);\n\t\t\t\t\t\twaitTime(2);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Dealer in Search page. Exception :\" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerPartial`, is used to select a dealer from a dropdown list on a web page. It takes a string parameter `dealerName` which contains the name of the dealer and any relevant information (e.g., \"#123\").\n\nThe method first processes the `dealerName` by replacing any \"#\" characters with spaces, if present. Then it waits for 2 seconds before attempting to select the dealer from the dropdown list.\n\nIf the dealer is found in the list, the method scrolls to the element, types in the dealer's FinnOne code (obtained by splitting the `dealerName` at the first \"-\" character), and then clicks on the selected option. If the dealer is not found or the dropdown list is not present, an error message is logged.\n\nThe method returns a string value, but it does not seem to be used anywhere in the code.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCloseButton",
        "code": "public void clickOnCloseButton(String label) {\n\t\ttry {\n\t\t\tString labelname = \"#xpath=//button[@title='\" + label + \"']\";\n\t\t\twaitForElement(labelname, 10);\n\t\t\tif (isElementDisplayed(labelname, 3)) {\n\t\t\t\tscrollToWebElement(labelname);\n\t\t\t\tclickOnSpecialElement(labelname);\n\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Button is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonclosebutton\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCloseButton`, attempts to locate and click on a button with the specified label. The method uses various Selenium WebDriver methods to:\n\n1. Wait for the element to be displayed (up to 10 seconds).\n2. Check if the element is actually displayed (after 3 seconds).\n3. Scroll to the element if it's not already visible.\n4. Click on the special element (button).\n\nIf any of these steps fail, the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "byPassOperatorValidation",
        "code": "public String byPassOperatorValidation() {\n\t\tString errorMessage = \" \";\n\t\ttry {\n\t\t\tString error = \"Error Header#xpath=//div[contains(@class,'toastTitle ')]\";\n\t\t\tif (isElementDisplayed(error, 15)) {\n\t\t\t\tString errorList = \"Error list #xpath=//span[contains(@class,'toastMessage')]\";\n\t\t\t\tList<WebElement> errorsList = findWebElements(errorList);\n\t\t\t\tfor (int i = 0; i < errorsList.size(); i++) {\n\t\t\t\t\terrorMessage = errorsList.get(i).getText().trim();\n\t\t\t\t\tscrollToElement(errorList);\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAndPrintErrorMessage \" + e.getMessage());\n\t\t}\n\t\treturn errorMessage;\n\t}",
        "description": "This Java method, `byPassOperatorValidation`, appears to be part of an automation test script. Its purpose is to:\n\n1. Check if a specific error message element is displayed on the page within a certain time limit (15 seconds).\n2. If the error message is displayed, retrieve the text content of each error message element and store it in a `errorMessage` string.\n3. Scroll to each error message element to ensure they are fully visible.\n\nThe method returns the concatenated `errorMessage` string as its result. \n\nIf any exception occurs during the execution of this method (e.g., if the error message element is not found or an unexpected error occurs), it catches the exception and logs a test step failure with the error message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromDropdown1",
        "code": "public void selectValueFromDropdown1(String dropdownName, String value) {\n\t\ttry {\n\n\t\t\tboolean flag = false;\n\t\t\twaitTime(3);\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'visible')]//ul/li/a[text()='\" + value\n\t\t\t\t\t\t+ \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdown1`, selects a value from a drop-down menu. It takes two parameters: `dropdownName` and `value`. The method attempts to:\n\n1. Wait for the page to load.\n2. Find the specified drop-down menu using an XPath locator.\n3. Click on the drop-down menu to expand it.\n4. Wait for the list of options to appear.\n5. Check if the selected value is present in the list and click on it if found.\n6. If the value is not found, report a failure.\n\nThe method uses various utility methods (e.g., `waitTime`, `waitForPageToLoad`, `isElementDisplayed`, `clickOnSpecialElement`) to perform these steps. It also includes error handling using a try-catch block.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "searchPage",
        "code": "public void searchPage(String searchTabLabel, String selectDealerValue, String mobileNumberNCLabel,\n\t\t\tString mobileNumberNCValue, String clickProceedToCart) {\n\t\ttry {\n\n\t\t\tclickOnNavigationmenu(searchTabLabel);\n\t\t\trefreshPage();\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (url.contains(\"preprod\")) {\n\t\t\t\tselectDealerUAT(selectDealerValue);\n\t\t\t} else if (url.contains(\"partial\")) {\n\t\t\t\tselectDealerUAT(selectDealerValue);\n\t\t\t}\n\t\t\tenterValueInFieldUAT(mobileNumberNCLabel, mobileNumberNCValue);\n\t\t\tclickOnButton1(\"Search\");\n\t\t\twaitTime(8);\n\t\t\trefreshPage();\n\t\t\twaitTime(8);\n//\t\t\tclickOnEditButton(\"Edit Date of Birth\");\n//\t\t\tselectValueFromDropdown1(\"PAN Available\", \"No\");\n//\t\t\tclickpopupbutton(\"Save\");\n//\t\t\twaitTime(15);\n\t\t\tclickOnButton(clickProceedToCart);\n\t\t\twaitTime(16);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `searchPage`, is used to perform a search operation on a web page. It takes five string parameters: `searchTabLabel`, `selectDealerValue`, `mobileNumberNCLabel`, `mobileNumberNCValue`, and `clickProceedToCart`.\n\nThe method attempts to:\n\n1. Click on the navigation menu with the label provided in `searchTabLabel`.\n2. Refresh the current page.\n3. Get the current URL of the page and check if it contains \"preprod\" or \"partial\". If so, select a dealer using the value provided in `selectDealerValue`.\n4. Enter the mobile number in a field labeled with `mobileNumberNCLabel` and provide the value from `mobileNumberNCValue`.\n5. Click on the \"Search\" button.\n6. Wait for 8 seconds.\n7. Refresh the page again.\n8. Wait for another 8 seconds.\n9. Finally, click on the button labeled with `clickProceedToCart` and wait for 16 seconds.\n\nIf any exception occurs during these steps, the method catches it and reports a test step failure with the error message.",
        "input": [
            "String searchTabLabel",
            "String selectDealerValue",
            "String mobileNumberNCLabel",
            "String mobileNumberNCValue",
            "String clickProceedToCart"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "ckycPagePersonaldetails",
        "code": "public void ckycPagePersonaldetails(String fatherNameLabel, String fatherNameValue, String motherNameLabel,\n\t\t\tString motherNameValue, String officeAddressLine1Label, String officeAddressLine1Value,\n\t\t\tString officeAddressLine2Label, String officeAddressLine2Value, String officeAreaLabel,\n\t\t\tString officeAreaValue, String nameofCompanyLabel, String nameofCompanyValue, String monthlyIncomeLabel,\n\t\t\tString monthlyIncomeValue, String maritalStatuslabel, String maritalStatusValue, String poaTypeLabel,\n\t\t\tString poaTypeValue, String poaNolabel, String poaNoValue) {\n\t\ttry {\n\n\t\t\tclickEditOptionWithTitle1(\"Edit Father\", \"Details Entry\");\n\t\t\ttestStepInfo(\" CKYC - Data Entry \");\n\t\t\twaitTime(3);\n\t\t\tenterValueInFatherMotherTextField(fatherNameLabel, fatherNameValue);\n\t\t\tenterValueInFatherMotherTextField(motherNameLabel, motherNameValue);\n\t\t\tenterValueInField(officeAddressLine1Label, officeAddressLine1Value);\n\t\t\tenterValueInField(officeAddressLine2Label, officeAddressLine2Value);\n\t\t\tenterValueInField(officeAreaLabel, officeAreaValue);\n\t\t\tchooseValueFromSearchAndListField(nameofCompanyLabel, nameofCompanyValue);\n\t\t\tif (nameofCompanyValue.equalsIgnoreCase(\"Others\")) {\n\t\t\t\tenterValueInFatherMotherTextField(\"If Other Company Please Specify\", \"inCorp\");\n\t\t\t}\n\t\t\tselectValueFromDropdown(monthlyIncomeLabel, monthlyIncomeValue);\n\t\t\tselectValueFromDropdownDealer(maritalStatuslabel, maritalStatusValue);\n\t\t\tselectValueFromDropdown(poaTypeLabel, poaTypeValue);\n\t\t\tenterValueInField(poaNolabel, poaNoValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method is used to perform data entry operations for a \"CKYC Page Personal Details\" form. The method takes 16 string parameters, which are labels and values for various fields on the form.\n\nThe method attempts to:\n\n1. Click an edit option with the title \"Edit Father\" and then click \"Details Entry\".\n2. Wait for 3 seconds.\n3. Enter values in several text fields:\n\t* Father's/Mother's name\n\t* Office address (lines 1 and 2)\n\t* Office area\n\t* Name of company (with a special handling for \"Others\")\n4. Choose a value from a search-and-list field: Name of Company.\n5. Select values from dropdown menus:\n\t* Monthly Income\n\t* Marital Status\n\t* POA Type\n6. Enter a value in a field labeled \"POA No\".\n\nIf any of these operations fail, the method catches the exception and reports a test step failure with an error message.",
        "input": [
            "String fatherNameLabel",
            "String fatherNameValue",
            "String motherNameLabel",
            "String motherNameValue",
            "String officeAddressLine1Label",
            "String officeAddressLine1Value",
            "String officeAddressLine2Label",
            "String officeAddressLine2Value",
            "String officeAreaLabel",
            "String officeAreaValue",
            "String nameofCompanyLabel",
            "String nameofCompanyValue",
            "String monthlyIncomeLabel",
            "String monthlyIncomeValue",
            "String maritalStatuslabel",
            "String maritalStatusValue",
            "String poaTypeLabel",
            "String poaTypeValue",
            "String poaNolabel",
            "String poaNoValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickEditOptionWithLabelInDealer",
        "code": "public void clickEditOptionWithLabelInDealer(String fieldLabel) {\n\t\ttry {\n\t\t\tpageScrollDown();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//div//span[text()='\" + fieldLabel\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div/button\";\n\t\t\twaitForElement(editOption, 25);\n\t\t\tscrollbycordinates(editOption);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "Here is a brief description of the Java method:\n\nThis method simulates a click on an edit option button with a specific label in a dealer page. It first scrolls down the page, then waits for the edit option button to be displayed and scrolls to it if necessary. If the button is not present within a certain time limit, the test step fails. The method catches any exceptions that may occur during execution and logs an informative message about the failure.",
        "input": [
            "String fieldLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickEditOptionWithTitle",
        "code": "public void clickEditOptionWithTitle(String fieldLabel, String ScrollElement) {\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString editOption = fieldLabel + \" edit button#xpath=//button[contains(@title,'\" + fieldLabel + \"')]\";\n\t\t\tString scrollElement = ScrollElement + \"#xpath=//span[text()='\" + ScrollElement + \"']\";\n\t\t\twaitForElement(scrollElement, 10);\n\t\t\tscrollbycordinates(scrollElement);\n\t\t\tif (isElementDisplayed(editOption, 10)) {\n\t\t\t\tscrollToWebElement(editOption);\n\t\t\t\tclickOnSpecialElement(editOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(fieldLabel + \" edit button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepInfo(\"Failed in Click Edit Option With Label In Master Page. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickEditOptionWithTitle`, simulates a click on an edit button with a specific title (label) in a web page. Here's a step-by-step breakdown:\n\n1. It waits for the page to load using the `waitForPageToLoad()` method.\n2. It constructs two XPath expressions:\n\t* `editOption`: A button with a title matching the provided `fieldLabel` and an XPath expression to locate it.\n\t* `scrollElement`: An element (likely a span) with text matching the provided `ScrollElement` and an XPath expression to locate it.\n3. It waits for the `scrollElement` to be displayed using `waitForElement()` with a timeout of 10 seconds.\n4. If the `scrollElement` is displayed, it scrolls to that element using `scrollbycordinates()`.\n5. It checks if the `editOption` button is displayed using `isElementDisplayed()` with a timeout of 10 seconds.\n6. If the `editOption` button is present, it simulates a click on it using `clickOnSpecialElement()`.\n7. If the `editOption` button is not present, it logs a test step failure with the message \"FieldLabel edit button is not present.\"\n\nThe method also catches any exceptions that occur during execution and logs an informative message with the exception's message.",
        "input": [
            "String fieldLabel",
            "String ScrollElement"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "appDataEntryPersonaldetails",
        "code": "public void appDataEntryPersonaldetails(String poiTypelabel, String poiTypeValue, String poiNolabel,\n\t\t\tString poiNoValue, String creditCardNumberlabel, String creditCardValue, String processTypelabel,\n\t\t\tString processTypeValue, String creditProgramLabel, String creditProgramValue, String firstNameNCValue,\n\t\t\tString lastNameLabel, String lastNameValue, String dobLabel, String dobValue, String genderLabel,\n\t\t\tString genderValue) {\n\t\ttry {\n\t\t\t// if (poiTypeValue.equals(\"PAN\")) {\n\t\t\t// Aadhar = generatePanNumber();\n\t\t\t// } else {\n\t\t\t// Aadhar = generateAadhaar4DigitNumber();\n\t\t\t// }\n\t\t\tclickEditOptionWithTitle(\"Edit POI Type\", \"POI Type\");\n\t\t\twaitTime(4);\n\t\t\tselectValueFromDropdown(poiTypelabel, poiTypeValue);\n\t\t\tenterValueInField(poiNolabel, poiNoValue);\n\t\t\tenterValueInField(creditCardNumberlabel, creditCardValue);\n\t\t\tselectValueFromDropdown(processTypelabel, processTypeValue);\n\t\t\tselectValueFromDropdown(creditProgramLabel, creditProgramValue);\n\t\t\tenterValueInField(\"First Name\", firstNameNCValue);\n\t\t\tenterValueInField(lastNameLabel, lastNameValue);\n\t\t\tenterDob(dobLabel, dobValue);\n\t\t\tselectValueFromDropdownDealer(genderLabel, genderValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `appDataEntryPersonaldetails` that appears to be part of an automation test for a web application. The method takes 16 string parameters, which are likely labels and values for various fields on the application.\n\nThe method attempts to perform the following actions:\n\n1. Clicks an \"Edit POI Type\" option (likely a button or link) with the specified title.\n2. Waits for 4 seconds using the `waitTime` method.\n3. Selects a value from a dropdown list using the `selectValueFromDropdown` method, passing in the label and value parameters.\n4. Enters values into various fields on the application using the `enterValueInField` method, passing in the label and value parameters.\n5. Calls other methods to select values from dropdown lists for specific fields (e.g., process type, credit program).\n\nIf any of these actions fail, the method catches the exception and logs a failure message with the test step \"Failed in clickcustometLinkInopp\" followed by the error message.",
        "input": [
            "String poiTypelabel",
            "String poiTypeValue",
            "String poiNolabel",
            "String poiNoValue",
            "String creditCardNumberlabel",
            "String creditCardValue",
            "String processTypelabel",
            "String processTypeValue",
            "String creditProgramLabel",
            "String creditProgramValue",
            "String firstNameNCValue",
            "String lastNameLabel",
            "String lastNameValue",
            "String dobLabel",
            "String dobValue",
            "String genderLabel",
            "String genderValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "ckycPageOfficialdetails",
        "code": "public void ckycPageOfficialdetails(String officePincodeLabel, String officePincodeValue,\n\t\t\tString preferredLanguageLabel, String preferredLanguageValue, String officePhoneNoLabel,\n\t\t\tString officePhoneNoValue, String preferredMailingAddressLabel, String preferredMailingAddressValue,\n\t\t\tString nameOnCardLabel, String nameOnCardValue, String natureOfCompanyLabel, String natureOfCompanyValue,\n\t\t\tString alternateNoLabel, String alternateNoValue, String designationLabel, String designationValue,\n\t\t\tString qualificationLabel, String qualificationValue, String saveButton) {\n\t\ttry {\n\n\t\t\tchooseValueFromSearchAndListField(officePincodeLabel, officePincodeValue);\n\t\t\tselectValueFromDropdownDealer(preferredLanguageLabel, preferredLanguageValue);\n\t\t\tselectValueFromDropdownDealer(\"Office Phone No Type\", \"Mobile\");\n\t\t\tenterValueInField(officePhoneNoLabel, officePhoneNoValue);\n\t\t\tselectValueFromDropdownDealer(preferredMailingAddressLabel, preferredMailingAddressValue);\n\t\t\tenterValueInField(nameOnCardLabel, nameOnCardValue);\n\t\t\tselectValueFromDropdownDealer(natureOfCompanyLabel, natureOfCompanyValue);\n\t\t\tenterValueInField(alternateNoLabel, alternateNoValue);\n\t\t\tselectValueFromDropdownDealer(designationLabel, designationValue);\n\t\t\tselectValueFromDropdownDealer(qualificationLabel, qualificationValue);\n\t\t\tclickOnSave(saveButton);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `ckycPageOfficialdetails` that appears to be used for filling out official details on a webpage. The method takes 17 string parameters, each representing a label and value pair for various fields on the page.\n\nThe method attempts to perform the following actions:\n\n1. Choose a value from a search and list field using the `officePincodeLabel` and `officePincodeValue`.\n2. Select values from dropdown lists:\n\t* Using the `preferredLanguageLabel` and `preferredLanguageValue`.\n\t* For \"Office Phone No Type\" with the value \"Mobile\".\n\t* Using the `preferredMailingAddressLabel` and `preferredMailingAddressValue`.\n\t* Using the `natureOfCompanyLabel` and `natureOfCompanyValue`.\n3. Enter values in text fields:\n\t* Using the `officePhoneNoLabel` and `officePhoneNoValue`.\n\t* Using the `nameOnCardLabel` and `nameOnCardValue`.\n\t* Using the `alternateNoLabel` and `alternateNoValue`.\n4. Finally, it clicks on a save button using the `saveButton` parameter.\n\nThe method is wrapped in a try-catch block to handle any exceptions that may occur during execution. If an exception occurs, the method will log a failure message with the error message.",
        "input": [
            "String officePincodeLabel",
            "String officePincodeValue",
            "String preferredLanguageLabel",
            "String preferredLanguageValue",
            "String officePhoneNoLabel",
            "String officePhoneNoValue",
            "String preferredMailingAddressLabel",
            "String preferredMailingAddressValue",
            "String nameOnCardLabel",
            "String nameOnCardValue",
            "String natureOfCompanyLabel",
            "String natureOfCompanyValue",
            "String alternateNoLabel",
            "String alternateNoValue",
            "String designationLabel",
            "String designationValue",
            "String qualificationLabel",
            "String qualificationValue",
            "String saveButton"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectDealerUAT",
        "code": "public String selectDealerUAT(String dealerName) {\n\t\tString selectedOption = null;\n\t\tString dealerNameDesc = null;\n\t\ttry {\n\t\t\tif (!dealerName.isEmpty()) {\n\t\t\t\tif (dealerName.contains(\"#\")) {\n\t\t\t\t\tdealerNameDesc = dealerName.replace(\"#\", \" \");\n\t\t\t\t} else {\n\t\t\t\t\tdealerNameDesc = dealerName;\n\t\t\t\t}\n\t\t\t\twaitTime(2);\n\t\t\t\tString dealer = \"Dealer#xpath=//label[text()='Select Dealer']//ancestor::div//div//button[contains(@aria-label,'Select Dealer')]\";\n\t\t\t\tString dealerOption = dealerNameDesc + \"#xpath=//span[contains(text(),'\" + dealerName + \"')]\";\n\t\t\t\twaitForElementUntilVisible(dealer);\n\t\t\t\tif (isElementDisplayed(dealer, 7)) {\n\t\t\t\t\tscrollToWebElement(dealer);\n\t\t\t\t\tclickOn(dealer);\n\t\t\t\t\tif (isElementDisplayed(dealerOption, 4)) {\n\t\t\t\t\t\tclickOn(dealerOption);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepInfo(\"'\" + dealerName + \"' Value is not present in Dealer dropdown.\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Select Dealer dropdown is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectDealer \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectDealerUAT`, is used to select a dealer from a dropdown list on a web page. The method takes a string parameter `dealerName` which represents the name of the dealer to be selected.\n\nHere's what the method does:\n\n1. It checks if the `dealerName` is not empty.\n2. If the `dealerName` contains the character `#`, it replaces the `#` with a space.\n3. It waits for 2 seconds using the `waitTime(2)` method.\n4. It defines two strings: `dealer` and `dealerOption`. The `dealer` string is used to locate the dropdown list, while the `dealerOption` string is used to locate the specific dealer option in the dropdown list.\n5. It waits for the `dealer` element to be visible using the `waitForElementUntilVisible(dealer)` method.\n6. If the `dealer` element is displayed within 7 seconds, it scrolls to the element and clicks on it using the `scrollToWebElement(dealer)` and `clickOn(dealer)` methods respectively.\n7. If the selected dealer option is displayed within 4 seconds, it clicks on that option using the `clickOn(dealerOption)` method. Otherwise, it logs a test step failure message indicating that the value is not present in the dropdown list.\n8. If the `dealer` element is not displayed within 7 seconds, it logs a test step failure message indicating that the dropdown list is not present.\n9. If an exception occurs during the execution of the method, it logs a test step failure message with the error message.\n\nThe method returns a string `selectedOption`, which is currently set to null and does not seem to be used anywhere in the code.",
        "input": [
            "String dealerName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueFromListboxForScheme",
        "code": "public void chooseValueFromListboxForScheme(String listBoxName, String searchValue) {\n\t\ttry {\n\t\t\tif (!searchValue.isEmpty()) {\n\t\t\t\tString inputField = listBoxName + \" #xpath=//label[contains(text(),'\" + listBoxName + \"')]//..//input\";\n\t\t\t\twaitForElement(inputField, 10);\n\t\t\t\tif (isElementDisplayed(inputField, 6)) {\n\t\t\t\t\thighLighterMethod(inputField);\n\t\t\t\t\tscrollToWebElement(inputField);\n\t\t\t\t\tWebElement input = findWebElement(inputField);\n\t\t\t\t\tchar ch[] = searchValue.toCharArray();\n\t\t\t\t\tinput.clear();\n\t\t\t\t\tfor (char c : ch) {\n\t\t\t\t\t\tString textValue = String.valueOf(c);\n\t\t\t\t\t\tinput.sendKeys(textValue);\n\t\t\t\t\t\tThread.sleep(200);\n\t\t\t\t\t}\n\t\t\t\t\ttestStepPassed(\"Type '\" + searchValue + \"' in  '\" + listBoxName + \" ' input field\");\n\t\t\t\t\tString listBox = listBoxName + \" listbox#xpath=//ul[contains(@style,'block')]//li//span[text()='\"\n\t\t\t\t\t\t\t+ searchValue + \"']\";\n\t\t\t\t\twaitTime(5);\n\t\t\t\t\twaitForElement(listBox, 10);\n\t\t\t\t\tif (isElementDisplayed(listBox, 10)) {\n\t\t\t\t\t\thighLighterMethod(listBox);\n\t\t\t\t\t\tclickOnSpecialElement(listBox);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (listBoxName.equalsIgnoreCase(\"Scheme Name\")) {\n\t\t\t\t\t\t\ttestStepInfo(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t\t\t\tWebElement ele = findWebElement(inputField);\n\t\t\t\t\t\t\tele.clear();\n\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttestStepFailed(searchValue + \" value is not present in the \" + listBoxName + \" listbox\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(listBoxName + \" field is not present\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"Please provide some value for this field\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromListbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueFromListboxForScheme`, is used to select a value from a list box (dropdown) based on a search value provided. Here's a brief description of the method:\n\n1. It takes two parameters: `listBoxName` and `searchValue`.\n2. If the `searchValue` is not empty, it:\n\t* Waits for an input field with the specified name (`listBoxName`) to be displayed.\n\t* Clears any existing text in the input field and types the `searchValue` character by character (with a 200ms delay between each character).\n\t* Verifies that the typed value is present in the list box and clicks on it if found.\n3. If the `searchValue` is empty, it displays an information message asking the user to provide some value for this field.\n4. If any exceptions occur during the execution of the method (e.g., element not found), it fails the test step with a descriptive error message.\n\nThe method seems to be part of a larger automation framework that interacts with web elements using various methods like `waitForElement`, `isElementDisplayed`, `highLighterMethod`, and `clickOnSpecialElement`.",
        "input": [
            "String listBoxName",
            "String searchValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "addAssetPage",
        "code": "public void addAssetPage(String link_AssetCart, String modelNameLabel, String modelNameValue,\n\t\t\tString invoiceAmtLabel, String invoiceAmtValue, String grossLoanAmtLabel, String grossLoanAmtValue,\n\t\t\tString schemeNameLabel, String schemeValue, String btn_AddToCart) {\n\t\ttry {\n\t\t\twaitTime(12);\n\t\t\tclickOnOpportunityName(link_AssetCart);\n\t\t\tchooseValueFromListbox(modelNameLabel, modelNameValue);\n\t\t\tenterValueInField(invoiceAmtLabel, invoiceAmtValue);\n\t\t\tenterValueInField(grossLoanAmtLabel, grossLoanAmtValue);\n\t\t\t// chooseValueFromListboxForScheme(schemeNameLabel, schemeValue);\n\t\t\tclickOnButton1(btn_AddToCart);\n\t\t\tselectSchemeWithValueInUAT(schemeValue);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `addAssetPage`, adds an asset to a cart or page. It takes 8 parameters:\n\n1. `link_AssetCart`: the link to the asset cart\n2. `modelNameLabel` and `modelNameValue`: the label and value for selecting a model name from a listbox\n3. `invoiceAmtLabel` and `invoiceAmtValue`: the label and value for entering an invoice amount in a field\n4. `grossLoanAmtLabel` and `grossLoanAmtValue`: the label and value for entering a gross loan amount in a field\n5. `schemeNameLabel` and `schemeValue`: the label and value for selecting a scheme from a listbox (although this line is currently commented out)\n6. `btn_AddToCart`: the button to add the asset to the cart\n\nThe method performs the following actions:\n\n1. Waits for 12 seconds using the `waitTime` method\n2. Clicks on the link to the asset cart using the `clickOnOpportunityName` method\n3. Selects a model name from a listbox using the `chooseValueFromListbox` method\n4. Enters an invoice amount and gross loan amount in fields using the `enterValueInField` method\n5. Clicks on the \"Add to Cart\" button using the `clickOnButton1` method\n6. Selects a scheme with the specified value in UAT (although this line is currently commented out)\n\nIf any exceptions occur during these actions, the method catches them and reports a failure with a message using the `testStepFailed` method.",
        "input": [
            "String link_AssetCart",
            "String modelNameLabel",
            "String modelNameValue",
            "String invoiceAmtLabel",
            "String invoiceAmtValue",
            "String grossLoanAmtLabel",
            "String grossLoanAmtValue",
            "String schemeNameLabel",
            "String schemeValue",
            "String btn_AddToCart"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "searchETBCust",
        "code": "public void searchETBCust(String searchTabLabel, String selectDealerValue, String mobileNumberNCLabel,\n\t\t\tString mobileNumberNCValue, String clickProceedToCart, String ETBCardLabel, String ETBCardValue) {\n\t\ttry {\n\t\t\tclickOnNavigationmenu(searchTabLabel);\n\t\t\trefreshPage();\n\t\t\tselectDealerUAT(selectDealerValue);\n\t\t\tenterValueInFieldUAT(mobileNumberNCLabel, mobileNumberNCValue);\n\t\t\t// enterValueInFieldUAT(ETBCardLabel, ETBCardValue);\n\n\t\t\tclickOnButton1(searchTabLabel);\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(15);\n\t\t\tclickOnButton(clickProceedToCart);\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickcustometLinkInopp\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This is a Java method named `searchETBCust` that appears to be part of an automated testing framework. The method takes six string parameters:\n\n1. `searchTabLabel`\n2. `selectDealerValue`\n3. `mobileNumberNCLabel`\n4. `mobileNumberNCValue`\n5. `clickProceedToCart`\n6. `ETBCardLabel`\n7. `ETBCardValue`\n\nThe method performs the following actions:\n\n1. Clicks on a navigation menu item with the label specified in `searchTabLabel`.\n2. Refreshes the page.\n3. Selects a dealer UAT (User Acceptance Test) option with the value specified in `selectDealerValue`.\n4. Enters a value into a field labeled by `mobileNumberNCLabel` and with the value specified in `mobileNumberNCValue`. \n5. Clicks on a button labeled \"Proceed to Cart\" (assuming this is the same as `clickProceedToCart`).\n6. Waits for 15 seconds using the `waitTime(15)` method.\n\nThe method also includes error handling, catching any exceptions that occur during execution and reporting them as test step failures.",
        "input": [
            "String searchTabLabel",
            "String selectDealerValue",
            "String mobileNumberNCLabel",
            "String mobileNumberNCValue",
            "String clickProceedToCart",
            "String ETBCardLabel",
            "String ETBCardValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "enterValueInFieldUAT",
        "code": "public void enterValueInFieldUAT(String labelName, String value) {\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tString field = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\twaitForElement(field, 20);\n\t\t\t\tif (isElementDisplayed(field, 7)) {\n\t\t\t\t\thighLighterMethod(field);\n\t\t\t\t\ttypeIn(field, value);\n\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInFieldUAT`, is used to enter a value into a field on a web page. It takes two parameters: `labelName` and `value`. The method attempts to:\n\n1. Wait for the page to load.\n2. Check if the provided `value` is not empty.\n3. Construct an XPath expression to locate the input field based on the given `labelName`.\n4. Wait for the field to be present (up to 20 seconds).\n5. If the field is present, highlight it and enter the provided `value` into the field using a `typeIn` method.\n\nIf any of these steps fail or the field is not present, the method will report a test step failure with an error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectSchemeWithValueInUAT",
        "code": "public void selectSchemeWithValueInUAT(String schemeValue) {\n\t\tboolean conditionFlag = false;\n\t\tboolean failFlag = false;\n\t\ttry {\n\t\t\tdo {\n//\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//p[text()='\" + schemeValue\n//\t\t\t\t\t\t+ \"']/ancestor::div[@class='schemecontainer']/preceding-sibling::lightning-input//label//span[@part='indicator']\";\n//\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next' and not(@disabled)]\"\n\t\t\t\tString scheme = schemeValue + \" Scheme select button#xpath=//div//h2//span//div//Strong[text()='\"\n\t\t\t\t\t\t+ schemeValue + \"']//..//..//..//..//..//..//button[contains(text(),'Select')]\";\n\t\t\t\tString disabledNxt_schemeBtn = \"Disabled Next Scheme button#xpath=//button[text()='Next Schemes'and@disabled='true']\";\n\t\t\t\tString nxt_schemeBtn = \"Next Scheme button #xpath=//button[text()='Next Schemes']\";\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitForElement(scheme, 10);\n\t\t\t\tif (isElementDisplayed(scheme, 10)) {\n\t\t\t\t\tscrollToWebElement(scheme);\n\t\t\t\t\thighLighterMethod(scheme);\n\t\t\t\t\tmanualScreenshot(schemeValue + \" scheme value is present.\");\n\t\t\t\t\tclickOn(scheme);\n\t\t\t\t\tmanualScreenshot(\"Successfully \" + schemeValue + \" scheme value is selected.\");\n\t\t\t\t\t// verifyErrorPopupMessage();\n\t\t\t\t\tconditionFlag = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (isElementDisplayed(nxt_schemeBtn, 3)) {\n\t\t\t\t\t\tscrollToWebElement(nxt_schemeBtn);\n\t\t\t\t\t\thighLighterMethod(nxt_schemeBtn);\n\t\t\t\t\t\tclickOn(nxt_schemeBtn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconditionFlag = true;\n\t\t\t\t\t\tfailFlag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (!conditionFlag);\n\n\t\t\tif (failFlag) {\n\t\t\t\ttestStepFailed(schemeValue + \" scheme value is not present in this page.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Select Scheme With Value. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `selectSchemeWithValueInUAT`, appears to be a part of an automated testing framework for a User Acceptance Testing (UAT) scenario. Its primary function is to select a scheme with a given value on a web page.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `schemeValue`, which represents the value of the scheme to be selected.\n2. It initializes two boolean flags: `conditionFlag` and `failFlag`, both set to `false`.\n3. The method attempts to execute a loop until the condition is met (i.e., `conditionFlag` becomes `true`). In each iteration:\n\t* It constructs an XPath expression for the scheme select button based on the provided `schemeValue`.\n\t* It waits for the page to load and then waits for the constructed XPath element to be displayed.\n\t* If the element is displayed, it scrolls to the element, highlights it, takes a manual screenshot, clicks on the element, and takes another manual screenshot (indicating successful selection).\n\t* If the element is not displayed, but the \"Next Scheme\" button is, it scrolls to the button, highlights it, and clicks on it.\n4. Once the loop condition is met or the maximum number of iterations is reached (not explicitly stated in this method), the method checks if `failFlag` is set to `true`. If so, it marks the test step as failed with a message indicating that the scheme value was not present in the page.\n5. The method also catches any exceptions that might occur during execution and marks the test step as failed with an error message.\n\nIn summary, this method attempts to select a scheme with a given value on a web page by iterating until the selection is successful or the maximum number of iterations is reached. If the selection fails, it reports the failure and marks the test step as failed.",
        "input": [
            "String schemeValue"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromDropdownDealer",
        "code": "public void selectValueFromDropdownDealer(String dropdownName, String value) {\n\t\ttry {\n\t\t\tboolean flag = false;\n\t\t\twaitForPageToLoad();\n\t\t\tString dropdown = dropdownName + \"#xpath=//span[text()='\" + dropdownName\n\t\t\t\t\t+ \"'][not(contains(@class,'header'))]//..//following-sibling::div//a\";\n\t\t\twaitForElement(dropdown, 20);\n\t\t\tscrollbycordinates(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, elementLoadWaitTime)) {\n\t\t\t\tString dropdownList = value + \" value#xpath=//div[contains(@class,'select-options')]//ul/li/a[text()='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\tfor (int iterate = 0; iterate < 2; iterate++) {\n\t\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\t\tclickOnSpecialElement(dropdown);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\twaitForElement(dropdownList, 6);\n\t\t\t\t\tif (isElementDisplayed(dropdownList, 10)) {\n\t\t\t\t\t\tclickOnSpecialElement(dropdownList);\n\t\t\t\t\t\twaitTime(1);\n\t\t\t\t\t\tflag = true;\n\t\t\t\t\t\ttestStepPassed(\"Successfully selected \" + value + \" value from \" + dropdownName + \" dropdown\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!flag) {\n\t\t\t\t\ttestStepFailed(value + \" option is not present in the \" + dropdownName + \" dropdown\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(dropdownName + \" dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectValueFromDropdown \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectValueFromDropdownDealer`, selects a value from a dropdown menu. It takes two parameters: `dropdownName` and `value`. The method first waits for the page to load and then locates the dropdown menu using an XPath expression.\n\nIt then scrolls down to the dropdown menu, clicks on it, and waits for the dropdown list to appear. If the selected value is present in the list, it clicks on that value and verifies that the selection was successful. If the value is not present or the dropdown menu is not found, it reports a failure.\n\nThe method uses several helper methods, such as `waitForPageToLoad`, `waitForElement`, `scrollbycordinates`, `isElementDisplayed`, `clickOnSpecialElement`, and `waitTime`, which are likely part of a larger test automation framework.",
        "input": [
            "String dropdownName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonQC1",
        "code": "public void clickOnButtonQC1(String buttonLabel) {\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\twaitForPageToLoad();\n\t\t\tString button = buttonLabel + \"#xpath=//button[@title='\" + buttonLabel + \"']//span[text()='\" + buttonLabel\n\t\t\t\t\t+ \"']\";\n\t\t\tString optional_Btn = buttonLabel + \" #xpath=//Section[contains(@class,'active')]//button[text()='\"\n\t\t\t\t\t+ buttonLabel + \"']\";\n\t\t\twaitForElement(button, 30);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\ttestStepPassed(\"Click on : \" + buttonLabel);\n\t\t\t} else if (isElementDisplayed(optional_Btn, 10)) {\n\t\t\t\tscrollToWebElement(optional_Btn);\n\t\t\t\tclickOnSpecialElement(optional_Btn);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonLabel + \" button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonQC1`, simulates a mouse click on a web element with the specified label. It waits for the page to load and the button to appear, then attempts to click on the button using Selenium's `Actions` class.\n\nThe method takes one parameter, `buttonLabel`, which is used to construct the XPath locator for the button. If the button is not found at its expected location, it will also check an optional alternative location (specified by the `optional_Btn` variable) and click on that if present.\n\nIf the button is not found or the click operation fails, the method reports a test step failure with an appropriate error message.",
        "input": [
            "String buttonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "searchUntilGenerateDOButtonAvailable",
        "code": "public void searchUntilGenerateDOButtonAvailable(String linkName) {\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tString link = linkName + \"#xpath=//a[@title='\" + linkName + \"']\";\n\t\t\twaitForElement(link, 10);\n\t\t\twaitTime(3);\n\t\t\tfor (int i = 0; i < 5; i++) {\n\t\t\t\tif (isElementPresent(link)) {\n\t\t\t\t\tclickOnSpecialElement(link);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\trefreshPage();\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"INFO\", \"Exception :\" + e);\n\t\t\ttestStepFailed(\" Failed in searchUntilGenerateDOButtonAvailable \" + e);\n\t\t}\n\t}",
        "description": "This Java method, `searchUntilGenerateDOButtonAvailable`, attempts to locate an element on a webpage with the specified link name and waits until it is available. It will repeatedly refresh the page and try to find the element up to 5 times, or until the element is found.\n\nHere's a step-by-step breakdown:\n\n1. The method takes a `String` parameter `linkName`, which represents the name of the link to be searched for.\n2. A new string is created by concatenating the `linkName` with an XPath expression that targets an `<a>` tag with a title matching the `linkName`.\n3. The method calls `waitForElement(link, 10)` to wait up to 10 seconds for the element to be present on the page.\n4. It then waits for 3 seconds using `waitTime(3)`.\n5. A loop runs up to 5 times. In each iteration:\n\t* It checks if the element is present using `isElementPresent(link)`. If it is, the method calls `clickOnSpecialElement(link)` and waits for the page to load using `waitForPageToLoad()`, then breaks out of the loop.\n\t* If the element is not present, it refreshes the page using `refreshPage()` and waits for the page to load again. The loop continues.\n6. If any exceptions occur during this process, they are caught and logged to a file using `writeToLogFile` and marked as a test step failure using `testStepFailed`.",
        "input": [
            "String linkName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getCustomerIDValue",
        "code": "public String getCustomerIDValue() {\n\t\tString customerID = \"\";\n\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString currentURL = driver.getCurrentUrl();\n\t\t\tif (currentURL.contains(\"Customer__c\")) {\n\t\t\t\tcurrentURL = currentURL.split(\"Customer__c\")[1];\n\t\t\t\tcurrentURL = currentURL.split(\"/\")[1];\n\t\t\t\tcurrentURL = currentURL.split(\"/\")[0];\n\t\t\t\tcurrentURL = \"'\" + currentURL + \"'\";\n\t\t\t\tSystem.out.println(\"Customer id : \" + currentURL);\n\t\t\t\tcustomerID = currentURL.replace(\"'\", \"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"we are not getting expected URL.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Get Customer Id Value. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn customerID;\n\t}",
        "description": "This Java method, `getCustomerIDValue()`, retrieves the customer ID value from a Salesforce page and returns it as a string. It uses Selenium WebDriver to interact with the browser and performs the following steps:\n\n1. Waits for the page to load using the `waitForPageToLoad()` method.\n2. Gets the current URL of the page using `driver.getCurrentUrl()`.\n3. Checks if the URL contains \"Customer__c\". If it does, it extracts the customer ID value from the URL by splitting it at specific points (e.g., \"/\") and concatenates it with single quotes.\n4. If the extracted string is not empty, returns the customer ID value as a string. Otherwise, fails the test step with an error message.\n5. Catches any exceptions that occur during the process and fails the test step with an error message.\n\nThe method uses Selenium WebDriver's `driver` object to interact with the browser, and it also calls other methods (e.g., `testStepFailed()`) that are likely part of a testing framework or library.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "getIRIDValue",
        "code": "public String getIRIDValue() {\n\t\tString customerID = \"\";\n\n\t\ttry {\n\t\t\twaitTime(2);\n\t\t\twaitForPageToLoad();\n\t\t\tString currentURL = driver.getCurrentUrl();\n\n\t\t\tif (currentURL.contains(\"Integration_Response__c\")) {\n\t\t\t\tcurrentURL = currentURL.split(\"Integration_Response__c\")[1];\n\t\t\t\tcurrentURL = currentURL.split(\"/\")[1];\n\t\t\t\tcurrentURL = currentURL.split(\"/\")[0];\n\t\t\t\tcurrentURL = \"'\" + currentURL + \"'\";\n\t\t\t\tSystem.out.println(\"IR id : \" + currentURL);\n\t\t\t\tcustomerID = currentURL.replace(\"'\", \"\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"we are not getting expected URL.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Get Customer Id Value. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn customerID;\n\t}",
        "description": "This Java method, `getIRIDValue()`, is used to extract the IR ID value from a specific URL. It appears to be part of an automated testing framework. Here's a brief summary:\n\n1. The method waits for 2 seconds and then checks if the current URL contains the string \"Integration_Response__c\".\n2. If the condition is met, it extracts the IR ID value by splitting the URL at certain points (e.g., \"/\") and concatenating the resulting strings.\n3. It prints the extracted IR ID value to the console for debugging purposes.\n4. If the expected URL is not found, the method fails the test step with an error message.\n5. The method returns the extracted customer ID value as a string.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during execution and report them as test failures.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickonButtonFromWorkbench",
        "code": "public void clickonButtonFromWorkbench(String ButtonLabel) {\n\t\ttry {\n\n\t\t\tString Element = \"#xpath=//input[@value='\" + ButtonLabel + \"']\";\n\t\t\twaitForElement(Element, 5);\n\t\t\tif (isElementDisplayed(Element, 5)) {\n\t\t\t\tclickOnSpecialElement(Element);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(ButtonLabel + \" is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickonButtonFromWorkbench\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickonButtonFromWorkbench`, simulates a click on a button with a specified label from the workbench. It uses Selenium WebDriver to interact with the web page.\n\nHere's what it does:\n\n1. It takes a `String` parameter `ButtonLabel` which is the label of the button to be clicked.\n2. It constructs an XPath expression to locate the button element based on its value matching the provided `ButtonLabel`.\n3. It waits for up to 5 seconds until the button is displayed using the `waitForElement` method.\n4. If the button is displayed, it clicks on the button using the `clickOnSpecialElement` method.\n5. If the button is not displayed after waiting for 5 seconds, it fails the test step with a message indicating that the button was not found.\n6. If any exception occurs during the execution of this method, it catches the exception and fails the test step with a message including the error details.\n\nIn summary, this method helps automate clicking on a specific button in a web application by searching for the button based on its label and then simulating a click event.",
        "input": [
            "String ButtonLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "toInsertValueFromWorkBench",
        "code": "public void toInsertValueFromWorkBench(String LabelName, String Value) {\n\t\ttry {\n\t\t\tString responseLabel = \"#xpath=//td[text()='\" + LabelName + \"']//..//input\";\n\t\t\twaitForElement(responseLabel, 5);\n\t\t\tif (isElementDisplayed(responseLabel, 5)) {\n\t\t\t\ttypeIn(responseLabel, Value);\n\t\t\t\tmanualScreenshot(Value + \" is entered in \" + LabelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \" is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\t// TODO: handle exception\n\t\t}\n\t}",
        "description": "This Java method, named `toInsertValueFromWorkBench`, inserts a specified value into a field with a matching label name in the Work Bench. It uses Selenium WebDriver's XPath syntax to locate the input field, waits for it to be displayed, and then types in the provided value. If the element is not displayed within the specified time limit (5 seconds), the test step fails. The method also takes a screenshot after successfully entering the value.",
        "input": [
            "String LabelName",
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectWorkbenchResponses",
        "code": "public void selectWorkbenchResponses(String Value) {\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//span[text()='data']\";\n\t\t\tString dropdownValue = \"#xpath=//li/a[text()='\" + Value + \"']\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tActions actions = new Actions(driver);\n\t\t\t\tWebElement mouseHover = findWebElement(dropdown);\n\t\t\t\tactions.moveToElement(mouseHover).perform();\n\t\t\t\twaitForElement(dropdownValue, 5);\n\t\t\t\tif (isElementDisplayed(dropdownValue, 5)) {\n\t\t\t\t\tclickOnSpecialElement(dropdownValue);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\ttestStepFailed(Value + \" Responses is not displayed\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectEnvironment \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectWorkbenchResponses`, selects a specific response option from a dropdown menu on a web page. It takes a string parameter `Value` which represents the expected response value to be selected.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It waits for an element with the specified XPath (`#xpath=//span[text()='data']`) to be displayed.\n2. If the element is displayed, it scrolls to that element and performs a mouse hover action on it using Selenium's `Actions` class.\n3. It then waits for another element with the specified XPath (`#xpath=//li/a[text()='\" + Value + \"']`) to be displayed.\n4. If this second element is displayed, it clicks on it to select the response option.\n5. If either of these elements is not displayed within a certain time limit (10 seconds for the first element and 7 seconds for the second), or if an exception occurs during any of these steps, the method reports a test step failure.\n\nThe method uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `findWebElement`, and `clickOnSpecialElement` to interact with the web page.",
        "input": [
            "String Value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnRewardCancelButton",
        "code": "public void clickOnRewardCancelButton(String buttonName) {\n\t\ttry {\n\t\t\tString button = buttonName + \"#xpath=//div[@data-aura-class='cRewardRedemptionConsole']//button[text()='\"\n\t\t\t\t\t+ buttonName + \"']\";\n\t\t\twaitForElement(button, 13);\n\t\t\tif (isElementDisplayed(button, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tclickOnSpecialElement(button);// changed from clickON\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRewardCancelButton`, simulates a click on a specific reward cancellation button with the given name. It uses an XPath expression to locate the button element, waits for it to be displayed, scrolls to it if necessary, and then clicks on it.\n\nHere are the key steps:\n\n1. Creates an XPath expression to find the button element based on its name.\n2. Waits for the button to be displayed using a timeout of 13 seconds.\n3. If the button is displayed, scrolls to it if it's not already visible.\n4. Clicks on the button using the `clickOnSpecialElement` method (not `clickON`, note the correction).\n5. Catches any exceptions that occur during the process and reports them as a test step failure.\n\nThis method seems to be part of a larger automated testing framework, possibly for a web application or mobile app.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueFromWorkBench",
        "code": "public String selectValueFromWorkBench(String Value) {\n\t\tString selectedOption = null;\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//label[contains(text(),'Environment:')]//following-sibling::select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tselectFromDropdown(dropdown, Value);\n\t\t\t\tselectedOption = select.getFirstSelectedOption().getText();\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select Environment dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectEnvironment \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectValueFromWorkBench`, selects a value from a dropdown menu with the label \"Environment:\" on a workbench. It takes a string parameter `Value` representing the desired option to select.\n\nThe method uses various Selenium WebDriver methods such as `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `selectFromDropdown` to interact with the dropdown element. If the dropdown is not present, it fails the test step. If an exception occurs during the process, it also fails the test step.\n\nFinally, the method returns the text of the selected option or null if the selection was not successful.",
        "input": [
            "String Value"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnCheckboxWorkBench",
        "code": "public void clickOnCheckboxWorkBench(String checkboxLabel) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//input[@id='\" + checkboxLabel + \"']\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (isElementDisplayed(checkbox, 4)) {\n\t\t\t\twaitForElement(checkbox, 4);\n\t\t\t\tclickOn(checkbox);\n\t\t\t\tclickOn(btn_login_workbench);\n\t\t\t} else {\n\t\t\t\ttestStepInfo(\"checkbox is already unchecked\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selection of check box\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnCheckboxWorkBench`, simulates a click on a checkbox with the specified label within the Workbench application. It uses Selenium WebDriver to interact with the UI element.\n\nHere's what the method does:\n\n1. It constructs a string representing the XPath of the checkbox using the provided label and an XPath expression.\n2. It waits for the checkbox element to be present (up to 10 seconds).\n3. If the checkbox is displayed, it waits again for up to 4 seconds and then clicks on the checkbox.\n4. Additionally, if there's a `btn_login_workbench` button, it also clicks on that button after clicking the checkbox.\n\nIf any exception occurs during this process, the method catches it and reports a test step failure with an informative message.",
        "input": [
            "String checkboxLabel"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectUtiliesValueFromWorkBench",
        "code": "public String selectUtiliesValueFromWorkBench(String Value) {\n\t\tString selectedOption = null;\n\t\ttry {\n\t\t\twaitTime(4);\n\t\t\tString dropdown = \"Utilities#xpath=//span[text()='utilities']\";\n\t\t\tString dropdownValue = \"Value#xpath=//ul//li//a[text()='\" + Value + \"']\";\n\t\t\twaitForElement(dropdown);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tclickOn(dropdown);\n\t\t\t\tif (isElementDisplayed(dropdownValue, 9)) {\n\t\t\t\t\tclickOn(dropdownValue);\n\t\t\t\t\tmanualScreenshot(\"Successfully Selected the Dropdown Value is \" + Value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Utilities dropdown is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectEnvironment \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}",
        "description": "This Java method, `selectUtiliesValueFromWorkBench`, selects a value from a dropdown menu on a workbench. It takes a string parameter `Value` which is the value to be selected from the dropdown.\n\nThe method first waits for 4 seconds using the `waitTime(4)` function. Then it locates the dropdown menu by its XPath and waits for it to be displayed using the `waitForElement(dropdown)` function. If the dropdown is displayed, it scrolls to the element, clicks on it, and then selects the specified value from the dropdown menu.\n\nIf the value is successfully selected, a manual screenshot is taken with the message \"Successfully Selected the Dropdown Value is [Value]\". If the dropdown menu is not present or if there's an exception during the selection process, the test step fails. The method returns `selectedOption` which is always null.",
        "input": [
            "String Value"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "compareGetText",
        "code": "public String compareGetText(String labelname, String ExpectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div//lightning-formatted-text\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(ExpectedValue)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(Element, labelname);\n\t\t\t\t\ttestStepPassed(text + \" is populated in the \" + labelname + \" Field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(text + \" is Not populated in the \" + labelname + \" Field\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \"field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `compareGetText`, compares the actual text value of a web element with an expected value. The method takes two string parameters: `labelname` and `ExpectedValue`. \n\nIt uses an XPath expression to locate the web element based on the provided label name. If the element is displayed, it scrolls to the element, highlights it, and then retrieves its text content.\n\nThe method then compares this actual text value with the expected value. If they match, it passes a test step and takes a manual screenshot of the highlighted element. If they don't match, it fails a test step.\n\nIf the element is not displayed, or if an exception occurs during the process, it also fails a test step. The method returns the actual text value as a string.",
        "input": [
            "String labelname",
            "String ExpectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "compareGetTextWithSlotValue",
        "code": "public String compareGetTextWithSlotValue(String labelname, String ExpectedValue) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div/span//lightning-formatted-number\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tif (text.equalsIgnoreCase(ExpectedValue)) {\n\t\t\t\t\thighLighterMethodManualScreenShot(Element, labelname);\n\t\t\t\t\tmanualScreenshot(text + \" is populated in the \" + labelname + \" Field\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(text + \" is Not populated in the \" + labelname + \" Field\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \"field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `compareGetTextWithSlotValue`, compares the text displayed on a web element with a given expected value. The method:\n\n1. Constructs an XPath expression to locate the web element based on the provided label name.\n2. Checks if the element is displayed and if it is not, returns a failure message.\n3. Scrolls to the element, highlights it, and gets its text content.\n4. Compares the retrieved text with the expected value. If they match, it takes a manual screenshot and marks the test step as passed. Otherwise, it fails the test step.\n5. If any exceptions occur during the process, it catches them and returns a failure message.\n\nThe method returns the actual text value of the web element.",
        "input": [
            "String labelname",
            "String ExpectedValue"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "loginToSalesForceInWorkBenchInsertReposes",
        "code": "public boolean loginToSalesForceInWorkBenchInsertReposes(String SalesforceuserName, String Salesforcepassword) {\n\t\tboolean flag = false;\n\t\ttry {\n\t\t\ttestStepInfo(\"Sales Forced Login Page\");\n\t\t\tif (isElementDisplayed(txt_userName, 4)) {\n\t\t\t\ttypeIn(txt_userName, SalesforceuserName);\n\t\t\t}\n\t\t\tif (isElementDisplayed(txt_passWord, 4)) {\n\t\t\t\ttypeInMaskedData(txt_passWord, Salesforcepassword);\n\t\t\t}\n\t\t\tif (isElementDisplayed(btn_login, 4)) {\n\t\t\t\tclickOn(btn_login);\n\t\t\t}\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tif (isElementDisplayed(error, 3)) {\n\t\t\t\ttestStepFailed(\"Failed in login. Warning : \" + getText(error));\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"loginToSalesForce failed.Error\" + e.getClass());\n\t\t\t// System.out.println();\n\t\t}\n\t\treturn flag;\n\t}",
        "description": "This Java method, `loginToSalesForceInWorkBenchInsertReposes`, is used to perform a login operation in Salesforce using the provided username and password. The method attempts to:\n\n1. Check if the Salesforce login page is displayed.\n2. Enter the provided username into the corresponding text field.\n3. Maskedly enter the provided password into the corresponding text field.\n4. Click the login button.\n5. Wait for the page to load and then wait for 5 seconds.\n6. If an error message appears, it indicates a failed login attempt.\n\nThe method returns a boolean value (`flag`) indicating whether the login was successful (false) or not (true). The `try-catch` block is used to handle any exceptions that may occur during the login process, and the method also includes logging of test steps and errors.",
        "input": [
            "String SalesforceuserName",
            "String Salesforcepassword"
        ],
        "output": "boolean"
    },
    {
        "class_name": "Search",
        "function_name": "selectObjectTypeFromWorkBench",
        "code": "public String selectObjectTypeFromWorkBench(String Value) {\n\t\tString selectedOption = null;\n\t\ttry {\n\t\t\tString dropdown = \"#xpath=//td[text()='Object Type']//parent::tr//td//select\";\n\t\t\twaitForElement(dropdown, 10);\n\t\t\tif (isElementDisplayed(dropdown, 7)) {\n\t\t\t\tscrollToWebElement(dropdown);\n\t\t\t\tSelect select = new Select(findWebElement(dropdown));\n\t\t\t\thighLighterMethod(dropdown);\n\t\t\t\tselect.selectByValue(Value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Select ObjectType dropdown is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectEnvironment \" + e.getMessage());\n\t\t}\n\t\treturn selectedOption;\n\t}\n\n\t/*\n\t * @author : Saranya D\n\t * \n\t * @created Date : Description : Method to verify whether the field is present\n\t * in RBL Credit card section\n\t * \n\t * @param : sectionName is the Section\n\t * \n\t * @param : FieldName is the field name need to verify in section\n\t */",
        "description": "This Java method, `selectObjectTypeFromWorkBench`, selects a value from a dropdown menu with the XPath \"#xpath=//td[text()='Object Type']//parent::tr//td//select\" on a web page. The method takes a `String` parameter `Value` which represents the value to be selected in the dropdown.\n\nThe method first waits for the dropdown element to be displayed, then scrolls to it if necessary. It then uses the `Select` class from Selenium WebDriver to select the specified value from the dropdown. If the dropdown is not present, the test fails. If an exception occurs during the process, the test also fails.\n\nThe method returns a `String` value named `selectedOption`, which is currently not being used anywhere in the code.",
        "input": [
            "String Value"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "verifyNoValueIsPresent",
        "code": "public String verifyNoValueIsPresent(String LabelName) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//lightning-formatted-text\";\n\n\t\t\tString Element1 = \"#xpath=//div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']/parent::div/following-sibling::div//div//slot//span\";\n\n\t\t\tString ScrollToElement = \"#xpath= //div[@class='oneRecordHomeFlexipage2Wrapper']/parent::div[contains(@class,'active')]//span[text()='\"\n\t\t\t\t\t+ LabelName + \"']\";\n\t\t\twaitTime(2);\n\t\t\tif (isElementDisplayed(ScrollToElement, 9)) {\n\t\t\t\tscrollToWebElement(ScrollToElement);\n\t\t\t\thighLighterMethod(ScrollToElement);\n\t\t\t\tif (isElementDisplayed(Element, 9)) {\n\t\t\t\t\ttext = getText(Element);\n\t\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\t\tmanualScreenshot(\"There is no value is stamped in \" + LabelName + \" field\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(text + \" is getting stamped in \" + LabelName);\n\t\t\t\t\t}\n\t\t\t\t} else if (isElementDisplayed(Element1, 9)) {\n\t\t\t\t\ttext = getText(Element1);\n\t\t\t\t\tif (text.isEmpty()) {\n\t\t\t\t\t\tmanualScreenshot(\"There is no value is stamped in \" + LabelName + \" field\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(text + \" is getting stamped in \" + LabelName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(LabelName + \"is not displayed\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getTextValue.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, `verifyNoValueIsPresent`, verifies if a specific label name has no value stamped in it. It takes a `String` parameter `LabelName` which is the name of the label to be verified.\n\nThe method first constructs three XPath expressions: `Element`, `Element1`, and `ScrollToElement`. These expressions are used to locate the element containing the label name, its sibling elements, and the scrollable area that contains the element, respectively.\n\nThe method then waits for a short period of time using the `waitTime` method, and checks if the `ScrollToElement` is displayed on the screen. If it is, the method scrolls to that element using the `scrollToWebElement` method, highlights it using the `highLighterMethod`, and then checks if the `Element` or `Element1` is displayed.\n\nIf either of these elements is displayed, the method retrieves its text content using the `getText` method. If the text is empty (i.e., no value is stamped in), the method takes a manual screenshot with a message indicating that there is no value. Otherwise, it fails the test step by reporting the value that was found.\n\nIf the `ScrollToElement` is not displayed, the method fails the test step by reporting that the label name is not displayed.\n\nFinally, the method returns the text content of the element (if any) or an empty string if no value is stamped in.",
        "input": [
            "String LabelName"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "GetTextUATAdminFields",
        "code": "public String GetTextUATAdminFields(String labelname) {\n\t\tString text = \"\";\n\t\ttry {\n\t\t\tString Element = \"#xpath=//span[text()='\" + labelname\n\t\t\t\t\t+ \"']/parent::div//following-sibling::div//lightning-formatted-text\";\n\t\t\tif (isElementDisplayed(Element, 8)) {\n\t\t\t\tscrollToWebElement(Element);\n\t\t\t\thighLighterMethod(Element);\n\t\t\t\ttext = getText(Element);\n\t\t\t\tmanualScreenshot(\"The \" + labelname + \" Field value is \" + text);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"No value is populated in \" + labelname + \" field\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in gettxetinmasterPage.Exception\" + e.getMessage());\n\t\t}\n\t\treturn text;\n\t}",
        "description": "This Java method, named `GetTextUATAdminFields`, retrieves the text value of a specific field on a webpage based on its label name. \n\nThe method takes a `String` parameter `labelname` which represents the label of the field to be retrieved. It uses an XPath expression to locate the element on the page and then performs several actions:\n\n1. Checks if the element is displayed (using the `isElementDisplayed` method).\n2. Scrolls to the element (using the `scrollToWebElement` method) if it's not already visible.\n3. Highlights the element (using the `highLighterMethod` method) for visibility purposes.\n4. Retrieves the text value of the element (using the `getText` method).\n5. Takes a manual screenshot with the retrieved text value as part of the file name.\n\nIf the element is not displayed, it marks the test step as failed. If any exception occurs during the execution of the method, it also marks the test step as failed and provides an error message. The method returns the retrieved text value.",
        "input": [
            "String labelname"
        ],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnButtonImgLink",
        "code": "public void clickOnButtonImgLink(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString button = buttonName + \"#xpath=//div//span[@title='client_logo.jpg']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnButtonImgLink`, simulates a click on an image link with the given `buttonName` and performs additional actions. Here's a brief description:\n\n1. Waits for 3 seconds using the `waitTime(3)` method.\n2. Creates a string `button` by concatenating the `buttonName` with an XPath expression that targets an element with the title \"client_logo.jpg\".\n3. Waits for up to 10 seconds for the element to be present using `waitForElement(button, 10)`.\n4. Checks if the element is displayed within 6 seconds using `isElementDisplayed(button, 6)`. If it's not displayed, the method fails.\n5. Scrolls to the element using `scrollToWebElement(button)` and takes a manual screenshot with the prefix \"Click on\" + `buttonName` using `manualScreenshot(\"Click on\" + buttonName)`.\n6. Clicks on the special element (likely an image link) using `clickOnSpecialElement(button)`.\n7. Waits for the page to load using `waitForPageToLoad()`, then waits for 5 seconds.\n8. If any of these steps fail, the method catches the exception and marks the test step as failed.\n\nNote that this method assumes the existence of other methods like `waitTime`, `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, `manualScreenshot`, `clickOnSpecialElement`, and `testStepFailed`.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnImgDropDownOnAdmin",
        "code": "public void clickOnImgDropDownOnAdmin(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\n\t\t\tString imgLink = buttonName + \"#xpath=//div[@class='loaded page tall']//img\";\n\t\t\tclickOn(imgLink);\n\t\t\tString button = buttonName + \"#xpath=//div/a[@title='Show More']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnImgDropDownOnAdmin`, simulates a click on an image dropdown button with the given name (`buttonName`) on an admin page. Here's a step-by-step breakdown:\n\n1. It waits for 3 seconds using the `waitTime` method.\n2. It constructs an XPath string to locate the image link, combining the provided `buttonName` with a specific XPath expression.\n3. It clicks on the constructed image link using the `clickOn` method.\n4. It waits for the button with the same name (`buttonName`) to be displayed within 10 seconds using the `waitForElement` method.\n5. If the button is displayed, it:\n\t* Scrolls to the button using the `scrollToWebElement` method.\n\t* Takes a manual screenshot of the button click using the `manualScreenshot` method.\n\t* Clicks on the button using the `clickOnSpecialElement` method.\n\t* Waits for the page to load completely using the `waitForPageToLoad` method.\n6. If the button is not displayed within 6 seconds, it fails the test step with a message indicating that the button is not present.\n\nIf any exception occurs during these steps, it catches and reports the error using the `testStepFailed` method.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnDeleteOpionAdmin",
        "code": "public void clickOnDeleteOpionAdmin(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString button = buttonName + \"#xpath=(//span[text()='\" + buttonName + \"'])[1]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDeleteOpionAdmin`, simulates a click on a specific button with the given name (`buttonName`) within an admin interface. The method attempts to:\n\n1. Wait for 3 seconds.\n2. Construct an XPath expression based on the provided button name and wait for the element to be displayed within 10 seconds.\n3. Check if the element is displayed within 6 seconds, and if so:\n\t* Scroll to the element.\n\t* Take a manual screenshot with the caption \"Click on\" followed by the button name.\n\t* Simulate a click on the element using `clickOnSpecialElement`.\n\t* Wait for the page to load.\n\t* Wait for an additional 5 seconds.\n4. If the element is not displayed, mark the test step as failed and report the error.\n\nThe method also includes exception handling, which will mark the test step as failed if any unexpected errors occur during execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnDeleteOpionAdminPopup",
        "code": "public void clickOnDeleteOpionAdminPopup(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\tString button = buttonName + \"#xpath=(//button/span[text()='\" + buttonName + \"'])[2]\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnDeleteOpionAdminPopup`, simulates a click on an option with the given name within an admin popup. The method:\n\n1. Waits for 3 seconds.\n2. Creates a string representing the XPath of the button to be clicked, combining the given `buttonName` with a specific XPath syntax.\n3. Waits up to 10 seconds for the element to become visible.\n4. If the element is displayed within 6 seconds, it scrolls to the element, takes a manual screenshot (for testing purposes), clicks on the element using the `clickOnSpecialElement` method, and waits for the page to load completely.\n5. If the element is not displayed or the click operation fails, it reports a test step failure with an error message.\n\nThe method also includes exception handling to report any errors that occur during its execution.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getImgDeleteValidationMessage",
        "code": "public String getImgDeleteValidationMessage() {\n\t\tString valiMsg = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString validation = \"Oppurtunity #xpath=(//div[@data-aura-class='uiModal forceModal']//div[@role='dialog']//div//div)[2]/div\";\n\t\t\twaitForElement(validation, 10);\n\t\t\tif (isElementDisplayed(validation, 8)) {\n\t\t\t\tvaliMsg = getText(validation);\n\t\t\t\thighLighterMethodManualScreenShot(validation, \"Validation Message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn valiMsg;\n\t}",
        "description": "This Java method, `getImgDeleteValidationMessage()`, appears to be a part of an automation test for a web application. Its purpose is to retrieve the validation message displayed when deleting an opportunity.\n\nHere's a step-by-step breakdown:\n\n1. The method waits for a page to load and then pauses for 5 seconds.\n2. It checks if a specific element (identified by XPath) is present on the page within a timeout of 10 seconds.\n3. If the element is found, it retrieves the text content of that element (the validation message).\n4. The method also takes a manual screenshot of the highlighted element for debugging purposes.\n5. If the element is not found or the test times out, the method fails the current test step.\n\nThe method returns the retrieved validation message as a string.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "getNoDocumentVisibleTxtInDocLibSectionAdmin",
        "code": "public String getNoDocumentVisibleTxtInDocLibSectionAdmin() {\n\t\tString valiMsg = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString validation = \"Oppurtunity #xpath=//flexipage-tab2[@role='tabpanel']//slot/flexipage-aura-wrapper/div\";\n\t\t\twaitForElement(validation, 10);\n\t\t\tif (isElementDisplayed(validation, 8)) {\n\t\t\t\tvaliMsg = getText(validation);\n\t\t\t\thighLighterMethodManualScreenShot(validation, \"Validation Message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn valiMsg;\n\t}",
        "description": "This Java method, `getNoDocumentVisibleTxtInDocLibSectionAdmin`, is designed to retrieve the text content of a specific element (identified by an XPath expression) on a web page. The method attempts to:\n\n1. Wait for the page to load.\n2. Wait for 5 seconds.\n3. Locate the specified element using the provided XPath expression and wait for it to be displayed within 10 seconds.\n4. If the element is displayed, retrieve its text content and take a manual screenshot of the highlighted element (using a `highLighterMethodManualScreenShot` method).\n5. If the element is not displayed, mark the test step as failed with an error message \"Opputunity Name link is not present\".\n\nThe method returns the retrieved text content as a String value, or null if the element is not found. It also catches any exceptions that occur during execution and marks the test step as failed with an error message containing the exception's message.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "getNoDocumentVisibleTxtInDocLibSectionFOS",
        "code": "public String getNoDocumentVisibleTxtInDocLibSectionFOS() {\n\t\tString valiMsg = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\twaitTime(5);\n\t\t\tString validation = \"Oppurtunity #xpath=//div[@data-aura-class='uiTabBar']//..//section[@aria-expanded='true']//div/div\";\n\t\t\twaitForElement(validation, 10);\n\t\t\tif (isElementDisplayed(validation, 8)) {\n\t\t\t\tvaliMsg = getText(validation);\n\t\t\t\thighLighterMethodManualScreenShot(validation, \"Validation Message\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn valiMsg;\n\t}",
        "description": "This Java method, `getNoDocumentVisibleTxtInDocLibSectionFOS()`, appears to be a part of an automation test script. It attempts to retrieve the text content from a specific section in a document library (Doc Lib) on a web page.\n\nHere's a brief summary of what the method does:\n\n1. Waits for the page to load and then waits for 5 seconds.\n2. Checks if a specific element with XPath `//div[@data-aura-class='uiTabBar']//..//section[@aria-expanded='true']//div/div` is displayed within 10 seconds.\n3. If the element is displayed, it gets the text content of that element and stores it in the `valiMsg` variable.\n4. If the element is not displayed, it marks the test step as failed with a message \"Opputunity Name link is not present\".\n5. In case of any exception during the execution of this method, it catches the exception and marks the test step as failed with a message \"Failed in clickOnOppurtunityNameLink\" followed by the error message.\n\nThe method returns the `valiMsg` variable containing the text content from the specified section in the document library.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "verifyDisabledCrossButtonDocInDocSecInFOS",
        "code": "public void verifyDisabledCrossButtonDocInDocSecInFOS(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\n\t\t\tString button = buttonName + \"#xpath=//h3//span[contains(text(),'\" + buttonName\n\t\t\t\t\t+ \"')]//..//..//../div[@class='disabled-waived']//..//div[@class='slds-tile__detail']//dl//div//span[@class='disable-image']\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\thighLighterMethodManualScreenShot(button, buttonName);\n\t\t\t\tmanualScreenshot(\"The \" + buttonName + \" is Frezzed\");\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyDisabledCrossButtonDocInDocSecInFOS`, appears to be a test automation step that verifies the presence and behavior of a specific button with the given name (`buttonName`) on a web page. The method uses various Selenium WebDriver commands to:\n\n1. Wait for a specified time (3 seconds) before proceeding.\n2. Locate the button using XPath and wait for it to become visible (10 seconds).\n3. Check if the button is displayed (6 seconds). If not, fail the test step.\n4. Scroll to the button and take a manual screenshot of the highlighted button (for debugging purposes).\n5. Take another manual screenshot with a descriptive title indicating that the button is frozen.\n6. Wait for the page to load completely before proceeding.\n\nIf any exceptions occur during execution, the method catches them and fails the test step with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "selectValueDropdownRightTopButton",
        "code": "public void selectValueDropdownRightTopButton(String label, String value) {\n\t\ttry {\n\t\t\tString select_option = \"\" + label\n\t\t\t\t\t+ \" #xpath=//li/lightning-button-menu/button//span[text()='Show more actions']//..//..//button\";\n\t\t\tString select_list = \"\" + value + \" #xpath=//span[text()='\" + value + \"']\";\n\t\t\tscrollToElementTillPresent(select_option);\n\t\t\tif (isElementDisplayed(select_option, 8)) {\n\t\t\t\tclickOnSpecialElement(select_option);\n\t\t\t\tif (isElementDisplayed(select_list, 8)) {\n\t\t\t\t\tclickOnSpecialElement(select_list);\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\ttestStepPassed(\"Successfully \" + label + \" selected for \" + value + \"\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(\"Failed to select \" + label + \" for \" + value + \"\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to select \" + label + \" for \" + value + \"\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(e);\n\t\t}\n\t}",
        "description": "This Java method, `selectValueDropdownRightTopButton`, is used to select a value from a dropdown menu on a webpage. It takes two parameters: `label` and `value`. The method attempts to:\n\n1. Scroll to the dropdown menu option with the given label.\n2. Click on that option if it's displayed within 8 seconds.\n3. If the option is selected, scroll to the value option in the dropdown list and click on it if it's displayed within 8 seconds.\n4. Wait for 3 seconds after selecting the value.\n5. Log a test step as passed or failed based on whether the selection was successful.\n\nIf any of these steps fail (e.g., the element is not displayed), the method logs a test step as failed and catches any exceptions that may occur during execution.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnEnabledCrossBtnDocLinkOnFOS",
        "code": "public void clickOnEnabledCrossBtnDocLinkOnFOS(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\n\t\t\tString button = buttonName + \"#xpath=//h3//span[contains(text(),'\" + buttonName\n\t\t\t\t\t+ \"')]//../../..//div[@class='slds-tile__detail']//dl//div//span[@class='disable-image']/span\";\n\t\t\twaitForElement(button, 10);\n\t\t\tif (isElementDisplayed(button, 6)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\tclickOnSpecialElement(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnEnabledCrossBtnDocLinkOnFOS`, simulates a click on an enabled button with the specified name (`buttonName`) that is located within a specific XPath structure. The method attempts to:\n\n1. Wait for 3 seconds.\n2. Find the element matching the provided button name and XPath structure.\n3. Check if the element is displayed within 6 seconds.\n4. If the element is displayed, scroll to it, take a manual screenshot, click on the element, wait for the page to load, and then wait for 5 seconds.\n5. If the element is not displayed, mark the test step as failed.\n\nIf any exception occurs during the execution of this method, it will be caught and the test step will be marked as failed with the corresponding error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "verifyImgFileDeletePopupIsDisplayed",
        "code": "public void verifyImgFileDeletePopupIsDisplayed(String buttonName) {\n\t\ttry {\n\t\t\twaitTime(3);\n\t\t\t;\n\n\t\t\tString imgLink = buttonName + \"#xpath=(//section[@role='dialog']//..//div//div//..//div[contains(text(),'\"\n\t\t\t\t\t+ buttonName + \"')])[1]\";\n\t\t\twaitForElement(imgLink, 10);\n\t\t\tif (isElementDisplayed(imgLink, 6)) {\n\t\t\t\tscrollToWebElement(imgLink);\n\t\t\t\tmanualScreenshot(\"Click on\" + buttonName);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\twaitTime(5);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(buttonName + \" button is not present\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `verifyImgFileDeletePopupIsDisplayed`, verifies that a specific popup window with an image file deletion button is displayed. The method takes a string parameter `buttonName` which represents the name of the button to be verified.\n\nHere's a brief overview of what the method does:\n\n1. Waits for 3 seconds.\n2. Creates an XPath expression based on the provided `buttonName` and checks if the popup window with the specified button is displayed within 10 seconds.\n3. If the popup window is displayed, it scrolls to the element, takes a manual screenshot, waits for the page to load, and then waits for 5 seconds.\n4. If the popup window is not displayed, it fails the test step.\n\nThe method also includes error handling using a `try-catch` block. If any exception occurs during the execution of the method, it fails the test step with an error message.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "clickOnSaveButton1",
        "code": "public void clickOnSaveButton1() {\n\t\ttry {\n\t\t\tString button = \"Save#xpath=(//button[text()='Save'])[last()]\";\n\t\t\twaitForElement(button, 60);\n\t\t\tscrollbycordinates(button);\n\t\t\tif (isElementDisplayed(button, 30)) {\n\t\t\t\tscrollToWebElement(button);\n\t\t\t\tActions action = new Actions(driver);\n\t\t\t\taction.click(findWebElement(button)).build().perform();\n\t\t\t\tmanualScreenshot(\"Click on : Save\");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Save button is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnButton. Exception : \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnSaveButton1`, simulates a click on the \"Save\" button after waiting for it to be displayed and scrolling into view if necessary.\n\nHere's a breakdown of what the method does:\n\n1. It defines a string variable `button` that contains an XPath expression to locate the \"Save\" button.\n2. The method waits up to 60 seconds for the element to be displayed using the `waitForElement` method.\n3. If the element is not visible, it attempts to scroll into view using the `scrollbycordinates` method.\n4. It then checks if the element is displayed within 30 seconds using the `isElementDisplayed` method.\n5. If the element is displayed, it uses an `Actions` object to simulate a click on the button and takes a manual screenshot with the message \"Click on : Save\".\n6. If the element is not displayed or any exception occurs during the process, the method fails the test step with an appropriate error message.\n\nIn summary, this method provides a robust way to interact with the \"Save\" button by waiting for it to be displayed, scrolling into view if necessary, and simulating a click on the button.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getLastOppurtunityId",
        "code": "public String getLastOppurtunityId() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\twaitForPageToLoad();\n\t\t\tString oppurtunity = \"Oppurtunity#xpath=(//span[text()='Opportunities']//ancestor::div//following-sibling::div/table/tbody/tr/td/a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementDisplayed(oppurtunity, 5)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `getLastOppurtunityId()`, appears to be a part of an automation test script. Its primary function is to retrieve the ID of the last opportunity listed on a web page.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It calls another method, `waitForPageToLoad()`, to ensure that the web page has finished loading.\n2. It constructs an XPath expression to locate a specific table row containing an \"Opportunities\" link.\n3. It uses the `waitForElement()` method to wait for this element to be present on the page (up to 10 seconds).\n4. If the element is displayed, it retrieves the text content of the opportunity ID using the `getText()` method and assigns it to a local variable `opportunityValue`.\n5. If the element is not displayed within the specified time limit (5 seconds), it fails the test step with an error message.\n6. In case of any exception during execution, it catches the exception and fails the test step with an error message.\n7. Finally, the method returns the retrieved opportunity ID as a string.\n\nThe method seems to be designed for testing a web application that displays opportunities, and its primary goal is to extract the ID of the last opportunity listed on the page.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "chooseValueInListTextField",
        "code": "public void chooseValueInListTextField(String labelName, String value) {\n\t\ttry {\n\t\t\tif (!value.isEmpty()) {\n\t\t\t\tSystem.out.println();\n\t\t\t\tString closeIcon = labelName + \" #xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//div//div//button\";\n\t\t\t\tif (isElementDisplayed(closeIcon, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(closeIcon);\n\t\t\t\t\twaitTime(1);\n\t\t\t\t\tscrollToElement(closeIcon);\n\t\t\t\t\thighLighterMethod(closeIcon);\n\t\t\t\t\tclickOnSpecialElement(closeIcon);\n\t\t\t\t}\n\t\t\t\tString searchField = labelName + \"#xpath=//label[contains(text(),'\" + labelName\n\t\t\t\t\t\t+ \"')]//../following-sibling::div//input\";\n\t\t\t\tString lnk_zipCity = value\n\t\t\t\t\t\t+ \"#xpath=//div[contains(@class,'slds-p-around--medium')]//table[contains(@class,'forceRecordLayout')]//tbody//td//a[@title='\"\n\t\t\t\t\t\t+ value + \"']\";\n\t\t\t\twaitTime(4);\n\t\t\t\tif (isElementDisplayed(searchField, elementLoadWaitTime)) {\n\t\t\t\t\tscrollToWebElement(searchField);\n\t\t\t\t\t// scrollToElement(searchField);\n\t\t\t\t\thighLighterMethod(searchField);\n\t\t\t\t\ttypeIn(searchField, value);\n\t\t\t\t\twaitTime(2);\n\t\t\t\t\tString search_icn = \"search tab#xpath=(//label[text()='\" + labelName\n\t\t\t\t\t\t\t+ \"']//following::div/lightning-base-combobox-item[@role='option'])[1]\";\n\t\t\t\t\twaitForElement(search_icn, 5);\n\t\t\t\t\thighLighterMethod(search_icn);\n\t\t\t\t\tclickOnSpecialElement(search_icn);\n\t\t\t\t\twaitForPageToLoad();\n\t\t\t\t\twaitTime(3);\n\t\t\t\t\twaitForElement(lnk_zipCity, 5);\n\t\t\t\t\tif (isElementDisplayed(lnk_zipCity, 9)) {\n\t\t\t\t\t\tclickOnSpecialElement(lnk_zipCity);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttestStepFailed(value + \"is not displayed\" + labelName);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in chooseValueFromSearchField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `chooseValueInListTextField`, appears to be a part of an automation script for a Salesforce Lightning application. The method takes two parameters: `labelName` and `value`. \n\nThe method's primary function is to select the value specified by the `value` parameter from a list of options in a text field with the label name provided by the `labelName` parameter. Here's a step-by-step breakdown:\n\n1. It checks if the `value` is not empty.\n2. If the `value` is not empty, it searches for an element with the close icon related to the `labelName`.\n3. If the close icon is found, it scrolls to that element, waits for a short time, highlights the element, and then clicks on it.\n4. It then searches for an input field associated with the `labelName` label.\n5. If the input field is found, it scrolls to that element, types in the `value`, waits for a short time, and then searches for a specific search icon related to the `labelName`.\n6. If the search icon is found, it highlights the icon, clicks on it, waits for the page to load, and then waits for another short period.\n7. Finally, it searches for an element with the value specified by the `value` parameter and checks if it's displayed. If it's not displayed, it fails the test step.\n\nThe method also includes error handling using a try-catch block. If any exception occurs during the execution of the method, it will fail the test step with an appropriate error message.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "Search",
        "function_name": "getLastOppurtunityName",
        "code": "public String getLastOppurtunityName() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 25);\n\t\t\tscrollbycordinates(oppurtunity);\n\t\t\tif (isElementPresent(oppurtunity)) {\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getLastOppurtunityName \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}",
        "description": "This Java method, `getLastOppurtunityName()`, attempts to retrieve the name of the last opportunity link on a web page. It uses XPath expressions and various Selenium WebDriver methods (e.g., `waitForElement`, `scrollbycordinates`, `isElementPresent`, `scrollToWebElement`, and `getText`) to locate and interact with the element.\n\nHere's a brief summary:\n\n1. The method tries to find an opportunity link using an XPath expression.\n2. It waits for the element to be present, scrolls to it, and checks if it exists.\n3. If the link is found, it retrieves its text content (i.e., the opportunity name).\n4. If any exceptions occur during this process, it reports a test step failure with the error message.\n\nThe method returns the retrieved opportunity name as a `String` value.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "Search",
        "function_name": "getLastOppurtunityNameLink",
        "code": "public String getLastOppurtunityNameLink() {\n\t\tString opportunityValue = null;\n\t\ttry {\n\t\t\t// refreshPage();\n\t\t\twaitTime(2);\n\t\t\tString oppurtunity = \"Oppurtunity #xpath=(//table[contains(@class,'-table')]//tbody//tr//a[starts-with(text(),'B')])[last()]\";\n\t\t\twaitForElement(oppurtunity, 10);\n\t\t\tif (isElementPresent(oppurtunity)) {\n\t\t\t\topportunityValue = getText(oppurtunity);\n\t\t\t\tscrollToWebElement(oppurtunity);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Opputunity Name link is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in clickOnOppurtunityNameLink \" + e.getMessage());\n\t\t}\n\t\treturn opportunityValue;\n\t}\n\n}",
        "description": "This Java method, `getLastOppurtunityNameLink()`, appears to be a part of an automated testing script that interacts with a web page. The method attempts to retrieve the name link of the last opportunity listed on the page.\n\nHere's a step-by-step breakdown:\n\n1. It initializes a variable `opportunityValue` to null.\n2. It tries to execute several steps:\n\t* Refreshes the current page (commented out, so this line might not be executed).\n\t* Waits for 2 seconds using the `waitTime()` method.\n\t* Uses an XPath expression to locate the last opportunity link on the page.\n\t* Waits up to 10 seconds for the element to become visible using the `waitForElement()` method.\n\t* Checks if the opportunity link is present using the `isElementPresent()` method.\n3. If the opportunity link is found, it retrieves its text content using the `getText()` method and stores it in `opportunityValue`. It then scrolls the page to the location of the link using the `scrollToWebElement()` method.\n4. If the opportunity link is not present, it fails the test step with a message indicating that the link was not found.\n5. In case an exception occurs during any of these steps, it catches and logs the error using the `testStepFailed()` method.\n\nThe method ultimately returns the value stored in `opportunityValue`, which should be the name link of the last opportunity listed on the page if successful.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "selectDropDownValue",
        "code": "public void selectDropDownValue(String field, String expectedOption) {\n\t\ttry {\n\t\t\tString dropDownFieldSelect = field + \"#xpath= //label[text()='\" + field + \"']/parent::p//select\";\n\t\t\twaitForElement(dropDownFieldSelect, 10);\n\t\t\tif (isElementDisplayed(dropDownFieldSelect, 5)) {\n\t\t\t\tSelect staticDropDown = new Select(findWebElement(dropDownFieldSelect));\n\t\t\t\tstaticDropDown.selectByVisibleText(expectedOption);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(field + \" is not displayed in \" + implicitlyWaitTime + \" seconds.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to handle dropdown. Error: \" + e.getMessage());\n\t\t\ttestStepFailed(\"Failed to handle dropdown.\");\n\t\t}\n\t}",
        "description": "This Java method is used to select a specific value from a drop-down list in a web page. It takes two parameters: `field` (the name of the field) and `expectedOption` (the expected value to be selected).\n\nThe method first constructs an XPath expression to locate the drop-down element based on the provided `field`. It then waits for the element to be displayed using the `waitForElement` method. If the element is displayed, it uses a `Select` class to select the desired option by its visible text.\n\nIf the element is not displayed within the specified time (10 seconds), the method fails the test step and logs an error message. If any other exception occurs during the execution of the method, it writes an error message to the log file and fails the test step.",
        "input": [
            "String field",
            "String expectedOption"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "executeQueryInWorkbench",
        "code": "public void executeQueryInWorkbench(String query) {\n\t\ttry {\n\t\t\tString textField = \"Enter or modify a SOQL query #xpath=//textarea[@id='soql_query_textarea']\";\n\t\t\twaitForElement(textField, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(textField, elementLoadWaitTime)) {\n\t\t\t\ttypeIn(textField, query);\n\t\t\t\tString Query = \"Query#xpath=(//input[normalize-space(@value)='Query'])[last()]\";\n\t\t\t\tclickOn(Query);\n\t\t\t\twaitTime(4);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Query textfield is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in executeQueryInWorkbench. Exception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `executeQueryInWorkbench`, executes a query in a workbench by:\n\n1. Waiting for a text field to be loaded and displayed.\n2. If the text field is present, it types the provided query into the field.\n3. It then clicks on the \"Query\" button to execute the query.\n4. If any of these steps fail (e.g., the text field is not present), the method reports a test step failure with an error message.\n\nThe method uses various WebDriver methods such as `waitForElement`, `isElementDisplayed`, `typeIn`, and `clickOn` to interact with the workbench UI, and also includes try-catch blocks to handle any exceptions that may occur during execution.",
        "input": [
            "String query"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getIdValueInWorkbench",
        "code": "public String getIdValueInWorkbench() {\n\t\tString Id = null;\n\t\ttry {\n\t\t\tString textField = \" Query_results#xpath=//table[@id='query_results']//td//a\";\n\t\t\twaitForElement(textField, elementLoadWaitTime);\n\t\t\tif (isElementDisplayed(textField, elementLoadWaitTime)) {\n\t\t\t\tId = getText(textField);\n\t\t\t\twaitTime(4);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Query textfield is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in executeQueryInWorkbench. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn Id;\n\t}",
        "description": "This Java method, `getIdValueInWorkbench`, attempts to retrieve the text value of a specific element (identified by an XPath expression) within a workbench application. The method:\n\n1. Waits for the specified element to load and become visible.\n2. Checks if the element is displayed; if not, it fails the test step with an error message.\n3. Retrieves the text value of the element.\n4. Waits for a short period (4 seconds) before returning the ID value.\n\nThe method returns the retrieved ID value as a `String`. If any exceptions occur during execution, the method catches them and reports a failure in the test step.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "selectCheckBox",
        "code": "public void selectCheckBox(String label) {\n\t\ttry {\n\t\t\tString checkbox = \"checkbox #xpath=//a[text()[normalize-space()='\" + label\n\t\t\t\t\t+ \"']]/parent::label/parent::div//input[@type='checkbox']\";\n\t\t\twaitForElement(checkbox, 10);\n\t\t\tif (isElementDisplayed(checkbox, 2)) {\n\t\t\t\tWebElement checkboxes = findWebElement(checkbox);\n\t\t\t\tif (checkboxes.isSelected()) {\n\t\t\t\t\ttestStepPassed(label + \" checkbox is already selected \");\n\t\t\t\t} else {\n\t\t\t\t\tclickOn(checkbox);\n\t\t\t\t\ttestStepPassed(label + \" checkbox is clicked \");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" checkbox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOn checkbox\" + label + \" Exception - \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectCheckBox`, is used to select a checkbox on a web page based on its label. It uses an XPath expression to locate the checkbox element and then performs the following actions:\n\n1. Waits for the checkbox element to be displayed (up to 10 seconds).\n2. Checks if the checkbox is already selected.\n3. If not selected, clicks on the checkbox.\n4. Verifies that the checkbox has been selected by checking its state again.\n\nIf any of these steps fail or the checkbox is not present, the method will report a test step failure with an appropriate message.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "clickOnRedioBox",
        "code": "public void clickOnRedioBox(String label) {\n\t\ttry {\n\t\t\tString radiobox = \"radiobox #xpath=//input[@value='\" + label + \"']\";\n\t\t\twaitForElement(radiobox, 10);\n\t\t\tif (isElementDisplayed(radiobox, 2)) {\n\t\t\t\tclickOn(radiobox);\n\t\t\t\ttestStepPassed(label + \" radiobox is clicked \");\n\t\t\t} else {\n\t\t\t\ttestStepFailed(label + \" radiobox is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to clickOn radiobox\" + label + \" Exception - \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `clickOnRedioBox`, attempts to click on a radio box element with the specified label. Here's what it does:\n\n1. It constructs an XPath expression to locate the radio box element by its value attribute, matching the provided label.\n2. It waits for up to 10 seconds for the element to be present and visible using the `waitForElement` method.\n3. If the element is displayed within 2 seconds, it clicks on the radio box using the `clickOn` method.\n4. If the element is not displayed or an exception occurs during the process, it reports a test step failure with an appropriate message.\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report them as test step failures.",
        "input": [
            "String label"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "clickOnHeaderTab",
        "code": "public void clickOnHeaderTab(String Tab_Name, String Tab_Options) {\n\t\ttry {\n\t\t\tString tab_name = Tab_Name + \" tab #xpath=//span[text()='\" + Tab_Name + \"']/parent::a\";\n\t\t\tString tab_options = Tab_Options + \" Option #xpath=//span[text()='\" + Tab_Name\n\t\t\t\t\t+ \"']/parent::a/following::a[text()='\" + Tab_Options + \"']\";\n\t\t\twaitForElement(tab_name, 10);\n\t\t\tclickOn(tab_name);\n\t\t\tWebElement tab_names = findWebElement(tab_options);\n\t\t\tActions action = new Actions(driver);\n\t\t\tif (isElementDisplayed(tab_options, 5)) {\n\t\t\t\taction.moveToElement(tab_names).perform();\n\t\t\t\tclickOn(tab_options);\n\t\t\t} else\n\t\t\t\ttestStepFailed(Tab_Options + \" button is not dispalyed in 10 seconds.\");\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to click on header button \" + Tab_Options + \". Error: \" + e.getMessage());\n\t\t\ttestStepFailed(\"Failed to click on header button \" + Tab_Options + \".\");\n\t\t}\n\t}",
        "description": "This Java method, `clickOnHeaderTab`, is used to simulate a click on a specific tab option in a web page. The method takes two parameters:\n\n* `Tab_Name`: the name of the tab\n* `Tab_Options`: the name of the option within that tab\n\nThe method first constructs XPath expressions for the tab and its options using the provided names. It then waits for the tab to be displayed, clicks on it, and moves the mouse cursor over the option if it is displayed. If the option is not displayed within a certain time limit (5 seconds), the test step fails.\n\nIf any exception occurs during the execution of this method, an error log entry is written, and the test step fails with an error message indicating that the tab option was not clicked successfully.",
        "input": [
            "String Tab_Name",
            "String Tab_Options"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "workBenchLogout",
        "code": "public void workBenchLogout(String Tab_Options) {\n\t\ttry {\n\t\t\tString tab_name = \" tab_ Name#xpath=//img[contains(@src,workbench)]\";\n\t\t\tString tab_options = Tab_Options + \"Tab_Options#xpath=//img[contains(@src,workbench)]/following::a[text()='\"\n\t\t\t\t\t+ Tab_Options + \"']\";\n\t\t\twaitForElement(tab_name, 10);\n\t\t\tclickOn(tab_name);\n\t\t\tWebElement tab_names = findWebElement(tab_options);\n\t\t\tActions action = new Actions(driver);\n\t\t\tif (isElementDisplayed(tab_options, 5)) {\n\t\t\t\taction.moveToElement(tab_names).perform();\n\t\t\t\tclickOn(tab_options);\n\t\t\t} else\n\t\t\t\ttestStepFailed(Tab_Options + \" button is not dispalyed in 10 seconds.\");\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to click on header button \" + Tab_Options + \". Error: \" + e.getMessage());\n\t\t\ttestStepFailed(\"Failed to click on header button \" + Tab_Options + \".\");\n\t\t}\n\t}",
        "description": "This Java method, `workBenchLogout`, is used to log out of a workbench application. It takes one parameter, `Tab_Options`, which represents the name of the tab to be logged out from.\n\nThe method attempts to locate an image with the specified text (\"workbench\") and click on it. If the image is found, it then moves the mouse over the tab option element (also identified by the \"workbench\" text) and clicks on it. This action simulates a log out from the workbench application.\n\nThe method also includes error handling to catch any exceptions that may occur during execution. If an exception occurs, it writes an error message to a log file and marks the test step as failed.",
        "input": [
            "String Tab_Options"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "enterTextField",
        "code": "public void enterTextField(String label, String value) {\n\t\ttry {\n\t\t\tString textField = label + \"#xpath=//strong[text()='\" + label + \"']/following::textarea\";\n\t\t\twaitForElement(textField, 10);\n\t\t\tif (isElementDisplayed(textField, 5)) {\n\t\t\t\ttypeIn(textField, value);\n\t\t\t} else\n\t\t\t\ttestStepFailed(label + \" is not displayed in \" + implicitlyWaitTime + \" seconds.\");\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to type in \" + label + \". Error: \" + e.getMessage());\n\t\t\ttestStepFailed(\"Failed to type in \" + label + \".\");\n\t\t}\n\t}",
        "description": "This Java method, `enterTextField`, is used to enter a value into a text field on a web page. It takes two parameters: the label of the text field and the value to be entered.\n\nHere's what it does:\n\n1. It constructs an XPath expression by concatenating the label with a specific XPath syntax.\n2. It waits for the element represented by the XPath expression to be displayed (up to 10 seconds).\n3. If the element is displayed, it types in the specified value into the text field.\n4. If the element is not displayed within the given time limit, it marks the test step as failed and logs an error message.\n\nIf any exception occurs during this process, it catches the exception, writes an error message to a log file, and also marks the test step as failed.",
        "input": [
            "String label",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "enterTextField",
        "code": "public void enterTextField(String value) {\n\t\ttry {\n\t\t\tString textField = \" Request Body #xpath=//textarea[@id='scriptInput']\";\n\t\t\tif (isElementDisplayed(textField, 5)) {\n\t\t\t\ttypeIn(textField, value);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to type in textarea.\");\n\t\t}\n\t}",
        "description": "This Java method is used to enter a given string value into a text field on a web page. The method takes a `String` parameter `value` which represents the input value to be entered.\n\nThe method first checks if an element with the specified XPath (in this case, a textarea with id 'scriptInput') is displayed within 5 seconds using the `isElementDisplayed()` method. If the element is displayed, it then uses the `typeIn()` method to enter the provided `value` into the text field.\n\nIf any exception occurs during the process, the method catches it and marks the test step as failed with a message \"Failed to type in textarea.\"",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "enterUrlInTextField",
        "code": "public void enterUrlInTextField(String value) {\n\t\ttry {\n\t\t\tString urlInput = \"Service URL #xpath=//input[@id='urlInput']\";\n\t\t\tif (isElementDisplayed(urlInput, 5)) {\n\t\t\t\ttypeIn(urlInput, value);\n\t\t\t} else\n\t\t\t\ttestStepFailed(\"URL_input is not displayed in \" + implicitlyWaitTime + \" seconds.\");\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to type URL_input . Error: \" + e.getMessage());\n\t\t\ttestStepFailed(\"Failed to type URL_input .\");\n\t\t}\n\t}",
        "description": "This Java method, `enterUrlInTextField(String value)`, is used to enter a given URL into a text field in a web application. It takes a string parameter `value` representing the URL to be entered.\n\nThe method first checks if an element with the specified XPath and ID (`\"Service URL #xpath=//input[@id='urlInput']\"`) is displayed within a certain time limit (5 seconds). If the element is displayed, it uses another method called `typeIn()` to enter the given URL into the text field.\n\nIf the element is not displayed within the specified time, the method fails the test step with an error message. In case of any exceptions during the execution of this method, it writes the error message to a log file and also fails the test step.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getScriptWithReplacedValue",
        "code": "public String getScriptWithReplacedValue(String scriptValue, String[] replaceLabel, String[] replaceValue) {\n\t\tString replacedScript = \"\";\n\t\ttry {\n\t\t\tif (!(scriptValue.isEmpty())) {\n\t\t\t\tString getValue = null;\n\t\t\t\tString str1 = scriptValue.replace(\"\\\"\", \"\");\n\n\t\t\t\tString[] arr = str1.split(\",\");\n\t\t\t\tfor (int j = 0; j < replaceLabel.length; j++) {\n\t\t\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\t\t\tString text = arr[i];\n\t\t\t\t\t\tif (text.contains(replaceLabel[j])) {\n\t\t\t\t\t\t\tgetValue = arr[i];\n\t\t\t\t\t\t\tif (getValue.contains(\"{\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"{\", \"\");\n\t\t\t\t\t\t\t} else if (getValue.contains(\"}\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"}\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = getValue.split(\":\")[1];\n\t\t\t\t\t\t\tif (getValue.contains(\"\\r\\n\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"\\r\\n\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = getValue.trim();\n\t\t\t\t\t\t\tscriptValue = scriptValue.replace(getValue, replaceValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treplacedScript = scriptValue;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to change  \");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn replacedScript;\n\t}",
        "description": "This Java method, `getScriptWithReplacedValue`, takes three parameters: a script value string, an array of replacement labels, and an array of replacement values. It replaces specific values in the script with corresponding replacement values based on matching labels.\n\nHere's a step-by-step breakdown:\n\n1. The method first checks if the input script value is not empty.\n2. If it's not empty, it splits the script value into an array of strings using commas as delimiters.\n3. It then iterates through each label in the `replaceLabel` array and checks if any of the script values contain that label.\n4. When a match is found, it extracts the corresponding value from the script, removes unnecessary characters (e.g., curly braces, line breaks), trims the result, and replaces the original value with the replacement value from the `replaceValue` array in the script.\n5. The method returns the modified script value as a string.\n\nIf the input script value is empty, it calls a `testStepFailed` method (not shown) to indicate an error. If any exceptions occur during the processing, they are printed to the console using `e.printStackTrace()`.",
        "input": [
            "String scriptValue",
            "String replaceLabel",
            "String replaceValue"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "clickButton",
        "code": "public void clickButton(String buttonName) {\n\t\ttry {\n\t\t\tboolean status = false;\n\t\t\tString button = buttonName + \"#xpath=//input[normalize-space(@value)='\" + buttonName + \"']\";\n\t\t\tparseidentifyByAndlocator(button);\n\t\t\tList<WebElement> fields = driver.findElements(By.xpath(locator));\n\t\t\tSystem.out.println(fields.size());\n\t\t\tfor (int iterator = 1; iterator <= fields.size(); iterator++) {\n\t\t\t\tif (isElementDisplayed(button + \"[\" + iterator + \"]\", 6)) {\n\t\t\t\t\tscrollToElement(button + \"[\" + iterator + \"]\");\n\t\t\t\t\tclickOn(button + \"[\" + iterator + \"]\");\n\t\t\t\t\tstatus = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!status) {\n\t\t\t\ttestStepFailed(buttonName + \" button is not found.\");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\twriteToLogFile(\"ERROR\", \"Failed to click on \" + buttonName + \".\");\n\t\t\ttestStepFailed(\"Failed to click on \" + buttonName + \". ERROR:\" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, named `clickButton`, is used to simulate a click on a specific button with the given name. The method uses Selenium WebDriver and XPath expressions to locate the button elements.\n\nHere's a step-by-step breakdown of what the method does:\n\n1. It takes a `String` parameter `buttonName`, which represents the name of the button to be clicked.\n2. It constructs an XPath expression by concatenating the `buttonName` with a specific locator string, which is used to identify the button elements.\n3. It calls another method `parseidentifyByAndlocator(button)` (not shown in this code snippet) to parse the XPath expression and locate the button elements.\n4. It uses Selenium's `findElements` method to retrieve a list of `WebElement` objects representing the found button elements.\n5. It iterates through the list of buttons, checking if each element is displayed using the `isElementDisplayed` method (not shown in this code snippet). If an element is not displayed, it skips to the next iteration.\n6. Once a displayed button is found, it scrolls to that button using the `scrollToElement` method (not shown in this code snippet) and then clicks on it using the `clickOn` method (not shown in this code snippet).\n7. If no buttons are found or an error occurs during the process, it sets a `status` variable to `false`.\n8. If the `status` is still `false`, it marks the test step as failed and writes an error message to a log file.\n9. If an exception occurs during the method execution, it catches the exception, writes an error message to a log file, and marks the test step as failed.\n\nIn summary, this method attempts to find and click on a button with the given name using Selenium WebDriver and XPath expressions.",
        "input": [
            "String buttonName"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getWorkbenchScriptWithReplacedValue",
        "code": "public String getWorkbenchScriptWithReplacedValue(String scriptValue, String[] replaceLabel,\n\t\t\tString[] replaceValue) {\n\t\tString replacedScript = \"\";\n\t\ttry {\n\t\t\tif (!(scriptValue.isEmpty())) {\n\t\t\t\tString getValue = null;\n\t\t\t\tString str1 = scriptValue.replace(\"\\\"\", \"\");\n\n\t\t\t\tString[] arr = str1.split(\"\\n\");\n\t\t\t\tfor (int j = 0; j < replaceLabel.length; j++) {\n\t\t\t\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\t\t\t\tString text = arr[i];\n\t\t\t\t\t\tif (text.contains(replaceLabel[j])) {\n\t\t\t\t\t\t\tgetValue = arr[i];\n\t\t\t\t\t\t\tif (getValue.contains(\"{\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"{\", \"\");\n\t\t\t\t\t\t\t} else if (getValue.contains(\"}\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"}\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = getValue.split(\"=\")[1];\n\t\t\t\t\t\t\tif (getValue.contains(\"\\r\\n\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"\\r\\n\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = removeSpecialCharacters(getValue);\n\t\t\t\t\t\t\tgetValue = getValue.trim();\n\t\t\t\t\t\t\tscriptValue = scriptValue.replace(getValue, replaceValue[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treplacedScript = scriptValue;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to modify the script.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed to Get Work bench Script With Replaced Value. Exception : \" + e.getMessage());\n\t\t}\n\t\treturn replacedScript;\n\t}",
        "description": "This Java method, `getWorkbenchScriptWithReplacedValue`, takes three parameters: a script value string, an array of replacement labels, and another array of replacement values. It replaces occurrences of the replacement labels in the script with their corresponding replacement values.\n\nHere's a step-by-step breakdown:\n\n1. It checks if the script value is not empty.\n2. If it's not empty, it splits the script into lines using `\\n` as the delimiter.\n3. For each line and for each replacement label, it checks if the label exists in the line.\n4. If the label is found, it extracts the value associated with the label, removes special characters, trims the value, and replaces the original occurrence of the label in the script with the extracted value.\n5. The method returns the modified script value.\n\nIf the script value is empty or an exception occurs during processing, the method logs a failure message using `testStepFailed` and returns the original script value (if it's not empty) or an empty string (if it is).",
        "input": [
            "String scriptValue",
            "String replaceLabel",
            "String replaceValue"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "enterValueInExecuteScriptField",
        "code": "public void enterValueInExecuteScriptField(String value) {\n\t\ttry {\n\t\t\tString field = \"#xpath=//tr//td//textarea[contains(@id,'script')]\";\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollbycordinates(field);\n\n\t\t\t\ttypeIn(field, value);\n\t\t\t\thighLighterMethod(field);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Execute Script field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `enterValueInExecuteScriptField`, enters a given value into an Execute Script field on a web page. It uses XPath to locate the field and then performs the following actions:\n\n1. Scrolls the field into view if it's not already visible.\n2. Types the provided value into the field.\n3. Highlights the entered text (optional, as indicated by `highLighterMethod`).\n\nThe method also includes error handling to catch any exceptions that may occur during execution and report a test step failure.",
        "input": [
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getReplacedScriptValueWithColon",
        "code": "public String getReplacedScriptValueWithColon(String scriptValue, String[] replaceLabel, String[] replaceValue) {\n\t\tString replacedScript = \"\";\n\t\ttry {\n\t\t\tSystem.out.println();\n\t\t\tif (!(scriptValue.isEmpty())) {\n\t\t\t\tString getValue = null;\n\t\t\t\tString str1 = scriptValue.replace(\"\\\"\", \"\");\n\n\t\t\t\tString[] arr = str1.split(\";\");\n\t\t\t\tfor (int j = 0; j < replaceLabel.length - 1; j++) {\n\t\t\t\t\tfor (int i = 0; i < arr.length - 1; i++) {\n\t\t\t\t\t\tString text = arr[i].trim();\n\t\t\t\t\t\tif (text.contains(replaceLabel[j])) {\n\t\t\t\t\t\t\tgetValue = arr[i];\n\t\t\t\t\t\t\tif (getValue.contains(\"{\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"{\", \"\");\n\t\t\t\t\t\t\t} else if (getValue.contains(\"}\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"}\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = getValue.split(\"=\")[1];\n\t\t\t\t\t\t\tif (getValue.contains(\"\\r\\n\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"\\r\\n\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (getValue.contains(\"'\")) {\n\t\t\t\t\t\t\t\tgetValue = getValue.replace(\"'\", \"\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tgetValue = getValue.trim();\n\t\t\t\t\t\t\tif (replaceLabel[j].equalsIgnoreCase(\"CTR_Is_Eligible__c\")) {\n\t\t\t\t\t\t\t\tString replacedText = text.replace(getValue, replaceValue[j]);\n\t\t\t\t\t\t\t\tscriptValue = scriptValue.replace(text, replacedText);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tscriptValue = scriptValue.replace(getValue, replaceValue[j]);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treplacedScript = scriptValue;\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to change  \");\n\t\t\t}\n\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn replacedScript;\n\t}",
        "description": "This Java method, `getReplacedScriptValueWithColon`, takes three string parameters: `scriptValue`, `replaceLabel`, and `replaceValue`. It replaces specific values in the `scriptValue` with corresponding values from the `replaceValue` array, based on matching labels provided in the `replaceLabel` array. The replaced script value is then returned as a string.\n\nThe method iterates through the `scriptValue` (split by semicolons), checks if each segment contains any of the labels in the `replaceLabel` array, and replaces the corresponding values with those from the `replaceValue` array. It also handles special characters like curly braces, equals signs, line breaks, and apostrophes.\n\nIf the `scriptValue` is empty, the method calls a `testStepFailed` method (not shown) to indicate an error. Otherwise, it returns the replaced script value as a string.",
        "input": [
            "String scriptValue",
            "String replaceLabel",
            "String replaceValue"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "enterValueInFieldForOTPProcess",
        "code": "public void enterValueInFieldForOTPProcess(String labelName, String value) {\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//label[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::th/following-sibling::td//input\";\n\t\t\tString Field = labelName + \"#xpath=//label[text()='\" + labelName + \"']/following-sibling::div//input\";\n\t\t\tif (isElementDisplayed(field, 15)) {\n\t\t\t\thighLighterMethod(field);\n\t\t\t\ttypeIn(field, value);\n\t\t\t} else if (isElementDisplayed(Field, 10)) {\n\t\t\t\thighLighterMethod(Field);\n\t\t\t\ttypeIn(Field, value);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in enterValueInField \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method enters a given `value` into an input field with the specified `labelName`. It uses XPath expressions to locate the field, and attempts to enter the value twice using two different XPath expressions (`field` and `Field`). If either of these attempts is successful, it highlights the field and types in the value. If neither attempt is successful, it reports a test step failure. The method also includes error handling for any exceptions that may occur during execution.",
        "input": [
            "String labelName",
            "String value"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "selectOrDeselectCheckbox",
        "code": "public void selectOrDeselectCheckbox(String checkboxLabel, String status) {\n\t\ttry {\n\t\t\tString checkbox = checkboxLabel + \" #xpath=//div[normalize-space(text())='\" + checkboxLabel + \"']/input\";\n\t\t\tscrollToWebElement(checkbox);\n\t\t\tif (status.equalsIgnoreCase(\"check\")) {\n\t\t\t\tif (!isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully checked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" check box is already checked\");\n\t\t\t\t}\n\t\t\t} else if (status.equalsIgnoreCase(\"uncheck\")) {\n\t\t\t\tif (isCheckBoxSelected(checkbox)) {\n\t\t\t\t\tclickOnSpecialElement(checkbox);\n\t\t\t\t\ttestStepPassed(checkboxLabel + \" Check box is successfully Unchecked\");\n\t\t\t\t} else {\n\t\t\t\t\ttestStepInfo(checkboxLabel + \" Check box is already Unchecked\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in selectOrDeselectCheckbox \" + e.getMessage());\n\t\t}\n\t}",
        "description": "This Java method, `selectOrDeselectCheckbox`, is used to check or uncheck a checkbox on a web page based on the provided status (\"check\" or \"uncheck\"). It uses an XPath expression to locate the checkbox and then performs the desired action. If the checkbox is already in the desired state, it logs a message indicating that the box is already checked or unchecked. If an error occurs during the process, it logs a failure message with the exception details.",
        "input": [
            "String checkboxLabel",
            "String status"
        ],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getResponseTextFromWorkbench",
        "code": "public String getResponseTextFromWorkbench() {\n\t\tString ResponseValue = null;\n\t\ttry {\n\t\t\tString responseField = \"#xpath=//strong[text()='Raw Response']/../p\";\n\t\t\twaitForElement(responseField, 5);\n\t\t\tif (isElementDisplayed(responseField, 5)) {\n\t\t\t\tscrollToWebElement(responseField);\n\t\t\t\tResponseValue = getText(responseField);\n\t\t\t\tmanualScreenshot(\"Raw Response : \" + ResponseValue);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Raw response value is not present.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Get Response Text From Work bench. Execution : \" + e.getMessage());\n\t\t}\n\n\t\treturn ResponseValue;\n\t}",
        "description": "This Java method, `getResponseTextFromWorkbench`, retrieves the text value of a specific element on a web page and returns it as a string. The method uses Selenium WebDriver to interact with the web page, waiting for the element to be displayed, scrolling to it if necessary, and then extracting its text content.\n\nHere's a step-by-step breakdown:\n\n1. It defines a local variable `ResponseValue` initialized to null.\n2. It attempts to execute a try block, which includes:\n\t* Defining an XPath expression to locate an HTML element with the text \"Raw Response\" within a parent element (`responseField`).\n\t* Waiting for the element to be displayed using `waitForElement` (with a timeout of 5 seconds).\n\t* Checking if the element is actually displayed using `isElementDisplayed` (also with a timeout of 5 seconds). If not, it fails the test step.\n\t* Scrolling to the element if necessary using `scrollToWebElement`.\n\t* Extracting the text content of the element using `getText` and storing it in `ResponseValue`.\n3. It takes a manual screenshot with the label \"Raw Response : <ResponseValue>\" (where `<ResponseValue>` is replaced with the actual value).\n4. If any exception occurs during this process, it catches it and fails the test step with an error message.\n5. Finally, the method returns the `ResponseValue` string.\n\nThis method seems to be part of a larger automation framework for testing web applications using Selenium WebDriver.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "splitParticularKeyValueFromResponse",
        "code": "public String splitParticularKeyValueFromResponse(String scriptValue, String scriptLabel) {\n\t\tString splittedValue = null;\n\t\ttry {\n\t\t\tif (!(scriptValue.isEmpty())) {\n\t\t\t\tscriptValue = scriptValue.replace(\"\\n\", \"\");\n\t\t\t\tString str1[] = scriptValue.split(\",\");\n\t\t\t\tfor (int i = 0; i < str1.length; i++) {\n\t\t\t\t\tString str = str1[i];\n\t\t\t\t\tif (str1[i].contains(scriptLabel)) {\n\t\t\t\t\t\tString value = str1[i].split(\":\")[1];\n\t\t\t\t\t\tsplittedValue = removeSpecialCharacters(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Empty parameter in Split Particular Key Value From Response method.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Split Particular Key Value From Response. Execution : \" + e.getMessage());\n\t\t}\n\t\treturn splittedValue;\n\t}",
        "description": "This Java method, `splitParticularKeyValueFromResponse`, takes two string parameters: `scriptValue` and `scriptLabel`. It splits the `scriptValue` string by commas, then iterates through the resulting array of strings. For each string, it checks if the string contains the provided `scriptLabel`. If a match is found, it extracts the value part (i.e., everything after the colon) and removes any special characters from that value using another method (`removeSpecialCharacters`). The extracted value is then returned as a string. If the `scriptValue` is empty or an exception occurs during processing, the method reports an error and returns null.",
        "input": [
            "String scriptValue",
            "String scriptLabel"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "splitParticularKeyValueFromResponseWithColon",
        "code": "public String splitParticularKeyValueFromResponseWithColon(String scriptValue, String scriptLabel) {\n\t\tString splittedValue = null;\n\t\ttry {\n\t\t\tif (!(scriptValue.isEmpty())) {\n\t\t\t\tString str1[] = scriptValue.split(\"\\n\");\n\t\t\t\tfor (int i = 0; i < str1.length; i++) {\n\t\t\t\t\tif (str1[i].contains(scriptLabel)) {\n\t\t\t\t\t\tString value = str1[i].split(\":\")[1];\n\t\t\t\t\t\tsplittedValue = removeSpecialCharacters(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Empty parameter in Split Particular Key Value From Response method.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in Split Particular Key Value From Response. Execution : \" + e.getMessage());\n\t\t}\n\t\treturn splittedValue;\n\t}",
        "description": "This Java method, `splitParticularKeyValueFromResponseWithColon`, takes two string parameters, `scriptValue` and `scriptLabel`. It splits the `scriptValue` into an array of strings using newline characters (`\\n`) as delimiters. Then it iterates through this array to find a line that contains the specified `scriptLabel`. If found, it extracts the value part of that line (everything after the colon `:`) and removes any special characters from it using another method called `removeSpecialCharacters`. The method returns the processed value if successful; otherwise, it fails the test step with an error message.",
        "input": [
            "String scriptValue",
            "String scriptLabel"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getOCRId",
        "code": "public String getOCRId() {\n\t\tString OCR_Id = null;\n\t\ttry {\n\t\t\tString url = driver.getCurrentUrl();\n\t\t\tif (!(url.isEmpty())) {\n\t\t\t\tString[] splited_Url = url.split(\"OCR__c/\");\n\t\t\t\tint size = splited_Url.length;\n\t\t\t\tString[] ocrId = splited_Url[size - 1].split(\"/\");\n\t\t\t\tOCR_Id = ocrId[0];\n\t\t\t\ttestStepPassed(\"Successfully got OCR Id : \" + OCR_Id);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get OCR id\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\treturn OCR_Id;\n\t}",
        "description": "This Java method, `getOCRId()`, retrieves the OCR ID from the current URL of a driver and returns it as a string. It attempts to split the URL by \"OCR__c/\" and then further splits the last part of the resulting array by \"/\" to extract the OCR ID. If the OCR ID is successfully extracted, it logs that the test step passed with the OCR ID. If not, it logs that the test step failed. The method also catches any exceptions that may occur during the process.",
        "input": [],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "verifyCTRChargeTaskIsCreated",
        "code": "public void verifyCTRChargeTaskIsCreated() {\n\t\tString CTRChargeTask = \"CTR Charge Task#xpath=//td[contains(normalize-space(text()),'CTR_AMT')]\";\n\t\tString task = \"CTR Charge Task#xpath=//td[contains(normalize-space(text()),'CTR_AMT')]/preceding-sibling::td//a\";\n\t\ttry {\n\t\t\twaitForElement(CTRChargeTask, 20);\n\t\t\tif (isElementDisplayed(CTRChargeTask, 15)) {\n\t\t\t\tscrollToWebElement(CTRChargeTask);\n\t\t\t\thighLighterMethod(CTRChargeTask);\n\t\t\t\tString text = getText(task);\n\t\t\t\tmanualScreenshot(\"CTR Charge Task : \" + text);\n\t\t\t\ttestStepPassed(\"Successfully CTR Charge task '\" + text + \"' is created.\");\n\t\t\t\tclickOnSpecialElement(task);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"CTR Charge task is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCTRChargeTaskIsCreated. Exeception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyCTRChargeTaskIsCreated()`, is used to verify that a specific task named \"CTR Charge Task\" has been created in a UI application. \n\nThe method first waits for the element matching the XPath expression `//td[contains(normalize-space(text()),'CTR_AMT')]` (which represents the CTR Charge Task) to be displayed within 20 seconds. If the element is displayed, it then scrolls to and highlights this element using Selenium WebDriver methods.\n\nNext, it retrieves the text of another element with an XPath expression that starts from the same location as before but traverses up to the preceding sibling `td` tag followed by an `a` tag. This text is stored in a variable named `text`.\n\nThe method then takes a manual screenshot with the text of this task and logs a test step as \"Successfully CTR Charge task '<task>' is created.\" if the task has been successfully created.\n\nIf the task is not created, it logs a test step failure with the message \"CTR Charge task is not created.\"\n\nIn case any exception occurs during the execution of this method, it catches the exception and logs a test step failure with the exception message.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "verifyCTRChargeTaskIsNotCreated",
        "code": "public void verifyCTRChargeTaskIsNotCreated() {\n\t\tString CTRChargeTask = \"CTR Charge Task#xpath=//td[contains(normalize-space(text()),'CTR_AMT')]\";\n\t\tString task = \"CTR Charge Task#xpath=//td[contains(normalize-space(text()),'CTR_AMT')]/preceding-sibling::td//a\";\n\t\ttry {\n\t\t\twaitForElement(CTRChargeTask, 10);\n\t\t\tif (isElementDisplayed(CTRChargeTask, 15)) {\n\t\t\t\tscrollToWebElement(CTRChargeTask);\n\t\t\t\thighLighterMethod(CTRChargeTask);\n\t\t\t\tString text = getText(task);\n\t\t\t\ttestStepFailed(\"CTR Charge Task : \" + text);\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(\"CTR Charge task is not created.\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyCTRChargeTaskIsNotCreated. Exeception : \" + e.getMessage());\n\t\t}\n\n\t}",
        "description": "This Java method, `verifyCTRChargeTaskIsNotCreated`, is used to verify that a specific task, \"CTR Charge Task\", has not been created on the UI. It uses various Selenium WebDriver methods to:\n\n1. Wait for the task element to be present (up to 10 seconds).\n2. Check if the task element is displayed (up to 15 seconds).\n3. If the task is displayed, scroll to it and highlight it.\n4. Get the text of a specific preceding sibling element (`task` variable).\n5. If the task is not created, take a manual screenshot.\n6. Catch any exceptions that occur during the execution of this method and report them as test step failures.\n\nThe method appears to be part of an automated testing framework for verifying the UI state after certain actions or scenarios have been executed.",
        "input": [],
        "output": "void"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "verifyAutoPopulatedTextInTask",
        "code": "public String verifyAutoPopulatedTextInTask(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div//span//span\";\n\t\t\twaitForElement(field, 10);\n\t\t\tvalue = getText(field);\n\t\t\tif (isElementDisplayed(field, 3)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tmanualScreenshot(labelName + \" has [ \" + value + \" ] value\");\n\t\t\t} else {\n\t\t\t\tmanualScreenshot(value + \" is not populated in \" + labelName);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in verifyAutoPopulatedTextInTask\" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `verifyAutoPopulatedTextInTask`, is used to verify the auto-populated text in a task. It takes a string parameter `labelName` which represents the label of the task.\n\nThe method attempts to locate an element on the page using XPath and waits for it to be displayed. If the element is found, it retrieves its text value and checks if it's displayed. If it is, the method highlights the element, takes a manual screenshot, and returns the text value. If the element is not displayed, it also takes a manual screenshot with an error message.\n\nIf any exception occurs during the execution of the method, it catches the exception and marks the test step as failed. The method returns the retrieved text value.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "getRecordTypeValue",
        "code": "public String getRecordTypeValue(String labelName) {\n\t\tString value = null;\n\t\ttry {\n\t\t\tString field = labelName + \"#xpath=//span[text()='\" + labelName\n\t\t\t\t\t+ \"']/parent::div/following-sibling::div//div[contains(@class,'recordTypeName')]/span\";\n\t\t\twaitForElement(field, 20);\n\t\t\tif (isElementDisplayed(field, elementLoadWaitTime)) {\n\t\t\t\tscrollToWebElement(field);\n\t\t\t\thighLighterMethod(field);\n\t\t\t\tvalue = findWebElement(field).getText();\n\t\t\t\tmanualScreenshot(value + \" is displayed in \" + labelName);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(labelName + \" field is not present\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in getValueFromField \" + e.getMessage());\n\t\t}\n\t\treturn value;\n\t}",
        "description": "This Java method, `getRecordTypeValue`, retrieves the value of a record type label from a web page. It takes a `labelName` as input and returns the corresponding value.\n\nHere's what the method does:\n\n1. It constructs an XPath expression to locate the element containing the desired record type label.\n2. It waits for the element to be displayed using `waitForElement`.\n3. If the element is displayed, it scrolls to the element, highlights it (using `highLighterMethod`), and retrieves its text content using `findWebElement`.\n4. It takes a manual screenshot with the value and label name as part of the filename.\n5. If the element is not displayed within the expected time, it marks the test step as failed.\n6. In case of any exception during execution, it also marks the test step as failed.\n7. Finally, it returns the retrieved value.\n\nThe method seems to be part of a larger automation framework, possibly using Selenium WebDriver, with additional helper methods like `waitForElement`, `isElementDisplayed`, `scrollToWebElement`, and `highLighterMethod`.",
        "input": [
            "String labelName"
        ],
        "output": "String"
    },
    {
        "class_name": "WorkBenchPage",
        "function_name": "ClickOnResultQuery",
        "code": "public void ClickOnResultQuery() {\n\t\ttry {\n\t\t\tString button = \"Query#xpath=//table[@id='query_results']//a\";\n\t\t\twaitForElement(button, 20);\n\t\t\tif (isElementDisplayed(button, 5)) {\n\t\t\t\tString query = getText(button);\n\t\t\t\tclickOn(button);\n\t\t\t\twaitForPageToLoad();\n\t\t\t\ttestStepPassed(\"Successfully get case log record : \" + query);\n\t\t\t} else {\n\t\t\t\ttestStepFailed(\"Failed to get case log record\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\ttestStepFailed(\"Failed in ClickOnResultQuery \" + e.getMessage());\n\t\t}\n\t}\n\n}",
        "description": "This Java method, `ClickOnResultQuery`, is used to click on a specific query result in a table. Here's a brief description of what the method does:\n\n1. It attempts to find an element with the specified XPath (`\"Query#xpath=//table[@id='query_results']//a\"`).\n2. If the element is displayed within 5 seconds, it retrieves the text content of the element (the query result) using the `getText()` method.\n3. It then clicks on the element using the `clickOn()` method.\n4. After clicking, it waits for the page to load completely using the `waitForPageToLoad()` method.\n5. If all these steps are successful, it marks the test step as passed with a message indicating that the case log record was successfully retrieved.\n6. If any of these steps fail (e.g., the element is not found or displayed), it marks the test step as failed and reports an error message.\n\nThe method also includes exception handling to catch any unexpected errors that may occur during execution, in which case it will mark the test step as failed with a message indicating the error.",
        "input": [],
        "output": "void"
    }
]